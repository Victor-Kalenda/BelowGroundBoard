
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a394  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800a454  0800a454  0000b454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a758  0800a758  0000c078  2**0
                  CONTENTS
  4 .ARM          00000000  0800a758  0800a758  0000c078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a758  0800a758  0000c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a758  0800a758  0000b758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a75c  0800a75c  0000b75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800a760  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  20000078  0800a7d8  0000c078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  0800a7d8  0000c768  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad42  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003613  00000000  00000000  00026de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001800  00000000  00000000  0002a3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012f1  00000000  00000000  0002bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c89  00000000  00000000  0002cee9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c969  00000000  00000000  00045b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d75f  00000000  00000000  000624db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ffc3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b6c  00000000  00000000  000ffc80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001057ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a43c 	.word	0x0800a43c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	0800a43c 	.word	0x0800a43c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fd05 	bl	8000e14 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fc45 	bl	8000ca4 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fcf7 	bl	8000e14 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fced 	bl	8000e14 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fc6f 	bl	8000d2c <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fc65 	bl	8000d2c <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	0008      	movs	r0, r1
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 f8c3 	bl	8000604 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 f843 	bl	8000514 <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 f8b5 	bl	8000604 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 f8ab 	bl	8000604 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f851 	bl	8000564 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f847 	bl	8000564 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_f2uiz>:
 80004e4:	219e      	movs	r1, #158	@ 0x9e
 80004e6:	b510      	push	{r4, lr}
 80004e8:	05c9      	lsls	r1, r1, #23
 80004ea:	1c04      	adds	r4, r0, #0
 80004ec:	f7ff fff0 	bl	80004d0 <__aeabi_fcmpge>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d103      	bne.n	80004fc <__aeabi_f2uiz+0x18>
 80004f4:	1c20      	adds	r0, r4, #0
 80004f6:	f000 fbb5 	bl	8000c64 <__aeabi_f2iz>
 80004fa:	bd10      	pop	{r4, pc}
 80004fc:	219e      	movs	r1, #158	@ 0x9e
 80004fe:	1c20      	adds	r0, r4, #0
 8000500:	05c9      	lsls	r1, r1, #23
 8000502:	f000 fa0b 	bl	800091c <__aeabi_fsub>
 8000506:	f000 fbad 	bl	8000c64 <__aeabi_f2iz>
 800050a:	2380      	movs	r3, #128	@ 0x80
 800050c:	061b      	lsls	r3, r3, #24
 800050e:	469c      	mov	ip, r3
 8000510:	4460      	add	r0, ip
 8000512:	e7f2      	b.n	80004fa <__aeabi_f2uiz+0x16>

08000514 <__eqsf2>:
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	0042      	lsls	r2, r0, #1
 8000518:	024e      	lsls	r6, r1, #9
 800051a:	004c      	lsls	r4, r1, #1
 800051c:	0245      	lsls	r5, r0, #9
 800051e:	0a6d      	lsrs	r5, r5, #9
 8000520:	0e12      	lsrs	r2, r2, #24
 8000522:	0fc3      	lsrs	r3, r0, #31
 8000524:	0a76      	lsrs	r6, r6, #9
 8000526:	0e24      	lsrs	r4, r4, #24
 8000528:	0fc9      	lsrs	r1, r1, #31
 800052a:	2aff      	cmp	r2, #255	@ 0xff
 800052c:	d010      	beq.n	8000550 <__eqsf2+0x3c>
 800052e:	2cff      	cmp	r4, #255	@ 0xff
 8000530:	d00c      	beq.n	800054c <__eqsf2+0x38>
 8000532:	2001      	movs	r0, #1
 8000534:	42a2      	cmp	r2, r4
 8000536:	d10a      	bne.n	800054e <__eqsf2+0x3a>
 8000538:	42b5      	cmp	r5, r6
 800053a:	d108      	bne.n	800054e <__eqsf2+0x3a>
 800053c:	428b      	cmp	r3, r1
 800053e:	d00f      	beq.n	8000560 <__eqsf2+0x4c>
 8000540:	2a00      	cmp	r2, #0
 8000542:	d104      	bne.n	800054e <__eqsf2+0x3a>
 8000544:	0028      	movs	r0, r5
 8000546:	1e43      	subs	r3, r0, #1
 8000548:	4198      	sbcs	r0, r3
 800054a:	e000      	b.n	800054e <__eqsf2+0x3a>
 800054c:	2001      	movs	r0, #1
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	2001      	movs	r0, #1
 8000552:	2cff      	cmp	r4, #255	@ 0xff
 8000554:	d1fb      	bne.n	800054e <__eqsf2+0x3a>
 8000556:	4335      	orrs	r5, r6
 8000558:	d1f9      	bne.n	800054e <__eqsf2+0x3a>
 800055a:	404b      	eors	r3, r1
 800055c:	0018      	movs	r0, r3
 800055e:	e7f6      	b.n	800054e <__eqsf2+0x3a>
 8000560:	2000      	movs	r0, #0
 8000562:	e7f4      	b.n	800054e <__eqsf2+0x3a>

08000564 <__gesf2>:
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	0042      	lsls	r2, r0, #1
 8000568:	0244      	lsls	r4, r0, #9
 800056a:	024d      	lsls	r5, r1, #9
 800056c:	0fc3      	lsrs	r3, r0, #31
 800056e:	0048      	lsls	r0, r1, #1
 8000570:	0a64      	lsrs	r4, r4, #9
 8000572:	0e12      	lsrs	r2, r2, #24
 8000574:	0a6d      	lsrs	r5, r5, #9
 8000576:	0e00      	lsrs	r0, r0, #24
 8000578:	0fc9      	lsrs	r1, r1, #31
 800057a:	2aff      	cmp	r2, #255	@ 0xff
 800057c:	d019      	beq.n	80005b2 <__gesf2+0x4e>
 800057e:	28ff      	cmp	r0, #255	@ 0xff
 8000580:	d00b      	beq.n	800059a <__gesf2+0x36>
 8000582:	2a00      	cmp	r2, #0
 8000584:	d11e      	bne.n	80005c4 <__gesf2+0x60>
 8000586:	2800      	cmp	r0, #0
 8000588:	d10b      	bne.n	80005a2 <__gesf2+0x3e>
 800058a:	2d00      	cmp	r5, #0
 800058c:	d027      	beq.n	80005de <__gesf2+0x7a>
 800058e:	2c00      	cmp	r4, #0
 8000590:	d134      	bne.n	80005fc <__gesf2+0x98>
 8000592:	2900      	cmp	r1, #0
 8000594:	d02f      	beq.n	80005f6 <__gesf2+0x92>
 8000596:	0008      	movs	r0, r1
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	2d00      	cmp	r5, #0
 800059c:	d128      	bne.n	80005f0 <__gesf2+0x8c>
 800059e:	2a00      	cmp	r2, #0
 80005a0:	d101      	bne.n	80005a6 <__gesf2+0x42>
 80005a2:	2c00      	cmp	r4, #0
 80005a4:	d0f5      	beq.n	8000592 <__gesf2+0x2e>
 80005a6:	428b      	cmp	r3, r1
 80005a8:	d107      	bne.n	80005ba <__gesf2+0x56>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d023      	beq.n	80005f6 <__gesf2+0x92>
 80005ae:	0018      	movs	r0, r3
 80005b0:	e7f2      	b.n	8000598 <__gesf2+0x34>
 80005b2:	2c00      	cmp	r4, #0
 80005b4:	d11c      	bne.n	80005f0 <__gesf2+0x8c>
 80005b6:	28ff      	cmp	r0, #255	@ 0xff
 80005b8:	d014      	beq.n	80005e4 <__gesf2+0x80>
 80005ba:	1e58      	subs	r0, r3, #1
 80005bc:	2302      	movs	r3, #2
 80005be:	4018      	ands	r0, r3
 80005c0:	3801      	subs	r0, #1
 80005c2:	e7e9      	b.n	8000598 <__gesf2+0x34>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d0f8      	beq.n	80005ba <__gesf2+0x56>
 80005c8:	428b      	cmp	r3, r1
 80005ca:	d1f6      	bne.n	80005ba <__gesf2+0x56>
 80005cc:	4282      	cmp	r2, r0
 80005ce:	dcf4      	bgt.n	80005ba <__gesf2+0x56>
 80005d0:	dbeb      	blt.n	80005aa <__gesf2+0x46>
 80005d2:	42ac      	cmp	r4, r5
 80005d4:	d8f1      	bhi.n	80005ba <__gesf2+0x56>
 80005d6:	2000      	movs	r0, #0
 80005d8:	42ac      	cmp	r4, r5
 80005da:	d2dd      	bcs.n	8000598 <__gesf2+0x34>
 80005dc:	e7e5      	b.n	80005aa <__gesf2+0x46>
 80005de:	2c00      	cmp	r4, #0
 80005e0:	d0da      	beq.n	8000598 <__gesf2+0x34>
 80005e2:	e7ea      	b.n	80005ba <__gesf2+0x56>
 80005e4:	2d00      	cmp	r5, #0
 80005e6:	d103      	bne.n	80005f0 <__gesf2+0x8c>
 80005e8:	428b      	cmp	r3, r1
 80005ea:	d1e6      	bne.n	80005ba <__gesf2+0x56>
 80005ec:	2000      	movs	r0, #0
 80005ee:	e7d3      	b.n	8000598 <__gesf2+0x34>
 80005f0:	2002      	movs	r0, #2
 80005f2:	4240      	negs	r0, r0
 80005f4:	e7d0      	b.n	8000598 <__gesf2+0x34>
 80005f6:	2001      	movs	r0, #1
 80005f8:	4240      	negs	r0, r0
 80005fa:	e7cd      	b.n	8000598 <__gesf2+0x34>
 80005fc:	428b      	cmp	r3, r1
 80005fe:	d0e8      	beq.n	80005d2 <__gesf2+0x6e>
 8000600:	e7db      	b.n	80005ba <__gesf2+0x56>
 8000602:	46c0      	nop			@ (mov r8, r8)

08000604 <__lesf2>:
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	0042      	lsls	r2, r0, #1
 8000608:	0244      	lsls	r4, r0, #9
 800060a:	024d      	lsls	r5, r1, #9
 800060c:	0fc3      	lsrs	r3, r0, #31
 800060e:	0048      	lsls	r0, r1, #1
 8000610:	0a64      	lsrs	r4, r4, #9
 8000612:	0e12      	lsrs	r2, r2, #24
 8000614:	0a6d      	lsrs	r5, r5, #9
 8000616:	0e00      	lsrs	r0, r0, #24
 8000618:	0fc9      	lsrs	r1, r1, #31
 800061a:	2aff      	cmp	r2, #255	@ 0xff
 800061c:	d01a      	beq.n	8000654 <__lesf2+0x50>
 800061e:	28ff      	cmp	r0, #255	@ 0xff
 8000620:	d00e      	beq.n	8000640 <__lesf2+0x3c>
 8000622:	2a00      	cmp	r2, #0
 8000624:	d11e      	bne.n	8000664 <__lesf2+0x60>
 8000626:	2800      	cmp	r0, #0
 8000628:	d10e      	bne.n	8000648 <__lesf2+0x44>
 800062a:	2d00      	cmp	r5, #0
 800062c:	d02a      	beq.n	8000684 <__lesf2+0x80>
 800062e:	2c00      	cmp	r4, #0
 8000630:	d00c      	beq.n	800064c <__lesf2+0x48>
 8000632:	428b      	cmp	r3, r1
 8000634:	d01d      	beq.n	8000672 <__lesf2+0x6e>
 8000636:	1e58      	subs	r0, r3, #1
 8000638:	2302      	movs	r3, #2
 800063a:	4018      	ands	r0, r3
 800063c:	3801      	subs	r0, #1
 800063e:	e010      	b.n	8000662 <__lesf2+0x5e>
 8000640:	2d00      	cmp	r5, #0
 8000642:	d10d      	bne.n	8000660 <__lesf2+0x5c>
 8000644:	2a00      	cmp	r2, #0
 8000646:	d120      	bne.n	800068a <__lesf2+0x86>
 8000648:	2c00      	cmp	r4, #0
 800064a:	d11e      	bne.n	800068a <__lesf2+0x86>
 800064c:	2900      	cmp	r1, #0
 800064e:	d023      	beq.n	8000698 <__lesf2+0x94>
 8000650:	0008      	movs	r0, r1
 8000652:	e006      	b.n	8000662 <__lesf2+0x5e>
 8000654:	2c00      	cmp	r4, #0
 8000656:	d103      	bne.n	8000660 <__lesf2+0x5c>
 8000658:	28ff      	cmp	r0, #255	@ 0xff
 800065a:	d1ec      	bne.n	8000636 <__lesf2+0x32>
 800065c:	2d00      	cmp	r5, #0
 800065e:	d017      	beq.n	8000690 <__lesf2+0x8c>
 8000660:	2002      	movs	r0, #2
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	2800      	cmp	r0, #0
 8000666:	d0e6      	beq.n	8000636 <__lesf2+0x32>
 8000668:	428b      	cmp	r3, r1
 800066a:	d1e4      	bne.n	8000636 <__lesf2+0x32>
 800066c:	4282      	cmp	r2, r0
 800066e:	dce2      	bgt.n	8000636 <__lesf2+0x32>
 8000670:	db04      	blt.n	800067c <__lesf2+0x78>
 8000672:	42ac      	cmp	r4, r5
 8000674:	d8df      	bhi.n	8000636 <__lesf2+0x32>
 8000676:	2000      	movs	r0, #0
 8000678:	42ac      	cmp	r4, r5
 800067a:	d2f2      	bcs.n	8000662 <__lesf2+0x5e>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00b      	beq.n	8000698 <__lesf2+0x94>
 8000680:	0018      	movs	r0, r3
 8000682:	e7ee      	b.n	8000662 <__lesf2+0x5e>
 8000684:	2c00      	cmp	r4, #0
 8000686:	d0ec      	beq.n	8000662 <__lesf2+0x5e>
 8000688:	e7d5      	b.n	8000636 <__lesf2+0x32>
 800068a:	428b      	cmp	r3, r1
 800068c:	d1d3      	bne.n	8000636 <__lesf2+0x32>
 800068e:	e7f5      	b.n	800067c <__lesf2+0x78>
 8000690:	2000      	movs	r0, #0
 8000692:	428b      	cmp	r3, r1
 8000694:	d0e5      	beq.n	8000662 <__lesf2+0x5e>
 8000696:	e7ce      	b.n	8000636 <__lesf2+0x32>
 8000698:	2001      	movs	r0, #1
 800069a:	4240      	negs	r0, r0
 800069c:	e7e1      	b.n	8000662 <__lesf2+0x5e>
 800069e:	46c0      	nop			@ (mov r8, r8)

080006a0 <__aeabi_fmul>:
 80006a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a2:	464f      	mov	r7, r9
 80006a4:	4646      	mov	r6, r8
 80006a6:	46d6      	mov	lr, sl
 80006a8:	0243      	lsls	r3, r0, #9
 80006aa:	0a5b      	lsrs	r3, r3, #9
 80006ac:	0045      	lsls	r5, r0, #1
 80006ae:	b5c0      	push	{r6, r7, lr}
 80006b0:	4699      	mov	r9, r3
 80006b2:	1c0f      	adds	r7, r1, #0
 80006b4:	0e2d      	lsrs	r5, r5, #24
 80006b6:	0fc6      	lsrs	r6, r0, #31
 80006b8:	2d00      	cmp	r5, #0
 80006ba:	d100      	bne.n	80006be <__aeabi_fmul+0x1e>
 80006bc:	e088      	b.n	80007d0 <__aeabi_fmul+0x130>
 80006be:	2dff      	cmp	r5, #255	@ 0xff
 80006c0:	d100      	bne.n	80006c4 <__aeabi_fmul+0x24>
 80006c2:	e08d      	b.n	80007e0 <__aeabi_fmul+0x140>
 80006c4:	2280      	movs	r2, #128	@ 0x80
 80006c6:	00db      	lsls	r3, r3, #3
 80006c8:	04d2      	lsls	r2, r2, #19
 80006ca:	431a      	orrs	r2, r3
 80006cc:	2300      	movs	r3, #0
 80006ce:	4691      	mov	r9, r2
 80006d0:	4698      	mov	r8, r3
 80006d2:	469a      	mov	sl, r3
 80006d4:	3d7f      	subs	r5, #127	@ 0x7f
 80006d6:	027c      	lsls	r4, r7, #9
 80006d8:	007b      	lsls	r3, r7, #1
 80006da:	0a64      	lsrs	r4, r4, #9
 80006dc:	0e1b      	lsrs	r3, r3, #24
 80006de:	0fff      	lsrs	r7, r7, #31
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d068      	beq.n	80007b6 <__aeabi_fmul+0x116>
 80006e4:	2bff      	cmp	r3, #255	@ 0xff
 80006e6:	d021      	beq.n	800072c <__aeabi_fmul+0x8c>
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	00e4      	lsls	r4, r4, #3
 80006ec:	04d2      	lsls	r2, r2, #19
 80006ee:	4314      	orrs	r4, r2
 80006f0:	4642      	mov	r2, r8
 80006f2:	3b7f      	subs	r3, #127	@ 0x7f
 80006f4:	195b      	adds	r3, r3, r5
 80006f6:	2100      	movs	r1, #0
 80006f8:	1c5d      	adds	r5, r3, #1
 80006fa:	2a0a      	cmp	r2, #10
 80006fc:	dc2e      	bgt.n	800075c <__aeabi_fmul+0xbc>
 80006fe:	407e      	eors	r6, r7
 8000700:	4642      	mov	r2, r8
 8000702:	2a02      	cmp	r2, #2
 8000704:	dc23      	bgt.n	800074e <__aeabi_fmul+0xae>
 8000706:	3a01      	subs	r2, #1
 8000708:	2a01      	cmp	r2, #1
 800070a:	d900      	bls.n	800070e <__aeabi_fmul+0x6e>
 800070c:	e0bd      	b.n	800088a <__aeabi_fmul+0x1ea>
 800070e:	2902      	cmp	r1, #2
 8000710:	d06e      	beq.n	80007f0 <__aeabi_fmul+0x150>
 8000712:	2901      	cmp	r1, #1
 8000714:	d12c      	bne.n	8000770 <__aeabi_fmul+0xd0>
 8000716:	2000      	movs	r0, #0
 8000718:	2200      	movs	r2, #0
 800071a:	05c0      	lsls	r0, r0, #23
 800071c:	07f6      	lsls	r6, r6, #31
 800071e:	4310      	orrs	r0, r2
 8000720:	4330      	orrs	r0, r6
 8000722:	bce0      	pop	{r5, r6, r7}
 8000724:	46ba      	mov	sl, r7
 8000726:	46b1      	mov	r9, r6
 8000728:	46a8      	mov	r8, r5
 800072a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800072c:	002b      	movs	r3, r5
 800072e:	33ff      	adds	r3, #255	@ 0xff
 8000730:	2c00      	cmp	r4, #0
 8000732:	d065      	beq.n	8000800 <__aeabi_fmul+0x160>
 8000734:	2203      	movs	r2, #3
 8000736:	4641      	mov	r1, r8
 8000738:	4311      	orrs	r1, r2
 800073a:	0032      	movs	r2, r6
 800073c:	3501      	adds	r5, #1
 800073e:	4688      	mov	r8, r1
 8000740:	407a      	eors	r2, r7
 8000742:	35ff      	adds	r5, #255	@ 0xff
 8000744:	290a      	cmp	r1, #10
 8000746:	dd00      	ble.n	800074a <__aeabi_fmul+0xaa>
 8000748:	e0d8      	b.n	80008fc <__aeabi_fmul+0x25c>
 800074a:	0016      	movs	r6, r2
 800074c:	2103      	movs	r1, #3
 800074e:	4640      	mov	r0, r8
 8000750:	2201      	movs	r2, #1
 8000752:	4082      	lsls	r2, r0
 8000754:	20a6      	movs	r0, #166	@ 0xa6
 8000756:	00c0      	lsls	r0, r0, #3
 8000758:	4202      	tst	r2, r0
 800075a:	d020      	beq.n	800079e <__aeabi_fmul+0xfe>
 800075c:	4653      	mov	r3, sl
 800075e:	2b02      	cmp	r3, #2
 8000760:	d046      	beq.n	80007f0 <__aeabi_fmul+0x150>
 8000762:	2b03      	cmp	r3, #3
 8000764:	d100      	bne.n	8000768 <__aeabi_fmul+0xc8>
 8000766:	e0bb      	b.n	80008e0 <__aeabi_fmul+0x240>
 8000768:	4651      	mov	r1, sl
 800076a:	464c      	mov	r4, r9
 800076c:	2901      	cmp	r1, #1
 800076e:	d0d2      	beq.n	8000716 <__aeabi_fmul+0x76>
 8000770:	002b      	movs	r3, r5
 8000772:	337f      	adds	r3, #127	@ 0x7f
 8000774:	2b00      	cmp	r3, #0
 8000776:	dd70      	ble.n	800085a <__aeabi_fmul+0x1ba>
 8000778:	0762      	lsls	r2, r4, #29
 800077a:	d004      	beq.n	8000786 <__aeabi_fmul+0xe6>
 800077c:	220f      	movs	r2, #15
 800077e:	4022      	ands	r2, r4
 8000780:	2a04      	cmp	r2, #4
 8000782:	d000      	beq.n	8000786 <__aeabi_fmul+0xe6>
 8000784:	3404      	adds	r4, #4
 8000786:	0122      	lsls	r2, r4, #4
 8000788:	d503      	bpl.n	8000792 <__aeabi_fmul+0xf2>
 800078a:	4b63      	ldr	r3, [pc, #396]	@ (8000918 <__aeabi_fmul+0x278>)
 800078c:	401c      	ands	r4, r3
 800078e:	002b      	movs	r3, r5
 8000790:	3380      	adds	r3, #128	@ 0x80
 8000792:	2bfe      	cmp	r3, #254	@ 0xfe
 8000794:	dc2c      	bgt.n	80007f0 <__aeabi_fmul+0x150>
 8000796:	01a2      	lsls	r2, r4, #6
 8000798:	0a52      	lsrs	r2, r2, #9
 800079a:	b2d8      	uxtb	r0, r3
 800079c:	e7bd      	b.n	800071a <__aeabi_fmul+0x7a>
 800079e:	2090      	movs	r0, #144	@ 0x90
 80007a0:	0080      	lsls	r0, r0, #2
 80007a2:	4202      	tst	r2, r0
 80007a4:	d127      	bne.n	80007f6 <__aeabi_fmul+0x156>
 80007a6:	38b9      	subs	r0, #185	@ 0xb9
 80007a8:	38ff      	subs	r0, #255	@ 0xff
 80007aa:	4210      	tst	r0, r2
 80007ac:	d06d      	beq.n	800088a <__aeabi_fmul+0x1ea>
 80007ae:	003e      	movs	r6, r7
 80007b0:	46a1      	mov	r9, r4
 80007b2:	468a      	mov	sl, r1
 80007b4:	e7d2      	b.n	800075c <__aeabi_fmul+0xbc>
 80007b6:	2c00      	cmp	r4, #0
 80007b8:	d141      	bne.n	800083e <__aeabi_fmul+0x19e>
 80007ba:	2301      	movs	r3, #1
 80007bc:	4642      	mov	r2, r8
 80007be:	431a      	orrs	r2, r3
 80007c0:	4690      	mov	r8, r2
 80007c2:	002b      	movs	r3, r5
 80007c4:	4642      	mov	r2, r8
 80007c6:	2101      	movs	r1, #1
 80007c8:	1c5d      	adds	r5, r3, #1
 80007ca:	2a0a      	cmp	r2, #10
 80007cc:	dd97      	ble.n	80006fe <__aeabi_fmul+0x5e>
 80007ce:	e7c5      	b.n	800075c <__aeabi_fmul+0xbc>
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d126      	bne.n	8000822 <__aeabi_fmul+0x182>
 80007d4:	2304      	movs	r3, #4
 80007d6:	4698      	mov	r8, r3
 80007d8:	3b03      	subs	r3, #3
 80007da:	2500      	movs	r5, #0
 80007dc:	469a      	mov	sl, r3
 80007de:	e77a      	b.n	80006d6 <__aeabi_fmul+0x36>
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d118      	bne.n	8000816 <__aeabi_fmul+0x176>
 80007e4:	2308      	movs	r3, #8
 80007e6:	4698      	mov	r8, r3
 80007e8:	3b06      	subs	r3, #6
 80007ea:	25ff      	movs	r5, #255	@ 0xff
 80007ec:	469a      	mov	sl, r3
 80007ee:	e772      	b.n	80006d6 <__aeabi_fmul+0x36>
 80007f0:	20ff      	movs	r0, #255	@ 0xff
 80007f2:	2200      	movs	r2, #0
 80007f4:	e791      	b.n	800071a <__aeabi_fmul+0x7a>
 80007f6:	2280      	movs	r2, #128	@ 0x80
 80007f8:	2600      	movs	r6, #0
 80007fa:	20ff      	movs	r0, #255	@ 0xff
 80007fc:	03d2      	lsls	r2, r2, #15
 80007fe:	e78c      	b.n	800071a <__aeabi_fmul+0x7a>
 8000800:	4641      	mov	r1, r8
 8000802:	2202      	movs	r2, #2
 8000804:	3501      	adds	r5, #1
 8000806:	4311      	orrs	r1, r2
 8000808:	4688      	mov	r8, r1
 800080a:	35ff      	adds	r5, #255	@ 0xff
 800080c:	290a      	cmp	r1, #10
 800080e:	dca5      	bgt.n	800075c <__aeabi_fmul+0xbc>
 8000810:	2102      	movs	r1, #2
 8000812:	407e      	eors	r6, r7
 8000814:	e774      	b.n	8000700 <__aeabi_fmul+0x60>
 8000816:	230c      	movs	r3, #12
 8000818:	4698      	mov	r8, r3
 800081a:	3b09      	subs	r3, #9
 800081c:	25ff      	movs	r5, #255	@ 0xff
 800081e:	469a      	mov	sl, r3
 8000820:	e759      	b.n	80006d6 <__aeabi_fmul+0x36>
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fbb0 	bl	8000f88 <__clzsi2>
 8000828:	464a      	mov	r2, r9
 800082a:	1f43      	subs	r3, r0, #5
 800082c:	2576      	movs	r5, #118	@ 0x76
 800082e:	409a      	lsls	r2, r3
 8000830:	2300      	movs	r3, #0
 8000832:	426d      	negs	r5, r5
 8000834:	4691      	mov	r9, r2
 8000836:	4698      	mov	r8, r3
 8000838:	469a      	mov	sl, r3
 800083a:	1a2d      	subs	r5, r5, r0
 800083c:	e74b      	b.n	80006d6 <__aeabi_fmul+0x36>
 800083e:	0020      	movs	r0, r4
 8000840:	f000 fba2 	bl	8000f88 <__clzsi2>
 8000844:	4642      	mov	r2, r8
 8000846:	1f43      	subs	r3, r0, #5
 8000848:	409c      	lsls	r4, r3
 800084a:	1a2b      	subs	r3, r5, r0
 800084c:	3b76      	subs	r3, #118	@ 0x76
 800084e:	2100      	movs	r1, #0
 8000850:	1c5d      	adds	r5, r3, #1
 8000852:	2a0a      	cmp	r2, #10
 8000854:	dc00      	bgt.n	8000858 <__aeabi_fmul+0x1b8>
 8000856:	e752      	b.n	80006fe <__aeabi_fmul+0x5e>
 8000858:	e780      	b.n	800075c <__aeabi_fmul+0xbc>
 800085a:	2201      	movs	r2, #1
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	2b1b      	cmp	r3, #27
 8000860:	dd00      	ble.n	8000864 <__aeabi_fmul+0x1c4>
 8000862:	e758      	b.n	8000716 <__aeabi_fmul+0x76>
 8000864:	359e      	adds	r5, #158	@ 0x9e
 8000866:	0022      	movs	r2, r4
 8000868:	40ac      	lsls	r4, r5
 800086a:	40da      	lsrs	r2, r3
 800086c:	1e63      	subs	r3, r4, #1
 800086e:	419c      	sbcs	r4, r3
 8000870:	4322      	orrs	r2, r4
 8000872:	0753      	lsls	r3, r2, #29
 8000874:	d004      	beq.n	8000880 <__aeabi_fmul+0x1e0>
 8000876:	230f      	movs	r3, #15
 8000878:	4013      	ands	r3, r2
 800087a:	2b04      	cmp	r3, #4
 800087c:	d000      	beq.n	8000880 <__aeabi_fmul+0x1e0>
 800087e:	3204      	adds	r2, #4
 8000880:	0153      	lsls	r3, r2, #5
 8000882:	d537      	bpl.n	80008f4 <__aeabi_fmul+0x254>
 8000884:	2001      	movs	r0, #1
 8000886:	2200      	movs	r2, #0
 8000888:	e747      	b.n	800071a <__aeabi_fmul+0x7a>
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	464a      	mov	r2, r9
 800088e:	0424      	lsls	r4, r4, #16
 8000890:	0c24      	lsrs	r4, r4, #16
 8000892:	0027      	movs	r7, r4
 8000894:	0c10      	lsrs	r0, r2, #16
 8000896:	0412      	lsls	r2, r2, #16
 8000898:	0c12      	lsrs	r2, r2, #16
 800089a:	4344      	muls	r4, r0
 800089c:	4357      	muls	r7, r2
 800089e:	4348      	muls	r0, r1
 80008a0:	4351      	muls	r1, r2
 80008a2:	0c3a      	lsrs	r2, r7, #16
 80008a4:	1909      	adds	r1, r1, r4
 80008a6:	1852      	adds	r2, r2, r1
 80008a8:	4294      	cmp	r4, r2
 80008aa:	d903      	bls.n	80008b4 <__aeabi_fmul+0x214>
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	0249      	lsls	r1, r1, #9
 80008b0:	468c      	mov	ip, r1
 80008b2:	4460      	add	r0, ip
 80008b4:	043f      	lsls	r7, r7, #16
 80008b6:	0411      	lsls	r1, r2, #16
 80008b8:	0c3f      	lsrs	r7, r7, #16
 80008ba:	19c9      	adds	r1, r1, r7
 80008bc:	018c      	lsls	r4, r1, #6
 80008be:	1e67      	subs	r7, r4, #1
 80008c0:	41bc      	sbcs	r4, r7
 80008c2:	0c12      	lsrs	r2, r2, #16
 80008c4:	0e89      	lsrs	r1, r1, #26
 80008c6:	1812      	adds	r2, r2, r0
 80008c8:	430c      	orrs	r4, r1
 80008ca:	0192      	lsls	r2, r2, #6
 80008cc:	4314      	orrs	r4, r2
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	d50e      	bpl.n	80008f0 <__aeabi_fmul+0x250>
 80008d2:	2301      	movs	r3, #1
 80008d4:	0862      	lsrs	r2, r4, #1
 80008d6:	401c      	ands	r4, r3
 80008d8:	4314      	orrs	r4, r2
 80008da:	e749      	b.n	8000770 <__aeabi_fmul+0xd0>
 80008dc:	003e      	movs	r6, r7
 80008de:	46a1      	mov	r9, r4
 80008e0:	2280      	movs	r2, #128	@ 0x80
 80008e2:	464b      	mov	r3, r9
 80008e4:	03d2      	lsls	r2, r2, #15
 80008e6:	431a      	orrs	r2, r3
 80008e8:	0252      	lsls	r2, r2, #9
 80008ea:	20ff      	movs	r0, #255	@ 0xff
 80008ec:	0a52      	lsrs	r2, r2, #9
 80008ee:	e714      	b.n	800071a <__aeabi_fmul+0x7a>
 80008f0:	001d      	movs	r5, r3
 80008f2:	e73d      	b.n	8000770 <__aeabi_fmul+0xd0>
 80008f4:	0192      	lsls	r2, r2, #6
 80008f6:	2000      	movs	r0, #0
 80008f8:	0a52      	lsrs	r2, r2, #9
 80008fa:	e70e      	b.n	800071a <__aeabi_fmul+0x7a>
 80008fc:	290f      	cmp	r1, #15
 80008fe:	d1ed      	bne.n	80008dc <__aeabi_fmul+0x23c>
 8000900:	2280      	movs	r2, #128	@ 0x80
 8000902:	464b      	mov	r3, r9
 8000904:	03d2      	lsls	r2, r2, #15
 8000906:	4213      	tst	r3, r2
 8000908:	d0ea      	beq.n	80008e0 <__aeabi_fmul+0x240>
 800090a:	4214      	tst	r4, r2
 800090c:	d1e8      	bne.n	80008e0 <__aeabi_fmul+0x240>
 800090e:	003e      	movs	r6, r7
 8000910:	20ff      	movs	r0, #255	@ 0xff
 8000912:	4322      	orrs	r2, r4
 8000914:	e701      	b.n	800071a <__aeabi_fmul+0x7a>
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	f7ffffff 	.word	0xf7ffffff

0800091c <__aeabi_fsub>:
 800091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091e:	4647      	mov	r7, r8
 8000920:	46ce      	mov	lr, r9
 8000922:	024e      	lsls	r6, r1, #9
 8000924:	0243      	lsls	r3, r0, #9
 8000926:	0045      	lsls	r5, r0, #1
 8000928:	0a72      	lsrs	r2, r6, #9
 800092a:	0fc4      	lsrs	r4, r0, #31
 800092c:	0048      	lsls	r0, r1, #1
 800092e:	b580      	push	{r7, lr}
 8000930:	4694      	mov	ip, r2
 8000932:	0a5f      	lsrs	r7, r3, #9
 8000934:	0e2d      	lsrs	r5, r5, #24
 8000936:	099b      	lsrs	r3, r3, #6
 8000938:	0e00      	lsrs	r0, r0, #24
 800093a:	0fc9      	lsrs	r1, r1, #31
 800093c:	09b6      	lsrs	r6, r6, #6
 800093e:	28ff      	cmp	r0, #255	@ 0xff
 8000940:	d024      	beq.n	800098c <__aeabi_fsub+0x70>
 8000942:	2201      	movs	r2, #1
 8000944:	4051      	eors	r1, r2
 8000946:	1a2a      	subs	r2, r5, r0
 8000948:	428c      	cmp	r4, r1
 800094a:	d00f      	beq.n	800096c <__aeabi_fsub+0x50>
 800094c:	2a00      	cmp	r2, #0
 800094e:	dc00      	bgt.n	8000952 <__aeabi_fsub+0x36>
 8000950:	e16a      	b.n	8000c28 <__aeabi_fsub+0x30c>
 8000952:	2800      	cmp	r0, #0
 8000954:	d135      	bne.n	80009c2 <__aeabi_fsub+0xa6>
 8000956:	2e00      	cmp	r6, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fsub+0x40>
 800095a:	e0a2      	b.n	8000aa2 <__aeabi_fsub+0x186>
 800095c:	1e51      	subs	r1, r2, #1
 800095e:	2a01      	cmp	r2, #1
 8000960:	d100      	bne.n	8000964 <__aeabi_fsub+0x48>
 8000962:	e124      	b.n	8000bae <__aeabi_fsub+0x292>
 8000964:	2aff      	cmp	r2, #255	@ 0xff
 8000966:	d021      	beq.n	80009ac <__aeabi_fsub+0x90>
 8000968:	000a      	movs	r2, r1
 800096a:	e02f      	b.n	80009cc <__aeabi_fsub+0xb0>
 800096c:	2a00      	cmp	r2, #0
 800096e:	dc00      	bgt.n	8000972 <__aeabi_fsub+0x56>
 8000970:	e167      	b.n	8000c42 <__aeabi_fsub+0x326>
 8000972:	2800      	cmp	r0, #0
 8000974:	d05e      	beq.n	8000a34 <__aeabi_fsub+0x118>
 8000976:	2dff      	cmp	r5, #255	@ 0xff
 8000978:	d018      	beq.n	80009ac <__aeabi_fsub+0x90>
 800097a:	2180      	movs	r1, #128	@ 0x80
 800097c:	04c9      	lsls	r1, r1, #19
 800097e:	430e      	orrs	r6, r1
 8000980:	2a1b      	cmp	r2, #27
 8000982:	dc00      	bgt.n	8000986 <__aeabi_fsub+0x6a>
 8000984:	e076      	b.n	8000a74 <__aeabi_fsub+0x158>
 8000986:	002a      	movs	r2, r5
 8000988:	3301      	adds	r3, #1
 800098a:	e032      	b.n	80009f2 <__aeabi_fsub+0xd6>
 800098c:	002a      	movs	r2, r5
 800098e:	3aff      	subs	r2, #255	@ 0xff
 8000990:	4691      	mov	r9, r2
 8000992:	2e00      	cmp	r6, #0
 8000994:	d042      	beq.n	8000a1c <__aeabi_fsub+0x100>
 8000996:	428c      	cmp	r4, r1
 8000998:	d055      	beq.n	8000a46 <__aeabi_fsub+0x12a>
 800099a:	464a      	mov	r2, r9
 800099c:	2a00      	cmp	r2, #0
 800099e:	d100      	bne.n	80009a2 <__aeabi_fsub+0x86>
 80009a0:	e09c      	b.n	8000adc <__aeabi_fsub+0x1c0>
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d100      	bne.n	80009a8 <__aeabi_fsub+0x8c>
 80009a6:	e077      	b.n	8000a98 <__aeabi_fsub+0x17c>
 80009a8:	000c      	movs	r4, r1
 80009aa:	0033      	movs	r3, r6
 80009ac:	08db      	lsrs	r3, r3, #3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d100      	bne.n	80009b4 <__aeabi_fsub+0x98>
 80009b2:	e06e      	b.n	8000a92 <__aeabi_fsub+0x176>
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	03d2      	lsls	r2, r2, #15
 80009b8:	4313      	orrs	r3, r2
 80009ba:	025b      	lsls	r3, r3, #9
 80009bc:	20ff      	movs	r0, #255	@ 0xff
 80009be:	0a5b      	lsrs	r3, r3, #9
 80009c0:	e024      	b.n	8000a0c <__aeabi_fsub+0xf0>
 80009c2:	2dff      	cmp	r5, #255	@ 0xff
 80009c4:	d0f2      	beq.n	80009ac <__aeabi_fsub+0x90>
 80009c6:	2180      	movs	r1, #128	@ 0x80
 80009c8:	04c9      	lsls	r1, r1, #19
 80009ca:	430e      	orrs	r6, r1
 80009cc:	2101      	movs	r1, #1
 80009ce:	2a1b      	cmp	r2, #27
 80009d0:	dc08      	bgt.n	80009e4 <__aeabi_fsub+0xc8>
 80009d2:	0031      	movs	r1, r6
 80009d4:	2020      	movs	r0, #32
 80009d6:	40d1      	lsrs	r1, r2
 80009d8:	1a82      	subs	r2, r0, r2
 80009da:	4096      	lsls	r6, r2
 80009dc:	0032      	movs	r2, r6
 80009de:	1e50      	subs	r0, r2, #1
 80009e0:	4182      	sbcs	r2, r0
 80009e2:	4311      	orrs	r1, r2
 80009e4:	1a5b      	subs	r3, r3, r1
 80009e6:	015a      	lsls	r2, r3, #5
 80009e8:	d460      	bmi.n	8000aac <__aeabi_fsub+0x190>
 80009ea:	2107      	movs	r1, #7
 80009ec:	002a      	movs	r2, r5
 80009ee:	4019      	ands	r1, r3
 80009f0:	d057      	beq.n	8000aa2 <__aeabi_fsub+0x186>
 80009f2:	210f      	movs	r1, #15
 80009f4:	4019      	ands	r1, r3
 80009f6:	2904      	cmp	r1, #4
 80009f8:	d000      	beq.n	80009fc <__aeabi_fsub+0xe0>
 80009fa:	3304      	adds	r3, #4
 80009fc:	0159      	lsls	r1, r3, #5
 80009fe:	d550      	bpl.n	8000aa2 <__aeabi_fsub+0x186>
 8000a00:	1c50      	adds	r0, r2, #1
 8000a02:	2afe      	cmp	r2, #254	@ 0xfe
 8000a04:	d045      	beq.n	8000a92 <__aeabi_fsub+0x176>
 8000a06:	019b      	lsls	r3, r3, #6
 8000a08:	b2c0      	uxtb	r0, r0
 8000a0a:	0a5b      	lsrs	r3, r3, #9
 8000a0c:	05c0      	lsls	r0, r0, #23
 8000a0e:	4318      	orrs	r0, r3
 8000a10:	07e4      	lsls	r4, r4, #31
 8000a12:	4320      	orrs	r0, r4
 8000a14:	bcc0      	pop	{r6, r7}
 8000a16:	46b9      	mov	r9, r7
 8000a18:	46b0      	mov	r8, r6
 8000a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	4051      	eors	r1, r2
 8000a20:	428c      	cmp	r4, r1
 8000a22:	d1ba      	bne.n	800099a <__aeabi_fsub+0x7e>
 8000a24:	464a      	mov	r2, r9
 8000a26:	2a00      	cmp	r2, #0
 8000a28:	d010      	beq.n	8000a4c <__aeabi_fsub+0x130>
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fsub+0x114>
 8000a2e:	e098      	b.n	8000b62 <__aeabi_fsub+0x246>
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7bb      	b.n	80009ac <__aeabi_fsub+0x90>
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d034      	beq.n	8000aa2 <__aeabi_fsub+0x186>
 8000a38:	1e51      	subs	r1, r2, #1
 8000a3a:	2a01      	cmp	r2, #1
 8000a3c:	d06e      	beq.n	8000b1c <__aeabi_fsub+0x200>
 8000a3e:	2aff      	cmp	r2, #255	@ 0xff
 8000a40:	d0b4      	beq.n	80009ac <__aeabi_fsub+0x90>
 8000a42:	000a      	movs	r2, r1
 8000a44:	e79c      	b.n	8000980 <__aeabi_fsub+0x64>
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fsub+0x130>
 8000a4a:	e088      	b.n	8000b5e <__aeabi_fsub+0x242>
 8000a4c:	20fe      	movs	r0, #254	@ 0xfe
 8000a4e:	1c6a      	adds	r2, r5, #1
 8000a50:	4210      	tst	r0, r2
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fsub+0x13a>
 8000a54:	e092      	b.n	8000b7c <__aeabi_fsub+0x260>
 8000a56:	2d00      	cmp	r5, #0
 8000a58:	d000      	beq.n	8000a5c <__aeabi_fsub+0x140>
 8000a5a:	e0a4      	b.n	8000ba6 <__aeabi_fsub+0x28a>
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_fsub+0x146>
 8000a60:	e0cb      	b.n	8000bfa <__aeabi_fsub+0x2de>
 8000a62:	2e00      	cmp	r6, #0
 8000a64:	d000      	beq.n	8000a68 <__aeabi_fsub+0x14c>
 8000a66:	e0ca      	b.n	8000bfe <__aeabi_fsub+0x2e2>
 8000a68:	2200      	movs	r2, #0
 8000a6a:	08db      	lsrs	r3, r3, #3
 8000a6c:	025b      	lsls	r3, r3, #9
 8000a6e:	0a5b      	lsrs	r3, r3, #9
 8000a70:	b2d0      	uxtb	r0, r2
 8000a72:	e7cb      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000a74:	0031      	movs	r1, r6
 8000a76:	2020      	movs	r0, #32
 8000a78:	40d1      	lsrs	r1, r2
 8000a7a:	1a82      	subs	r2, r0, r2
 8000a7c:	4096      	lsls	r6, r2
 8000a7e:	0032      	movs	r2, r6
 8000a80:	1e50      	subs	r0, r2, #1
 8000a82:	4182      	sbcs	r2, r0
 8000a84:	430a      	orrs	r2, r1
 8000a86:	189b      	adds	r3, r3, r2
 8000a88:	015a      	lsls	r2, r3, #5
 8000a8a:	d5ae      	bpl.n	80009ea <__aeabi_fsub+0xce>
 8000a8c:	1c6a      	adds	r2, r5, #1
 8000a8e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a90:	d14a      	bne.n	8000b28 <__aeabi_fsub+0x20c>
 8000a92:	20ff      	movs	r0, #255	@ 0xff
 8000a94:	2300      	movs	r3, #0
 8000a96:	e7b9      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000a98:	22ff      	movs	r2, #255	@ 0xff
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d14b      	bne.n	8000b36 <__aeabi_fsub+0x21a>
 8000a9e:	000c      	movs	r4, r1
 8000aa0:	0033      	movs	r3, r6
 8000aa2:	08db      	lsrs	r3, r3, #3
 8000aa4:	2aff      	cmp	r2, #255	@ 0xff
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_fsub+0x18e>
 8000aa8:	e781      	b.n	80009ae <__aeabi_fsub+0x92>
 8000aaa:	e7df      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000aac:	019f      	lsls	r7, r3, #6
 8000aae:	09bf      	lsrs	r7, r7, #6
 8000ab0:	0038      	movs	r0, r7
 8000ab2:	f000 fa69 	bl	8000f88 <__clzsi2>
 8000ab6:	3805      	subs	r0, #5
 8000ab8:	4087      	lsls	r7, r0
 8000aba:	4285      	cmp	r5, r0
 8000abc:	dc21      	bgt.n	8000b02 <__aeabi_fsub+0x1e6>
 8000abe:	003b      	movs	r3, r7
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	1b42      	subs	r2, r0, r5
 8000ac4:	3201      	adds	r2, #1
 8000ac6:	40d3      	lsrs	r3, r2
 8000ac8:	1a8a      	subs	r2, r1, r2
 8000aca:	4097      	lsls	r7, r2
 8000acc:	1e7a      	subs	r2, r7, #1
 8000ace:	4197      	sbcs	r7, r2
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	433b      	orrs	r3, r7
 8000ad4:	0759      	lsls	r1, r3, #29
 8000ad6:	d000      	beq.n	8000ada <__aeabi_fsub+0x1be>
 8000ad8:	e78b      	b.n	80009f2 <__aeabi_fsub+0xd6>
 8000ada:	e78f      	b.n	80009fc <__aeabi_fsub+0xe0>
 8000adc:	20fe      	movs	r0, #254	@ 0xfe
 8000ade:	1c6a      	adds	r2, r5, #1
 8000ae0:	4210      	tst	r0, r2
 8000ae2:	d112      	bne.n	8000b0a <__aeabi_fsub+0x1ee>
 8000ae4:	2d00      	cmp	r5, #0
 8000ae6:	d152      	bne.n	8000b8e <__aeabi_fsub+0x272>
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d07c      	beq.n	8000be6 <__aeabi_fsub+0x2ca>
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d0bb      	beq.n	8000a68 <__aeabi_fsub+0x14c>
 8000af0:	1b9a      	subs	r2, r3, r6
 8000af2:	0150      	lsls	r0, r2, #5
 8000af4:	d400      	bmi.n	8000af8 <__aeabi_fsub+0x1dc>
 8000af6:	e08b      	b.n	8000c10 <__aeabi_fsub+0x2f4>
 8000af8:	2401      	movs	r4, #1
 8000afa:	2200      	movs	r2, #0
 8000afc:	1af3      	subs	r3, r6, r3
 8000afe:	400c      	ands	r4, r1
 8000b00:	e7e8      	b.n	8000ad4 <__aeabi_fsub+0x1b8>
 8000b02:	4b56      	ldr	r3, [pc, #344]	@ (8000c5c <__aeabi_fsub+0x340>)
 8000b04:	1a2a      	subs	r2, r5, r0
 8000b06:	403b      	ands	r3, r7
 8000b08:	e7e4      	b.n	8000ad4 <__aeabi_fsub+0x1b8>
 8000b0a:	1b9f      	subs	r7, r3, r6
 8000b0c:	017a      	lsls	r2, r7, #5
 8000b0e:	d446      	bmi.n	8000b9e <__aeabi_fsub+0x282>
 8000b10:	2f00      	cmp	r7, #0
 8000b12:	d1cd      	bne.n	8000ab0 <__aeabi_fsub+0x194>
 8000b14:	2400      	movs	r4, #0
 8000b16:	2000      	movs	r0, #0
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e777      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000b1c:	199b      	adds	r3, r3, r6
 8000b1e:	2501      	movs	r5, #1
 8000b20:	3201      	adds	r2, #1
 8000b22:	0159      	lsls	r1, r3, #5
 8000b24:	d400      	bmi.n	8000b28 <__aeabi_fsub+0x20c>
 8000b26:	e760      	b.n	80009ea <__aeabi_fsub+0xce>
 8000b28:	2101      	movs	r1, #1
 8000b2a:	484d      	ldr	r0, [pc, #308]	@ (8000c60 <__aeabi_fsub+0x344>)
 8000b2c:	4019      	ands	r1, r3
 8000b2e:	085b      	lsrs	r3, r3, #1
 8000b30:	4003      	ands	r3, r0
 8000b32:	430b      	orrs	r3, r1
 8000b34:	e7ce      	b.n	8000ad4 <__aeabi_fsub+0x1b8>
 8000b36:	1e57      	subs	r7, r2, #1
 8000b38:	2a01      	cmp	r2, #1
 8000b3a:	d05a      	beq.n	8000bf2 <__aeabi_fsub+0x2d6>
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	2aff      	cmp	r2, #255	@ 0xff
 8000b40:	d033      	beq.n	8000baa <__aeabi_fsub+0x28e>
 8000b42:	2201      	movs	r2, #1
 8000b44:	2f1b      	cmp	r7, #27
 8000b46:	dc07      	bgt.n	8000b58 <__aeabi_fsub+0x23c>
 8000b48:	2120      	movs	r1, #32
 8000b4a:	1bc9      	subs	r1, r1, r7
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	408b      	lsls	r3, r1
 8000b50:	40fa      	lsrs	r2, r7
 8000b52:	1e59      	subs	r1, r3, #1
 8000b54:	418b      	sbcs	r3, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	0005      	movs	r5, r0
 8000b5a:	1ab3      	subs	r3, r6, r2
 8000b5c:	e743      	b.n	80009e6 <__aeabi_fsub+0xca>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d123      	bne.n	8000baa <__aeabi_fsub+0x28e>
 8000b62:	22ff      	movs	r2, #255	@ 0xff
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d09b      	beq.n	8000aa0 <__aeabi_fsub+0x184>
 8000b68:	1e51      	subs	r1, r2, #1
 8000b6a:	2a01      	cmp	r2, #1
 8000b6c:	d0d6      	beq.n	8000b1c <__aeabi_fsub+0x200>
 8000b6e:	2aff      	cmp	r2, #255	@ 0xff
 8000b70:	d01b      	beq.n	8000baa <__aeabi_fsub+0x28e>
 8000b72:	291b      	cmp	r1, #27
 8000b74:	dd2c      	ble.n	8000bd0 <__aeabi_fsub+0x2b4>
 8000b76:	0002      	movs	r2, r0
 8000b78:	1c73      	adds	r3, r6, #1
 8000b7a:	e73a      	b.n	80009f2 <__aeabi_fsub+0xd6>
 8000b7c:	2aff      	cmp	r2, #255	@ 0xff
 8000b7e:	d088      	beq.n	8000a92 <__aeabi_fsub+0x176>
 8000b80:	199b      	adds	r3, r3, r6
 8000b82:	085b      	lsrs	r3, r3, #1
 8000b84:	0759      	lsls	r1, r3, #29
 8000b86:	d000      	beq.n	8000b8a <__aeabi_fsub+0x26e>
 8000b88:	e733      	b.n	80009f2 <__aeabi_fsub+0xd6>
 8000b8a:	08db      	lsrs	r3, r3, #3
 8000b8c:	e76e      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d110      	bne.n	8000bb4 <__aeabi_fsub+0x298>
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d043      	beq.n	8000c1e <__aeabi_fsub+0x302>
 8000b96:	2401      	movs	r4, #1
 8000b98:	0033      	movs	r3, r6
 8000b9a:	400c      	ands	r4, r1
 8000b9c:	e706      	b.n	80009ac <__aeabi_fsub+0x90>
 8000b9e:	2401      	movs	r4, #1
 8000ba0:	1af7      	subs	r7, r6, r3
 8000ba2:	400c      	ands	r4, r1
 8000ba4:	e784      	b.n	8000ab0 <__aeabi_fsub+0x194>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d104      	bne.n	8000bb4 <__aeabi_fsub+0x298>
 8000baa:	0033      	movs	r3, r6
 8000bac:	e6fe      	b.n	80009ac <__aeabi_fsub+0x90>
 8000bae:	2501      	movs	r5, #1
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	e718      	b.n	80009e6 <__aeabi_fsub+0xca>
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d100      	bne.n	8000bba <__aeabi_fsub+0x29e>
 8000bb8:	e6f8      	b.n	80009ac <__aeabi_fsub+0x90>
 8000bba:	2280      	movs	r2, #128	@ 0x80
 8000bbc:	03d2      	lsls	r2, r2, #15
 8000bbe:	4297      	cmp	r7, r2
 8000bc0:	d304      	bcc.n	8000bcc <__aeabi_fsub+0x2b0>
 8000bc2:	4594      	cmp	ip, r2
 8000bc4:	d202      	bcs.n	8000bcc <__aeabi_fsub+0x2b0>
 8000bc6:	2401      	movs	r4, #1
 8000bc8:	0033      	movs	r3, r6
 8000bca:	400c      	ands	r4, r1
 8000bcc:	08db      	lsrs	r3, r3, #3
 8000bce:	e6f1      	b.n	80009b4 <__aeabi_fsub+0x98>
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2520      	movs	r5, #32
 8000bd4:	40ca      	lsrs	r2, r1
 8000bd6:	1a69      	subs	r1, r5, r1
 8000bd8:	408b      	lsls	r3, r1
 8000bda:	1e59      	subs	r1, r3, #1
 8000bdc:	418b      	sbcs	r3, r1
 8000bde:	4313      	orrs	r3, r2
 8000be0:	0005      	movs	r5, r0
 8000be2:	199b      	adds	r3, r3, r6
 8000be4:	e750      	b.n	8000a88 <__aeabi_fsub+0x16c>
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d094      	beq.n	8000b14 <__aeabi_fsub+0x1f8>
 8000bea:	2401      	movs	r4, #1
 8000bec:	0033      	movs	r3, r6
 8000bee:	400c      	ands	r4, r1
 8000bf0:	e73a      	b.n	8000a68 <__aeabi_fsub+0x14c>
 8000bf2:	000c      	movs	r4, r1
 8000bf4:	2501      	movs	r5, #1
 8000bf6:	1af3      	subs	r3, r6, r3
 8000bf8:	e6f5      	b.n	80009e6 <__aeabi_fsub+0xca>
 8000bfa:	0033      	movs	r3, r6
 8000bfc:	e734      	b.n	8000a68 <__aeabi_fsub+0x14c>
 8000bfe:	199b      	adds	r3, r3, r6
 8000c00:	2200      	movs	r2, #0
 8000c02:	0159      	lsls	r1, r3, #5
 8000c04:	d5c1      	bpl.n	8000b8a <__aeabi_fsub+0x26e>
 8000c06:	4a15      	ldr	r2, [pc, #84]	@ (8000c5c <__aeabi_fsub+0x340>)
 8000c08:	4013      	ands	r3, r2
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	e72d      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	d100      	bne.n	8000c16 <__aeabi_fsub+0x2fa>
 8000c14:	e77e      	b.n	8000b14 <__aeabi_fsub+0x1f8>
 8000c16:	0013      	movs	r3, r2
 8000c18:	2200      	movs	r2, #0
 8000c1a:	08db      	lsrs	r3, r3, #3
 8000c1c:	e726      	b.n	8000a6c <__aeabi_fsub+0x150>
 8000c1e:	2380      	movs	r3, #128	@ 0x80
 8000c20:	2400      	movs	r4, #0
 8000c22:	20ff      	movs	r0, #255	@ 0xff
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	e6f1      	b.n	8000a0c <__aeabi_fsub+0xf0>
 8000c28:	2a00      	cmp	r2, #0
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_fsub+0x312>
 8000c2c:	e756      	b.n	8000adc <__aeabi_fsub+0x1c0>
 8000c2e:	1b47      	subs	r7, r0, r5
 8000c30:	003a      	movs	r2, r7
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fsub+0x31c>
 8000c36:	e730      	b.n	8000a9a <__aeabi_fsub+0x17e>
 8000c38:	2280      	movs	r2, #128	@ 0x80
 8000c3a:	04d2      	lsls	r2, r2, #19
 8000c3c:	000c      	movs	r4, r1
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	e77f      	b.n	8000b42 <__aeabi_fsub+0x226>
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fsub+0x32c>
 8000c46:	e701      	b.n	8000a4c <__aeabi_fsub+0x130>
 8000c48:	1b41      	subs	r1, r0, r5
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	d101      	bne.n	8000c52 <__aeabi_fsub+0x336>
 8000c4e:	000a      	movs	r2, r1
 8000c50:	e788      	b.n	8000b64 <__aeabi_fsub+0x248>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	04d2      	lsls	r2, r2, #19
 8000c56:	4313      	orrs	r3, r2
 8000c58:	e78b      	b.n	8000b72 <__aeabi_fsub+0x256>
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	fbffffff 	.word	0xfbffffff
 8000c60:	7dffffff 	.word	0x7dffffff

08000c64 <__aeabi_f2iz>:
 8000c64:	0241      	lsls	r1, r0, #9
 8000c66:	0042      	lsls	r2, r0, #1
 8000c68:	0fc3      	lsrs	r3, r0, #31
 8000c6a:	0a49      	lsrs	r1, r1, #9
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	0e12      	lsrs	r2, r2, #24
 8000c70:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c72:	dd03      	ble.n	8000c7c <__aeabi_f2iz+0x18>
 8000c74:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c76:	dd02      	ble.n	8000c7e <__aeabi_f2iz+0x1a>
 8000c78:	4a09      	ldr	r2, [pc, #36]	@ (8000ca0 <__aeabi_f2iz+0x3c>)
 8000c7a:	1898      	adds	r0, r3, r2
 8000c7c:	4770      	bx	lr
 8000c7e:	2080      	movs	r0, #128	@ 0x80
 8000c80:	0400      	lsls	r0, r0, #16
 8000c82:	4301      	orrs	r1, r0
 8000c84:	2a95      	cmp	r2, #149	@ 0x95
 8000c86:	dc07      	bgt.n	8000c98 <__aeabi_f2iz+0x34>
 8000c88:	2096      	movs	r0, #150	@ 0x96
 8000c8a:	1a82      	subs	r2, r0, r2
 8000c8c:	40d1      	lsrs	r1, r2
 8000c8e:	4248      	negs	r0, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f3      	bne.n	8000c7c <__aeabi_f2iz+0x18>
 8000c94:	0008      	movs	r0, r1
 8000c96:	e7f1      	b.n	8000c7c <__aeabi_f2iz+0x18>
 8000c98:	3a96      	subs	r2, #150	@ 0x96
 8000c9a:	4091      	lsls	r1, r2
 8000c9c:	e7f7      	b.n	8000c8e <__aeabi_f2iz+0x2a>
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	7fffffff 	.word	0x7fffffff

08000ca4 <__eqdf2>:
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	4657      	mov	r7, sl
 8000ca8:	46de      	mov	lr, fp
 8000caa:	464e      	mov	r6, r9
 8000cac:	4645      	mov	r5, r8
 8000cae:	b5e0      	push	{r5, r6, r7, lr}
 8000cb0:	000d      	movs	r5, r1
 8000cb2:	0004      	movs	r4, r0
 8000cb4:	0fe8      	lsrs	r0, r5, #31
 8000cb6:	4683      	mov	fp, r0
 8000cb8:	0309      	lsls	r1, r1, #12
 8000cba:	0fd8      	lsrs	r0, r3, #31
 8000cbc:	0b09      	lsrs	r1, r1, #12
 8000cbe:	4682      	mov	sl, r0
 8000cc0:	4819      	ldr	r0, [pc, #100]	@ (8000d28 <__eqdf2+0x84>)
 8000cc2:	468c      	mov	ip, r1
 8000cc4:	031f      	lsls	r7, r3, #12
 8000cc6:	0069      	lsls	r1, r5, #1
 8000cc8:	005e      	lsls	r6, r3, #1
 8000cca:	0d49      	lsrs	r1, r1, #21
 8000ccc:	0b3f      	lsrs	r7, r7, #12
 8000cce:	0d76      	lsrs	r6, r6, #21
 8000cd0:	4281      	cmp	r1, r0
 8000cd2:	d018      	beq.n	8000d06 <__eqdf2+0x62>
 8000cd4:	4286      	cmp	r6, r0
 8000cd6:	d00f      	beq.n	8000cf8 <__eqdf2+0x54>
 8000cd8:	2001      	movs	r0, #1
 8000cda:	42b1      	cmp	r1, r6
 8000cdc:	d10d      	bne.n	8000cfa <__eqdf2+0x56>
 8000cde:	45bc      	cmp	ip, r7
 8000ce0:	d10b      	bne.n	8000cfa <__eqdf2+0x56>
 8000ce2:	4294      	cmp	r4, r2
 8000ce4:	d109      	bne.n	8000cfa <__eqdf2+0x56>
 8000ce6:	45d3      	cmp	fp, sl
 8000ce8:	d01c      	beq.n	8000d24 <__eqdf2+0x80>
 8000cea:	2900      	cmp	r1, #0
 8000cec:	d105      	bne.n	8000cfa <__eqdf2+0x56>
 8000cee:	4660      	mov	r0, ip
 8000cf0:	4320      	orrs	r0, r4
 8000cf2:	1e43      	subs	r3, r0, #1
 8000cf4:	4198      	sbcs	r0, r3
 8000cf6:	e000      	b.n	8000cfa <__eqdf2+0x56>
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	bcf0      	pop	{r4, r5, r6, r7}
 8000cfc:	46bb      	mov	fp, r7
 8000cfe:	46b2      	mov	sl, r6
 8000d00:	46a9      	mov	r9, r5
 8000d02:	46a0      	mov	r8, r4
 8000d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d06:	2001      	movs	r0, #1
 8000d08:	428e      	cmp	r6, r1
 8000d0a:	d1f6      	bne.n	8000cfa <__eqdf2+0x56>
 8000d0c:	4661      	mov	r1, ip
 8000d0e:	4339      	orrs	r1, r7
 8000d10:	000f      	movs	r7, r1
 8000d12:	4317      	orrs	r7, r2
 8000d14:	4327      	orrs	r7, r4
 8000d16:	d1f0      	bne.n	8000cfa <__eqdf2+0x56>
 8000d18:	465b      	mov	r3, fp
 8000d1a:	4652      	mov	r2, sl
 8000d1c:	1a98      	subs	r0, r3, r2
 8000d1e:	1e43      	subs	r3, r0, #1
 8000d20:	4198      	sbcs	r0, r3
 8000d22:	e7ea      	b.n	8000cfa <__eqdf2+0x56>
 8000d24:	2000      	movs	r0, #0
 8000d26:	e7e8      	b.n	8000cfa <__eqdf2+0x56>
 8000d28:	000007ff 	.word	0x000007ff

08000d2c <__gedf2>:
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	4657      	mov	r7, sl
 8000d30:	464e      	mov	r6, r9
 8000d32:	4645      	mov	r5, r8
 8000d34:	46de      	mov	lr, fp
 8000d36:	b5e0      	push	{r5, r6, r7, lr}
 8000d38:	000d      	movs	r5, r1
 8000d3a:	030f      	lsls	r7, r1, #12
 8000d3c:	0b39      	lsrs	r1, r7, #12
 8000d3e:	b083      	sub	sp, #12
 8000d40:	0004      	movs	r4, r0
 8000d42:	4680      	mov	r8, r0
 8000d44:	9101      	str	r1, [sp, #4]
 8000d46:	0058      	lsls	r0, r3, #1
 8000d48:	0fe9      	lsrs	r1, r5, #31
 8000d4a:	4f31      	ldr	r7, [pc, #196]	@ (8000e10 <__gedf2+0xe4>)
 8000d4c:	0d40      	lsrs	r0, r0, #21
 8000d4e:	468c      	mov	ip, r1
 8000d50:	006e      	lsls	r6, r5, #1
 8000d52:	0319      	lsls	r1, r3, #12
 8000d54:	4682      	mov	sl, r0
 8000d56:	4691      	mov	r9, r2
 8000d58:	0d76      	lsrs	r6, r6, #21
 8000d5a:	0b09      	lsrs	r1, r1, #12
 8000d5c:	0fd8      	lsrs	r0, r3, #31
 8000d5e:	42be      	cmp	r6, r7
 8000d60:	d01f      	beq.n	8000da2 <__gedf2+0x76>
 8000d62:	45ba      	cmp	sl, r7
 8000d64:	d00f      	beq.n	8000d86 <__gedf2+0x5a>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d12f      	bne.n	8000dca <__gedf2+0x9e>
 8000d6a:	4655      	mov	r5, sl
 8000d6c:	9e01      	ldr	r6, [sp, #4]
 8000d6e:	4334      	orrs	r4, r6
 8000d70:	2d00      	cmp	r5, #0
 8000d72:	d127      	bne.n	8000dc4 <__gedf2+0x98>
 8000d74:	430a      	orrs	r2, r1
 8000d76:	d03a      	beq.n	8000dee <__gedf2+0xc2>
 8000d78:	2c00      	cmp	r4, #0
 8000d7a:	d145      	bne.n	8000e08 <__gedf2+0xdc>
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d11a      	bne.n	8000db6 <__gedf2+0x8a>
 8000d80:	2001      	movs	r0, #1
 8000d82:	4240      	negs	r0, r0
 8000d84:	e017      	b.n	8000db6 <__gedf2+0x8a>
 8000d86:	4311      	orrs	r1, r2
 8000d88:	d13b      	bne.n	8000e02 <__gedf2+0xd6>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d102      	bne.n	8000d94 <__gedf2+0x68>
 8000d8e:	9f01      	ldr	r7, [sp, #4]
 8000d90:	4327      	orrs	r7, r4
 8000d92:	d0f3      	beq.n	8000d7c <__gedf2+0x50>
 8000d94:	4584      	cmp	ip, r0
 8000d96:	d109      	bne.n	8000dac <__gedf2+0x80>
 8000d98:	4663      	mov	r3, ip
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f0      	beq.n	8000d80 <__gedf2+0x54>
 8000d9e:	4660      	mov	r0, ip
 8000da0:	e009      	b.n	8000db6 <__gedf2+0x8a>
 8000da2:	9f01      	ldr	r7, [sp, #4]
 8000da4:	4327      	orrs	r7, r4
 8000da6:	d12c      	bne.n	8000e02 <__gedf2+0xd6>
 8000da8:	45b2      	cmp	sl, r6
 8000daa:	d024      	beq.n	8000df6 <__gedf2+0xca>
 8000dac:	4663      	mov	r3, ip
 8000dae:	2002      	movs	r0, #2
 8000db0:	3b01      	subs	r3, #1
 8000db2:	4018      	ands	r0, r3
 8000db4:	3801      	subs	r0, #1
 8000db6:	b003      	add	sp, #12
 8000db8:	bcf0      	pop	{r4, r5, r6, r7}
 8000dba:	46bb      	mov	fp, r7
 8000dbc:	46b2      	mov	sl, r6
 8000dbe:	46a9      	mov	r9, r5
 8000dc0:	46a0      	mov	r8, r4
 8000dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d0d9      	beq.n	8000d7c <__gedf2+0x50>
 8000dc8:	e7e4      	b.n	8000d94 <__gedf2+0x68>
 8000dca:	4654      	mov	r4, sl
 8000dcc:	2c00      	cmp	r4, #0
 8000dce:	d0ed      	beq.n	8000dac <__gedf2+0x80>
 8000dd0:	4584      	cmp	ip, r0
 8000dd2:	d1eb      	bne.n	8000dac <__gedf2+0x80>
 8000dd4:	4556      	cmp	r6, sl
 8000dd6:	dce9      	bgt.n	8000dac <__gedf2+0x80>
 8000dd8:	dbde      	blt.n	8000d98 <__gedf2+0x6c>
 8000dda:	9b01      	ldr	r3, [sp, #4]
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d8e5      	bhi.n	8000dac <__gedf2+0x80>
 8000de0:	d1da      	bne.n	8000d98 <__gedf2+0x6c>
 8000de2:	45c8      	cmp	r8, r9
 8000de4:	d8e2      	bhi.n	8000dac <__gedf2+0x80>
 8000de6:	2000      	movs	r0, #0
 8000de8:	45c8      	cmp	r8, r9
 8000dea:	d2e4      	bcs.n	8000db6 <__gedf2+0x8a>
 8000dec:	e7d4      	b.n	8000d98 <__gedf2+0x6c>
 8000dee:	2000      	movs	r0, #0
 8000df0:	2c00      	cmp	r4, #0
 8000df2:	d0e0      	beq.n	8000db6 <__gedf2+0x8a>
 8000df4:	e7da      	b.n	8000dac <__gedf2+0x80>
 8000df6:	4311      	orrs	r1, r2
 8000df8:	d103      	bne.n	8000e02 <__gedf2+0xd6>
 8000dfa:	4584      	cmp	ip, r0
 8000dfc:	d1d6      	bne.n	8000dac <__gedf2+0x80>
 8000dfe:	2000      	movs	r0, #0
 8000e00:	e7d9      	b.n	8000db6 <__gedf2+0x8a>
 8000e02:	2002      	movs	r0, #2
 8000e04:	4240      	negs	r0, r0
 8000e06:	e7d6      	b.n	8000db6 <__gedf2+0x8a>
 8000e08:	4584      	cmp	ip, r0
 8000e0a:	d0e6      	beq.n	8000dda <__gedf2+0xae>
 8000e0c:	e7ce      	b.n	8000dac <__gedf2+0x80>
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	000007ff 	.word	0x000007ff

08000e14 <__ledf2>:
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	4657      	mov	r7, sl
 8000e18:	464e      	mov	r6, r9
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	46de      	mov	lr, fp
 8000e1e:	b5e0      	push	{r5, r6, r7, lr}
 8000e20:	000d      	movs	r5, r1
 8000e22:	030f      	lsls	r7, r1, #12
 8000e24:	0004      	movs	r4, r0
 8000e26:	4680      	mov	r8, r0
 8000e28:	0fe8      	lsrs	r0, r5, #31
 8000e2a:	0b39      	lsrs	r1, r7, #12
 8000e2c:	4684      	mov	ip, r0
 8000e2e:	b083      	sub	sp, #12
 8000e30:	0058      	lsls	r0, r3, #1
 8000e32:	4f30      	ldr	r7, [pc, #192]	@ (8000ef4 <__ledf2+0xe0>)
 8000e34:	0d40      	lsrs	r0, r0, #21
 8000e36:	9101      	str	r1, [sp, #4]
 8000e38:	031e      	lsls	r6, r3, #12
 8000e3a:	0069      	lsls	r1, r5, #1
 8000e3c:	4682      	mov	sl, r0
 8000e3e:	4691      	mov	r9, r2
 8000e40:	0d49      	lsrs	r1, r1, #21
 8000e42:	0b36      	lsrs	r6, r6, #12
 8000e44:	0fd8      	lsrs	r0, r3, #31
 8000e46:	42b9      	cmp	r1, r7
 8000e48:	d020      	beq.n	8000e8c <__ledf2+0x78>
 8000e4a:	45ba      	cmp	sl, r7
 8000e4c:	d00f      	beq.n	8000e6e <__ledf2+0x5a>
 8000e4e:	2900      	cmp	r1, #0
 8000e50:	d12b      	bne.n	8000eaa <__ledf2+0x96>
 8000e52:	9901      	ldr	r1, [sp, #4]
 8000e54:	430c      	orrs	r4, r1
 8000e56:	4651      	mov	r1, sl
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d137      	bne.n	8000ecc <__ledf2+0xb8>
 8000e5c:	4332      	orrs	r2, r6
 8000e5e:	d038      	beq.n	8000ed2 <__ledf2+0xbe>
 8000e60:	2c00      	cmp	r4, #0
 8000e62:	d144      	bne.n	8000eee <__ledf2+0xda>
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d119      	bne.n	8000e9c <__ledf2+0x88>
 8000e68:	2001      	movs	r0, #1
 8000e6a:	4240      	negs	r0, r0
 8000e6c:	e016      	b.n	8000e9c <__ledf2+0x88>
 8000e6e:	4316      	orrs	r6, r2
 8000e70:	d113      	bne.n	8000e9a <__ledf2+0x86>
 8000e72:	2900      	cmp	r1, #0
 8000e74:	d102      	bne.n	8000e7c <__ledf2+0x68>
 8000e76:	9f01      	ldr	r7, [sp, #4]
 8000e78:	4327      	orrs	r7, r4
 8000e7a:	d0f3      	beq.n	8000e64 <__ledf2+0x50>
 8000e7c:	4584      	cmp	ip, r0
 8000e7e:	d020      	beq.n	8000ec2 <__ledf2+0xae>
 8000e80:	4663      	mov	r3, ip
 8000e82:	2002      	movs	r0, #2
 8000e84:	3b01      	subs	r3, #1
 8000e86:	4018      	ands	r0, r3
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e007      	b.n	8000e9c <__ledf2+0x88>
 8000e8c:	9f01      	ldr	r7, [sp, #4]
 8000e8e:	4327      	orrs	r7, r4
 8000e90:	d103      	bne.n	8000e9a <__ledf2+0x86>
 8000e92:	458a      	cmp	sl, r1
 8000e94:	d1f4      	bne.n	8000e80 <__ledf2+0x6c>
 8000e96:	4316      	orrs	r6, r2
 8000e98:	d01f      	beq.n	8000eda <__ledf2+0xc6>
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	b003      	add	sp, #12
 8000e9e:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea0:	46bb      	mov	fp, r7
 8000ea2:	46b2      	mov	sl, r6
 8000ea4:	46a9      	mov	r9, r5
 8000ea6:	46a0      	mov	r8, r4
 8000ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eaa:	4654      	mov	r4, sl
 8000eac:	2c00      	cmp	r4, #0
 8000eae:	d0e7      	beq.n	8000e80 <__ledf2+0x6c>
 8000eb0:	4584      	cmp	ip, r0
 8000eb2:	d1e5      	bne.n	8000e80 <__ledf2+0x6c>
 8000eb4:	4551      	cmp	r1, sl
 8000eb6:	dce3      	bgt.n	8000e80 <__ledf2+0x6c>
 8000eb8:	db03      	blt.n	8000ec2 <__ledf2+0xae>
 8000eba:	9b01      	ldr	r3, [sp, #4]
 8000ebc:	42b3      	cmp	r3, r6
 8000ebe:	d8df      	bhi.n	8000e80 <__ledf2+0x6c>
 8000ec0:	d00f      	beq.n	8000ee2 <__ledf2+0xce>
 8000ec2:	4663      	mov	r3, ip
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0cf      	beq.n	8000e68 <__ledf2+0x54>
 8000ec8:	4660      	mov	r0, ip
 8000eca:	e7e7      	b.n	8000e9c <__ledf2+0x88>
 8000ecc:	2c00      	cmp	r4, #0
 8000ece:	d0c9      	beq.n	8000e64 <__ledf2+0x50>
 8000ed0:	e7d4      	b.n	8000e7c <__ledf2+0x68>
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	2c00      	cmp	r4, #0
 8000ed6:	d0e1      	beq.n	8000e9c <__ledf2+0x88>
 8000ed8:	e7d2      	b.n	8000e80 <__ledf2+0x6c>
 8000eda:	4584      	cmp	ip, r0
 8000edc:	d1d0      	bne.n	8000e80 <__ledf2+0x6c>
 8000ede:	2000      	movs	r0, #0
 8000ee0:	e7dc      	b.n	8000e9c <__ledf2+0x88>
 8000ee2:	45c8      	cmp	r8, r9
 8000ee4:	d8cc      	bhi.n	8000e80 <__ledf2+0x6c>
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	45c8      	cmp	r8, r9
 8000eea:	d2d7      	bcs.n	8000e9c <__ledf2+0x88>
 8000eec:	e7e9      	b.n	8000ec2 <__ledf2+0xae>
 8000eee:	4584      	cmp	ip, r0
 8000ef0:	d0e3      	beq.n	8000eba <__ledf2+0xa6>
 8000ef2:	e7c5      	b.n	8000e80 <__ledf2+0x6c>
 8000ef4:	000007ff 	.word	0x000007ff

08000ef8 <__aeabi_f2d>:
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	0242      	lsls	r2, r0, #9
 8000efc:	0043      	lsls	r3, r0, #1
 8000efe:	0fc4      	lsrs	r4, r0, #31
 8000f00:	20fe      	movs	r0, #254	@ 0xfe
 8000f02:	0e1b      	lsrs	r3, r3, #24
 8000f04:	1c59      	adds	r1, r3, #1
 8000f06:	0a55      	lsrs	r5, r2, #9
 8000f08:	4208      	tst	r0, r1
 8000f0a:	d00c      	beq.n	8000f26 <__aeabi_f2d+0x2e>
 8000f0c:	21e0      	movs	r1, #224	@ 0xe0
 8000f0e:	0089      	lsls	r1, r1, #2
 8000f10:	468c      	mov	ip, r1
 8000f12:	076d      	lsls	r5, r5, #29
 8000f14:	0b12      	lsrs	r2, r2, #12
 8000f16:	4463      	add	r3, ip
 8000f18:	051b      	lsls	r3, r3, #20
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	07e4      	lsls	r4, r4, #31
 8000f1e:	4323      	orrs	r3, r4
 8000f20:	0028      	movs	r0, r5
 8000f22:	0019      	movs	r1, r3
 8000f24:	bd70      	pop	{r4, r5, r6, pc}
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d114      	bne.n	8000f54 <__aeabi_f2d+0x5c>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d01b      	beq.n	8000f66 <__aeabi_f2d+0x6e>
 8000f2e:	0028      	movs	r0, r5
 8000f30:	f000 f82a 	bl	8000f88 <__clzsi2>
 8000f34:	280a      	cmp	r0, #10
 8000f36:	dc1c      	bgt.n	8000f72 <__aeabi_f2d+0x7a>
 8000f38:	230b      	movs	r3, #11
 8000f3a:	002a      	movs	r2, r5
 8000f3c:	1a1b      	subs	r3, r3, r0
 8000f3e:	40da      	lsrs	r2, r3
 8000f40:	0003      	movs	r3, r0
 8000f42:	3315      	adds	r3, #21
 8000f44:	409d      	lsls	r5, r3
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <__aeabi_f2d+0x88>)
 8000f48:	0312      	lsls	r2, r2, #12
 8000f4a:	1a1b      	subs	r3, r3, r0
 8000f4c:	055b      	lsls	r3, r3, #21
 8000f4e:	0b12      	lsrs	r2, r2, #12
 8000f50:	0d5b      	lsrs	r3, r3, #21
 8000f52:	e7e1      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f54:	2d00      	cmp	r5, #0
 8000f56:	d009      	beq.n	8000f6c <__aeabi_f2d+0x74>
 8000f58:	0b13      	lsrs	r3, r2, #12
 8000f5a:	2280      	movs	r2, #128	@ 0x80
 8000f5c:	0312      	lsls	r2, r2, #12
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	076d      	lsls	r5, r5, #29
 8000f62:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <__aeabi_f2d+0x8c>)
 8000f64:	e7d8      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f66:	2300      	movs	r3, #0
 8000f68:	2200      	movs	r2, #0
 8000f6a:	e7d5      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <__aeabi_f2d+0x8c>)
 8000f70:	e7d2      	b.n	8000f18 <__aeabi_f2d+0x20>
 8000f72:	0003      	movs	r3, r0
 8000f74:	002a      	movs	r2, r5
 8000f76:	3b0b      	subs	r3, #11
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	2500      	movs	r5, #0
 8000f7c:	e7e3      	b.n	8000f46 <__aeabi_f2d+0x4e>
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	00000389 	.word	0x00000389
 8000f84:	000007ff 	.word	0x000007ff

08000f88 <__clzsi2>:
 8000f88:	211c      	movs	r1, #28
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	041b      	lsls	r3, r3, #16
 8000f8e:	4298      	cmp	r0, r3
 8000f90:	d301      	bcc.n	8000f96 <__clzsi2+0xe>
 8000f92:	0c00      	lsrs	r0, r0, #16
 8000f94:	3910      	subs	r1, #16
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	d301      	bcc.n	8000fa0 <__clzsi2+0x18>
 8000f9c:	0a00      	lsrs	r0, r0, #8
 8000f9e:	3908      	subs	r1, #8
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	4298      	cmp	r0, r3
 8000fa4:	d301      	bcc.n	8000faa <__clzsi2+0x22>
 8000fa6:	0900      	lsrs	r0, r0, #4
 8000fa8:	3904      	subs	r1, #4
 8000faa:	a202      	add	r2, pc, #8	@ (adr r2, 8000fb4 <__clzsi2+0x2c>)
 8000fac:	5c10      	ldrb	r0, [r2, r0]
 8000fae:	1840      	adds	r0, r0, r1
 8000fb0:	4770      	bx	lr
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	02020304 	.word	0x02020304
 8000fb8:	01010101 	.word	0x01010101
	...

08000fc4 <HAL_I2C_ErrorCallback>:
{
	i2c_rx_int = 1;
}

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	// Do something
}
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b002      	add	sp, #8
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <LL_ADC_REG_SetSequencerConfigurable>:
  *         @arg @ref LL_ADC_REG_SEQ_FIXED
  *         @arg @ref LL_ADC_REG_SEQ_CONFIGURABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerConfigurable(ADC_TypeDef *ADCx, uint32_t Configurability)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_CHSELRMOD, Configurability);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <LL_ADC_REG_SetSequencerConfigurable+0x24>)
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60da      	str	r2, [r3, #12]
}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	ffdfffff 	.word	0xffdfffff

08000ffc <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2204      	movs	r2, #4
 800100c:	4393      	bics	r3, r2
 800100e:	001a      	movs	r2, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	60da      	str	r2, [r3, #12]
}
 8001018:	46c0      	nop			@ (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}

08001020 <LL_ADC_REG_SetSequencerChannels>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChannels(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	025b      	lsls	r3, r3, #9
 800102e:	0a5a      	lsrs	r2, r3, #9
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001034:	46c0      	nop			@ (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}

0800103c <LL_ADC_IsActiveFlag_CCRDY>:
  * @rmtoll ISR      CCRDY          LL_ADC_IsActiveFlag_CCRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_CCRDY(ADC_TypeDef *ADCx)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_CCRDY) == (LL_ADC_FLAG_CCRDY)) ? 1UL : 0UL);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	2380      	movs	r3, #128	@ 0x80
 800104a:	019b      	lsls	r3, r3, #6
 800104c:	401a      	ands	r2, r3
 800104e:	2380      	movs	r3, #128	@ 0x80
 8001050:	019b      	lsls	r3, r3, #6
 8001052:	429a      	cmp	r2, r3
 8001054:	d101      	bne.n	800105a <LL_ADC_IsActiveFlag_CCRDY+0x1e>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <LL_ADC_IsActiveFlag_CCRDY+0x20>
 800105a:	2300      	movs	r3, #0
}
 800105c:	0018      	movs	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	b002      	add	sp, #8
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)(&holding_register_database[3]), 8);
 800106c:	4904      	ldr	r1, [pc, #16]	@ (8001080 <HAL_ADC_ConvCpltCallback+0x1c>)
 800106e:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <HAL_ADC_ConvCpltCallback+0x20>)
 8001070:	2208      	movs	r2, #8
 8001072:	0018      	movs	r0, r3
 8001074:	f003 faa6 	bl	80045c4 <HAL_ADC_Start_DMA>

//	for(uint8_t i = 0; i < 9; i++)
//	{
//		holding_register_database[i + 3] = (uint16_t)raw_data[i];
//	}
}
 8001078:	46c0      	nop			@ (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b002      	add	sp, #8
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000006 	.word	0x20000006
 8001084:	20000094 	.word	0x20000094

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108e:	f002 ff0a 	bl	8003ea6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001092:	f000 f8ff 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001096:	f000 fc09 	bl	80018ac <MX_GPIO_Init>
  MX_DMA_Init();
 800109a:	f000 fbe1 	bl	8001860 <MX_DMA_Init>
  MX_ADC1_Init();
 800109e:	f000 f937 	bl	8001310 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010a2:	f000 fa41 	bl	8001528 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010a6:	f000 fa7d 	bl	80015a4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80010aa:	f000 fab9 	bl	8001620 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80010ae:	f000 fb87 	bl	80017c0 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 80010b2:	f000 fb5f 	bl	8001774 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 80010b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001264 <main+0x1dc>)
 80010b8:	2240      	movs	r2, #64	@ 0x40
 80010ba:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 80010bc:	4b69      	ldr	r3, [pc, #420]	@ (8001264 <main+0x1dc>)
 80010be:	2280      	movs	r2, #128	@ 0x80
 80010c0:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 80010c2:	4b68      	ldr	r3, [pc, #416]	@ (8001264 <main+0x1dc>)
 80010c4:	2280      	movs	r2, #128	@ 0x80
 80010c6:	0052      	lsls	r2, r2, #1
 80010c8:	809a      	strh	r2, [r3, #4]

  port_map[0] = Actuator_A_EN_GPIO_Port;
 80010ca:	4b67      	ldr	r3, [pc, #412]	@ (8001268 <main+0x1e0>)
 80010cc:	4a67      	ldr	r2, [pc, #412]	@ (800126c <main+0x1e4>)
 80010ce:	601a      	str	r2, [r3, #0]
  port_map[1] = Actuator_B_EN_GPIO_Port;
 80010d0:	4b65      	ldr	r3, [pc, #404]	@ (8001268 <main+0x1e0>)
 80010d2:	4a66      	ldr	r2, [pc, #408]	@ (800126c <main+0x1e4>)
 80010d4:	605a      	str	r2, [r3, #4]
  port_map[2] = Actuator_C_EN_GPIO_Port;
 80010d6:	4b64      	ldr	r3, [pc, #400]	@ (8001268 <main+0x1e0>)
 80010d8:	22a0      	movs	r2, #160	@ 0xa0
 80010da:	05d2      	lsls	r2, r2, #23
 80010dc:	609a      	str	r2, [r3, #8]


  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 80010de:	4b64      	ldr	r3, [pc, #400]	@ (8001270 <main+0x1e8>)
 80010e0:	22fe      	movs	r2, #254	@ 0xfe
 80010e2:	0592      	lsls	r2, r2, #22
 80010e4:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 80010e6:	4b62      	ldr	r3, [pc, #392]	@ (8001270 <main+0x1e8>)
 80010e8:	4a62      	ldr	r2, [pc, #392]	@ (8001274 <main+0x1ec>)
 80010ea:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 80010ec:	4b60      	ldr	r3, [pc, #384]	@ (8001270 <main+0x1e8>)
 80010ee:	4a62      	ldr	r2, [pc, #392]	@ (8001278 <main+0x1f0>)
 80010f0:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 80010f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001270 <main+0x1e8>)
 80010f4:	4a5f      	ldr	r2, [pc, #380]	@ (8001274 <main+0x1ec>)
 80010f6:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 80010f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001270 <main+0x1e8>)
 80010fa:	22fe      	movs	r2, #254	@ 0xfe
 80010fc:	0592      	lsls	r2, r2, #22
 80010fe:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 8001100:	4b5b      	ldr	r3, [pc, #364]	@ (8001270 <main+0x1e8>)
 8001102:	4a5e      	ldr	r2, [pc, #376]	@ (800127c <main+0x1f4>)
 8001104:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 8001106:	4b5a      	ldr	r3, [pc, #360]	@ (8001270 <main+0x1e8>)
 8001108:	4a5c      	ldr	r2, [pc, #368]	@ (800127c <main+0x1f4>)
 800110a:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 800110c:	4b58      	ldr	r3, [pc, #352]	@ (8001270 <main+0x1e8>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 8001112:	4b57      	ldr	r3, [pc, #348]	@ (8001270 <main+0x1e8>)
 8001114:	4a5a      	ldr	r2, [pc, #360]	@ (8001280 <main+0x1f8>)
 8001116:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 8001118:	4b55      	ldr	r3, [pc, #340]	@ (8001270 <main+0x1e8>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 800111e:	4b54      	ldr	r3, [pc, #336]	@ (8001270 <main+0x1e8>)
 8001120:	2200      	movs	r2, #0
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 8001124:	4b52      	ldr	r3, [pc, #328]	@ (8001270 <main+0x1e8>)
 8001126:	2200      	movs	r2, #0
 8001128:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 800112a:	4b51      	ldr	r3, [pc, #324]	@ (8001270 <main+0x1e8>)
 800112c:	2200      	movs	r2, #0
 800112e:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 8001130:	4b4f      	ldr	r3, [pc, #316]	@ (8001270 <main+0x1e8>)
 8001132:	2200      	movs	r2, #0
 8001134:	635a      	str	r2, [r3, #52]	@ 0x34
//  	{
//  		Error_Handler();
//  	}
  	statInfo_t_VL53L0X status_info;

  	if(initVL53L0X(1, &hi2c1) != 1)// TODO: clean up boolean return values in vl53l0x layer
 8001136:	4b53      	ldr	r3, [pc, #332]	@ (8001284 <main+0x1fc>)
 8001138:	0019      	movs	r1, r3
 800113a:	2001      	movs	r0, #1
 800113c:	f001 fdfe 	bl	8002d3c <initVL53L0X>
 8001140:	0003      	movs	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d001      	beq.n	800114a <main+0xc2>
  	{
  		Error_Handler();
 8001146:	f000 fc77 	bl	8001a38 <Error_Handler>
  	}

  	// Configure the sensor for high accuracy and speed in 20 cm.
  	if(setSignalRateLimit(200) != 1)
 800114a:	4b4f      	ldr	r3, [pc, #316]	@ (8001288 <main+0x200>)
 800114c:	1c18      	adds	r0, r3, #0
 800114e:	f002 f873 	bl	8003238 <setSignalRateLimit>
 8001152:	0003      	movs	r3, r0
 8001154:	2b01      	cmp	r3, #1
 8001156:	d001      	beq.n	800115c <main+0xd4>
  	{
  		Error_Handler();
 8001158:	f000 fc6e 	bl	8001a38 <Error_Handler>
  	}
  	if(setVcselPulsePeriod(VcselPeriodPreRange, 10) != 1)
 800115c:	210a      	movs	r1, #10
 800115e:	2000      	movs	r0, #0
 8001160:	f002 f9ec 	bl	800353c <setVcselPulsePeriod>
 8001164:	0003      	movs	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	d001      	beq.n	800116e <main+0xe6>
  	{
  		Error_Handler();
 800116a:	f000 fc65 	bl	8001a38 <Error_Handler>
  	}
  	if(setVcselPulsePeriod(VcselPeriodFinalRange, 14) != 1)
 800116e:	210e      	movs	r1, #14
 8001170:	2001      	movs	r0, #1
 8001172:	f002 f9e3 	bl	800353c <setVcselPulsePeriod>
 8001176:	0003      	movs	r3, r0
 8001178:	2b01      	cmp	r3, #1
 800117a:	d001      	beq.n	8001180 <main+0xf8>
  	{
  		Error_Handler();
 800117c:	f000 fc5c 	bl	8001a38 <Error_Handler>
  	}
  	if(setMeasurementTimingBudget(300 * 1000UL) != 1)
 8001180:	4b42      	ldr	r3, [pc, #264]	@ (800128c <main+0x204>)
 8001182:	0018      	movs	r0, r3
 8001184:	f002 f886 	bl	8003294 <setMeasurementTimingBudget>
 8001188:	0003      	movs	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	d001      	beq.n	8001192 <main+0x10a>
  	{
  		Error_Handler();
 800118e:	f000 fc53 	bl	8001a38 <Error_Handler>
  //bno055_queue_transaction();

  while (1)
  {

	  if(modbus_rx())
 8001192:	f001 f84d 	bl	8002230 <modbus_rx>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d05a      	beq.n	8001250 <main+0x1c8>
	  {
		  int8_t status = 0;
 800119a:	230f      	movs	r3, #15
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 80011a2:	2000      	movs	r0, #0
 80011a4:	f000 fd2c 	bl	8001c00 <get_rx_buffer>
 80011a8:	0003      	movs	r3, r0
 80011aa:	001a      	movs	r2, r3
 80011ac:	4b38      	ldr	r3, [pc, #224]	@ (8001290 <main+0x208>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d11e      	bne.n	80011f2 <main+0x16a>
		  {
			  switch(get_rx_buffer(1))
 80011b4:	2001      	movs	r0, #1
 80011b6:	f000 fd23 	bl	8001c00 <get_rx_buffer>
 80011ba:	0003      	movs	r3, r0
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d002      	beq.n	80011c6 <main+0x13e>
 80011c0:	2b10      	cmp	r3, #16
 80011c2:	d007      	beq.n	80011d4 <main+0x14c>
 80011c4:	e00d      	b.n	80011e2 <main+0x15a>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 80011c6:	230f      	movs	r3, #15
 80011c8:	18fc      	adds	r4, r7, r3
 80011ca:	f000 fd4b 	bl	8001c64 <return_holding_registers>
 80011ce:	0003      	movs	r3, r0
 80011d0:	7023      	strb	r3, [r4, #0]
					  break;
 80011d2:	e037      	b.n	8001244 <main+0x1bc>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 80011d4:	230f      	movs	r3, #15
 80011d6:	18fc      	adds	r4, r7, r3
 80011d8:	f000 fe66 	bl	8001ea8 <edit_multiple_registers>
 80011dc:	0003      	movs	r3, r0
 80011de:	7023      	strb	r3, [r4, #0]
					  break;
 80011e0:	e030      	b.n	8001244 <main+0x1bc>
				  }
				  default:
				  {
					  status = modbus_exception(MB_ILLEGAL_FUNCTION);
 80011e2:	230f      	movs	r3, #15
 80011e4:	18fc      	adds	r4, r7, r3
 80011e6:	2004      	movs	r0, #4
 80011e8:	f000 ff54 	bl	8002094 <modbus_exception>
 80011ec:	0003      	movs	r3, r0
 80011ee:	7023      	strb	r3, [r4, #0]
					  break;
 80011f0:	e028      	b.n	8001244 <main+0x1bc>
			  {
				  // log error in a queue
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 fd04 	bl	8001c00 <get_rx_buffer>
 80011f8:	0003      	movs	r3, r0
 80011fa:	2bff      	cmp	r3, #255	@ 0xff
 80011fc:	d122      	bne.n	8001244 <main+0x1bc>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 80011fe:	2001      	movs	r0, #1
 8001200:	f000 fcfe 	bl	8001c00 <get_rx_buffer>
 8001204:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8001206:	2b03      	cmp	r3, #3
 8001208:	d11c      	bne.n	8001244 <main+0x1bc>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800120a:	2002      	movs	r0, #2
 800120c:	f000 fcf8 	bl	8001c00 <get_rx_buffer>
 8001210:	0003      	movs	r3, r0
 8001212:	021c      	lsls	r4, r3, #8
 8001214:	2003      	movs	r0, #3
 8001216:	f000 fcf3 	bl	8001c00 <get_rx_buffer>
 800121a:	0003      	movs	r3, r0
 800121c:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 800121e:	d111      	bne.n	8001244 <main+0x1bc>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 8001220:	2004      	movs	r0, #4
 8001222:	f000 fced 	bl	8001c00 <get_rx_buffer>
 8001226:	0003      	movs	r3, r0
 8001228:	021c      	lsls	r4, r3, #8
 800122a:	2005      	movs	r0, #5
 800122c:	f000 fce8 	bl	8001c00 <get_rx_buffer>
 8001230:	0003      	movs	r3, r0
 8001232:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8001234:	2b01      	cmp	r3, #1
 8001236:	d105      	bne.n	8001244 <main+0x1bc>
		  {

			  status = return_holding_registers();
 8001238:	230f      	movs	r3, #15
 800123a:	18fc      	adds	r4, r7, r3
 800123c:	f000 fd12 	bl	8001c64 <return_holding_registers>
 8001240:	0003      	movs	r3, r0
 8001242:	7023      	strb	r3, [r4, #0]
			  if(status != 0)
			  {
				  // log error in a queue
			  }
		  }
		  status = modbus_set_rx();
 8001244:	230f      	movs	r3, #15
 8001246:	18fc      	adds	r4, r7, r3
 8001248:	f001 f808 	bl	800225c <modbus_set_rx>
 800124c:	0003      	movs	r3, r0
 800124e:	7023      	strb	r3, [r4, #0]
			  //Error_Handler();
		  }
	  }

	  // Collect Lazer Distance measurements
	  holding_register_database[LASER_DISTANCE] = readRangeSingleMillimeters(&status_info);
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	0018      	movs	r0, r3
 8001254:	f002 fb7c 	bl	8003950 <readRangeSingleMillimeters>
 8001258:	0003      	movs	r3, r0
 800125a:	0019      	movs	r1, r3
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <main+0x208>)
 800125e:	2244      	movs	r2, #68	@ 0x44
 8001260:	5299      	strh	r1, [r3, r2]
	  if(modbus_rx())
 8001262:	e796      	b.n	8001192 <main+0x10a>
 8001264:	200003cc 	.word	0x200003cc
 8001268:	200003d4 	.word	0x200003d4
 800126c:	50000800 	.word	0x50000800
 8001270:	20000394 	.word	0x20000394
 8001274:	3dcccccd 	.word	0x3dcccccd
 8001278:	40a00000 	.word	0x40a00000
 800127c:	42c80000 	.word	0x42c80000
 8001280:	42200000 	.word	0x42200000
 8001284:	20000154 	.word	0x20000154
 8001288:	43480000 	.word	0x43480000
 800128c:	000493e0 	.word	0x000493e0
 8001290:	20000000 	.word	0x20000000

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b08f      	sub	sp, #60	@ 0x3c
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	2418      	movs	r4, #24
 800129c:	193b      	adds	r3, r7, r4
 800129e:	0018      	movs	r0, r3
 80012a0:	2320      	movs	r3, #32
 80012a2:	001a      	movs	r2, r3
 80012a4:	2100      	movs	r1, #0
 80012a6:	f009 f893 	bl	800a3d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	0018      	movs	r0, r3
 80012ae:	2314      	movs	r3, #20
 80012b0:	001a      	movs	r2, r3
 80012b2:	2100      	movs	r1, #0
 80012b4:	f009 f88c 	bl	800a3d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	2280      	movs	r2, #128	@ 0x80
 80012c2:	0252      	lsls	r2, r2, #9
 80012c4:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	0018      	movs	r0, r3
 80012ca:	f005 ff7b 	bl	80071c4 <HAL_RCC_OscConfig>
 80012ce:	1e03      	subs	r3, r0, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80012d2:	f000 fbb1 	bl	8001a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2201      	movs	r2, #1
 80012e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV16;
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	22e0      	movs	r2, #224	@ 0xe0
 80012f2:	01d2      	lsls	r2, r2, #7
 80012f4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2100      	movs	r1, #0
 80012fa:	0018      	movs	r0, r3
 80012fc:	f006 f988 	bl	8007610 <HAL_RCC_ClockConfig>
 8001300:	1e03      	subs	r3, r0, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001304:	f000 fb98 	bl	8001a38 <Error_Handler>
  }
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b00f      	add	sp, #60	@ 0x3c
 800130e:	bd90      	pop	{r4, r7, pc}

08001310 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001316:	003b      	movs	r3, r7
 8001318:	0018      	movs	r0, r3
 800131a:	230c      	movs	r3, #12
 800131c:	001a      	movs	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	f009 f856 	bl	800a3d0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001324:	4b74      	ldr	r3, [pc, #464]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001326:	4a75      	ldr	r2, [pc, #468]	@ (80014fc <MX_ADC1_Init+0x1ec>)
 8001328:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800132a:	4b73      	ldr	r3, [pc, #460]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 800132c:	22c0      	movs	r2, #192	@ 0xc0
 800132e:	0612      	lsls	r2, r2, #24
 8001330:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001332:	4b71      	ldr	r3, [pc, #452]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001338:	4b6f      	ldr	r3, [pc, #444]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800133e:	4b6e      	ldr	r3, [pc, #440]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001340:	2280      	movs	r2, #128	@ 0x80
 8001342:	0612      	lsls	r2, r2, #24
 8001344:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001346:	4b6c      	ldr	r3, [pc, #432]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001348:	2208      	movs	r2, #8
 800134a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800134c:	4b6a      	ldr	r3, [pc, #424]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 800134e:	2200      	movs	r2, #0
 8001350:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001352:	4b69      	ldr	r3, [pc, #420]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001354:	2200      	movs	r2, #0
 8001356:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001358:	4b67      	ldr	r3, [pc, #412]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 800135a:	2200      	movs	r2, #0
 800135c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 800135e:	4b66      	ldr	r3, [pc, #408]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001360:	2200      	movs	r2, #0
 8001362:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001364:	4b64      	ldr	r3, [pc, #400]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001366:	2220      	movs	r2, #32
 8001368:	2100      	movs	r1, #0
 800136a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800136c:	4b62      	ldr	r3, [pc, #392]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001372:	4b61      	ldr	r3, [pc, #388]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001374:	2200      	movs	r2, #0
 8001376:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001378:	4b5f      	ldr	r3, [pc, #380]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 800137a:	222c      	movs	r2, #44	@ 0x2c
 800137c:	2101      	movs	r1, #1
 800137e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001380:	4b5d      	ldr	r3, [pc, #372]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001382:	2200      	movs	r2, #0
 8001384:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001386:	4b5c      	ldr	r3, [pc, #368]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001388:	2200      	movs	r2, #0
 800138a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800138c:	4b5a      	ldr	r3, [pc, #360]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 800138e:	223c      	movs	r2, #60	@ 0x3c
 8001390:	2100      	movs	r1, #0
 8001392:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001394:	4b58      	ldr	r3, [pc, #352]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001396:	2200      	movs	r2, #0
 8001398:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800139a:	4b57      	ldr	r3, [pc, #348]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 800139c:	0018      	movs	r0, r3
 800139e:	f002 ff6b 	bl	8004278 <HAL_ADC_Init>
 80013a2:	1e03      	subs	r3, r0, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80013a6:	f000 fb47 	bl	8001a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013aa:	003b      	movs	r3, r7
 80013ac:	4a54      	ldr	r2, [pc, #336]	@ (8001500 <MX_ADC1_Init+0x1f0>)
 80013ae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80013b0:	003b      	movs	r3, r7
 80013b2:	2201      	movs	r2, #1
 80013b4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b6:	003a      	movs	r2, r7
 80013b8:	4b4f      	ldr	r3, [pc, #316]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 80013ba:	0011      	movs	r1, r2
 80013bc:	0018      	movs	r0, r3
 80013be:	f003 f99f 	bl	8004700 <HAL_ADC_ConfigChannel>
 80013c2:	1e03      	subs	r3, r0, #0
 80013c4:	d001      	beq.n	80013ca <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80013c6:	f000 fb37 	bl	8001a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80013ca:	003b      	movs	r3, r7
 80013cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001504 <MX_ADC1_Init+0x1f4>)
 80013ce:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d0:	003a      	movs	r2, r7
 80013d2:	4b49      	ldr	r3, [pc, #292]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 80013d4:	0011      	movs	r1, r2
 80013d6:	0018      	movs	r0, r3
 80013d8:	f003 f992 	bl	8004700 <HAL_ADC_ConfigChannel>
 80013dc:	1e03      	subs	r3, r0, #0
 80013de:	d001      	beq.n	80013e4 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80013e0:	f000 fb2a 	bl	8001a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013e4:	003b      	movs	r3, r7
 80013e6:	4a48      	ldr	r2, [pc, #288]	@ (8001508 <MX_ADC1_Init+0x1f8>)
 80013e8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ea:	003a      	movs	r2, r7
 80013ec:	4b42      	ldr	r3, [pc, #264]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 80013ee:	0011      	movs	r1, r2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f003 f985 	bl	8004700 <HAL_ADC_ConfigChannel>
 80013f6:	1e03      	subs	r3, r0, #0
 80013f8:	d001      	beq.n	80013fe <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80013fa:	f000 fb1d 	bl	8001a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013fe:	003b      	movs	r3, r7
 8001400:	4a42      	ldr	r2, [pc, #264]	@ (800150c <MX_ADC1_Init+0x1fc>)
 8001402:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001404:	003a      	movs	r2, r7
 8001406:	4b3c      	ldr	r3, [pc, #240]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001408:	0011      	movs	r1, r2
 800140a:	0018      	movs	r0, r3
 800140c:	f003 f978 	bl	8004700 <HAL_ADC_ConfigChannel>
 8001410:	1e03      	subs	r3, r0, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001414:	f000 fb10 	bl	8001a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001418:	003b      	movs	r3, r7
 800141a:	4a3d      	ldr	r2, [pc, #244]	@ (8001510 <MX_ADC1_Init+0x200>)
 800141c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800141e:	003a      	movs	r2, r7
 8001420:	4b35      	ldr	r3, [pc, #212]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f003 f96b 	bl	8004700 <HAL_ADC_ConfigChannel>
 800142a:	1e03      	subs	r3, r0, #0
 800142c:	d001      	beq.n	8001432 <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 800142e:	f000 fb03 	bl	8001a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8001432:	003b      	movs	r3, r7
 8001434:	4a37      	ldr	r2, [pc, #220]	@ (8001514 <MX_ADC1_Init+0x204>)
 8001436:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001438:	003a      	movs	r2, r7
 800143a:	4b2f      	ldr	r3, [pc, #188]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 800143c:	0011      	movs	r1, r2
 800143e:	0018      	movs	r0, r3
 8001440:	f003 f95e 	bl	8004700 <HAL_ADC_ConfigChannel>
 8001444:	1e03      	subs	r3, r0, #0
 8001446:	d001      	beq.n	800144c <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8001448:	f000 faf6 	bl	8001a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_20;
 800144c:	003b      	movs	r3, r7
 800144e:	4a32      	ldr	r2, [pc, #200]	@ (8001518 <MX_ADC1_Init+0x208>)
 8001450:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001452:	003a      	movs	r2, r7
 8001454:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001456:	0011      	movs	r1, r2
 8001458:	0018      	movs	r0, r3
 800145a:	f003 f951 	bl	8004700 <HAL_ADC_ConfigChannel>
 800145e:	1e03      	subs	r3, r0, #0
 8001460:	d001      	beq.n	8001466 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 8001462:	f000 fae9 	bl	8001a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_21;
 8001466:	003b      	movs	r3, r7
 8001468:	4a2c      	ldr	r2, [pc, #176]	@ (800151c <MX_ADC1_Init+0x20c>)
 800146a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146c:	003a      	movs	r2, r7
 800146e:	4b22      	ldr	r3, [pc, #136]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 8001470:	0011      	movs	r1, r2
 8001472:	0018      	movs	r0, r3
 8001474:	f003 f944 	bl	8004700 <HAL_ADC_ConfigChannel>
 8001478:	1e03      	subs	r3, r0, #0
 800147a:	d001      	beq.n	8001480 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 800147c:	f000 fadc 	bl	8001a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_22;
 8001480:	003b      	movs	r3, r7
 8001482:	4a27      	ldr	r2, [pc, #156]	@ (8001520 <MX_ADC1_Init+0x210>)
 8001484:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001486:	003a      	movs	r2, r7
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <MX_ADC1_Init+0x1e8>)
 800148a:	0011      	movs	r1, r2
 800148c:	0018      	movs	r0, r3
 800148e:	f003 f937 	bl	8004700 <HAL_ADC_ConfigChannel>
 8001492:	1e03      	subs	r3, r0, #0
 8001494:	d001      	beq.n	800149a <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8001496:	f000 facf 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  LL_ADC_REG_SetSequencerConfigurable(ADC1, LL_ADC_REG_SEQ_FIXED);
 800149a:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <MX_ADC1_Init+0x1ec>)
 800149c:	2100      	movs	r1, #0
 800149e:	0018      	movs	r0, r3
 80014a0:	f7ff fd98 	bl	8000fd4 <LL_ADC_REG_SetSequencerConfigurable>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 80014a4:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <MX_ADC1_Init+0x1ec>)
 80014a6:	2100      	movs	r1, #0
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff fda7 	bl	8000ffc <LL_ADC_REG_SetSequencerScanDirection>

  LL_ADC_REG_SetSequencerChannels(ADC1, LL_ADC_CHANNEL_5 | LL_ADC_CHANNEL_6 | LL_ADC_CHANNEL_7 |
 80014ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001524 <MX_ADC1_Init+0x214>)
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <MX_ADC1_Init+0x1ec>)
 80014b2:	0011      	movs	r1, r2
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff fdb3 	bl	8001020 <LL_ADC_REG_SetSequencerChannels>
		  LL_ADC_CHANNEL_17 | LL_ADC_CHANNEL_18 | LL_ADC_CHANNEL_20 | LL_ADC_CHANNEL_21 | LL_ADC_CHANNEL_22);
  uint32_t setup_adc_time = HAL_GetTick();
 80014ba:	f002 fd67 	bl	8003f8c <HAL_GetTick>
 80014be:	0003      	movs	r3, r0
 80014c0:	60fb      	str	r3, [r7, #12]

  while(LL_ADC_IsActiveFlag_CCRDY(ADC1) && HAL_GetTick() - setup_adc_time <= 100);
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <MX_ADC1_Init+0x1ec>)
 80014c6:	0018      	movs	r0, r3
 80014c8:	f7ff fdb8 	bl	800103c <LL_ADC_IsActiveFlag_CCRDY>
 80014cc:	1e03      	subs	r3, r0, #0
 80014ce:	d006      	beq.n	80014de <MX_ADC1_Init+0x1ce>
 80014d0:	f002 fd5c 	bl	8003f8c <HAL_GetTick>
 80014d4:	0002      	movs	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	@ 0x64
 80014dc:	d9f2      	bls.n	80014c4 <MX_ADC1_Init+0x1b4>
  if(!LL_ADC_IsActiveFlag_CCRDY(ADC1))
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <MX_ADC1_Init+0x1ec>)
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fdab 	bl	800103c <LL_ADC_IsActiveFlag_CCRDY>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d101      	bne.n	80014ee <MX_ADC1_Init+0x1de>
  {
	  Error_Handler();
 80014ea:	f000 faa5 	bl	8001a38 <Error_Handler>
  }
//  LL_ADC_SetCommonPathInternalCh(ADC1_COMMON, LL_ADC_PATH_INTERNAL_TEMPSENSOR);
  /* USER CODE END ADC1_Init 2 */

}
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b004      	add	sp, #16
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	20000094 	.word	0x20000094
 80014fc:	40012400 	.word	0x40012400
 8001500:	14000020 	.word	0x14000020
 8001504:	18000040 	.word	0x18000040
 8001508:	1c000080 	.word	0x1c000080
 800150c:	a4000200 	.word	0xa4000200
 8001510:	44020000 	.word	0x44020000
 8001514:	48040000 	.word	0x48040000
 8001518:	50100000 	.word	0x50100000
 800151c:	54200000 	.word	0x54200000
 8001520:	58400000 	.word	0x58400000
 8001524:	5c7600e0 	.word	0x5c7600e0

08001528 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <MX_I2C1_Init+0x74>)
 800152e:	4a1c      	ldr	r2, [pc, #112]	@ (80015a0 <MX_I2C1_Init+0x78>)
 8001530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 8001532:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <MX_I2C1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001538:	4b18      	ldr	r3, [pc, #96]	@ (800159c <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153e:	4b17      	ldr	r3, [pc, #92]	@ (800159c <MX_I2C1_Init+0x74>)
 8001540:	2201      	movs	r2, #1
 8001542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001544:	4b15      	ldr	r3, [pc, #84]	@ (800159c <MX_I2C1_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800154a:	4b14      	ldr	r3, [pc, #80]	@ (800159c <MX_I2C1_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <MX_I2C1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <MX_I2C1_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <MX_I2C1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <MX_I2C1_Init+0x74>)
 8001564:	0018      	movs	r0, r3
 8001566:	f004 f957 	bl	8005818 <HAL_I2C_Init>
 800156a:	1e03      	subs	r3, r0, #0
 800156c:	d001      	beq.n	8001572 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800156e:	f000 fa63 	bl	8001a38 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <MX_I2C1_Init+0x74>)
 8001574:	2100      	movs	r1, #0
 8001576:	0018      	movs	r0, r3
 8001578:	f005 fd8c 	bl	8007094 <HAL_I2CEx_ConfigAnalogFilter>
 800157c:	1e03      	subs	r3, r0, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001580:	f000 fa5a 	bl	8001a38 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <MX_I2C1_Init+0x74>)
 8001586:	2100      	movs	r1, #0
 8001588:	0018      	movs	r0, r3
 800158a:	f005 fdcf 	bl	800712c <HAL_I2CEx_ConfigDigitalFilter>
 800158e:	1e03      	subs	r3, r0, #0
 8001590:	d001      	beq.n	8001596 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001592:	f000 fa51 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001596:	46c0      	nop			@ (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000154 	.word	0x20000154
 80015a0:	40005400 	.word	0x40005400

080015a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <MX_SPI1_Init+0x74>)
 80015aa:	4a1c      	ldr	r2, [pc, #112]	@ (800161c <MX_SPI1_Init+0x78>)
 80015ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <MX_SPI1_Init+0x74>)
 80015b0:	2282      	movs	r2, #130	@ 0x82
 80015b2:	0052      	lsls	r2, r2, #1
 80015b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015b6:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <MX_SPI1_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015bc:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <MX_SPI1_Init+0x74>)
 80015be:	22e0      	movs	r2, #224	@ 0xe0
 80015c0:	00d2      	lsls	r2, r2, #3
 80015c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_SPI1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <MX_SPI1_Init+0x74>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <MX_SPI1_Init+0x74>)
 80015d2:	2280      	movs	r2, #128	@ 0x80
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <MX_SPI1_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <MX_SPI1_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <MX_SPI1_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <MX_SPI1_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <MX_SPI1_Init+0x74>)
 80015f2:	2207      	movs	r2, #7
 80015f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <MX_SPI1_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <MX_SPI1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001602:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <MX_SPI1_Init+0x74>)
 8001604:	0018      	movs	r0, r3
 8001606:	f006 faa5 	bl	8007b54 <HAL_SPI_Init>
 800160a:	1e03      	subs	r3, r0, #0
 800160c:	d001      	beq.n	8001612 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800160e:	f000 fa13 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200001a8 	.word	0x200001a8
 800161c:	40013000 	.word	0x40013000

08001620 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b098      	sub	sp, #96	@ 0x60
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001626:	2354      	movs	r3, #84	@ 0x54
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	0018      	movs	r0, r3
 800162c:	230c      	movs	r3, #12
 800162e:	001a      	movs	r2, r3
 8001630:	2100      	movs	r1, #0
 8001632:	f008 fecd 	bl	800a3d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001636:	2338      	movs	r3, #56	@ 0x38
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	0018      	movs	r0, r3
 800163c:	231c      	movs	r3, #28
 800163e:	001a      	movs	r2, r3
 8001640:	2100      	movs	r1, #0
 8001642:	f008 fec5 	bl	800a3d0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	0018      	movs	r0, r3
 800164a:	2334      	movs	r3, #52	@ 0x34
 800164c:	001a      	movs	r2, r3
 800164e:	2100      	movs	r1, #0
 8001650:	f008 febe 	bl	800a3d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001654:	4b45      	ldr	r3, [pc, #276]	@ (800176c <MX_TIM1_Init+0x14c>)
 8001656:	4a46      	ldr	r2, [pc, #280]	@ (8001770 <MX_TIM1_Init+0x150>)
 8001658:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 800165a:	4b44      	ldr	r3, [pc, #272]	@ (800176c <MX_TIM1_Init+0x14c>)
 800165c:	2209      	movs	r2, #9
 800165e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001660:	4b42      	ldr	r3, [pc, #264]	@ (800176c <MX_TIM1_Init+0x14c>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001666:	4b41      	ldr	r3, [pc, #260]	@ (800176c <MX_TIM1_Init+0x14c>)
 8001668:	2263      	movs	r2, #99	@ 0x63
 800166a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800166c:	4b3f      	ldr	r3, [pc, #252]	@ (800176c <MX_TIM1_Init+0x14c>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001672:	4b3e      	ldr	r3, [pc, #248]	@ (800176c <MX_TIM1_Init+0x14c>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001678:	4b3c      	ldr	r3, [pc, #240]	@ (800176c <MX_TIM1_Init+0x14c>)
 800167a:	2280      	movs	r2, #128	@ 0x80
 800167c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800167e:	4b3b      	ldr	r3, [pc, #236]	@ (800176c <MX_TIM1_Init+0x14c>)
 8001680:	0018      	movs	r0, r3
 8001682:	f006 fb77 	bl	8007d74 <HAL_TIM_PWM_Init>
 8001686:	1e03      	subs	r3, r0, #0
 8001688:	d001      	beq.n	800168e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800168a:	f000 f9d5 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2154      	movs	r1, #84	@ 0x54
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	187b      	adds	r3, r7, r1
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016a2:	187a      	adds	r2, r7, r1
 80016a4:	4b31      	ldr	r3, [pc, #196]	@ (800176c <MX_TIM1_Init+0x14c>)
 80016a6:	0011      	movs	r1, r2
 80016a8:	0018      	movs	r0, r3
 80016aa:	f006 ffdb 	bl	8008664 <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016b2:	f000 f9c1 	bl	8001a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b6:	2138      	movs	r1, #56	@ 0x38
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	2260      	movs	r2, #96	@ 0x60
 80016bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	2200      	movs	r2, #0
 80016ce:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2200      	movs	r2, #0
 80016da:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e2:	1879      	adds	r1, r7, r1
 80016e4:	4b21      	ldr	r3, [pc, #132]	@ (800176c <MX_TIM1_Init+0x14c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	0018      	movs	r0, r3
 80016ea:	f006 fb9b 	bl	8007e24 <HAL_TIM_PWM_ConfigChannel>
 80016ee:	1e03      	subs	r3, r0, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80016f2:	f000 f9a1 	bl	8001a38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	2280      	movs	r2, #128	@ 0x80
 8001718:	0192      	lsls	r2, r2, #6
 800171a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2280      	movs	r2, #128	@ 0x80
 8001732:	0492      	lsls	r2, r2, #18
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2200      	movs	r2, #0
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2200      	movs	r2, #0
 8001746:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001748:	1d3a      	adds	r2, r7, #4
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <MX_TIM1_Init+0x14c>)
 800174c:	0011      	movs	r1, r2
 800174e:	0018      	movs	r0, r3
 8001750:	f006 fff0 	bl	8008734 <HAL_TIMEx_ConfigBreakDeadTime>
 8001754:	1e03      	subs	r3, r0, #0
 8001756:	d001      	beq.n	800175c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001758:	f000 f96e 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800175c:	4b03      	ldr	r3, [pc, #12]	@ (800176c <MX_TIM1_Init+0x14c>)
 800175e:	0018      	movs	r0, r3
 8001760:	f001 f848 	bl	80027f4 <HAL_TIM_MspPostInit>

}
 8001764:	46c0      	nop			@ (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b018      	add	sp, #96	@ 0x60
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000020c 	.word	0x2000020c
 8001770:	40012c00 	.word	0x40012c00

08001774 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001778:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <MX_TIM14_Init+0x40>)
 800177a:	4a0f      	ldr	r2, [pc, #60]	@ (80017b8 <MX_TIM14_Init+0x44>)
 800177c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 800177e:	4b0d      	ldr	r3, [pc, #52]	@ (80017b4 <MX_TIM14_Init+0x40>)
 8001780:	220b      	movs	r2, #11
 8001782:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001784:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <MX_TIM14_Init+0x40>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <MX_TIM14_Init+0x40>)
 800178c:	4a0b      	ldr	r2, [pc, #44]	@ (80017bc <MX_TIM14_Init+0x48>)
 800178e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <MX_TIM14_Init+0x40>)
 8001792:	2200      	movs	r2, #0
 8001794:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001796:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <MX_TIM14_Init+0x40>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <MX_TIM14_Init+0x40>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f006 fa90 	bl	8007cc4 <HAL_TIM_Base_Init>
 80017a4:	1e03      	subs	r3, r0, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80017a8:	f000 f946 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80017ac:	46c0      	nop			@ (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			@ (mov r8, r8)
 80017b4:	20000258 	.word	0x20000258
 80017b8:	40002000 	.word	0x40002000
 80017bc:	0000ffff 	.word	0x0000ffff

080017c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 80017c6:	4a25      	ldr	r2, [pc, #148]	@ (800185c <MX_USART1_UART_Init+0x9c>)
 80017c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017ca:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 80017cc:	2296      	movs	r2, #150	@ 0x96
 80017ce:	0192      	lsls	r2, r2, #6
 80017d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017de:	4b1e      	ldr	r3, [pc, #120]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f6:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017fc:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 8001804:	2200      	movs	r2, #0
 8001806:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001808:	4813      	ldr	r0, [pc, #76]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 800180a:	2300      	movs	r3, #0
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	f008 fbd2 	bl	8009fb8 <HAL_RS485Ex_Init>
 8001814:	1e03      	subs	r3, r0, #0
 8001816:	d001      	beq.n	800181c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001818:	f000 f90e 	bl	8001a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800181c:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 800181e:	2100      	movs	r1, #0
 8001820:	0018      	movs	r0, r3
 8001822:	f008 fc8d 	bl	800a140 <HAL_UARTEx_SetTxFifoThreshold>
 8001826:	1e03      	subs	r3, r0, #0
 8001828:	d001      	beq.n	800182e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800182a:	f000 f905 	bl	8001a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800182e:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 8001830:	2100      	movs	r1, #0
 8001832:	0018      	movs	r0, r3
 8001834:	f008 fcc4 	bl	800a1c0 <HAL_UARTEx_SetRxFifoThreshold>
 8001838:	1e03      	subs	r3, r0, #0
 800183a:	d001      	beq.n	8001840 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 800183c:	f000 f8fc 	bl	8001a38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <MX_USART1_UART_Init+0x98>)
 8001842:	0018      	movs	r0, r3
 8001844:	f008 fc42 	bl	800a0cc <HAL_UARTEx_DisableFifoMode>
 8001848:	1e03      	subs	r3, r0, #0
 800184a:	d001      	beq.n	8001850 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 800184c:	f000 f8f4 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001850:	46c0      	nop			@ (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	200002a4 	.word	0x200002a4
 800185c:	40013800 	.word	0x40013800

08001860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001866:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <MX_DMA_Init+0x48>)
 8001868:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800186a:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <MX_DMA_Init+0x48>)
 800186c:	2101      	movs	r1, #1
 800186e:	430a      	orrs	r2, r1
 8001870:	639a      	str	r2, [r3, #56]	@ 0x38
 8001872:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <MX_DMA_Init+0x48>)
 8001874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001876:	2201      	movs	r2, #1
 8001878:	4013      	ands	r3, r2
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	2009      	movs	r0, #9
 8001884:	f003 faca 	bl	8004e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001888:	2009      	movs	r0, #9
 800188a:	f003 fadc 	bl	8004e46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	200a      	movs	r0, #10
 8001894:	f003 fac2 	bl	8004e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001898:	200a      	movs	r0, #10
 800189a:	f003 fad4 	bl	8004e46 <HAL_NVIC_EnableIRQ>

}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	40021000 	.word	0x40021000

080018ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b08b      	sub	sp, #44	@ 0x2c
 80018b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	2414      	movs	r4, #20
 80018b4:	193b      	adds	r3, r7, r4
 80018b6:	0018      	movs	r0, r3
 80018b8:	2314      	movs	r3, #20
 80018ba:	001a      	movs	r2, r3
 80018bc:	2100      	movs	r1, #0
 80018be:	f008 fd87 	bl	800a3d0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	4b58      	ldr	r3, [pc, #352]	@ (8001a24 <MX_GPIO_Init+0x178>)
 80018c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018c6:	4b57      	ldr	r3, [pc, #348]	@ (8001a24 <MX_GPIO_Init+0x178>)
 80018c8:	2104      	movs	r1, #4
 80018ca:	430a      	orrs	r2, r1
 80018cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80018ce:	4b55      	ldr	r3, [pc, #340]	@ (8001a24 <MX_GPIO_Init+0x178>)
 80018d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018d2:	2204      	movs	r2, #4
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018da:	4b52      	ldr	r3, [pc, #328]	@ (8001a24 <MX_GPIO_Init+0x178>)
 80018dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018de:	4b51      	ldr	r3, [pc, #324]	@ (8001a24 <MX_GPIO_Init+0x178>)
 80018e0:	2120      	movs	r1, #32
 80018e2:	430a      	orrs	r2, r1
 80018e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80018e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001a24 <MX_GPIO_Init+0x178>)
 80018e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ea:	2220      	movs	r2, #32
 80018ec:	4013      	ands	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001a24 <MX_GPIO_Init+0x178>)
 80018f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001a24 <MX_GPIO_Init+0x178>)
 80018f8:	2101      	movs	r1, #1
 80018fa:	430a      	orrs	r2, r1
 80018fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80018fe:	4b49      	ldr	r3, [pc, #292]	@ (8001a24 <MX_GPIO_Init+0x178>)
 8001900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001902:	2201      	movs	r2, #1
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	4b46      	ldr	r3, [pc, #280]	@ (8001a24 <MX_GPIO_Init+0x178>)
 800190c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800190e:	4b45      	ldr	r3, [pc, #276]	@ (8001a24 <MX_GPIO_Init+0x178>)
 8001910:	2102      	movs	r1, #2
 8001912:	430a      	orrs	r2, r1
 8001914:	635a      	str	r2, [r3, #52]	@ 0x34
 8001916:	4b43      	ldr	r3, [pc, #268]	@ (8001a24 <MX_GPIO_Init+0x178>)
 8001918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800191a:	2202      	movs	r2, #2
 800191c:	4013      	ands	r3, r2
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001922:	4b40      	ldr	r3, [pc, #256]	@ (8001a24 <MX_GPIO_Init+0x178>)
 8001924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001926:	4b3f      	ldr	r3, [pc, #252]	@ (8001a24 <MX_GPIO_Init+0x178>)
 8001928:	2108      	movs	r1, #8
 800192a:	430a      	orrs	r2, r1
 800192c:	635a      	str	r2, [r3, #52]	@ 0x34
 800192e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a24 <MX_GPIO_Init+0x178>)
 8001930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001932:	2208      	movs	r2, #8
 8001934:	4013      	ands	r3, r2
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_C_EN_GPIO_Port, Actuator_C_EN_Pin, GPIO_PIN_RESET);
 800193a:	2380      	movs	r3, #128	@ 0x80
 800193c:	0059      	lsls	r1, r3, #1
 800193e:	23a0      	movs	r3, #160	@ 0xa0
 8001940:	05db      	lsls	r3, r3, #23
 8001942:	2200      	movs	r2, #0
 8001944:	0018      	movs	r0, r3
 8001946:	f003 ff49 	bl	80057dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Actuator_A_EN_Pin|Actuator_B_EN_Pin, GPIO_PIN_RESET);
 800194a:	4b37      	ldr	r3, [pc, #220]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 800194c:	2200      	movs	r2, #0
 800194e:	21c0      	movs	r1, #192	@ 0xc0
 8001950:	0018      	movs	r0, r3
 8001952:	f003 ff43 	bl	80057dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Actuator_CS_GPIO_Port, Actuator_CS_Pin, GPIO_PIN_SET);
 8001956:	4b35      	ldr	r3, [pc, #212]	@ (8001a2c <MX_GPIO_Init+0x180>)
 8001958:	2201      	movs	r2, #1
 800195a:	2101      	movs	r1, #1
 800195c:	0018      	movs	r0, r3
 800195e:	f003 ff3d 	bl	80057dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_A_Pin;
 8001962:	193b      	adds	r3, r7, r4
 8001964:	2280      	movs	r2, #128	@ 0x80
 8001966:	0192      	lsls	r2, r2, #6
 8001968:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800196a:	193b      	adds	r3, r7, r4
 800196c:	4a30      	ldr	r2, [pc, #192]	@ (8001a30 <MX_GPIO_Init+0x184>)
 800196e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	193b      	adds	r3, r7, r4
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_A_GPIO_Port, &GPIO_InitStruct);
 8001976:	193b      	adds	r3, r7, r4
 8001978:	4a2e      	ldr	r2, [pc, #184]	@ (8001a34 <MX_GPIO_Init+0x188>)
 800197a:	0019      	movs	r1, r3
 800197c:	0010      	movs	r0, r2
 800197e:	f003 fdbb 	bl	80054f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Pulse_B_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin;
 8001982:	0021      	movs	r1, r4
 8001984:	187b      	adds	r3, r7, r1
 8001986:	2280      	movs	r2, #128	@ 0x80
 8001988:	01d2      	lsls	r2, r2, #7
 800198a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198c:	000c      	movs	r4, r1
 800198e:	193b      	adds	r3, r7, r4
 8001990:	2200      	movs	r2, #0
 8001992:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	193b      	adds	r3, r7, r4
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Pulse_B_GPIO_Port, &GPIO_InitStruct);
 800199a:	193b      	adds	r3, r7, r4
 800199c:	4a25      	ldr	r2, [pc, #148]	@ (8001a34 <MX_GPIO_Init+0x188>)
 800199e:	0019      	movs	r1, r3
 80019a0:	0010      	movs	r0, r2
 80019a2:	f003 fda9 	bl	80054f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_C_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin;
 80019a6:	0021      	movs	r1, r4
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	2280      	movs	r2, #128	@ 0x80
 80019ac:	0052      	lsls	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	000c      	movs	r4, r1
 80019b2:	193b      	adds	r3, r7, r4
 80019b4:	2201      	movs	r2, #1
 80019b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	193b      	adds	r3, r7, r4
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	193b      	adds	r3, r7, r4
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_C_EN_GPIO_Port, &GPIO_InitStruct);
 80019c4:	193a      	adds	r2, r7, r4
 80019c6:	23a0      	movs	r3, #160	@ 0xa0
 80019c8:	05db      	lsls	r3, r3, #23
 80019ca:	0011      	movs	r1, r2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f003 fd93 	bl	80054f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_A_EN_Pin Actuator_B_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_A_EN_Pin|Actuator_B_EN_Pin;
 80019d2:	193b      	adds	r3, r7, r4
 80019d4:	22c0      	movs	r2, #192	@ 0xc0
 80019d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	193b      	adds	r3, r7, r4
 80019da:	2201      	movs	r2, #1
 80019dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	193b      	adds	r3, r7, r4
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	193b      	adds	r3, r7, r4
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ea:	193b      	adds	r3, r7, r4
 80019ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001a28 <MX_GPIO_Init+0x17c>)
 80019ee:	0019      	movs	r1, r3
 80019f0:	0010      	movs	r0, r2
 80019f2:	f003 fd81 	bl	80054f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Actuator_CS_Pin */
  GPIO_InitStruct.Pin = Actuator_CS_Pin;
 80019f6:	0021      	movs	r1, r4
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	2201      	movs	r2, #1
 8001a02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Actuator_CS_GPIO_Port, &GPIO_InitStruct);
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	4a06      	ldr	r2, [pc, #24]	@ (8001a2c <MX_GPIO_Init+0x180>)
 8001a14:	0019      	movs	r1, r3
 8001a16:	0010      	movs	r0, r2
 8001a18:	f003 fd6e 	bl	80054f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a1c:	46c0      	nop			@ (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	b00b      	add	sp, #44	@ 0x2c
 8001a22:	bd90      	pop	{r4, r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	50000800 	.word	0x50000800
 8001a2c:	50000c00 	.word	0x50000c00
 8001a30:	10110000 	.word	0x10110000
 8001a34:	50000400 	.word	0x50000400

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	46c0      	nop			@ (mov r8, r8)
 8001a42:	e7fd      	b.n	8001a40 <Error_Handler+0x8>

08001a44 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	000a      	movs	r2, r1
 8001a4e:	1cbb      	adds	r3, r7, #2
 8001a50:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a45      	ldr	r2, [pc, #276]	@ (8001b6c <HAL_UARTEx_RxEventCallback+0x128>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d000      	beq.n	8001a5e <HAL_UARTEx_RxEventCallback+0x1a>
 8001a5c:	e081      	b.n	8001b62 <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 8001a5e:	4b44      	ldr	r3, [pc, #272]	@ (8001b70 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b43      	ldr	r3, [pc, #268]	@ (8001b74 <HAL_UARTEx_RxEventCallback+0x130>)
 8001a66:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 8001a68:	4b42      	ldr	r3, [pc, #264]	@ (8001b74 <HAL_UARTEx_RxEventCallback+0x130>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	001a      	movs	r2, r3
 8001a70:	1cbb      	adds	r3, r7, #2
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	18d2      	adds	r2, r2, r3
 8001a76:	2380      	movs	r3, #128	@ 0x80
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dd29      	ble.n	8001ad2 <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 8001a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b74 <HAL_UARTEx_RxEventCallback+0x130>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	240e      	movs	r4, #14
 8001a86:	193b      	adds	r3, r7, r4
 8001a88:	2180      	movs	r1, #128	@ 0x80
 8001a8a:	0049      	lsls	r1, r1, #1
 8001a8c:	1a8a      	subs	r2, r1, r2
 8001a8e:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 8001a90:	4b38      	ldr	r3, [pc, #224]	@ (8001b74 <HAL_UARTEx_RxEventCallback+0x130>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	001a      	movs	r2, r3
 8001a98:	4b37      	ldr	r3, [pc, #220]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0x134>)
 8001a9a:	18d0      	adds	r0, r2, r3
 8001a9c:	193b      	adds	r3, r7, r4
 8001a9e:	881a      	ldrh	r2, [r3, #0]
 8001aa0:	4b36      	ldr	r3, [pc, #216]	@ (8001b7c <HAL_UARTEx_RxEventCallback+0x138>)
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	f008 fcc0 	bl	800a428 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8001aa8:	1cba      	adds	r2, r7, #2
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	8812      	ldrh	r2, [r2, #0]
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b70 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001ab6:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8001ab8:	193b      	adds	r3, r7, r4
 8001aba:	881a      	ldrh	r2, [r3, #0]
 8001abc:	4b2f      	ldr	r3, [pc, #188]	@ (8001b7c <HAL_UARTEx_RxEventCallback+0x138>)
 8001abe:	18d1      	adds	r1, r2, r3
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b70 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	001a      	movs	r2, r3
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0x134>)
 8001aca:	0018      	movs	r0, r3
 8001acc:	f008 fcac 	bl	800a428 <memcpy>
 8001ad0:	e014      	b.n	8001afc <HAL_UARTEx_RxEventCallback+0xb8>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 8001ad2:	4b28      	ldr	r3, [pc, #160]	@ (8001b74 <HAL_UARTEx_RxEventCallback+0x130>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	001a      	movs	r2, r3
 8001ada:	4b27      	ldr	r3, [pc, #156]	@ (8001b78 <HAL_UARTEx_RxEventCallback+0x134>)
 8001adc:	18d0      	adds	r0, r2, r3
 8001ade:	1cbb      	adds	r3, r7, #2
 8001ae0:	881a      	ldrh	r2, [r3, #0]
 8001ae2:	4b26      	ldr	r3, [pc, #152]	@ (8001b7c <HAL_UARTEx_RxEventCallback+0x138>)
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	f008 fc9f 	bl	800a428 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8001aea:	4b22      	ldr	r3, [pc, #136]	@ (8001b74 <HAL_UARTEx_RxEventCallback+0x130>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	1cbb      	adds	r3, r7, #2
 8001af2:	881b      	ldrh	r3, [r3, #0]
 8001af4:	18d3      	adds	r3, r2, r3
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <HAL_UARTEx_RxEventCallback+0x12c>)
 8001afa:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8001afc:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d027      	beq.n	8001b56 <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 8001b06:	f002 fa41 	bl	8003f8c <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <HAL_UARTEx_RxEventCallback+0x140>)
 8001b0e:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 8001b10:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <HAL_UARTEx_RxEventCallback+0x130>)
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <HAL_UARTEx_RxEventCallback+0x144>)
 8001b18:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 8001b20:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <HAL_UARTEx_RxEventCallback+0x138>)
 8001b22:	791b      	ldrb	r3, [r3, #4]
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	4a15      	ldr	r2, [pc, #84]	@ (8001b7c <HAL_UARTEx_RxEventCallback+0x138>)
 8001b28:	7952      	ldrb	r2, [r2, #5]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	18db      	adds	r3, r3, r3
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	4910      	ldr	r1, [pc, #64]	@ (8001b7c <HAL_UARTEx_RxEventCallback+0x138>)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <HAL_UARTEx_RxEventCallback+0x148>)
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f008 fb80 	bl	800a244 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_UARTEx_RxEventCallback+0x14c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2104      	movs	r1, #4
 8001b50:	438a      	bics	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			rx_int = 1;
		}
	}
}
 8001b54:	e005      	b.n	8001b62 <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 8001b56:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <HAL_UARTEx_RxEventCallback+0x13c>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	801a      	strh	r2, [r3, #0]
			rx_int = 1;
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <HAL_UARTEx_RxEventCallback+0x150>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
}
 8001b62:	46c0      	nop			@ (mov r8, r8)
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b005      	add	sp, #20
 8001b68:	bd90      	pop	{r4, r7, pc}
 8001b6a:	46c0      	nop			@ (mov r8, r8)
 8001b6c:	40013800 	.word	0x40013800
 8001b70:	200006f8 	.word	0x200006f8
 8001b74:	200006f6 	.word	0x200006f6
 8001b78:	200003f4 	.word	0x200003f4
 8001b7c:	200005f4 	.word	0x200005f4
 8001b80:	20000064 	.word	0x20000064
 8001b84:	200006f0 	.word	0x200006f0
 8001b88:	200006f4 	.word	0x200006f4
 8001b8c:	200002a4 	.word	0x200002a4
 8001b90:	20000338 	.word	0x20000338
 8001b94:	200006fa 	.word	0x200006fa

08001b98 <handle_chunk_miss>:


// Chunk Miss Error Handling Function
int8_t handle_chunk_miss()
{
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <handle_chunk_miss+0x5c>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d120      	bne.n	8001bea <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8001ba8:	f002 f9f0 	bl	8003f8c <HAL_GetTick>
 8001bac:	0002      	movs	r2, r0
 8001bae:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <handle_chunk_miss+0x60>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b0a      	cmp	r3, #10
 8001bb6:	d918      	bls.n	8001bea <handle_chunk_miss+0x52>
		{
			// TODO: Log the chunk miss as an error
			modbus_header = 1;
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <handle_chunk_miss+0x5c>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort_IT(&huart1);
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001bfc <handle_chunk_miss+0x64>)
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f006 fef7 	bl	80089b4 <HAL_UART_Abort_IT>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	001a      	movs	r2, r3
 8001bca:	1dfb      	adds	r3, r7, #7
 8001bcc:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b25b      	sxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8001bd8:	1dfc      	adds	r4, r7, #7
 8001bda:	f000 fb3f 	bl	800225c <modbus_set_rx>
 8001bde:	0003      	movs	r3, r0
 8001be0:	7023      	strb	r3, [r4, #0]
			}
			return status;
 8001be2:	1dfb      	adds	r3, r7, #7
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	e000      	b.n	8001bec <handle_chunk_miss+0x54>
		}
	}
	return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b003      	add	sp, #12
 8001bf2:	bd90      	pop	{r4, r7, pc}
 8001bf4:	20000064 	.word	0x20000064
 8001bf8:	200006f0 	.word	0x200006f0
 8001bfc:	200002a4 	.word	0x200002a4

08001c00 <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	0002      	movs	r2, r0
 8001c08:	1dfb      	adds	r3, r7, #7
 8001c0a:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8001c0c:	1dfb      	adds	r3, r7, #7
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2bff      	cmp	r3, #255	@ 0xff
 8001c12:	d01e      	beq.n	8001c52 <get_rx_buffer+0x52>
	{
		return ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <get_rx_buffer+0x5c>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	1dfb      	adds	r3, r7, #7
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8001c22:	2bff      	cmp	r3, #255	@ 0xff
 8001c24:	dd0b      	ble.n	8001c3e <get_rx_buffer+0x3e>
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <get_rx_buffer+0x5c>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	001a      	movs	r2, r3
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	18d3      	adds	r3, r2, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	3bff      	subs	r3, #255	@ 0xff
 8001c38:	4a09      	ldr	r2, [pc, #36]	@ (8001c60 <get_rx_buffer+0x60>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	e00a      	b.n	8001c54 <get_rx_buffer+0x54>
				modbus_rx_buffer[start_index + index];
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <get_rx_buffer+0x5c>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	001a      	movs	r2, r3
 8001c46:	1dfb      	adds	r3, r7, #7
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8001c4c:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <get_rx_buffer+0x60>)
 8001c4e:	5cd3      	ldrb	r3, [r2, r3]
 8001c50:	e000      	b.n	8001c54 <get_rx_buffer+0x54>
	}
	return 0xFF;
 8001c52:	23ff      	movs	r3, #255	@ 0xff
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200006f4 	.word	0x200006f4
 8001c60:	200003f4 	.word	0x200003f4

08001c64 <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8001c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	f7ff ffc8 	bl	8001c00 <get_rx_buffer>
 8001c70:	0003      	movs	r3, r0
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	b21c      	sxth	r4, r3
 8001c76:	2003      	movs	r0, #3
 8001c78:	f7ff ffc2 	bl	8001c00 <get_rx_buffer>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4323      	orrs	r3, r4
 8001c82:	b21a      	sxth	r2, r3
 8001c84:	230a      	movs	r3, #10
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8001c8a:	2004      	movs	r0, #4
 8001c8c:	f7ff ffb8 	bl	8001c00 <get_rx_buffer>
 8001c90:	0003      	movs	r3, r0
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	b21c      	sxth	r4, r3
 8001c96:	2005      	movs	r0, #5
 8001c98:	f7ff ffb2 	bl	8001c00 <get_rx_buffer>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	4323      	orrs	r3, r4
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	2108      	movs	r1, #8
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8001caa:	000a      	movs	r2, r1
 8001cac:	18bb      	adds	r3, r7, r2
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	2b7d      	cmp	r3, #125	@ 0x7d
 8001cb2:	d803      	bhi.n	8001cbc <return_holding_registers+0x58>
 8001cb4:	18bb      	adds	r3, r7, r2
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d104      	bne.n	8001cc6 <return_holding_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001cbc:	2006      	movs	r0, #6
 8001cbe:	f000 f9e9 	bl	8002094 <modbus_exception>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	e0e1      	b.n	8001e8a <return_holding_registers+0x226>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	18fa      	adds	r2, r7, r3
 8001cca:	230a      	movs	r3, #10
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	8812      	ldrh	r2, [r2, #0]
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	18d3      	adds	r3, r2, r3
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	1dbb      	adds	r3, r7, #6
 8001cd8:	3a01      	subs	r2, #1
 8001cda:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001cdc:	1dbb      	adds	r3, r7, #6
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	2b32      	cmp	r3, #50	@ 0x32
 8001ce2:	d904      	bls.n	8001cee <return_holding_registers+0x8a>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8001ce4:	2005      	movs	r0, #5
 8001ce6:	f000 f9d5 	bl	8002094 <modbus_exception>
 8001cea:	0003      	movs	r3, r0
 8001cec:	e0cd      	b.n	8001e8a <return_holding_registers+0x226>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff ff86 	bl	8001c00 <get_rx_buffer>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	001a      	movs	r2, r3
 8001cf8:	4b66      	ldr	r3, [pc, #408]	@ (8001e94 <return_holding_registers+0x230>)
 8001cfa:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f7ff ff7f 	bl	8001c00 <get_rx_buffer>
 8001d02:	0003      	movs	r3, r0
 8001d04:	001a      	movs	r2, r3
 8001d06:	4b63      	ldr	r3, [pc, #396]	@ (8001e94 <return_holding_registers+0x230>)
 8001d08:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	18db      	adds	r3, r3, r3
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4b5f      	ldr	r3, [pc, #380]	@ (8001e94 <return_holding_registers+0x230>)
 8001d18:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8001d1a:	230f      	movs	r3, #15
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	2203      	movs	r2, #3
 8001d20:	701a      	strb	r2, [r3, #0]

	if(((first_register_address >= ADC_0) && (first_register_address <= ADC_8)) ||
 8001d22:	220a      	movs	r2, #10
 8001d24:	18bb      	adds	r3, r7, r2
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d903      	bls.n	8001d34 <return_holding_registers+0xd0>
 8001d2c:	18bb      	adds	r3, r7, r2
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	2b0b      	cmp	r3, #11
 8001d32:	d907      	bls.n	8001d44 <return_holding_registers+0xe0>
 8001d34:	1dbb      	adds	r3, r7, #6
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d90e      	bls.n	8001d5a <return_holding_registers+0xf6>
		((last_register_address >= ADC_0) && (last_register_address <= ADC_8)))
 8001d3c:	1dbb      	adds	r3, r7, #6
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	2b0b      	cmp	r3, #11
 8001d42:	d80a      	bhi.n	8001d5a <return_holding_registers+0xf6>
	{
		// disable the ADC DMA Stream
		if(HAL_DMA_Abort(&hdma_adc1) != HAL_OK)
 8001d44:	4b54      	ldr	r3, [pc, #336]	@ (8001e98 <return_holding_registers+0x234>)
 8001d46:	0018      	movs	r0, r3
 8001d48:	f003 f9ac 	bl	80050a4 <HAL_DMA_Abort>
 8001d4c:	1e03      	subs	r3, r0, #0
 8001d4e:	d004      	beq.n	8001d5a <return_holding_registers+0xf6>
		{
			return modbus_exception(MB_SLAVE_ERROR);
 8001d50:	2007      	movs	r0, #7
 8001d52:	f000 f99f 	bl	8002094 <modbus_exception>
 8001d56:	0003      	movs	r3, r0
 8001d58:	e097      	b.n	8001e8a <return_holding_registers+0x226>
		}
	}
	uint8_t prim = 0;
 8001d5a:	230e      	movs	r3, #14
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
	if(((first_register_address >= ACCELEROMETER_X) && (first_register_address <= QUARTERNION_Z)) ||
 8001d62:	220a      	movs	r2, #10
 8001d64:	18bb      	adds	r3, r7, r2
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	2b0b      	cmp	r3, #11
 8001d6a:	d903      	bls.n	8001d74 <return_holding_registers+0x110>
 8001d6c:	18bb      	adds	r3, r7, r2
 8001d6e:	881b      	ldrh	r3, [r3, #0]
 8001d70:	2b21      	cmp	r3, #33	@ 0x21
 8001d72:	d907      	bls.n	8001d84 <return_holding_registers+0x120>
 8001d74:	1dbb      	adds	r3, r7, #6
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	2b0b      	cmp	r3, #11
 8001d7a:	d90c      	bls.n	8001d96 <return_holding_registers+0x132>
		((last_register_address >= ACCELEROMETER_X) && (last_register_address <= QUARTERNION_Z)))
 8001d7c:	1dbb      	adds	r3, r7, #6
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	2b21      	cmp	r3, #33	@ 0x21
 8001d82:	d808      	bhi.n	8001d96 <return_holding_registers+0x132>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001d84:	f3ef 8310 	mrs	r3, PRIMASK
 8001d88:	603b      	str	r3, [r7, #0]
  return(result);
 8001d8a:	683a      	ldr	r2, [r7, #0]
	{
		// disable I2C interrupts
		prim = __get_PRIMASK();
 8001d8c:	230e      	movs	r3, #14
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d92:	b672      	cpsid	i
}
 8001d94:	46c0      	nop			@ (mov r8, r8)
		__disable_irq();
	}

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8001d96:	230d      	movs	r3, #13
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
 8001d9e:	e02b      	b.n	8001df8 <return_holding_registers+0x194>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 8001da0:	260a      	movs	r6, #10
 8001da2:	19bb      	adds	r3, r7, r6
 8001da4:	881a      	ldrh	r2, [r3, #0]
 8001da6:	240d      	movs	r4, #13
 8001da8:	193b      	adds	r3, r7, r4
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	18d2      	adds	r2, r2, r3
 8001dae:	4b3b      	ldr	r3, [pc, #236]	@ (8001e9c <return_holding_registers+0x238>)
 8001db0:	0052      	lsls	r2, r2, #1
 8001db2:	5ad3      	ldrh	r3, [r2, r3]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	b299      	uxth	r1, r3
 8001db8:	250f      	movs	r5, #15
 8001dba:	197b      	adds	r3, r7, r5
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	197a      	adds	r2, r7, r5
 8001dc0:	1c58      	adds	r0, r3, #1
 8001dc2:	7010      	strb	r0, [r2, #0]
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	b2c9      	uxtb	r1, r1
 8001dc8:	4b32      	ldr	r3, [pc, #200]	@ (8001e94 <return_holding_registers+0x230>)
 8001dca:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 8001dcc:	19bb      	adds	r3, r7, r6
 8001dce:	881a      	ldrh	r2, [r3, #0]
 8001dd0:	193b      	adds	r3, r7, r4
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	18d2      	adds	r2, r2, r3
 8001dd6:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <return_holding_registers+0x238>)
 8001dd8:	0052      	lsls	r2, r2, #1
 8001dda:	5ad1      	ldrh	r1, [r2, r3]
 8001ddc:	197b      	adds	r3, r7, r5
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	197a      	adds	r2, r7, r5
 8001de2:	1c58      	adds	r0, r3, #1
 8001de4:	7010      	strb	r0, [r2, #0]
 8001de6:	001a      	movs	r2, r3
 8001de8:	b2c9      	uxtb	r1, r1
 8001dea:	4b2a      	ldr	r3, [pc, #168]	@ (8001e94 <return_holding_registers+0x230>)
 8001dec:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8001dee:	193b      	adds	r3, r7, r4
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	193b      	adds	r3, r7, r4
 8001df4:	3201      	adds	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	230d      	movs	r3, #13
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	2208      	movs	r2, #8
 8001e02:	18ba      	adds	r2, r7, r2
 8001e04:	8812      	ldrh	r2, [r2, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d8ca      	bhi.n	8001da0 <return_holding_registers+0x13c>
	}

	if(((first_register_address >= ADC_0) && (first_register_address <= ADC_8)) ||
 8001e0a:	220a      	movs	r2, #10
 8001e0c:	18bb      	adds	r3, r7, r2
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d903      	bls.n	8001e1c <return_holding_registers+0x1b8>
 8001e14:	18bb      	adds	r3, r7, r2
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	2b0b      	cmp	r3, #11
 8001e1a:	d907      	bls.n	8001e2c <return_holding_registers+0x1c8>
 8001e1c:	1dbb      	adds	r3, r7, #6
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d911      	bls.n	8001e48 <return_holding_registers+0x1e4>
		((last_register_address >= ADC_0) && (last_register_address <= ADC_8)))
 8001e24:	1dbb      	adds	r3, r7, #6
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	2b0b      	cmp	r3, #11
 8001e2a:	d80d      	bhi.n	8001e48 <return_holding_registers+0x1e4>
	{
		// enable the ADC DMA Stream
		if(HAL_ADC_Start_DMA(&hadc1, adc_buffer, 9) != HAL_OK)
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <return_holding_registers+0x23c>)
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea4 <return_holding_registers+0x240>)
 8001e32:	2209      	movs	r2, #9
 8001e34:	0018      	movs	r0, r3
 8001e36:	f002 fbc5 	bl	80045c4 <HAL_ADC_Start_DMA>
 8001e3a:	1e03      	subs	r3, r0, #0
 8001e3c:	d004      	beq.n	8001e48 <return_holding_registers+0x1e4>
		{
			return modbus_exception(MB_SLAVE_ERROR);
 8001e3e:	2007      	movs	r0, #7
 8001e40:	f000 f928 	bl	8002094 <modbus_exception>
 8001e44:	0003      	movs	r3, r0
 8001e46:	e020      	b.n	8001e8a <return_holding_registers+0x226>
		}
	}
	if(((first_register_address >= ACCELEROMETER_X) && (first_register_address <= QUARTERNION_Z)) ||
 8001e48:	220a      	movs	r2, #10
 8001e4a:	18bb      	adds	r3, r7, r2
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	2b0b      	cmp	r3, #11
 8001e50:	d903      	bls.n	8001e5a <return_holding_registers+0x1f6>
 8001e52:	18bb      	adds	r3, r7, r2
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	2b21      	cmp	r3, #33	@ 0x21
 8001e58:	d907      	bls.n	8001e6a <return_holding_registers+0x206>
 8001e5a:	1dbb      	adds	r3, r7, #6
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	2b0b      	cmp	r3, #11
 8001e60:	d90a      	bls.n	8001e78 <return_holding_registers+0x214>
		((last_register_address >= ACCELEROMETER_X) && (last_register_address <= QUARTERNION_Z)))
 8001e62:	1dbb      	adds	r3, r7, #6
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	2b21      	cmp	r3, #33	@ 0x21
 8001e68:	d806      	bhi.n	8001e78 <return_holding_registers+0x214>
	{
		// enable I2C interrupts
		if(prim == 0)
 8001e6a:	230e      	movs	r3, #14
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <return_holding_registers+0x214>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e74:	b662      	cpsie	i
}
 8001e76:	46c0      	nop			@ (mov r8, r8)
		{
			__enable_irq();
		}
	}

	return modbus_send(modbus_tx_buffer, index);
 8001e78:	230f      	movs	r3, #15
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <return_holding_registers+0x230>)
 8001e80:	0011      	movs	r1, r2
 8001e82:	0018      	movs	r0, r3
 8001e84:	f000 f99c 	bl	80021c0 <modbus_send>
 8001e88:	0003      	movs	r3, r0
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b005      	add	sp, #20
 8001e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	200004f4 	.word	0x200004f4
 8001e98:	200000f8 	.word	0x200000f8
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	200003e0 	.word	0x200003e0
 8001ea4:	20000094 	.word	0x20000094

08001ea8 <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 8001ea8:	b5b0      	push	{r4, r5, r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8001eae:	2002      	movs	r0, #2
 8001eb0:	f7ff fea6 	bl	8001c00 <get_rx_buffer>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	b21c      	sxth	r4, r3
 8001eba:	2003      	movs	r0, #3
 8001ebc:	f7ff fea0 	bl	8001c00 <get_rx_buffer>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	4323      	orrs	r3, r4
 8001ec6:	b21a      	sxth	r2, r3
 8001ec8:	230c      	movs	r3, #12
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8001ece:	2004      	movs	r0, #4
 8001ed0:	f7ff fe96 	bl	8001c00 <get_rx_buffer>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	b21c      	sxth	r4, r3
 8001eda:	2005      	movs	r0, #5
 8001edc:	f7ff fe90 	bl	8001c00 <get_rx_buffer>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	4323      	orrs	r3, r4
 8001ee6:	b21a      	sxth	r2, r3
 8001ee8:	210a      	movs	r1, #10
 8001eea:	187b      	adds	r3, r7, r1
 8001eec:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8001eee:	000a      	movs	r2, r1
 8001ef0:	18bb      	adds	r3, r7, r2
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ef6:	d803      	bhi.n	8001f00 <edit_multiple_registers+0x58>
 8001ef8:	18bb      	adds	r3, r7, r2
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d104      	bne.n	8001f0a <edit_multiple_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8001f00:	2006      	movs	r0, #6
 8001f02:	f000 f8c7 	bl	8002094 <modbus_exception>
 8001f06:	0003      	movs	r3, r0
 8001f08:	e0bc      	b.n	8002084 <edit_multiple_registers+0x1dc>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8001f0a:	230a      	movs	r3, #10
 8001f0c:	18fa      	adds	r2, r7, r3
 8001f0e:	230c      	movs	r3, #12
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	8812      	ldrh	r2, [r2, #0]
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	18d3      	adds	r3, r2, r3
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	2108      	movs	r1, #8
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	3a01      	subs	r2, #1
 8001f20:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8001f22:	187b      	adds	r3, r7, r1
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	2b32      	cmp	r3, #50	@ 0x32
 8001f28:	d904      	bls.n	8001f34 <edit_multiple_registers+0x8c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8001f2a:	2005      	movs	r0, #5
 8001f2c:	f000 f8b2 	bl	8002094 <modbus_exception>
 8001f30:	0003      	movs	r3, r0
 8001f32:	e0a7      	b.n	8002084 <edit_multiple_registers+0x1dc>
	}

	// Protect Read only values
	if(((first_register_address >= ADC_0) && (first_register_address <= QUARTERNION_Z)) ||
 8001f34:	220c      	movs	r2, #12
 8001f36:	18bb      	adds	r3, r7, r2
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d903      	bls.n	8001f46 <edit_multiple_registers+0x9e>
 8001f3e:	18bb      	adds	r3, r7, r2
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	2b21      	cmp	r3, #33	@ 0x21
 8001f44:	d908      	bls.n	8001f58 <edit_multiple_registers+0xb0>
 8001f46:	2208      	movs	r2, #8
 8001f48:	18bb      	adds	r3, r7, r2
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d908      	bls.n	8001f62 <edit_multiple_registers+0xba>
		((last_register_address >= ADC_0) && (last_register_address <= QUARTERNION_Z)))
 8001f50:	18bb      	adds	r3, r7, r2
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	2b21      	cmp	r3, #33	@ 0x21
 8001f56:	d804      	bhi.n	8001f62 <edit_multiple_registers+0xba>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8001f58:	2004      	movs	r0, #4
 8001f5a:	f000 f89b 	bl	8002094 <modbus_exception>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	e090      	b.n	8002084 <edit_multiple_registers+0x1dc>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7ff fe4c 	bl	8001c00 <get_rx_buffer>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	001a      	movs	r2, r3
 8001f6c:	4b47      	ldr	r3, [pc, #284]	@ (800208c <edit_multiple_registers+0x1e4>)
 8001f6e:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7ff fe45 	bl	8001c00 <get_rx_buffer>
 8001f76:	0003      	movs	r3, r0
 8001f78:	001a      	movs	r2, r3
 8001f7a:	4b44      	ldr	r3, [pc, #272]	@ (800208c <edit_multiple_registers+0x1e4>)
 8001f7c:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f7ff fe3e 	bl	8001c00 <get_rx_buffer>
 8001f84:	0003      	movs	r3, r0
 8001f86:	001a      	movs	r2, r3
 8001f88:	4b40      	ldr	r3, [pc, #256]	@ (800208c <edit_multiple_registers+0x1e4>)
 8001f8a:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f7ff fe37 	bl	8001c00 <get_rx_buffer>
 8001f92:	0003      	movs	r3, r0
 8001f94:	001a      	movs	r2, r3
 8001f96:	4b3d      	ldr	r3, [pc, #244]	@ (800208c <edit_multiple_registers+0x1e4>)
 8001f98:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 8001f9a:	2004      	movs	r0, #4
 8001f9c:	f7ff fe30 	bl	8001c00 <get_rx_buffer>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	4b39      	ldr	r3, [pc, #228]	@ (800208c <edit_multiple_registers+0x1e4>)
 8001fa6:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8001fa8:	2005      	movs	r0, #5
 8001faa:	f7ff fe29 	bl	8001c00 <get_rx_buffer>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	4b36      	ldr	r3, [pc, #216]	@ (800208c <edit_multiple_registers+0x1e4>)
 8001fb4:	715a      	strb	r2, [r3, #5]
	uint8_t index = 6;
 8001fb6:	1dfb      	adds	r3, r7, #7
 8001fb8:	2206      	movs	r2, #6
 8001fba:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8001fbc:	230f      	movs	r3, #15
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e032      	b.n	800202c <edit_multiple_registers+0x184>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8001fc6:	250f      	movs	r5, #15
 8001fc8:	197b      	adds	r3, r7, r5
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	18db      	adds	r3, r3, r3
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	3307      	adds	r3, #7
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f7ff fe13 	bl	8001c00 <get_rx_buffer>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	b21c      	sxth	r4, r3
 8001fe0:	197b      	adds	r3, r7, r5
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	18db      	adds	r3, r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7ff fe07 	bl	8001c00 <get_rx_buffer>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	b21b      	sxth	r3, r3
 8001ff6:	4323      	orrs	r3, r4
 8001ff8:	b219      	sxth	r1, r3
 8001ffa:	200c      	movs	r0, #12
 8001ffc:	183b      	adds	r3, r7, r0
 8001ffe:	881a      	ldrh	r2, [r3, #0]
 8002000:	197b      	adds	r3, r7, r5
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	18d2      	adds	r2, r2, r3
 8002006:	b289      	uxth	r1, r1
 8002008:	4b21      	ldr	r3, [pc, #132]	@ (8002090 <edit_multiple_registers+0x1e8>)
 800200a:	0052      	lsls	r2, r2, #1
 800200c:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 800200e:	197b      	adds	r3, r7, r5
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b29a      	uxth	r2, r3
 8002014:	183b      	adds	r3, r7, r0
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	18d3      	adds	r3, r2, r3
 800201a:	b29b      	uxth	r3, r3
 800201c:	0018      	movs	r0, r3
 800201e:	f000 f863 	bl	80020e8 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 8002022:	197b      	adds	r3, r7, r5
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	197b      	adds	r3, r7, r5
 8002028:	3201      	adds	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	230f      	movs	r3, #15
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	220a      	movs	r2, #10
 8002036:	18ba      	adds	r2, r7, r2
 8002038:	8812      	ldrh	r2, [r2, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d8c3      	bhi.n	8001fc6 <edit_multiple_registers+0x11e>
	}

	// TIMING WORKAROUND START
	HAL_Delay(1);
 800203e:	2001      	movs	r0, #1
 8002040:	f001 ffae 	bl	8003fa0 <HAL_Delay>
	// TIMING WORKAROUND END

	int8_t status = modbus_send(modbus_tx_buffer, index);
 8002044:	1dbc      	adds	r4, r7, #6
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	781a      	ldrb	r2, [r3, #0]
 800204a:	4b10      	ldr	r3, [pc, #64]	@ (800208c <edit_multiple_registers+0x1e4>)
 800204c:	0011      	movs	r1, r2
 800204e:	0018      	movs	r0, r3
 8002050:	f000 f8b6 	bl	80021c0 <modbus_send>
 8002054:	0003      	movs	r3, r0
 8002056:	7023      	strb	r3, [r4, #0]

	if(status == HAL_OK)
 8002058:	1dbb      	adds	r3, r7, #6
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b25b      	sxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10d      	bne.n	800207e <edit_multiple_registers+0x1d6>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 8002062:	230c      	movs	r3, #12
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d808      	bhi.n	800207e <edit_multiple_registers+0x1d6>
 800206c:	2308      	movs	r3, #8
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <edit_multiple_registers+0x1d6>
		{
			return modbus_change_baud_rate();
 8002076:	f000 f913 	bl	80022a0 <modbus_change_baud_rate>
 800207a:	0003      	movs	r3, r0
 800207c:	e002      	b.n	8002084 <edit_multiple_registers+0x1dc>
		}
	}
	return status;
 800207e:	1dbb      	adds	r3, r7, #6
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b25b      	sxtb	r3, r3
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	b004      	add	sp, #16
 800208a:	bdb0      	pop	{r4, r5, r7, pc}
 800208c:	200004f4 	.word	0x200004f4
 8002090:	20000000 	.word	0x20000000

08002094 <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	0002      	movs	r2, r0
 800209c:	1dfb      	adds	r3, r7, #7
 800209e:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff fdad 	bl	8001c00 <get_rx_buffer>
 80020a6:	0003      	movs	r3, r0
 80020a8:	001a      	movs	r2, r3
 80020aa:	4b0e      	ldr	r3, [pc, #56]	@ (80020e4 <modbus_exception+0x50>)
 80020ac:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 80020ae:	2001      	movs	r0, #1
 80020b0:	f7ff fda6 	bl	8001c00 <get_rx_buffer>
 80020b4:	0003      	movs	r3, r0
 80020b6:	001a      	movs	r2, r3
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	425b      	negs	r3, r3
 80020bc:	4313      	orrs	r3, r2
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <modbus_exception+0x50>)
 80020c2:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <modbus_exception+0x50>)
 80020ce:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 80020d0:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <modbus_exception+0x50>)
 80020d2:	2103      	movs	r1, #3
 80020d4:	0018      	movs	r0, r3
 80020d6:	f000 f873 	bl	80021c0 <modbus_send>
 80020da:	0003      	movs	r3, r0
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	200004f4 	.word	0x200004f4

080020e8 <handle_range>:

/*
 * Modbus Slave Data Value Range Handler
 */
void handle_range(uint16_t holding_register)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	0002      	movs	r2, r0
 80020f0:	1dbb      	adds	r3, r7, #6
 80020f2:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 80020f4:	1dbb      	adds	r3, r7, #6
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	2b25      	cmp	r3, #37	@ 0x25
 80020fa:	dd00      	ble.n	80020fe <handle_range+0x16>
 80020fc:	e058      	b.n	80021b0 <handle_range+0xc8>
 80020fe:	2b23      	cmp	r3, #35	@ 0x23
 8002100:	da3f      	bge.n	8002182 <handle_range+0x9a>
 8002102:	2b02      	cmp	r3, #2
 8002104:	d02f      	beq.n	8002166 <handle_range+0x7e>
 8002106:	dc53      	bgt.n	80021b0 <handle_range+0xc8>
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <handle_range+0x2a>
 800210c:	2b01      	cmp	r3, #1
 800210e:	d00e      	beq.n	800212e <handle_range+0x46>
				holding_register_database[holding_register] = 0x0FFF;
			}
			break;
		}
	}
}
 8002110:	e04e      	b.n	80021b0 <handle_range+0xc8>
			if(holding_register_database[holding_register] > 0xFF)
 8002112:	1dbb      	adds	r3, r7, #6
 8002114:	881a      	ldrh	r2, [r3, #0]
 8002116:	4b28      	ldr	r3, [pc, #160]	@ (80021b8 <handle_range+0xd0>)
 8002118:	0052      	lsls	r2, r2, #1
 800211a:	5ad3      	ldrh	r3, [r2, r3]
 800211c:	2bff      	cmp	r3, #255	@ 0xff
 800211e:	d940      	bls.n	80021a2 <handle_range+0xba>
				holding_register_database[holding_register] = 0xFF;
 8002120:	1dbb      	adds	r3, r7, #6
 8002122:	881a      	ldrh	r2, [r3, #0]
 8002124:	4b24      	ldr	r3, [pc, #144]	@ (80021b8 <handle_range+0xd0>)
 8002126:	0052      	lsls	r2, r2, #1
 8002128:	21ff      	movs	r1, #255	@ 0xff
 800212a:	52d1      	strh	r1, [r2, r3]
			break;
 800212c:	e039      	b.n	80021a2 <handle_range+0xba>
			if(holding_register_database[holding_register] < BAUD_RATE_4800)
 800212e:	1dbb      	adds	r3, r7, #6
 8002130:	881a      	ldrh	r2, [r3, #0]
 8002132:	4b21      	ldr	r3, [pc, #132]	@ (80021b8 <handle_range+0xd0>)
 8002134:	0052      	lsls	r2, r2, #1
 8002136:	5ad3      	ldrh	r3, [r2, r3]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d806      	bhi.n	800214a <handle_range+0x62>
				holding_register_database[holding_register] = BAUD_RATE_4800;
 800213c:	1dbb      	adds	r3, r7, #6
 800213e:	881a      	ldrh	r2, [r3, #0]
 8002140:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <handle_range+0xd0>)
 8002142:	0052      	lsls	r2, r2, #1
 8002144:	2102      	movs	r1, #2
 8002146:	52d1      	strh	r1, [r2, r3]
			break;
 8002148:	e02d      	b.n	80021a6 <handle_range+0xbe>
			else if(holding_register_database[holding_register] > BAUD_RATE_256000)
 800214a:	1dbb      	adds	r3, r7, #6
 800214c:	881a      	ldrh	r2, [r3, #0]
 800214e:	4b1a      	ldr	r3, [pc, #104]	@ (80021b8 <handle_range+0xd0>)
 8002150:	0052      	lsls	r2, r2, #1
 8002152:	5ad3      	ldrh	r3, [r2, r3]
 8002154:	2b09      	cmp	r3, #9
 8002156:	d926      	bls.n	80021a6 <handle_range+0xbe>
				holding_register_database[holding_register] = BAUD_RATE_256000;
 8002158:	1dbb      	adds	r3, r7, #6
 800215a:	881a      	ldrh	r2, [r3, #0]
 800215c:	4b16      	ldr	r3, [pc, #88]	@ (80021b8 <handle_range+0xd0>)
 800215e:	0052      	lsls	r2, r2, #1
 8002160:	2109      	movs	r1, #9
 8002162:	52d1      	strh	r1, [r2, r3]
			break;
 8002164:	e01f      	b.n	80021a6 <handle_range+0xbe>
			if(holding_register_database[holding_register] > 1)
 8002166:	1dbb      	adds	r3, r7, #6
 8002168:	881a      	ldrh	r2, [r3, #0]
 800216a:	4b13      	ldr	r3, [pc, #76]	@ (80021b8 <handle_range+0xd0>)
 800216c:	0052      	lsls	r2, r2, #1
 800216e:	5ad3      	ldrh	r3, [r2, r3]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d91a      	bls.n	80021aa <handle_range+0xc2>
				holding_register_database[holding_register] = 1;
 8002174:	1dbb      	adds	r3, r7, #6
 8002176:	881a      	ldrh	r2, [r3, #0]
 8002178:	4b0f      	ldr	r3, [pc, #60]	@ (80021b8 <handle_range+0xd0>)
 800217a:	0052      	lsls	r2, r2, #1
 800217c:	2101      	movs	r1, #1
 800217e:	52d1      	strh	r1, [r2, r3]
			break;
 8002180:	e013      	b.n	80021aa <handle_range+0xc2>
			if(holding_register_database[holding_register] > 0x0FFF)
 8002182:	1dbb      	adds	r3, r7, #6
 8002184:	881a      	ldrh	r2, [r3, #0]
 8002186:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <handle_range+0xd0>)
 8002188:	0052      	lsls	r2, r2, #1
 800218a:	5ad2      	ldrh	r2, [r2, r3]
 800218c:	2380      	movs	r3, #128	@ 0x80
 800218e:	015b      	lsls	r3, r3, #5
 8002190:	429a      	cmp	r2, r3
 8002192:	d30c      	bcc.n	80021ae <handle_range+0xc6>
				holding_register_database[holding_register] = 0x0FFF;
 8002194:	1dbb      	adds	r3, r7, #6
 8002196:	881a      	ldrh	r2, [r3, #0]
 8002198:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <handle_range+0xd0>)
 800219a:	0052      	lsls	r2, r2, #1
 800219c:	4907      	ldr	r1, [pc, #28]	@ (80021bc <handle_range+0xd4>)
 800219e:	52d1      	strh	r1, [r2, r3]
			break;
 80021a0:	e005      	b.n	80021ae <handle_range+0xc6>
			break;
 80021a2:	46c0      	nop			@ (mov r8, r8)
 80021a4:	e004      	b.n	80021b0 <handle_range+0xc8>
			break;
 80021a6:	46c0      	nop			@ (mov r8, r8)
 80021a8:	e002      	b.n	80021b0 <handle_range+0xc8>
			break;
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	e000      	b.n	80021b0 <handle_range+0xc8>
			break;
 80021ae:	46c0      	nop			@ (mov r8, r8)
}
 80021b0:	46c0      	nop			@ (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b002      	add	sp, #8
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000000 	.word	0x20000000
 80021bc:	00000fff 	.word	0x00000fff

080021c0 <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	000a      	movs	r2, r1
 80021ca:	1cfb      	adds	r3, r7, #3
 80021cc:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 80021ce:	250e      	movs	r5, #14
 80021d0:	197c      	adds	r4, r7, r5
 80021d2:	1cfb      	adds	r3, r7, #3
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	4b14      	ldr	r3, [pc, #80]	@ (8002228 <modbus_send+0x68>)
 80021d8:	0011      	movs	r1, r2
 80021da:	0018      	movs	r0, r3
 80021dc:	f000 f8c6 	bl	800236c <crc_16>
 80021e0:	0003      	movs	r3, r0
 80021e2:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 80021e4:	1cfb      	adds	r3, r7, #3
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	197a      	adds	r2, r7, r5
 80021ea:	8812      	ldrh	r2, [r2, #0]
 80021ec:	b2d1      	uxtb	r1, r2
 80021ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002228 <modbus_send+0x68>)
 80021f0:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 80021f2:	197b      	adds	r3, r7, r5
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	1cfb      	adds	r3, r7, #3
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	3301      	adds	r3, #1
 8002200:	b2d1      	uxtb	r1, r2
 8002202:	4a09      	ldr	r2, [pc, #36]	@ (8002228 <modbus_send+0x68>)
 8002204:	54d1      	strb	r1, [r2, r3]

	return HAL_UART_Transmit(&huart1, modbus_tx_buffer, size + 2, 100);
 8002206:	1cfb      	adds	r3, r7, #3
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	3302      	adds	r3, #2
 800220e:	b29a      	uxth	r2, r3
 8002210:	4905      	ldr	r1, [pc, #20]	@ (8002228 <modbus_send+0x68>)
 8002212:	4806      	ldr	r0, [pc, #24]	@ (800222c <modbus_send+0x6c>)
 8002214:	2364      	movs	r3, #100	@ 0x64
 8002216:	f006 fb29 	bl	800886c <HAL_UART_Transmit>
 800221a:	0003      	movs	r3, r0
 800221c:	b25b      	sxtb	r3, r3
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	b004      	add	sp, #16
 8002224:	bdb0      	pop	{r4, r5, r7, pc}
 8002226:	46c0      	nop			@ (mov r8, r8)
 8002228:	200004f4 	.word	0x200004f4
 800222c:	200002a4 	.word	0x200002a4

08002230 <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	if(rx_int)
 8002234:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <modbus_rx+0x28>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <modbus_rx+0x18>
	{
		rx_int = 0;
 800223e:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <modbus_rx+0x28>)
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
		return 1;
 8002244:	2301      	movs	r3, #1
 8002246:	e004      	b.n	8002252 <modbus_rx+0x22>
	}
	if(handle_chunk_miss() != HAL_OK)
 8002248:	f7ff fca6 	bl	8001b98 <handle_chunk_miss>
	{
		// TODO: log the error when startup the UART back up
	}
	return rx_int;
 800224c:	4b02      	ldr	r3, [pc, #8]	@ (8002258 <modbus_rx+0x28>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b2db      	uxtb	r3, r3
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200006fa 	.word	0x200006fa

0800225c <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx()
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 8002262:	490c      	ldr	r1, [pc, #48]	@ (8002294 <modbus_set_rx+0x38>)
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <modbus_set_rx+0x3c>)
 8002266:	2206      	movs	r2, #6
 8002268:	0018      	movs	r0, r3
 800226a:	f007 ffeb 	bl	800a244 <HAL_UARTEx_ReceiveToIdle_DMA>
 800226e:	0003      	movs	r3, r0
 8002270:	001a      	movs	r2, r3
 8002272:	1dfb      	adds	r3, r7, #7
 8002274:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8002276:	4b09      	ldr	r3, [pc, #36]	@ (800229c <modbus_set_rx+0x40>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b07      	ldr	r3, [pc, #28]	@ (800229c <modbus_set_rx+0x40>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2104      	movs	r1, #4
 8002282:	438a      	bics	r2, r1
 8002284:	601a      	str	r2, [r3, #0]

	return status;
 8002286:	1dfb      	adds	r3, r7, #7
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	b25b      	sxtb	r3, r3
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	b002      	add	sp, #8
 8002292:	bd80      	pop	{r7, pc}
 8002294:	200005f4 	.word	0x200005f4
 8002298:	200002a4 	.word	0x200002a4
 800229c:	20000338 	.word	0x20000338

080022a0 <modbus_change_baud_rate>:


// General Modbus Control Functions ------------------------------------------------------------

int8_t modbus_change_baud_rate()
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
	int8_t status = 0;
 80022a6:	1dfb      	adds	r3, r7, #7
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[MB_BAUD_RATE])
 80022ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002360 <modbus_change_baud_rate+0xc0>)
 80022ae:	885b      	ldrh	r3, [r3, #2]
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	d82c      	bhi.n	800230e <modbus_change_baud_rate+0x6e>
 80022b4:	009a      	lsls	r2, r3, #2
 80022b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002364 <modbus_change_baud_rate+0xc4>)
 80022b8:	18d3      	adds	r3, r2, r3
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 80022be:	4b2a      	ldr	r3, [pc, #168]	@ (8002368 <modbus_change_baud_rate+0xc8>)
 80022c0:	2296      	movs	r2, #150	@ 0x96
 80022c2:	0152      	lsls	r2, r2, #5
 80022c4:	605a      	str	r2, [r3, #4]
			break;
 80022c6:	e033      	b.n	8002330 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 80022c8:	4b27      	ldr	r3, [pc, #156]	@ (8002368 <modbus_change_baud_rate+0xc8>)
 80022ca:	2296      	movs	r2, #150	@ 0x96
 80022cc:	0192      	lsls	r2, r2, #6
 80022ce:	605a      	str	r2, [r3, #4]
			break;
 80022d0:	e02e      	b.n	8002330 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 80022d2:	4b25      	ldr	r3, [pc, #148]	@ (8002368 <modbus_change_baud_rate+0xc8>)
 80022d4:	2296      	movs	r2, #150	@ 0x96
 80022d6:	01d2      	lsls	r2, r2, #7
 80022d8:	605a      	str	r2, [r3, #4]
			break;
 80022da:	e029      	b.n	8002330 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 80022dc:	4b22      	ldr	r3, [pc, #136]	@ (8002368 <modbus_change_baud_rate+0xc8>)
 80022de:	2296      	movs	r2, #150	@ 0x96
 80022e0:	0212      	lsls	r2, r2, #8
 80022e2:	605a      	str	r2, [r3, #4]
			break;
 80022e4:	e024      	b.n	8002330 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 80022e6:	4b20      	ldr	r3, [pc, #128]	@ (8002368 <modbus_change_baud_rate+0xc8>)
 80022e8:	22e1      	movs	r2, #225	@ 0xe1
 80022ea:	0212      	lsls	r2, r2, #8
 80022ec:	605a      	str	r2, [r3, #4]
			break;
 80022ee:	e01f      	b.n	8002330 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 80022f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002368 <modbus_change_baud_rate+0xc8>)
 80022f2:	22e1      	movs	r2, #225	@ 0xe1
 80022f4:	0252      	lsls	r2, r2, #9
 80022f6:	605a      	str	r2, [r3, #4]
			break;
 80022f8:	e01a      	b.n	8002330 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 80022fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002368 <modbus_change_baud_rate+0xc8>)
 80022fc:	22fa      	movs	r2, #250	@ 0xfa
 80022fe:	0252      	lsls	r2, r2, #9
 8002300:	605a      	str	r2, [r3, #4]
			break;
 8002302:	e015      	b.n	8002330 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 8002304:	4b18      	ldr	r3, [pc, #96]	@ (8002368 <modbus_change_baud_rate+0xc8>)
 8002306:	22fa      	movs	r2, #250	@ 0xfa
 8002308:	0292      	lsls	r2, r2, #10
 800230a:	605a      	str	r2, [r3, #4]
			break;
 800230c:	e010      	b.n	8002330 <modbus_change_baud_rate+0x90>
		}
		default:
		{
			holding_register_database[MB_BAUD_RATE] = BAUD_RATE_9600;
 800230e:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <modbus_change_baud_rate+0xc0>)
 8002310:	2203      	movs	r2, #3
 8002312:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 8002314:	4b14      	ldr	r3, [pc, #80]	@ (8002368 <modbus_change_baud_rate+0xc8>)
 8002316:	2296      	movs	r2, #150	@ 0x96
 8002318:	0192      	lsls	r2, r2, #6
 800231a:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 800231c:	4b12      	ldr	r3, [pc, #72]	@ (8002368 <modbus_change_baud_rate+0xc8>)
 800231e:	0018      	movs	r0, r3
 8002320:	f006 ffea 	bl	80092f8 <UART_SetConfig>
 8002324:	0003      	movs	r3, r0
 8002326:	001a      	movs	r2, r3
 8002328:	1dfb      	adds	r3, r7, #7
 800232a:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
			{
				//HAL_UART_Abort_IT(&huart1);
			}
			return MB_ILLEGAL_DATA_VALUE;
 800232c:	2306      	movs	r3, #6
 800232e:	e013      	b.n	8002358 <modbus_change_baud_rate+0xb8>
			break;
		}

	}
	status = UART_SetConfig(&huart1);
 8002330:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <modbus_change_baud_rate+0xc8>)
 8002332:	0018      	movs	r0, r3
 8002334:	f006 ffe0 	bl	80092f8 <UART_SetConfig>
 8002338:	0003      	movs	r3, r0
 800233a:	001a      	movs	r2, r3
 800233c:	1dfb      	adds	r3, r7, #7
 800233e:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
	{
		//status = HAL_UART_Abort_IT(&huart1);
	}

	if(status != HAL_OK)
 8002340:	1dfb      	adds	r3, r7, #7
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b25b      	sxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <modbus_change_baud_rate+0xb2>
	{
		return status;
 800234a:	1dfb      	adds	r3, r7, #7
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b25b      	sxtb	r3, r3
 8002350:	e002      	b.n	8002358 <modbus_change_baud_rate+0xb8>
	}

	//status = HAL_UART_Receive_IT(huart, pData, Size)

	return status;
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	b25b      	sxtb	r3, r3
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000000 	.word	0x20000000
 8002364:	0800a654 	.word	0x0800a654
 8002368:	200002a4 	.word	0x200002a4

0800236c <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	000a      	movs	r2, r1
 8002376:	1cfb      	adds	r3, r7, #3
 8002378:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 800237a:	230f      	movs	r3, #15
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	22ff      	movs	r2, #255	@ 0xff
 8002380:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8002382:	230e      	movs	r3, #14
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	22ff      	movs	r2, #255	@ 0xff
 8002388:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 800238a:	e019      	b.n	80023c0 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	781a      	ldrb	r2, [r3, #0]
 8002394:	200e      	movs	r0, #14
 8002396:	183b      	adds	r3, r7, r0
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	4053      	eors	r3, r2
 800239c:	b2db      	uxtb	r3, r3
 800239e:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 80023a0:	4a13      	ldr	r2, [pc, #76]	@ (80023f0 <crc_16+0x84>)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	18d3      	adds	r3, r2, r3
 80023a6:	7819      	ldrb	r1, [r3, #0]
 80023a8:	183b      	adds	r3, r7, r0
 80023aa:	200f      	movs	r0, #15
 80023ac:	183a      	adds	r2, r7, r0
 80023ae:	7812      	ldrb	r2, [r2, #0]
 80023b0:	404a      	eors	r2, r1
 80023b2:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 80023b4:	183b      	adds	r3, r7, r0
 80023b6:	490f      	ldr	r1, [pc, #60]	@ (80023f4 <crc_16+0x88>)
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	188a      	adds	r2, r1, r2
 80023bc:	7812      	ldrb	r2, [r2, #0]
 80023be:	701a      	strb	r2, [r3, #0]
	while (size--)
 80023c0:	1cfb      	adds	r3, r7, #3
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	1cfa      	adds	r2, r7, #3
 80023c6:	1e59      	subs	r1, r3, #1
 80023c8:	7011      	strb	r1, [r2, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1de      	bne.n	800238c <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 80023ce:	230f      	movs	r3, #15
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	b21a      	sxth	r2, r3
 80023d8:	230e      	movs	r3, #14
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	b21b      	sxth	r3, r3
 80023e0:	4313      	orrs	r3, r2
 80023e2:	b21b      	sxth	r3, r3
 80023e4:	b29b      	uxth	r3, r3
}
 80023e6:	0018      	movs	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b004      	add	sp, #16
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			@ (mov r8, r8)
 80023f0:	0800a454 	.word	0x0800a454
 80023f4:	0800a554 	.word	0x0800a554

080023f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fe:	4b0f      	ldr	r3, [pc, #60]	@ (800243c <HAL_MspInit+0x44>)
 8002400:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002402:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <HAL_MspInit+0x44>)
 8002404:	2101      	movs	r1, #1
 8002406:	430a      	orrs	r2, r1
 8002408:	641a      	str	r2, [r3, #64]	@ 0x40
 800240a:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <HAL_MspInit+0x44>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	2201      	movs	r2, #1
 8002410:	4013      	ands	r3, r2
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	4b09      	ldr	r3, [pc, #36]	@ (800243c <HAL_MspInit+0x44>)
 8002418:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800241a:	4b08      	ldr	r3, [pc, #32]	@ (800243c <HAL_MspInit+0x44>)
 800241c:	2180      	movs	r1, #128	@ 0x80
 800241e:	0549      	lsls	r1, r1, #21
 8002420:	430a      	orrs	r2, r1
 8002422:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002424:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_MspInit+0x44>)
 8002426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002428:	2380      	movs	r3, #128	@ 0x80
 800242a:	055b      	lsls	r3, r3, #21
 800242c:	4013      	ands	r3, r2
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b002      	add	sp, #8
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	40021000 	.word	0x40021000

08002440 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b093      	sub	sp, #76	@ 0x4c
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	2334      	movs	r3, #52	@ 0x34
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	0018      	movs	r0, r3
 800244e:	2314      	movs	r3, #20
 8002450:	001a      	movs	r2, r3
 8002452:	2100      	movs	r1, #0
 8002454:	f007 ffbc 	bl	800a3d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002458:	2414      	movs	r4, #20
 800245a:	193b      	adds	r3, r7, r4
 800245c:	0018      	movs	r0, r3
 800245e:	2320      	movs	r3, #32
 8002460:	001a      	movs	r2, r3
 8002462:	2100      	movs	r1, #0
 8002464:	f007 ffb4 	bl	800a3d0 <memset>
  if(hadc->Instance==ADC1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a43      	ldr	r2, [pc, #268]	@ (800257c <HAL_ADC_MspInit+0x13c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d000      	beq.n	8002474 <HAL_ADC_MspInit+0x34>
 8002472:	e07e      	b.n	8002572 <HAL_ADC_MspInit+0x132>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002474:	193b      	adds	r3, r7, r4
 8002476:	2220      	movs	r2, #32
 8002478:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800247a:	193b      	adds	r3, r7, r4
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002480:	193b      	adds	r3, r7, r4
 8002482:	0018      	movs	r0, r3
 8002484:	f005 fa6a 	bl	800795c <HAL_RCCEx_PeriphCLKConfig>
 8002488:	1e03      	subs	r3, r0, #0
 800248a:	d001      	beq.n	8002490 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800248c:	f7ff fad4 	bl	8001a38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002490:	4b3b      	ldr	r3, [pc, #236]	@ (8002580 <HAL_ADC_MspInit+0x140>)
 8002492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002494:	4b3a      	ldr	r3, [pc, #232]	@ (8002580 <HAL_ADC_MspInit+0x140>)
 8002496:	2180      	movs	r1, #128	@ 0x80
 8002498:	0349      	lsls	r1, r1, #13
 800249a:	430a      	orrs	r2, r1
 800249c:	641a      	str	r2, [r3, #64]	@ 0x40
 800249e:	4b38      	ldr	r3, [pc, #224]	@ (8002580 <HAL_ADC_MspInit+0x140>)
 80024a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024a2:	2380      	movs	r3, #128	@ 0x80
 80024a4:	035b      	lsls	r3, r3, #13
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ac:	4b34      	ldr	r3, [pc, #208]	@ (8002580 <HAL_ADC_MspInit+0x140>)
 80024ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024b0:	4b33      	ldr	r3, [pc, #204]	@ (8002580 <HAL_ADC_MspInit+0x140>)
 80024b2:	2101      	movs	r1, #1
 80024b4:	430a      	orrs	r2, r1
 80024b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80024b8:	4b31      	ldr	r3, [pc, #196]	@ (8002580 <HAL_ADC_MspInit+0x140>)
 80024ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024bc:	2201      	movs	r2, #1
 80024be:	4013      	ands	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002580 <HAL_ADC_MspInit+0x140>)
 80024c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002580 <HAL_ADC_MspInit+0x140>)
 80024ca:	2102      	movs	r1, #2
 80024cc:	430a      	orrs	r2, r1
 80024ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80024d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002580 <HAL_ADC_MspInit+0x140>)
 80024d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d4:	2202      	movs	r2, #2
 80024d6:	4013      	ands	r3, r2
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> ADC1_IN18
    PB10     ------> ADC1_IN20
    PB11     ------> ADC1_IN21
    PB12     ------> ADC1_IN22
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024dc:	2434      	movs	r4, #52	@ 0x34
 80024de:	193b      	adds	r3, r7, r4
 80024e0:	22e0      	movs	r2, #224	@ 0xe0
 80024e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e4:	193b      	adds	r3, r7, r4
 80024e6:	2203      	movs	r2, #3
 80024e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	193b      	adds	r3, r7, r4
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	193a      	adds	r2, r7, r4
 80024f2:	23a0      	movs	r3, #160	@ 0xa0
 80024f4:	05db      	lsls	r3, r3, #23
 80024f6:	0011      	movs	r1, r2
 80024f8:	0018      	movs	r0, r3
 80024fa:	f002 fffd 	bl	80054f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80024fe:	193b      	adds	r3, r7, r4
 8002500:	4a20      	ldr	r2, [pc, #128]	@ (8002584 <HAL_ADC_MspInit+0x144>)
 8002502:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002504:	193b      	adds	r3, r7, r4
 8002506:	2203      	movs	r2, #3
 8002508:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	193b      	adds	r3, r7, r4
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002510:	193b      	adds	r3, r7, r4
 8002512:	4a1d      	ldr	r2, [pc, #116]	@ (8002588 <HAL_ADC_MspInit+0x148>)
 8002514:	0019      	movs	r1, r3
 8002516:	0010      	movs	r0, r2
 8002518:	f002 ffee 	bl	80054f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800251c:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <HAL_ADC_MspInit+0x14c>)
 800251e:	4a1c      	ldr	r2, [pc, #112]	@ (8002590 <HAL_ADC_MspInit+0x150>)
 8002520:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002522:	4b1a      	ldr	r3, [pc, #104]	@ (800258c <HAL_ADC_MspInit+0x14c>)
 8002524:	2205      	movs	r2, #5
 8002526:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002528:	4b18      	ldr	r3, [pc, #96]	@ (800258c <HAL_ADC_MspInit+0x14c>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800252e:	4b17      	ldr	r3, [pc, #92]	@ (800258c <HAL_ADC_MspInit+0x14c>)
 8002530:	2200      	movs	r2, #0
 8002532:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002534:	4b15      	ldr	r3, [pc, #84]	@ (800258c <HAL_ADC_MspInit+0x14c>)
 8002536:	2280      	movs	r2, #128	@ 0x80
 8002538:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800253a:	4b14      	ldr	r3, [pc, #80]	@ (800258c <HAL_ADC_MspInit+0x14c>)
 800253c:	2280      	movs	r2, #128	@ 0x80
 800253e:	0052      	lsls	r2, r2, #1
 8002540:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002542:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_ADC_MspInit+0x14c>)
 8002544:	2280      	movs	r2, #128	@ 0x80
 8002546:	00d2      	lsls	r2, r2, #3
 8002548:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800254a:	4b10      	ldr	r3, [pc, #64]	@ (800258c <HAL_ADC_MspInit+0x14c>)
 800254c:	2200      	movs	r2, #0
 800254e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002550:	4b0e      	ldr	r3, [pc, #56]	@ (800258c <HAL_ADC_MspInit+0x14c>)
 8002552:	2200      	movs	r2, #0
 8002554:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002556:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <HAL_ADC_MspInit+0x14c>)
 8002558:	0018      	movs	r0, r3
 800255a:	f002 fc91 	bl	8004e80 <HAL_DMA_Init>
 800255e:	1e03      	subs	r3, r0, #0
 8002560:	d001      	beq.n	8002566 <HAL_ADC_MspInit+0x126>
    {
      Error_Handler();
 8002562:	f7ff fa69 	bl	8001a38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a08      	ldr	r2, [pc, #32]	@ (800258c <HAL_ADC_MspInit+0x14c>)
 800256a:	651a      	str	r2, [r3, #80]	@ 0x50
 800256c:	4b07      	ldr	r3, [pc, #28]	@ (800258c <HAL_ADC_MspInit+0x14c>)
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	b013      	add	sp, #76	@ 0x4c
 8002578:	bd90      	pop	{r4, r7, pc}
 800257a:	46c0      	nop			@ (mov r8, r8)
 800257c:	40012400 	.word	0x40012400
 8002580:	40021000 	.word	0x40021000
 8002584:	00001c03 	.word	0x00001c03
 8002588:	50000400 	.word	0x50000400
 800258c:	200000f8 	.word	0x200000f8
 8002590:	40020008 	.word	0x40020008

08002594 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b093      	sub	sp, #76	@ 0x4c
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	2334      	movs	r3, #52	@ 0x34
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	0018      	movs	r0, r3
 80025a2:	2314      	movs	r3, #20
 80025a4:	001a      	movs	r2, r3
 80025a6:	2100      	movs	r1, #0
 80025a8:	f007 ff12 	bl	800a3d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ac:	2414      	movs	r4, #20
 80025ae:	193b      	adds	r3, r7, r4
 80025b0:	0018      	movs	r0, r3
 80025b2:	2320      	movs	r3, #32
 80025b4:	001a      	movs	r2, r3
 80025b6:	2100      	movs	r1, #0
 80025b8:	f007 ff0a 	bl	800a3d0 <memset>
  if(hi2c->Instance==I2C1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a27      	ldr	r2, [pc, #156]	@ (8002660 <HAL_I2C_MspInit+0xcc>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d147      	bne.n	8002656 <HAL_I2C_MspInit+0xc2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025c6:	193b      	adds	r3, r7, r4
 80025c8:	2202      	movs	r2, #2
 80025ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025cc:	193b      	adds	r3, r7, r4
 80025ce:	2200      	movs	r2, #0
 80025d0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	0018      	movs	r0, r3
 80025d6:	f005 f9c1 	bl	800795c <HAL_RCCEx_PeriphCLKConfig>
 80025da:	1e03      	subs	r3, r0, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80025de:	f7ff fa2b 	bl	8001a38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <HAL_I2C_MspInit+0xd0>)
 80025e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002664 <HAL_I2C_MspInit+0xd0>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	430a      	orrs	r2, r1
 80025ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80025ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <HAL_I2C_MspInit+0xd0>)
 80025f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f2:	2201      	movs	r2, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025fa:	2134      	movs	r1, #52	@ 0x34
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	22c0      	movs	r2, #192	@ 0xc0
 8002600:	00d2      	lsls	r2, r2, #3
 8002602:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002604:	187b      	adds	r3, r7, r1
 8002606:	2212      	movs	r2, #18
 8002608:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	187b      	adds	r3, r7, r1
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002610:	187b      	adds	r3, r7, r1
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002616:	187b      	adds	r3, r7, r1
 8002618:	2206      	movs	r2, #6
 800261a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261c:	187a      	adds	r2, r7, r1
 800261e:	23a0      	movs	r3, #160	@ 0xa0
 8002620:	05db      	lsls	r3, r3, #23
 8002622:	0011      	movs	r1, r2
 8002624:	0018      	movs	r0, r3
 8002626:	f002 ff67 	bl	80054f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800262a:	4b0e      	ldr	r3, [pc, #56]	@ (8002664 <HAL_I2C_MspInit+0xd0>)
 800262c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HAL_I2C_MspInit+0xd0>)
 8002630:	2180      	movs	r1, #128	@ 0x80
 8002632:	0389      	lsls	r1, r1, #14
 8002634:	430a      	orrs	r2, r1
 8002636:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002638:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <HAL_I2C_MspInit+0xd0>)
 800263a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800263c:	2380      	movs	r3, #128	@ 0x80
 800263e:	039b      	lsls	r3, r3, #14
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2103      	movs	r1, #3
 800264a:	2017      	movs	r0, #23
 800264c:	f002 fbe6 	bl	8004e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8002650:	2017      	movs	r0, #23
 8002652:	f002 fbf8 	bl	8004e46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002656:	46c0      	nop			@ (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b013      	add	sp, #76	@ 0x4c
 800265c:	bd90      	pop	{r4, r7, pc}
 800265e:	46c0      	nop			@ (mov r8, r8)
 8002660:	40005400 	.word	0x40005400
 8002664:	40021000 	.word	0x40021000

08002668 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b093      	sub	sp, #76	@ 0x4c
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	2334      	movs	r3, #52	@ 0x34
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	0018      	movs	r0, r3
 8002676:	2314      	movs	r3, #20
 8002678:	001a      	movs	r2, r3
 800267a:	2100      	movs	r1, #0
 800267c:	f007 fea8 	bl	800a3d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002680:	2414      	movs	r4, #20
 8002682:	193b      	adds	r3, r7, r4
 8002684:	0018      	movs	r0, r3
 8002686:	2320      	movs	r3, #32
 8002688:	001a      	movs	r2, r3
 800268a:	2100      	movs	r1, #0
 800268c:	f007 fea0 	bl	800a3d0 <memset>
  if(hspi->Instance==SPI1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a34      	ldr	r2, [pc, #208]	@ (8002768 <HAL_SPI_MspInit+0x100>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d162      	bne.n	8002760 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 800269a:	193b      	adds	r3, r7, r4
 800269c:	2204      	movs	r2, #4
 800269e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80026a0:	193b      	adds	r3, r7, r4
 80026a2:	2200      	movs	r2, #0
 80026a4:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026a6:	193b      	adds	r3, r7, r4
 80026a8:	0018      	movs	r0, r3
 80026aa:	f005 f957 	bl	800795c <HAL_RCCEx_PeriphCLKConfig>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80026b2:	f7ff f9c1 	bl	8001a38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026b6:	4b2d      	ldr	r3, [pc, #180]	@ (800276c <HAL_SPI_MspInit+0x104>)
 80026b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ba:	4b2c      	ldr	r3, [pc, #176]	@ (800276c <HAL_SPI_MspInit+0x104>)
 80026bc:	2180      	movs	r1, #128	@ 0x80
 80026be:	0149      	lsls	r1, r1, #5
 80026c0:	430a      	orrs	r2, r1
 80026c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80026c4:	4b29      	ldr	r3, [pc, #164]	@ (800276c <HAL_SPI_MspInit+0x104>)
 80026c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026c8:	2380      	movs	r3, #128	@ 0x80
 80026ca:	015b      	lsls	r3, r3, #5
 80026cc:	4013      	ands	r3, r2
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	4b26      	ldr	r3, [pc, #152]	@ (800276c <HAL_SPI_MspInit+0x104>)
 80026d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026d6:	4b25      	ldr	r3, [pc, #148]	@ (800276c <HAL_SPI_MspInit+0x104>)
 80026d8:	2101      	movs	r1, #1
 80026da:	430a      	orrs	r2, r1
 80026dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80026de:	4b23      	ldr	r3, [pc, #140]	@ (800276c <HAL_SPI_MspInit+0x104>)
 80026e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e2:	2201      	movs	r2, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ea:	4b20      	ldr	r3, [pc, #128]	@ (800276c <HAL_SPI_MspInit+0x104>)
 80026ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ee:	4b1f      	ldr	r3, [pc, #124]	@ (800276c <HAL_SPI_MspInit+0x104>)
 80026f0:	2102      	movs	r1, #2
 80026f2:	430a      	orrs	r2, r1
 80026f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80026f6:	4b1d      	ldr	r3, [pc, #116]	@ (800276c <HAL_SPI_MspInit+0x104>)
 80026f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026fa:	2202      	movs	r2, #2
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002702:	2134      	movs	r1, #52	@ 0x34
 8002704:	187b      	adds	r3, r7, r1
 8002706:	2280      	movs	r2, #128	@ 0x80
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	000c      	movs	r4, r1
 800270e:	193b      	adds	r3, r7, r4
 8002710:	2202      	movs	r2, #2
 8002712:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	193b      	adds	r3, r7, r4
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	193b      	adds	r3, r7, r4
 800271c:	2200      	movs	r2, #0
 800271e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002720:	193b      	adds	r3, r7, r4
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	193a      	adds	r2, r7, r4
 8002728:	23a0      	movs	r3, #160	@ 0xa0
 800272a:	05db      	lsls	r3, r3, #23
 800272c:	0011      	movs	r1, r2
 800272e:	0018      	movs	r0, r3
 8002730:	f002 fee2 	bl	80054f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002734:	0021      	movs	r1, r4
 8002736:	187b      	adds	r3, r7, r1
 8002738:	2228      	movs	r2, #40	@ 0x28
 800273a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	187b      	adds	r3, r7, r1
 800273e:	2202      	movs	r2, #2
 8002740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	187b      	adds	r3, r7, r1
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	187b      	adds	r3, r7, r1
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800274e:	187b      	adds	r3, r7, r1
 8002750:	2200      	movs	r2, #0
 8002752:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002754:	187b      	adds	r3, r7, r1
 8002756:	4a06      	ldr	r2, [pc, #24]	@ (8002770 <HAL_SPI_MspInit+0x108>)
 8002758:	0019      	movs	r1, r3
 800275a:	0010      	movs	r0, r2
 800275c:	f002 fecc 	bl	80054f8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002760:	46c0      	nop			@ (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	b013      	add	sp, #76	@ 0x4c
 8002766:	bd90      	pop	{r4, r7, pc}
 8002768:	40013000 	.word	0x40013000
 800276c:	40021000 	.word	0x40021000
 8002770:	50000400 	.word	0x50000400

08002774 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <HAL_TIM_PWM_MspInit+0x38>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10d      	bne.n	80027a2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002786:	4b0a      	ldr	r3, [pc, #40]	@ (80027b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800278a:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HAL_TIM_PWM_MspInit+0x3c>)
 800278c:	2180      	movs	r1, #128	@ 0x80
 800278e:	0109      	lsls	r1, r1, #4
 8002790:	430a      	orrs	r2, r1
 8002792:	641a      	str	r2, [r3, #64]	@ 0x40
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002796:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002798:	2380      	movs	r3, #128	@ 0x80
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80027a2:	46c0      	nop			@ (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b004      	add	sp, #16
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40021000 	.word	0x40021000

080027b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0a      	ldr	r2, [pc, #40]	@ (80027ec <HAL_TIM_Base_MspInit+0x38>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10d      	bne.n	80027e2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027c6:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <HAL_TIM_Base_MspInit+0x3c>)
 80027c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027ca:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <HAL_TIM_Base_MspInit+0x3c>)
 80027cc:	2180      	movs	r1, #128	@ 0x80
 80027ce:	0209      	lsls	r1, r1, #8
 80027d0:	430a      	orrs	r2, r1
 80027d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <HAL_TIM_Base_MspInit+0x3c>)
 80027d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	4013      	ands	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b004      	add	sp, #16
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			@ (mov r8, r8)
 80027ec:	40002000 	.word	0x40002000
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b089      	sub	sp, #36	@ 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	240c      	movs	r4, #12
 80027fe:	193b      	adds	r3, r7, r4
 8002800:	0018      	movs	r0, r3
 8002802:	2314      	movs	r3, #20
 8002804:	001a      	movs	r2, r3
 8002806:	2100      	movs	r1, #0
 8002808:	f007 fde2 	bl	800a3d0 <memset>
  if(htim->Instance==TIM1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a15      	ldr	r2, [pc, #84]	@ (8002868 <HAL_TIM_MspPostInit+0x74>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d123      	bne.n	800285e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	4b15      	ldr	r3, [pc, #84]	@ (800286c <HAL_TIM_MspPostInit+0x78>)
 8002818:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800281a:	4b14      	ldr	r3, [pc, #80]	@ (800286c <HAL_TIM_MspPostInit+0x78>)
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	635a      	str	r2, [r3, #52]	@ 0x34
 8002822:	4b12      	ldr	r3, [pc, #72]	@ (800286c <HAL_TIM_MspPostInit+0x78>)
 8002824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002826:	2201      	movs	r2, #1
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 800282e:	193b      	adds	r3, r7, r4
 8002830:	2280      	movs	r2, #128	@ 0x80
 8002832:	0212      	lsls	r2, r2, #8
 8002834:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	0021      	movs	r1, r4
 8002838:	187b      	adds	r3, r7, r1
 800283a:	2202      	movs	r2, #2
 800283c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	187b      	adds	r3, r7, r1
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	187b      	adds	r3, r7, r1
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800284a:	187b      	adds	r3, r7, r1
 800284c:	2202      	movs	r2, #2
 800284e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8002850:	187a      	adds	r2, r7, r1
 8002852:	23a0      	movs	r3, #160	@ 0xa0
 8002854:	05db      	lsls	r3, r3, #23
 8002856:	0011      	movs	r1, r2
 8002858:	0018      	movs	r0, r3
 800285a:	f002 fe4d 	bl	80054f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800285e:	46c0      	nop			@ (mov r8, r8)
 8002860:	46bd      	mov	sp, r7
 8002862:	b009      	add	sp, #36	@ 0x24
 8002864:	bd90      	pop	{r4, r7, pc}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	40012c00 	.word	0x40012c00
 800286c:	40021000 	.word	0x40021000

08002870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b095      	sub	sp, #84	@ 0x54
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	233c      	movs	r3, #60	@ 0x3c
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	0018      	movs	r0, r3
 800287e:	2314      	movs	r3, #20
 8002880:	001a      	movs	r2, r3
 8002882:	2100      	movs	r1, #0
 8002884:	f007 fda4 	bl	800a3d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002888:	241c      	movs	r4, #28
 800288a:	193b      	adds	r3, r7, r4
 800288c:	0018      	movs	r0, r3
 800288e:	2320      	movs	r3, #32
 8002890:	001a      	movs	r2, r3
 8002892:	2100      	movs	r1, #0
 8002894:	f007 fd9c 	bl	800a3d0 <memset>
  if(huart->Instance==USART1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a5f      	ldr	r2, [pc, #380]	@ (8002a1c <HAL_UART_MspInit+0x1ac>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d000      	beq.n	80028a4 <HAL_UART_MspInit+0x34>
 80028a2:	e0b7      	b.n	8002a14 <HAL_UART_MspInit+0x1a4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028a4:	193b      	adds	r3, r7, r4
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80028aa:	193b      	adds	r3, r7, r4
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028b0:	193b      	adds	r3, r7, r4
 80028b2:	0018      	movs	r0, r3
 80028b4:	f005 f852 	bl	800795c <HAL_RCCEx_PeriphCLKConfig>
 80028b8:	1e03      	subs	r3, r0, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80028bc:	f7ff f8bc 	bl	8001a38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c0:	4b57      	ldr	r3, [pc, #348]	@ (8002a20 <HAL_UART_MspInit+0x1b0>)
 80028c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028c4:	4b56      	ldr	r3, [pc, #344]	@ (8002a20 <HAL_UART_MspInit+0x1b0>)
 80028c6:	2180      	movs	r1, #128	@ 0x80
 80028c8:	01c9      	lsls	r1, r1, #7
 80028ca:	430a      	orrs	r2, r1
 80028cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80028ce:	4b54      	ldr	r3, [pc, #336]	@ (8002a20 <HAL_UART_MspInit+0x1b0>)
 80028d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028d2:	2380      	movs	r3, #128	@ 0x80
 80028d4:	01db      	lsls	r3, r3, #7
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028dc:	4b50      	ldr	r3, [pc, #320]	@ (8002a20 <HAL_UART_MspInit+0x1b0>)
 80028de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002a20 <HAL_UART_MspInit+0x1b0>)
 80028e2:	2104      	movs	r1, #4
 80028e4:	430a      	orrs	r2, r1
 80028e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80028e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002a20 <HAL_UART_MspInit+0x1b0>)
 80028ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ec:	2204      	movs	r2, #4
 80028ee:	4013      	ands	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002a20 <HAL_UART_MspInit+0x1b0>)
 80028f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028f8:	4b49      	ldr	r3, [pc, #292]	@ (8002a20 <HAL_UART_MspInit+0x1b0>)
 80028fa:	2102      	movs	r1, #2
 80028fc:	430a      	orrs	r2, r1
 80028fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8002900:	4b47      	ldr	r3, [pc, #284]	@ (8002a20 <HAL_UART_MspInit+0x1b0>)
 8002902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002904:	2202      	movs	r2, #2
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290c:	4b44      	ldr	r3, [pc, #272]	@ (8002a20 <HAL_UART_MspInit+0x1b0>)
 800290e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002910:	4b43      	ldr	r3, [pc, #268]	@ (8002a20 <HAL_UART_MspInit+0x1b0>)
 8002912:	2101      	movs	r1, #1
 8002914:	430a      	orrs	r2, r1
 8002916:	635a      	str	r2, [r3, #52]	@ 0x34
 8002918:	4b41      	ldr	r3, [pc, #260]	@ (8002a20 <HAL_UART_MspInit+0x1b0>)
 800291a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800291c:	2201      	movs	r2, #1
 800291e:	4013      	ands	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002924:	213c      	movs	r1, #60	@ 0x3c
 8002926:	187b      	adds	r3, r7, r1
 8002928:	2280      	movs	r2, #128	@ 0x80
 800292a:	01d2      	lsls	r2, r2, #7
 800292c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	000c      	movs	r4, r1
 8002930:	193b      	adds	r3, r7, r4
 8002932:	2202      	movs	r2, #2
 8002934:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	193b      	adds	r3, r7, r4
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	193b      	adds	r3, r7, r4
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002942:	193b      	adds	r3, r7, r4
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002948:	193b      	adds	r3, r7, r4
 800294a:	4a36      	ldr	r2, [pc, #216]	@ (8002a24 <HAL_UART_MspInit+0x1b4>)
 800294c:	0019      	movs	r1, r3
 800294e:	0010      	movs	r0, r2
 8002950:	f002 fdd2 	bl	80054f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002954:	193b      	adds	r3, r7, r4
 8002956:	2204      	movs	r2, #4
 8002958:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	193b      	adds	r3, r7, r4
 800295c:	2202      	movs	r2, #2
 800295e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	193b      	adds	r3, r7, r4
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	193b      	adds	r3, r7, r4
 8002968:	2200      	movs	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800296c:	193b      	adds	r3, r7, r4
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002972:	193b      	adds	r3, r7, r4
 8002974:	4a2c      	ldr	r2, [pc, #176]	@ (8002a28 <HAL_UART_MspInit+0x1b8>)
 8002976:	0019      	movs	r1, r3
 8002978:	0010      	movs	r0, r2
 800297a:	f002 fdbd 	bl	80054f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800297e:	0021      	movs	r1, r4
 8002980:	187b      	adds	r3, r7, r1
 8002982:	2280      	movs	r2, #128	@ 0x80
 8002984:	0152      	lsls	r2, r2, #5
 8002986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	187b      	adds	r3, r7, r1
 800298a:	2202      	movs	r2, #2
 800298c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	187b      	adds	r3, r7, r1
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	187b      	adds	r3, r7, r1
 8002996:	2200      	movs	r2, #0
 8002998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800299a:	187b      	adds	r3, r7, r1
 800299c:	2201      	movs	r2, #1
 800299e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	187a      	adds	r2, r7, r1
 80029a2:	23a0      	movs	r3, #160	@ 0xa0
 80029a4:	05db      	lsls	r3, r3, #23
 80029a6:	0011      	movs	r1, r2
 80029a8:	0018      	movs	r0, r3
 80029aa:	f002 fda5 	bl	80054f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 80029ae:	4b1f      	ldr	r3, [pc, #124]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 80029b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a30 <HAL_UART_MspInit+0x1c0>)
 80029b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80029b4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 80029b6:	2232      	movs	r2, #50	@ 0x32
 80029b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ba:	4b1c      	ldr	r3, [pc, #112]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029c6:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 80029c8:	2280      	movs	r2, #128	@ 0x80
 80029ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029cc:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029d2:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80029d8:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029de:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 80029e0:	22c0      	movs	r2, #192	@ 0xc0
 80029e2:	0192      	lsls	r2, r2, #6
 80029e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029e6:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 80029e8:	0018      	movs	r0, r3
 80029ea:	f002 fa49 	bl	8004e80 <HAL_DMA_Init>
 80029ee:	1e03      	subs	r3, r0, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_UART_MspInit+0x186>
    {
      Error_Handler();
 80029f2:	f7ff f821 	bl	8001a38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2180      	movs	r1, #128	@ 0x80
 80029fa:	4a0c      	ldr	r2, [pc, #48]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 80029fc:	505a      	str	r2, [r3, r1]
 80029fe:	4b0b      	ldr	r3, [pc, #44]	@ (8002a2c <HAL_UART_MspInit+0x1bc>)
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a04:	2200      	movs	r2, #0
 8002a06:	2100      	movs	r1, #0
 8002a08:	201b      	movs	r0, #27
 8002a0a:	f002 fa07 	bl	8004e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a0e:	201b      	movs	r0, #27
 8002a10:	f002 fa19 	bl	8004e46 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002a14:	46c0      	nop			@ (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b015      	add	sp, #84	@ 0x54
 8002a1a:	bd90      	pop	{r4, r7, pc}
 8002a1c:	40013800 	.word	0x40013800
 8002a20:	40021000 	.word	0x40021000
 8002a24:	50000800 	.word	0x50000800
 8002a28:	50000400 	.word	0x50000400
 8002a2c:	20000338 	.word	0x20000338
 8002a30:	4002001c 	.word	0x4002001c

08002a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a38:	46c0      	nop			@ (mov r8, r8)
 8002a3a:	e7fd      	b.n	8002a38 <NMI_Handler+0x4>

08002a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a40:	46c0      	nop			@ (mov r8, r8)
 8002a42:	e7fd      	b.n	8002a40 <HardFault_Handler+0x4>

08002a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a48:	46c0      	nop			@ (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a5c:	f001 fa84 	bl	8003f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a60:	46c0      	nop			@ (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a6c:	4b03      	ldr	r3, [pc, #12]	@ (8002a7c <DMA1_Channel1_IRQHandler+0x14>)
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f002 fbf4 	bl	800525c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a74:	46c0      	nop			@ (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	200000f8 	.word	0x200000f8

08002a80 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002a84:	4b03      	ldr	r3, [pc, #12]	@ (8002a94 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002a86:	0018      	movs	r0, r3
 8002a88:	f002 fbe8 	bl	800525c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002a8c:	46c0      	nop			@ (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	20000338 	.word	0x20000338

08002a98 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002a9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ac4 <I2C1_IRQHandler+0x2c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699a      	ldr	r2, [r3, #24]
 8002aa2:	23e0      	movs	r3, #224	@ 0xe0
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002aaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <I2C1_IRQHandler+0x2c>)
 8002aac:	0018      	movs	r0, r3
 8002aae:	f003 f9d5 	bl	8005e5c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002ab2:	e003      	b.n	8002abc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ab4:	4b03      	ldr	r3, [pc, #12]	@ (8002ac4 <I2C1_IRQHandler+0x2c>)
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f003 f9b6 	bl	8005e28 <HAL_I2C_EV_IRQHandler>
}
 8002abc:	46c0      	nop			@ (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	46c0      	nop			@ (mov r8, r8)
 8002ac4:	20000154 	.word	0x20000154

08002ac8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002acc:	4b03      	ldr	r3, [pc, #12]	@ (8002adc <USART1_IRQHandler+0x14>)
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f006 f8a4 	bl	8008c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ad4:	46c0      	nop			@ (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			@ (mov r8, r8)
 8002adc:	200002a4 	.word	0x200002a4

08002ae0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ae4:	4b03      	ldr	r3, [pc, #12]	@ (8002af4 <SystemInit+0x14>)
 8002ae6:	2280      	movs	r2, #128	@ 0x80
 8002ae8:	0512      	lsls	r2, r2, #20
 8002aea:	609a      	str	r2, [r3, #8]
#endif
}
 8002aec:	46c0      	nop			@ (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af04      	add	r7, sp, #16
 8002afe:	0002      	movs	r2, r0
 8002b00:	1dfb      	adds	r3, r7, #7
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	1dbb      	adds	r3, r7, #6
 8002b06:	1c0a      	adds	r2, r1, #0
 8002b08:	701a      	strb	r2, [r3, #0]

  msgBuffer[0] = value; // Assign the value to the buffer.
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <writeReg+0x4c>)
 8002b0c:	1dba      	adds	r2, r7, #6
 8002b0e:	7812      	ldrb	r2, [r2, #0]
 8002b10:	701a      	strb	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8002b12:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <writeReg+0x50>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	0019      	movs	r1, r3
 8002b18:	1dfb      	adds	r3, r7, #7
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	480b      	ldr	r0, [pc, #44]	@ (8002b4c <writeReg+0x54>)
 8002b20:	2364      	movs	r3, #100	@ 0x64
 8002b22:	9302      	str	r3, [sp, #8]
 8002b24:	2301      	movs	r3, #1
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <writeReg+0x4c>)
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	f002 ff19 	bl	8005964 <HAL_I2C_Mem_Write>
 8002b32:	0003      	movs	r3, r0
 8002b34:	001a      	movs	r2, r3
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <writeReg+0x58>)
 8002b38:	701a      	strb	r2, [r3, #0]
}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b002      	add	sp, #8
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	2000075c 	.word	0x2000075c
 8002b48:	2000006c 	.word	0x2000006c
 8002b4c:	20000708 	.word	0x20000708
 8002b50:	20000760 	.word	0x20000760

08002b54 <writeReg16Bit>:

// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af04      	add	r7, sp, #16
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	1dfb      	adds	r3, r7, #7
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	1c0a      	adds	r2, r1, #0
 8002b64:	801a      	strh	r2, [r3, #0]

  memcpy(msgBuffer, &value, 2); // Assign the value to the buffer.
 8002b66:	1d3b      	adds	r3, r7, #4
 8002b68:	881a      	ldrh	r2, [r3, #0]
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba0 <writeReg16Bit+0x4c>)
 8002b6c:	801a      	strh	r2, [r3, #0]
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba4 <writeReg16Bit+0x50>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	0019      	movs	r1, r3
 8002b74:	1dfb      	adds	r3, r7, #7
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	480b      	ldr	r0, [pc, #44]	@ (8002ba8 <writeReg16Bit+0x54>)
 8002b7c:	2364      	movs	r3, #100	@ 0x64
 8002b7e:	9302      	str	r3, [sp, #8]
 8002b80:	2302      	movs	r3, #2
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <writeReg16Bit+0x4c>)
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	f002 feeb 	bl	8005964 <HAL_I2C_Mem_Write>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	001a      	movs	r2, r3
 8002b92:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <writeReg16Bit+0x58>)
 8002b94:	701a      	strb	r2, [r3, #0]
}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b002      	add	sp, #8
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	2000075c 	.word	0x2000075c
 8002ba4:	2000006c 	.word	0x2000006c
 8002ba8:	20000708 	.word	0x20000708
 8002bac:	20000760 	.word	0x20000760

08002bb0 <readReg>:
  memcpy(msgBuffer, &value, 4); // Assign the value to the buffer.
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 4, I2C_TIMEOUT);
}

// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af04      	add	r7, sp, #16
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	1dfb      	adds	r3, r7, #7
 8002bba:	701a      	strb	r2, [r3, #0]
  uint8_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8002bbc:	4b10      	ldr	r3, [pc, #64]	@ (8002c00 <readReg+0x50>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	1dfb      	adds	r3, r7, #7
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	480d      	ldr	r0, [pc, #52]	@ (8002c04 <readReg+0x54>)
 8002bd0:	2364      	movs	r3, #100	@ 0x64
 8002bd2:	9302      	str	r3, [sp, #8]
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <readReg+0x58>)
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f002 ffef 	bl	8005bc0 <HAL_I2C_Mem_Read>
 8002be2:	0003      	movs	r3, r0
 8002be4:	001a      	movs	r2, r3
 8002be6:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <readReg+0x5c>)
 8002be8:	701a      	strb	r2, [r3, #0]
  value = msgBuffer[0];
 8002bea:	210f      	movs	r1, #15
 8002bec:	187b      	adds	r3, r7, r1
 8002bee:	4a06      	ldr	r2, [pc, #24]	@ (8002c08 <readReg+0x58>)
 8002bf0:	7812      	ldrb	r2, [r2, #0]
 8002bf2:	701a      	strb	r2, [r3, #0]

  return value;
 8002bf4:	187b      	adds	r3, r7, r1
 8002bf6:	781b      	ldrb	r3, [r3, #0]
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b004      	add	sp, #16
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	2000006c 	.word	0x2000006c
 8002c04:	20000708 	.word	0x20000708
 8002c08:	2000075c 	.word	0x2000075c
 8002c0c:	20000760 	.word	0x20000760

08002c10 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af04      	add	r7, sp, #16
 8002c16:	0002      	movs	r2, r0
 8002c18:	1dfb      	adds	r3, r7, #7
 8002c1a:	701a      	strb	r2, [r3, #0]
  uint16_t value;

  i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8002c1c:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <readReg16Bit+0x50>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2201      	movs	r2, #1
 8002c22:	4313      	orrs	r3, r2
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	0019      	movs	r1, r3
 8002c28:	1dfb      	adds	r3, r7, #7
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	480d      	ldr	r0, [pc, #52]	@ (8002c64 <readReg16Bit+0x54>)
 8002c30:	2364      	movs	r3, #100	@ 0x64
 8002c32:	9302      	str	r3, [sp, #8]
 8002c34:	2302      	movs	r3, #2
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <readReg16Bit+0x58>)
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f002 ffbf 	bl	8005bc0 <HAL_I2C_Mem_Read>
 8002c42:	0003      	movs	r3, r0
 8002c44:	001a      	movs	r2, r3
 8002c46:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <readReg16Bit+0x5c>)
 8002c48:	701a      	strb	r2, [r3, #0]
  memcpy(&value, msgBuffer, 2);
 8002c4a:	4b07      	ldr	r3, [pc, #28]	@ (8002c68 <readReg16Bit+0x58>)
 8002c4c:	881a      	ldrh	r2, [r3, #0]
 8002c4e:	210e      	movs	r1, #14
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	801a      	strh	r2, [r3, #0]

  return value;
 8002c54:	187b      	adds	r3, r7, r1
 8002c56:	881b      	ldrh	r3, [r3, #0]
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b004      	add	sp, #16
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	2000006c 	.word	0x2000006c
 8002c64:	20000708 	.word	0x20000708
 8002c68:	2000075c 	.word	0x2000075c
 8002c6c:	20000760 	.word	0x20000760

08002c70 <writeMulti>:
  return value;
}

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register
void writeMulti(uint8_t reg, uint8_t const *src, uint8_t count){
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af04      	add	r7, sp, #16
 8002c76:	6039      	str	r1, [r7, #0]
 8002c78:	0011      	movs	r1, r2
 8002c7a:	1dfb      	adds	r3, r7, #7
 8002c7c:	1c02      	adds	r2, r0, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	1dbb      	adds	r3, r7, #6
 8002c82:	1c0a      	adds	r2, r1, #0
 8002c84:	701a      	strb	r2, [r3, #0]

  memcpy(msgBuffer, src, 4);
 8002c86:	4a11      	ldr	r2, [pc, #68]	@ (8002ccc <writeMulti+0x5c>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	0010      	movs	r0, r2
 8002c8c:	0019      	movs	r1, r3
 8002c8e:	2304      	movs	r3, #4
 8002c90:	001a      	movs	r2, r3
 8002c92:	f007 fbc9 	bl	800a428 <memcpy>
  i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT);
 8002c96:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <writeMulti+0x60>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	001c      	movs	r4, r3
 8002c9c:	1dfb      	adds	r3, r7, #7
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	1dbb      	adds	r3, r7, #6
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	480a      	ldr	r0, [pc, #40]	@ (8002cd4 <writeMulti+0x64>)
 8002caa:	2164      	movs	r1, #100	@ 0x64
 8002cac:	9102      	str	r1, [sp, #8]
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <writeMulti+0x5c>)
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	0021      	movs	r1, r4
 8002cb8:	f002 fe54 	bl	8005964 <HAL_I2C_Mem_Write>
 8002cbc:	0003      	movs	r3, r0
 8002cbe:	001a      	movs	r2, r3
 8002cc0:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <writeMulti+0x68>)
 8002cc2:	701a      	strb	r2, [r3, #0]
}
 8002cc4:	46c0      	nop			@ (mov r8, r8)
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b003      	add	sp, #12
 8002cca:	bd90      	pop	{r4, r7, pc}
 8002ccc:	2000075c 	.word	0x2000075c
 8002cd0:	2000006c 	.word	0x2000006c
 8002cd4:	20000708 	.word	0x20000708
 8002cd8:	20000760 	.word	0x20000760

08002cdc <readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count) {
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af04      	add	r7, sp, #16
 8002ce2:	6039      	str	r1, [r7, #0]
 8002ce4:	0011      	movs	r1, r2
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	1c02      	adds	r2, r0, #0
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	1dbb      	adds	r3, r7, #6
 8002cee:	1c0a      	adds	r2, r1, #0
 8002cf0:	701a      	strb	r2, [r3, #0]

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d30 <readMulti+0x54>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	001c      	movs	r4, r3
 8002cfe:	1dfb      	adds	r3, r7, #7
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	1dbb      	adds	r3, r7, #6
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	480a      	ldr	r0, [pc, #40]	@ (8002d34 <readMulti+0x58>)
 8002d0c:	2164      	movs	r1, #100	@ 0x64
 8002d0e:	9102      	str	r1, [sp, #8]
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	2301      	movs	r3, #1
 8002d18:	0021      	movs	r1, r4
 8002d1a:	f002 ff51 	bl	8005bc0 <HAL_I2C_Mem_Read>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	001a      	movs	r2, r3
 8002d22:	4b05      	ldr	r3, [pc, #20]	@ (8002d38 <readMulti+0x5c>)
 8002d24:	701a      	strb	r2, [r3, #0]
}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b003      	add	sp, #12
 8002d2c:	bd90      	pop	{r4, r7, pc}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	2000006c 	.word	0x2000006c
 8002d34:	20000708 	.word	0x20000708
 8002d38:	20000760 	.word	0x20000760

08002d3c <initVL53L0X>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
uint8_t initVL53L0X(uint8_t io_2v8, I2C_HandleTypeDef *handler){
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	0002      	movs	r2, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	1dfb      	adds	r3, r7, #7
 8002d48:	701a      	strb	r2, [r3, #0]
  // VL53L0X_DataInit() begin

  // Handler
  memcpy(&VL53L0X_I2C_Handler, handler, sizeof(*handler));
 8002d4a:	6839      	ldr	r1, [r7, #0]
 8002d4c:	4b5f      	ldr	r3, [pc, #380]	@ (8002ecc <initVL53L0X+0x190>)
 8002d4e:	2254      	movs	r2, #84	@ 0x54
 8002d50:	0018      	movs	r0, r3
 8002d52:	f007 fb69 	bl	800a428 <memcpy>

  // Reset the message buffer.
  msgBuffer[0] = 0;
 8002d56:	4b5e      	ldr	r3, [pc, #376]	@ (8002ed0 <initVL53L0X+0x194>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
  msgBuffer[1] = 0;
 8002d5c:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed0 <initVL53L0X+0x194>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	705a      	strb	r2, [r3, #1]
  msgBuffer[2] = 0;
 8002d62:	4b5b      	ldr	r3, [pc, #364]	@ (8002ed0 <initVL53L0X+0x194>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	709a      	strb	r2, [r3, #2]
  msgBuffer[3] = 0;
 8002d68:	4b59      	ldr	r3, [pc, #356]	@ (8002ed0 <initVL53L0X+0x194>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	70da      	strb	r2, [r3, #3]

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8002d6e:	1dfb      	adds	r3, r7, #7
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <initVL53L0X+0x52>
  {
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
      readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 8002d76:	2089      	movs	r0, #137	@ 0x89
 8002d78:	f7ff ff1a 	bl	8002bb0 <readReg>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	001a      	movs	r2, r3
    writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8002d80:	2301      	movs	r3, #1
 8002d82:	4313      	orrs	r3, r2
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	0019      	movs	r1, r3
 8002d88:	2089      	movs	r0, #137	@ 0x89
 8002d8a:	f7ff feb5 	bl	8002af8 <writeReg>
  }

  // "Set I2C standard mode"
  writeReg(0x88, 0x00);
 8002d8e:	2100      	movs	r1, #0
 8002d90:	2088      	movs	r0, #136	@ 0x88
 8002d92:	f7ff feb1 	bl	8002af8 <writeReg>

  writeReg(0x80, 0x01);
 8002d96:	2101      	movs	r1, #1
 8002d98:	2080      	movs	r0, #128	@ 0x80
 8002d9a:	f7ff fead 	bl	8002af8 <writeReg>
  writeReg(0xFF, 0x01);
 8002d9e:	2101      	movs	r1, #1
 8002da0:	20ff      	movs	r0, #255	@ 0xff
 8002da2:	f7ff fea9 	bl	8002af8 <writeReg>
  writeReg(0x00, 0x00);
 8002da6:	2100      	movs	r1, #0
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7ff fea5 	bl	8002af8 <writeReg>
  g_stopVariable = readReg(0x91);
 8002dae:	2091      	movs	r0, #145	@ 0x91
 8002db0:	f7ff fefe 	bl	8002bb0 <readReg>
 8002db4:	0003      	movs	r3, r0
 8002db6:	001a      	movs	r2, r3
 8002db8:	4b46      	ldr	r3, [pc, #280]	@ (8002ed4 <initVL53L0X+0x198>)
 8002dba:	701a      	strb	r2, [r3, #0]
  writeReg(0x00, 0x01);
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f7ff fe9a 	bl	8002af8 <writeReg>
  writeReg(0xFF, 0x00);
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	20ff      	movs	r0, #255	@ 0xff
 8002dc8:	f7ff fe96 	bl	8002af8 <writeReg>
  writeReg(0x80, 0x00);
 8002dcc:	2100      	movs	r1, #0
 8002dce:	2080      	movs	r0, #128	@ 0x80
 8002dd0:	f7ff fe92 	bl	8002af8 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 8002dd4:	2060      	movs	r0, #96	@ 0x60
 8002dd6:	f7ff feeb 	bl	8002bb0 <readReg>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	001a      	movs	r2, r3
 8002dde:	2312      	movs	r3, #18
 8002de0:	4313      	orrs	r3, r2
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	0019      	movs	r1, r3
 8002de6:	2060      	movs	r0, #96	@ 0x60
 8002de8:	f7ff fe86 	bl	8002af8 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(0.25);
 8002dec:	23fa      	movs	r3, #250	@ 0xfa
 8002dee:	059b      	lsls	r3, r3, #22
 8002df0:	1c18      	adds	r0, r3, #0
 8002df2:	f000 fa21 	bl	8003238 <setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8002df6:	21ff      	movs	r1, #255	@ 0xff
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f7ff fe7d 	bl	8002af8 <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  uint8_t spad_type_is_aperture;
  if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 8002dfe:	2313      	movs	r3, #19
 8002e00:	18fa      	adds	r2, r7, r3
 8002e02:	2314      	movs	r3, #20
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	0011      	movs	r1, r2
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 fdff 	bl	8003a0c <getSpadInfo>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d101      	bne.n	8002e16 <initVL53L0X+0xda>
 8002e12:	2300      	movs	r3, #0
 8002e14:	e209      	b.n	800322a <initVL53L0X+0x4ee>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002e16:	230c      	movs	r3, #12
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	2206      	movs	r2, #6
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	20b0      	movs	r0, #176	@ 0xb0
 8002e20:	f7ff ff5c 	bl	8002cdc <readMulti>

  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

  writeReg(0xFF, 0x01);
 8002e24:	2101      	movs	r1, #1
 8002e26:	20ff      	movs	r0, #255	@ 0xff
 8002e28:	f7ff fe66 	bl	8002af8 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	204f      	movs	r0, #79	@ 0x4f
 8002e30:	f7ff fe62 	bl	8002af8 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8002e34:	212c      	movs	r1, #44	@ 0x2c
 8002e36:	204e      	movs	r0, #78	@ 0x4e
 8002e38:	f7ff fe5e 	bl	8002af8 <writeReg>
  writeReg(0xFF, 0x00);
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	20ff      	movs	r0, #255	@ 0xff
 8002e40:	f7ff fe5a 	bl	8002af8 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8002e44:	21b4      	movs	r1, #180	@ 0xb4
 8002e46:	20b6      	movs	r0, #182	@ 0xb6
 8002e48:	f7ff fe56 	bl	8002af8 <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8002e4c:	2313      	movs	r3, #19
 8002e4e:	18fb      	adds	r3, r7, r3
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <initVL53L0X+0x11e>
 8002e56:	220c      	movs	r2, #12
 8002e58:	e000      	b.n	8002e5c <initVL53L0X+0x120>
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2315      	movs	r3, #21
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	701a      	strb	r2, [r3, #0]
  uint8_t spads_enabled = 0;
 8002e62:	2317      	movs	r3, #23
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < 48; i++)
 8002e6a:	2316      	movs	r3, #22
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
 8002e72:	e050      	b.n	8002f16 <initVL53L0X+0x1da>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8002e74:	2316      	movs	r3, #22
 8002e76:	18fa      	adds	r2, r7, r3
 8002e78:	2315      	movs	r3, #21
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d307      	bcc.n	8002e94 <initVL53L0X+0x158>
 8002e84:	2314      	movs	r3, #20
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2217      	movs	r2, #23
 8002e8c:	18ba      	adds	r2, r7, r2
 8002e8e:	7812      	ldrb	r2, [r2, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d121      	bne.n	8002ed8 <initVL53L0X+0x19c>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8002e94:	2116      	movs	r1, #22
 8002e96:	187b      	adds	r3, r7, r1
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	08db      	lsrs	r3, r3, #3
 8002e9c:	b2d8      	uxtb	r0, r3
 8002e9e:	0002      	movs	r2, r0
 8002ea0:	240c      	movs	r4, #12
 8002ea2:	193b      	adds	r3, r7, r4
 8002ea4:	5c9b      	ldrb	r3, [r3, r2]
 8002ea6:	b25b      	sxtb	r3, r3
 8002ea8:	187a      	adds	r2, r7, r1
 8002eaa:	7812      	ldrb	r2, [r2, #0]
 8002eac:	2107      	movs	r1, #7
 8002eae:	400a      	ands	r2, r1
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	4091      	lsls	r1, r2
 8002eb4:	000a      	movs	r2, r1
 8002eb6:	b252      	sxtb	r2, r2
 8002eb8:	43d2      	mvns	r2, r2
 8002eba:	b252      	sxtb	r2, r2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	b25b      	sxtb	r3, r3
 8002ec0:	0002      	movs	r2, r0
 8002ec2:	b2d9      	uxtb	r1, r3
 8002ec4:	193b      	adds	r3, r7, r4
 8002ec6:	5499      	strb	r1, [r3, r2]
 8002ec8:	e01f      	b.n	8002f0a <initVL53L0X+0x1ce>
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	20000708 	.word	0x20000708
 8002ed0:	2000075c 	.word	0x2000075c
 8002ed4:	20000702 	.word	0x20000702
    }
    else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8002ed8:	2016      	movs	r0, #22
 8002eda:	183b      	adds	r3, r7, r0
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	08db      	lsrs	r3, r3, #3
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	230c      	movs	r3, #12
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	5c9b      	ldrb	r3, [r3, r2]
 8002eea:	0019      	movs	r1, r3
 8002eec:	183b      	adds	r3, r7, r0
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2207      	movs	r2, #7
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	4119      	asrs	r1, r3
 8002ef6:	000b      	movs	r3, r1
 8002ef8:	2201      	movs	r2, #1
 8002efa:	4013      	ands	r3, r2
 8002efc:	d005      	beq.n	8002f0a <initVL53L0X+0x1ce>
    {
      spads_enabled++;
 8002efe:	2117      	movs	r1, #23
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	3201      	adds	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < 48; i++)
 8002f0a:	2116      	movs	r1, #22
 8002f0c:	187b      	adds	r3, r7, r1
 8002f0e:	781a      	ldrb	r2, [r3, #0]
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	3201      	adds	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
 8002f16:	2316      	movs	r3, #22
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8002f1e:	d9a9      	bls.n	8002e74 <initVL53L0X+0x138>
    }
  }

  writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8002f20:	230c      	movs	r3, #12
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	2206      	movs	r2, #6
 8002f26:	0019      	movs	r1, r3
 8002f28:	20b0      	movs	r0, #176	@ 0xb0
 8002f2a:	f7ff fea1 	bl	8002c70 <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(0xFF, 0x01);
 8002f2e:	2101      	movs	r1, #1
 8002f30:	20ff      	movs	r0, #255	@ 0xff
 8002f32:	f7ff fde1 	bl	8002af8 <writeReg>
  writeReg(0x00, 0x00);
 8002f36:	2100      	movs	r1, #0
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7ff fddd 	bl	8002af8 <writeReg>

  writeReg(0xFF, 0x00);
 8002f3e:	2100      	movs	r1, #0
 8002f40:	20ff      	movs	r0, #255	@ 0xff
 8002f42:	f7ff fdd9 	bl	8002af8 <writeReg>
  writeReg(0x09, 0x00);
 8002f46:	2100      	movs	r1, #0
 8002f48:	2009      	movs	r0, #9
 8002f4a:	f7ff fdd5 	bl	8002af8 <writeReg>
  writeReg(0x10, 0x00);
 8002f4e:	2100      	movs	r1, #0
 8002f50:	2010      	movs	r0, #16
 8002f52:	f7ff fdd1 	bl	8002af8 <writeReg>
  writeReg(0x11, 0x00);
 8002f56:	2100      	movs	r1, #0
 8002f58:	2011      	movs	r0, #17
 8002f5a:	f7ff fdcd 	bl	8002af8 <writeReg>

  writeReg(0x24, 0x01);
 8002f5e:	2101      	movs	r1, #1
 8002f60:	2024      	movs	r0, #36	@ 0x24
 8002f62:	f7ff fdc9 	bl	8002af8 <writeReg>
  writeReg(0x25, 0xFF);
 8002f66:	21ff      	movs	r1, #255	@ 0xff
 8002f68:	2025      	movs	r0, #37	@ 0x25
 8002f6a:	f7ff fdc5 	bl	8002af8 <writeReg>
  writeReg(0x75, 0x00);
 8002f6e:	2100      	movs	r1, #0
 8002f70:	2075      	movs	r0, #117	@ 0x75
 8002f72:	f7ff fdc1 	bl	8002af8 <writeReg>

  writeReg(0xFF, 0x01);
 8002f76:	2101      	movs	r1, #1
 8002f78:	20ff      	movs	r0, #255	@ 0xff
 8002f7a:	f7ff fdbd 	bl	8002af8 <writeReg>
  writeReg(0x4E, 0x2C);
 8002f7e:	212c      	movs	r1, #44	@ 0x2c
 8002f80:	204e      	movs	r0, #78	@ 0x4e
 8002f82:	f7ff fdb9 	bl	8002af8 <writeReg>
  writeReg(0x48, 0x00);
 8002f86:	2100      	movs	r1, #0
 8002f88:	2048      	movs	r0, #72	@ 0x48
 8002f8a:	f7ff fdb5 	bl	8002af8 <writeReg>
  writeReg(0x30, 0x20);
 8002f8e:	2120      	movs	r1, #32
 8002f90:	2030      	movs	r0, #48	@ 0x30
 8002f92:	f7ff fdb1 	bl	8002af8 <writeReg>

  writeReg(0xFF, 0x00);
 8002f96:	2100      	movs	r1, #0
 8002f98:	20ff      	movs	r0, #255	@ 0xff
 8002f9a:	f7ff fdad 	bl	8002af8 <writeReg>
  writeReg(0x30, 0x09);
 8002f9e:	2109      	movs	r1, #9
 8002fa0:	2030      	movs	r0, #48	@ 0x30
 8002fa2:	f7ff fda9 	bl	8002af8 <writeReg>
  writeReg(0x54, 0x00);
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	2054      	movs	r0, #84	@ 0x54
 8002faa:	f7ff fda5 	bl	8002af8 <writeReg>
  writeReg(0x31, 0x04);
 8002fae:	2104      	movs	r1, #4
 8002fb0:	2031      	movs	r0, #49	@ 0x31
 8002fb2:	f7ff fda1 	bl	8002af8 <writeReg>
  writeReg(0x32, 0x03);
 8002fb6:	2103      	movs	r1, #3
 8002fb8:	2032      	movs	r0, #50	@ 0x32
 8002fba:	f7ff fd9d 	bl	8002af8 <writeReg>
  writeReg(0x40, 0x83);
 8002fbe:	2183      	movs	r1, #131	@ 0x83
 8002fc0:	2040      	movs	r0, #64	@ 0x40
 8002fc2:	f7ff fd99 	bl	8002af8 <writeReg>
  writeReg(0x46, 0x25);
 8002fc6:	2125      	movs	r1, #37	@ 0x25
 8002fc8:	2046      	movs	r0, #70	@ 0x46
 8002fca:	f7ff fd95 	bl	8002af8 <writeReg>
  writeReg(0x60, 0x00);
 8002fce:	2100      	movs	r1, #0
 8002fd0:	2060      	movs	r0, #96	@ 0x60
 8002fd2:	f7ff fd91 	bl	8002af8 <writeReg>
  writeReg(0x27, 0x00);
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	2027      	movs	r0, #39	@ 0x27
 8002fda:	f7ff fd8d 	bl	8002af8 <writeReg>
  writeReg(0x50, 0x06);
 8002fde:	2106      	movs	r1, #6
 8002fe0:	2050      	movs	r0, #80	@ 0x50
 8002fe2:	f7ff fd89 	bl	8002af8 <writeReg>
  writeReg(0x51, 0x00);
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	2051      	movs	r0, #81	@ 0x51
 8002fea:	f7ff fd85 	bl	8002af8 <writeReg>
  writeReg(0x52, 0x96);
 8002fee:	2196      	movs	r1, #150	@ 0x96
 8002ff0:	2052      	movs	r0, #82	@ 0x52
 8002ff2:	f7ff fd81 	bl	8002af8 <writeReg>
  writeReg(0x56, 0x08);
 8002ff6:	2108      	movs	r1, #8
 8002ff8:	2056      	movs	r0, #86	@ 0x56
 8002ffa:	f7ff fd7d 	bl	8002af8 <writeReg>
  writeReg(0x57, 0x30);
 8002ffe:	2130      	movs	r1, #48	@ 0x30
 8003000:	2057      	movs	r0, #87	@ 0x57
 8003002:	f7ff fd79 	bl	8002af8 <writeReg>
  writeReg(0x61, 0x00);
 8003006:	2100      	movs	r1, #0
 8003008:	2061      	movs	r0, #97	@ 0x61
 800300a:	f7ff fd75 	bl	8002af8 <writeReg>
  writeReg(0x62, 0x00);
 800300e:	2100      	movs	r1, #0
 8003010:	2062      	movs	r0, #98	@ 0x62
 8003012:	f7ff fd71 	bl	8002af8 <writeReg>
  writeReg(0x64, 0x00);
 8003016:	2100      	movs	r1, #0
 8003018:	2064      	movs	r0, #100	@ 0x64
 800301a:	f7ff fd6d 	bl	8002af8 <writeReg>
  writeReg(0x65, 0x00);
 800301e:	2100      	movs	r1, #0
 8003020:	2065      	movs	r0, #101	@ 0x65
 8003022:	f7ff fd69 	bl	8002af8 <writeReg>
  writeReg(0x66, 0xA0);
 8003026:	21a0      	movs	r1, #160	@ 0xa0
 8003028:	2066      	movs	r0, #102	@ 0x66
 800302a:	f7ff fd65 	bl	8002af8 <writeReg>

  writeReg(0xFF, 0x01);
 800302e:	2101      	movs	r1, #1
 8003030:	20ff      	movs	r0, #255	@ 0xff
 8003032:	f7ff fd61 	bl	8002af8 <writeReg>
  writeReg(0x22, 0x32);
 8003036:	2132      	movs	r1, #50	@ 0x32
 8003038:	2022      	movs	r0, #34	@ 0x22
 800303a:	f7ff fd5d 	bl	8002af8 <writeReg>
  writeReg(0x47, 0x14);
 800303e:	2114      	movs	r1, #20
 8003040:	2047      	movs	r0, #71	@ 0x47
 8003042:	f7ff fd59 	bl	8002af8 <writeReg>
  writeReg(0x49, 0xFF);
 8003046:	21ff      	movs	r1, #255	@ 0xff
 8003048:	2049      	movs	r0, #73	@ 0x49
 800304a:	f7ff fd55 	bl	8002af8 <writeReg>
  writeReg(0x4A, 0x00);
 800304e:	2100      	movs	r1, #0
 8003050:	204a      	movs	r0, #74	@ 0x4a
 8003052:	f7ff fd51 	bl	8002af8 <writeReg>

  writeReg(0xFF, 0x00);
 8003056:	2100      	movs	r1, #0
 8003058:	20ff      	movs	r0, #255	@ 0xff
 800305a:	f7ff fd4d 	bl	8002af8 <writeReg>
  writeReg(0x7A, 0x0A);
 800305e:	210a      	movs	r1, #10
 8003060:	207a      	movs	r0, #122	@ 0x7a
 8003062:	f7ff fd49 	bl	8002af8 <writeReg>
  writeReg(0x7B, 0x00);
 8003066:	2100      	movs	r1, #0
 8003068:	207b      	movs	r0, #123	@ 0x7b
 800306a:	f7ff fd45 	bl	8002af8 <writeReg>
  writeReg(0x78, 0x21);
 800306e:	2121      	movs	r1, #33	@ 0x21
 8003070:	2078      	movs	r0, #120	@ 0x78
 8003072:	f7ff fd41 	bl	8002af8 <writeReg>

  writeReg(0xFF, 0x01);
 8003076:	2101      	movs	r1, #1
 8003078:	20ff      	movs	r0, #255	@ 0xff
 800307a:	f7ff fd3d 	bl	8002af8 <writeReg>
  writeReg(0x23, 0x34);
 800307e:	2134      	movs	r1, #52	@ 0x34
 8003080:	2023      	movs	r0, #35	@ 0x23
 8003082:	f7ff fd39 	bl	8002af8 <writeReg>
  writeReg(0x42, 0x00);
 8003086:	2100      	movs	r1, #0
 8003088:	2042      	movs	r0, #66	@ 0x42
 800308a:	f7ff fd35 	bl	8002af8 <writeReg>
  writeReg(0x44, 0xFF);
 800308e:	21ff      	movs	r1, #255	@ 0xff
 8003090:	2044      	movs	r0, #68	@ 0x44
 8003092:	f7ff fd31 	bl	8002af8 <writeReg>
  writeReg(0x45, 0x26);
 8003096:	2126      	movs	r1, #38	@ 0x26
 8003098:	2045      	movs	r0, #69	@ 0x45
 800309a:	f7ff fd2d 	bl	8002af8 <writeReg>
  writeReg(0x46, 0x05);
 800309e:	2105      	movs	r1, #5
 80030a0:	2046      	movs	r0, #70	@ 0x46
 80030a2:	f7ff fd29 	bl	8002af8 <writeReg>
  writeReg(0x40, 0x40);
 80030a6:	2140      	movs	r1, #64	@ 0x40
 80030a8:	2040      	movs	r0, #64	@ 0x40
 80030aa:	f7ff fd25 	bl	8002af8 <writeReg>
  writeReg(0x0E, 0x06);
 80030ae:	2106      	movs	r1, #6
 80030b0:	200e      	movs	r0, #14
 80030b2:	f7ff fd21 	bl	8002af8 <writeReg>
  writeReg(0x20, 0x1A);
 80030b6:	211a      	movs	r1, #26
 80030b8:	2020      	movs	r0, #32
 80030ba:	f7ff fd1d 	bl	8002af8 <writeReg>
  writeReg(0x43, 0x40);
 80030be:	2140      	movs	r1, #64	@ 0x40
 80030c0:	2043      	movs	r0, #67	@ 0x43
 80030c2:	f7ff fd19 	bl	8002af8 <writeReg>

  writeReg(0xFF, 0x00);
 80030c6:	2100      	movs	r1, #0
 80030c8:	20ff      	movs	r0, #255	@ 0xff
 80030ca:	f7ff fd15 	bl	8002af8 <writeReg>
  writeReg(0x34, 0x03);
 80030ce:	2103      	movs	r1, #3
 80030d0:	2034      	movs	r0, #52	@ 0x34
 80030d2:	f7ff fd11 	bl	8002af8 <writeReg>
  writeReg(0x35, 0x44);
 80030d6:	2144      	movs	r1, #68	@ 0x44
 80030d8:	2035      	movs	r0, #53	@ 0x35
 80030da:	f7ff fd0d 	bl	8002af8 <writeReg>

  writeReg(0xFF, 0x01);
 80030de:	2101      	movs	r1, #1
 80030e0:	20ff      	movs	r0, #255	@ 0xff
 80030e2:	f7ff fd09 	bl	8002af8 <writeReg>
  writeReg(0x31, 0x04);
 80030e6:	2104      	movs	r1, #4
 80030e8:	2031      	movs	r0, #49	@ 0x31
 80030ea:	f7ff fd05 	bl	8002af8 <writeReg>
  writeReg(0x4B, 0x09);
 80030ee:	2109      	movs	r1, #9
 80030f0:	204b      	movs	r0, #75	@ 0x4b
 80030f2:	f7ff fd01 	bl	8002af8 <writeReg>
  writeReg(0x4C, 0x05);
 80030f6:	2105      	movs	r1, #5
 80030f8:	204c      	movs	r0, #76	@ 0x4c
 80030fa:	f7ff fcfd 	bl	8002af8 <writeReg>
  writeReg(0x4D, 0x04);
 80030fe:	2104      	movs	r1, #4
 8003100:	204d      	movs	r0, #77	@ 0x4d
 8003102:	f7ff fcf9 	bl	8002af8 <writeReg>

  writeReg(0xFF, 0x00);
 8003106:	2100      	movs	r1, #0
 8003108:	20ff      	movs	r0, #255	@ 0xff
 800310a:	f7ff fcf5 	bl	8002af8 <writeReg>
  writeReg(0x44, 0x00);
 800310e:	2100      	movs	r1, #0
 8003110:	2044      	movs	r0, #68	@ 0x44
 8003112:	f7ff fcf1 	bl	8002af8 <writeReg>
  writeReg(0x45, 0x20);
 8003116:	2120      	movs	r1, #32
 8003118:	2045      	movs	r0, #69	@ 0x45
 800311a:	f7ff fced 	bl	8002af8 <writeReg>
  writeReg(0x47, 0x08);
 800311e:	2108      	movs	r1, #8
 8003120:	2047      	movs	r0, #71	@ 0x47
 8003122:	f7ff fce9 	bl	8002af8 <writeReg>
  writeReg(0x48, 0x28);
 8003126:	2128      	movs	r1, #40	@ 0x28
 8003128:	2048      	movs	r0, #72	@ 0x48
 800312a:	f7ff fce5 	bl	8002af8 <writeReg>
  writeReg(0x67, 0x00);
 800312e:	2100      	movs	r1, #0
 8003130:	2067      	movs	r0, #103	@ 0x67
 8003132:	f7ff fce1 	bl	8002af8 <writeReg>
  writeReg(0x70, 0x04);
 8003136:	2104      	movs	r1, #4
 8003138:	2070      	movs	r0, #112	@ 0x70
 800313a:	f7ff fcdd 	bl	8002af8 <writeReg>
  writeReg(0x71, 0x01);
 800313e:	2101      	movs	r1, #1
 8003140:	2071      	movs	r0, #113	@ 0x71
 8003142:	f7ff fcd9 	bl	8002af8 <writeReg>
  writeReg(0x72, 0xFE);
 8003146:	21fe      	movs	r1, #254	@ 0xfe
 8003148:	2072      	movs	r0, #114	@ 0x72
 800314a:	f7ff fcd5 	bl	8002af8 <writeReg>
  writeReg(0x76, 0x00);
 800314e:	2100      	movs	r1, #0
 8003150:	2076      	movs	r0, #118	@ 0x76
 8003152:	f7ff fcd1 	bl	8002af8 <writeReg>
  writeReg(0x77, 0x00);
 8003156:	2100      	movs	r1, #0
 8003158:	2077      	movs	r0, #119	@ 0x77
 800315a:	f7ff fccd 	bl	8002af8 <writeReg>

  writeReg(0xFF, 0x01);
 800315e:	2101      	movs	r1, #1
 8003160:	20ff      	movs	r0, #255	@ 0xff
 8003162:	f7ff fcc9 	bl	8002af8 <writeReg>
  writeReg(0x0D, 0x01);
 8003166:	2101      	movs	r1, #1
 8003168:	200d      	movs	r0, #13
 800316a:	f7ff fcc5 	bl	8002af8 <writeReg>

  writeReg(0xFF, 0x00);
 800316e:	2100      	movs	r1, #0
 8003170:	20ff      	movs	r0, #255	@ 0xff
 8003172:	f7ff fcc1 	bl	8002af8 <writeReg>
  writeReg(0x80, 0x01);
 8003176:	2101      	movs	r1, #1
 8003178:	2080      	movs	r0, #128	@ 0x80
 800317a:	f7ff fcbd 	bl	8002af8 <writeReg>
  writeReg(0x01, 0xF8);
 800317e:	21f8      	movs	r1, #248	@ 0xf8
 8003180:	2001      	movs	r0, #1
 8003182:	f7ff fcb9 	bl	8002af8 <writeReg>

  writeReg(0xFF, 0x01);
 8003186:	2101      	movs	r1, #1
 8003188:	20ff      	movs	r0, #255	@ 0xff
 800318a:	f7ff fcb5 	bl	8002af8 <writeReg>
  writeReg(0x8E, 0x01);
 800318e:	2101      	movs	r1, #1
 8003190:	208e      	movs	r0, #142	@ 0x8e
 8003192:	f7ff fcb1 	bl	8002af8 <writeReg>
  writeReg(0x00, 0x01);
 8003196:	2101      	movs	r1, #1
 8003198:	2000      	movs	r0, #0
 800319a:	f7ff fcad 	bl	8002af8 <writeReg>
  writeReg(0xFF, 0x00);
 800319e:	2100      	movs	r1, #0
 80031a0:	20ff      	movs	r0, #255	@ 0xff
 80031a2:	f7ff fca9 	bl	8002af8 <writeReg>
  writeReg(0x80, 0x00);
 80031a6:	2100      	movs	r1, #0
 80031a8:	2080      	movs	r0, #128	@ 0x80
 80031aa:	f7ff fca5 	bl	8002af8 <writeReg>
  // -- VL53L0X_load_tuning_settings() end

  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin

  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80031ae:	2104      	movs	r1, #4
 80031b0:	200a      	movs	r0, #10
 80031b2:	f7ff fca1 	bl	8002af8 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80031b6:	2084      	movs	r0, #132	@ 0x84
 80031b8:	f7ff fcfa 	bl	8002bb0 <readReg>
 80031bc:	0003      	movs	r3, r0
 80031be:	001a      	movs	r2, r3
 80031c0:	2310      	movs	r3, #16
 80031c2:	439a      	bics	r2, r3
 80031c4:	0013      	movs	r3, r2
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	0019      	movs	r1, r3
 80031ca:	2084      	movs	r0, #132	@ 0x84
 80031cc:	f7ff fc94 	bl	8002af8 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80031d0:	2101      	movs	r1, #1
 80031d2:	200b      	movs	r0, #11
 80031d4:	f7ff fc90 	bl	8002af8 <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  g_measTimBudUs = getMeasurementTimingBudget();
 80031d8:	f000 f924 	bl	8003424 <getMeasurementTimingBudget>
 80031dc:	0002      	movs	r2, r0
 80031de:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <initVL53L0X+0x4f8>)
 80031e0:	601a      	str	r2, [r3, #0]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80031e2:	21e8      	movs	r1, #232	@ 0xe8
 80031e4:	2001      	movs	r0, #1
 80031e6:	f7ff fc87 	bl	8002af8 <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(g_measTimBudUs);
 80031ea:	4b12      	ldr	r3, [pc, #72]	@ (8003234 <initVL53L0X+0x4f8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 f850 	bl	8003294 <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80031f4:	2101      	movs	r1, #1
 80031f6:	2001      	movs	r0, #1
 80031f8:	f7ff fc7e 	bl	8002af8 <writeReg>
  if (!performSingleRefCalibration(0x40)) { return false; }
 80031fc:	2040      	movs	r0, #64	@ 0x40
 80031fe:	f000 fde7 	bl	8003dd0 <performSingleRefCalibration>
 8003202:	1e03      	subs	r3, r0, #0
 8003204:	d101      	bne.n	800320a <initVL53L0X+0x4ce>
 8003206:	2300      	movs	r3, #0
 8003208:	e00f      	b.n	800322a <initVL53L0X+0x4ee>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 800320a:	2102      	movs	r1, #2
 800320c:	2001      	movs	r0, #1
 800320e:	f7ff fc73 	bl	8002af8 <writeReg>
  if (!performSingleRefCalibration(0x00)) { return false; }
 8003212:	2000      	movs	r0, #0
 8003214:	f000 fddc 	bl	8003dd0 <performSingleRefCalibration>
 8003218:	1e03      	subs	r3, r0, #0
 800321a:	d101      	bne.n	8003220 <initVL53L0X+0x4e4>
 800321c:	2300      	movs	r3, #0
 800321e:	e004      	b.n	800322a <initVL53L0X+0x4ee>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8003220:	21e8      	movs	r1, #232	@ 0xe8
 8003222:	2001      	movs	r0, #1
 8003224:	f7ff fc68 	bl	8002af8 <writeReg>

  // VL53L0X_PerformRefCalibration() end

  return true;
 8003228:	2301      	movs	r3, #1
}
 800322a:	0018      	movs	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	b007      	add	sp, #28
 8003230:	bd90      	pop	{r4, r7, pc}
 8003232:	46c0      	nop			@ (mov r8, r8)
 8003234:	20000704 	.word	0x20000704

08003238 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t setSignalRateLimit(float limit_Mcps)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8003240:	2100      	movs	r1, #0
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd f926 	bl	8000494 <__aeabi_fcmplt>
 8003248:	1e03      	subs	r3, r0, #0
 800324a:	d108      	bne.n	800325e <setSignalRateLimit+0x26>
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7fd fe53 	bl	8000ef8 <__aeabi_f2d>
 8003252:	4a0e      	ldr	r2, [pc, #56]	@ (800328c <setSignalRateLimit+0x54>)
 8003254:	4b0e      	ldr	r3, [pc, #56]	@ (8003290 <setSignalRateLimit+0x58>)
 8003256:	f7fd f8f7 	bl	8000448 <__aeabi_dcmpgt>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d001      	beq.n	8003262 <setSignalRateLimit+0x2a>
 800325e:	2300      	movs	r3, #0
 8003260:	e00f      	b.n	8003282 <setSignalRateLimit+0x4a>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8003262:	2186      	movs	r1, #134	@ 0x86
 8003264:	05c9      	lsls	r1, r1, #23
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd fa1a 	bl	80006a0 <__aeabi_fmul>
 800326c:	1c03      	adds	r3, r0, #0
 800326e:	1c18      	adds	r0, r3, #0
 8003270:	f7fd f938 	bl	80004e4 <__aeabi_f2uiz>
 8003274:	0003      	movs	r3, r0
 8003276:	b29b      	uxth	r3, r3
 8003278:	0019      	movs	r1, r3
 800327a:	2044      	movs	r0, #68	@ 0x44
 800327c:	f7ff fc6a 	bl	8002b54 <writeReg16Bit>
  return true;
 8003280:	2301      	movs	r3, #1
}
 8003282:	0018      	movs	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	b002      	add	sp, #8
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	0a3d70a4 	.word	0x0a3d70a4
 8003290:	407fffd7 	.word	0x407fffd7

08003294 <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
uint8_t setMeasurementTimingBudget(uint32_t budget_us)
{
 8003294:	b5b0      	push	{r4, r5, r7, lr}
 8003296:	b092      	sub	sp, #72	@ 0x48
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 800329c:	2340      	movs	r3, #64	@ 0x40
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	22a5      	movs	r2, #165	@ 0xa5
 80032a2:	00d2      	lsls	r2, r2, #3
 80032a4:	801a      	strh	r2, [r3, #0]
  uint16_t const EndOverhead        = 960;
 80032a6:	233e      	movs	r3, #62	@ 0x3e
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	22f0      	movs	r2, #240	@ 0xf0
 80032ac:	0092      	lsls	r2, r2, #2
 80032ae:	801a      	strh	r2, [r3, #0]
  uint16_t const MsrcOverhead       = 660;
 80032b0:	233c      	movs	r3, #60	@ 0x3c
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	22a5      	movs	r2, #165	@ 0xa5
 80032b6:	0092      	lsls	r2, r2, #2
 80032b8:	801a      	strh	r2, [r3, #0]
  uint16_t const TccOverhead        = 590;
 80032ba:	233a      	movs	r3, #58	@ 0x3a
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	4a54      	ldr	r2, [pc, #336]	@ (8003410 <setMeasurementTimingBudget+0x17c>)
 80032c0:	801a      	strh	r2, [r3, #0]
  uint16_t const DssOverhead        = 690;
 80032c2:	2338      	movs	r3, #56	@ 0x38
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	4a53      	ldr	r2, [pc, #332]	@ (8003414 <setMeasurementTimingBudget+0x180>)
 80032c8:	801a      	strh	r2, [r3, #0]
  uint16_t const PreRangeOverhead   = 660;
 80032ca:	2336      	movs	r3, #54	@ 0x36
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	22a5      	movs	r2, #165	@ 0xa5
 80032d0:	0092      	lsls	r2, r2, #2
 80032d2:	801a      	strh	r2, [r3, #0]
  uint16_t const FinalRangeOverhead = 550;
 80032d4:	2334      	movs	r3, #52	@ 0x34
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	4a4f      	ldr	r2, [pc, #316]	@ (8003418 <setMeasurementTimingBudget+0x184>)
 80032da:	801a      	strh	r2, [r3, #0]

  uint32_t const MinTimingBudget = 20000;
 80032dc:	4b4f      	ldr	r3, [pc, #316]	@ (800341c <setMeasurementTimingBudget+0x188>)
 80032de:	633b      	str	r3, [r7, #48]	@ 0x30

  if (budget_us < MinTimingBudget) { return false; }
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d201      	bcs.n	80032ec <setMeasurementTimingBudget+0x58>
 80032e8:	2300      	movs	r3, #0
 80032ea:	e08c      	b.n	8003406 <setMeasurementTimingBudget+0x172>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 80032ec:	2340      	movs	r3, #64	@ 0x40
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	233e      	movs	r3, #62	@ 0x3e
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	18d3      	adds	r3, r2, r3
 80032fa:	647b      	str	r3, [r7, #68]	@ 0x44

  getSequenceStepEnables(&enables);
 80032fc:	2424      	movs	r4, #36	@ 0x24
 80032fe:	193b      	adds	r3, r7, r4
 8003300:	0018      	movs	r0, r3
 8003302:	f000 fc1d 	bl	8003b40 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8003306:	250c      	movs	r5, #12
 8003308:	197a      	adds	r2, r7, r5
 800330a:	193b      	adds	r3, r7, r4
 800330c:	0011      	movs	r1, r2
 800330e:	0018      	movs	r0, r3
 8003310:	f000 fc50 	bl	8003bb4 <getSequenceStepTimeouts>

  if (enables.tcc)
 8003314:	193b      	adds	r3, r7, r4
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <setMeasurementTimingBudget+0x9a>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 800331c:	197b      	adds	r3, r7, r5
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	233a      	movs	r3, #58	@ 0x3a
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	18d3      	adds	r3, r2, r3
 8003328:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800332a:	18d3      	adds	r3, r2, r3
 800332c:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.dss)
 800332e:	2324      	movs	r3, #36	@ 0x24
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	789b      	ldrb	r3, [r3, #2]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <setMeasurementTimingBudget+0xbc>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8003338:	230c      	movs	r3, #12
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	2338      	movs	r3, #56	@ 0x38
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	18d3      	adds	r3, r2, r3
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800334a:	18d3      	adds	r3, r2, r3
 800334c:	647b      	str	r3, [r7, #68]	@ 0x44
 800334e:	e00e      	b.n	800336e <setMeasurementTimingBudget+0xda>
  }
  else if (enables.msrc)
 8003350:	2324      	movs	r3, #36	@ 0x24
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	785b      	ldrb	r3, [r3, #1]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <setMeasurementTimingBudget+0xda>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 800335a:	230c      	movs	r3, #12
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	233c      	movs	r3, #60	@ 0x3c
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	18d3      	adds	r3, r2, r3
 8003368:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800336a:	18d3      	adds	r3, r2, r3
 800336c:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.pre_range)
 800336e:	2324      	movs	r3, #36	@ 0x24
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	78db      	ldrb	r3, [r3, #3]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d009      	beq.n	800338c <setMeasurementTimingBudget+0xf8>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8003378:	230c      	movs	r3, #12
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	2336      	movs	r3, #54	@ 0x36
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	18d3      	adds	r3, r2, r3
 8003386:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003388:	18d3      	adds	r3, r2, r3
 800338a:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  if (enables.final_range)
 800338c:	2324      	movs	r3, #36	@ 0x24
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	791b      	ldrb	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d036      	beq.n	8003404 <setMeasurementTimingBudget+0x170>
  {
    used_budget_us += FinalRangeOverhead;
 8003396:	2334      	movs	r3, #52	@ 0x34
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800339e:	18d3      	adds	r3, r2, r3
 80033a0:	647b      	str	r3, [r7, #68]	@ 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 80033a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d901      	bls.n	80033ae <setMeasurementTimingBudget+0x11a>
    {
      // "Requested timeout too big."
      return false;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e02b      	b.n	8003406 <setMeasurementTimingBudget+0x172>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 80033b6:	240c      	movs	r4, #12
 80033b8:	193b      	adds	r3, r7, r4
 80033ba:	885b      	ldrh	r3, [r3, #2]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c0:	0011      	movs	r1, r2
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 fcd3 	bl	8003d6e <timeoutMicrosecondsToMclks>
 80033c8:	0002      	movs	r2, r0
    uint16_t final_range_timeout_mclks =
 80033ca:	2042      	movs	r0, #66	@ 0x42
 80033cc:	183b      	adds	r3, r7, r0
 80033ce:	801a      	strh	r2, [r3, #0]

    if (enables.pre_range)
 80033d0:	2324      	movs	r3, #36	@ 0x24
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	78db      	ldrb	r3, [r3, #3]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d006      	beq.n	80033e8 <setMeasurementTimingBudget+0x154>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 80033da:	193b      	adds	r3, r7, r4
 80033dc:	88d9      	ldrh	r1, [r3, #6]
 80033de:	183b      	adds	r3, r7, r0
 80033e0:	183a      	adds	r2, r7, r0
 80033e2:	8812      	ldrh	r2, [r2, #0]
 80033e4:	188a      	adds	r2, r1, r2
 80033e6:	801a      	strh	r2, [r3, #0]
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80033e8:	2342      	movs	r3, #66	@ 0x42
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	0018      	movs	r0, r3
 80033f0:	f000 fc5b 	bl	8003caa <encodeTimeout>
 80033f4:	0003      	movs	r3, r0
 80033f6:	0019      	movs	r1, r3
 80033f8:	2071      	movs	r0, #113	@ 0x71
 80033fa:	f7ff fbab 	bl	8002b54 <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    g_measTimBudUs = budget_us; // store for internal reuse
 80033fe:	4b08      	ldr	r3, [pc, #32]	@ (8003420 <setMeasurementTimingBudget+0x18c>)
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	601a      	str	r2, [r3, #0]
  }
  return true;
 8003404:	2301      	movs	r3, #1
}
 8003406:	0018      	movs	r0, r3
 8003408:	46bd      	mov	sp, r7
 800340a:	b012      	add	sp, #72	@ 0x48
 800340c:	bdb0      	pop	{r4, r5, r7, pc}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	0000024e 	.word	0x0000024e
 8003414:	000002b2 	.word	0x000002b2
 8003418:	00000226 	.word	0x00000226
 800341c:	00004e20 	.word	0x00004e20
 8003420:	20000704 	.word	0x20000704

08003424 <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(void)
{
 8003424:	b5b0      	push	{r4, r5, r7, lr}
 8003426:	b08c      	sub	sp, #48	@ 0x30
 8003428:	af00      	add	r7, sp, #0
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 800342a:	212a      	movs	r1, #42	@ 0x2a
 800342c:	187b      	adds	r3, r7, r1
 800342e:	4a3e      	ldr	r2, [pc, #248]	@ (8003528 <getMeasurementTimingBudget+0x104>)
 8003430:	801a      	strh	r2, [r3, #0]
  uint16_t const EndOverhead        = 960;
 8003432:	2028      	movs	r0, #40	@ 0x28
 8003434:	183b      	adds	r3, r7, r0
 8003436:	22f0      	movs	r2, #240	@ 0xf0
 8003438:	0092      	lsls	r2, r2, #2
 800343a:	801a      	strh	r2, [r3, #0]
  uint16_t const MsrcOverhead       = 660;
 800343c:	2326      	movs	r3, #38	@ 0x26
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	22a5      	movs	r2, #165	@ 0xa5
 8003442:	0092      	lsls	r2, r2, #2
 8003444:	801a      	strh	r2, [r3, #0]
  uint16_t const TccOverhead        = 590;
 8003446:	2524      	movs	r5, #36	@ 0x24
 8003448:	197b      	adds	r3, r7, r5
 800344a:	4a38      	ldr	r2, [pc, #224]	@ (800352c <getMeasurementTimingBudget+0x108>)
 800344c:	801a      	strh	r2, [r3, #0]
  uint16_t const DssOverhead        = 690;
 800344e:	2322      	movs	r3, #34	@ 0x22
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	4a37      	ldr	r2, [pc, #220]	@ (8003530 <getMeasurementTimingBudget+0x10c>)
 8003454:	801a      	strh	r2, [r3, #0]
  uint16_t const PreRangeOverhead   = 660;
 8003456:	2320      	movs	r3, #32
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	22a5      	movs	r2, #165	@ 0xa5
 800345c:	0092      	lsls	r2, r2, #2
 800345e:	801a      	strh	r2, [r3, #0]
  uint16_t const FinalRangeOverhead = 550;
 8003460:	231e      	movs	r3, #30
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	4a33      	ldr	r2, [pc, #204]	@ (8003534 <getMeasurementTimingBudget+0x110>)
 8003466:	801a      	strh	r2, [r3, #0]

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 8003468:	187b      	adds	r3, r7, r1
 800346a:	881a      	ldrh	r2, [r3, #0]
 800346c:	183b      	adds	r3, r7, r0
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	18d3      	adds	r3, r2, r3
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c

  getSequenceStepEnables(&enables);
 8003474:	2418      	movs	r4, #24
 8003476:	193b      	adds	r3, r7, r4
 8003478:	0018      	movs	r0, r3
 800347a:	f000 fb61 	bl	8003b40 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 800347e:	003a      	movs	r2, r7
 8003480:	193b      	adds	r3, r7, r4
 8003482:	0011      	movs	r1, r2
 8003484:	0018      	movs	r0, r3
 8003486:	f000 fb95 	bl	8003bb4 <getSequenceStepTimeouts>

  if (enables.tcc)
 800348a:	193b      	adds	r3, r7, r4
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <getMeasurementTimingBudget+0x7e>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8003492:	003b      	movs	r3, r7
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	197b      	adds	r3, r7, r5
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	18d3      	adds	r3, r2, r3
 800349c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800349e:	18d3      	adds	r3, r2, r3
 80034a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.dss)
 80034a2:	2318      	movs	r3, #24
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	789b      	ldrb	r3, [r3, #2]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <getMeasurementTimingBudget+0x9e>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80034ac:	003b      	movs	r3, r7
 80034ae:	68da      	ldr	r2, [r3, #12]
 80034b0:	2322      	movs	r3, #34	@ 0x22
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	18d3      	adds	r3, r2, r3
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034bc:	18d3      	adds	r3, r2, r3
 80034be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034c0:	e00d      	b.n	80034de <getMeasurementTimingBudget+0xba>
  }
  else if (enables.msrc)
 80034c2:	2318      	movs	r3, #24
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	785b      	ldrb	r3, [r3, #1]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <getMeasurementTimingBudget+0xba>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80034cc:	003b      	movs	r3, r7
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	2326      	movs	r3, #38	@ 0x26
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	18d3      	adds	r3, r2, r3
 80034d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034da:	18d3      	adds	r3, r2, r3
 80034dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.pre_range)
 80034de:	2318      	movs	r3, #24
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	78db      	ldrb	r3, [r3, #3]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <getMeasurementTimingBudget+0xd6>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80034e8:	003b      	movs	r3, r7
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	2320      	movs	r3, #32
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	18d3      	adds	r3, r2, r3
 80034f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034f6:	18d3      	adds	r3, r2, r3
 80034f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  if (enables.final_range)
 80034fa:	2318      	movs	r3, #24
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	791b      	ldrb	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <getMeasurementTimingBudget+0xf2>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8003504:	003b      	movs	r3, r7
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	231e      	movs	r3, #30
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	18d3      	adds	r3, r2, r3
 8003510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003512:	18d3      	adds	r3, r2, r3
 8003514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  g_measTimBudUs = budget_us; // store for internal reuse
 8003516:	4b08      	ldr	r3, [pc, #32]	@ (8003538 <getMeasurementTimingBudget+0x114>)
 8003518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800351a:	601a      	str	r2, [r3, #0]
  return budget_us;
 800351c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800351e:	0018      	movs	r0, r3
 8003520:	46bd      	mov	sp, r7
 8003522:	b00c      	add	sp, #48	@ 0x30
 8003524:	bdb0      	pop	{r4, r5, r7, pc}
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	00000776 	.word	0x00000776
 800352c:	0000024e 	.word	0x0000024e
 8003530:	000002b2 	.word	0x000002b2
 8003534:	00000226 	.word	0x00000226
 8003538:	20000704 	.word	0x20000704

0800353c <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
uint8_t setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 800353c:	b5b0      	push	{r4, r5, r7, lr}
 800353e:	b08c      	sub	sp, #48	@ 0x30
 8003540:	af00      	add	r7, sp, #0
 8003542:	0002      	movs	r2, r0
 8003544:	1dfb      	adds	r3, r7, #7
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	1dbb      	adds	r3, r7, #6
 800354a:	1c0a      	adds	r2, r1, #0
 800354c:	701a      	strb	r2, [r3, #0]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 800354e:	1dbb      	adds	r3, r7, #6
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	b2da      	uxtb	r2, r3
 8003556:	232d      	movs	r3, #45	@ 0x2d
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	3a01      	subs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]

  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  getSequenceStepEnables(&enables);
 800355e:	2420      	movs	r4, #32
 8003560:	193b      	adds	r3, r7, r4
 8003562:	0018      	movs	r0, r3
 8003564:	f000 faec 	bl	8003b40 <getSequenceStepEnables>
  getSequenceStepTimeouts(&enables, &timeouts);
 8003568:	2308      	movs	r3, #8
 800356a:	18fa      	adds	r2, r7, r3
 800356c:	193b      	adds	r3, r7, r4
 800356e:	0011      	movs	r1, r2
 8003570:	0018      	movs	r0, r3
 8003572:	f000 fb1f 	bl	8003bb4 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8003576:	1dfb      	adds	r3, r7, #7
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d162      	bne.n	8003644 <setVcselPulsePeriod+0x108>
  {
    // "Set phase check limits"
    switch (period_pclks)
 800357e:	1dbb      	adds	r3, r7, #6
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b12      	cmp	r3, #18
 8003584:	d017      	beq.n	80035b6 <setVcselPulsePeriod+0x7a>
 8003586:	dc1b      	bgt.n	80035c0 <setVcselPulsePeriod+0x84>
 8003588:	2b10      	cmp	r3, #16
 800358a:	d00f      	beq.n	80035ac <setVcselPulsePeriod+0x70>
 800358c:	dc18      	bgt.n	80035c0 <setVcselPulsePeriod+0x84>
 800358e:	2b0c      	cmp	r3, #12
 8003590:	d002      	beq.n	8003598 <setVcselPulsePeriod+0x5c>
 8003592:	2b0e      	cmp	r3, #14
 8003594:	d005      	beq.n	80035a2 <setVcselPulsePeriod+0x66>
 8003596:	e013      	b.n	80035c0 <setVcselPulsePeriod+0x84>
    {
      case 12:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 8003598:	2118      	movs	r1, #24
 800359a:	2057      	movs	r0, #87	@ 0x57
 800359c:	f7ff faac 	bl	8002af8 <writeReg>
        break;
 80035a0:	e010      	b.n	80035c4 <setVcselPulsePeriod+0x88>

      case 14:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 80035a2:	2130      	movs	r1, #48	@ 0x30
 80035a4:	2057      	movs	r0, #87	@ 0x57
 80035a6:	f7ff faa7 	bl	8002af8 <writeReg>
        break;
 80035aa:	e00b      	b.n	80035c4 <setVcselPulsePeriod+0x88>

      case 16:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 80035ac:	2140      	movs	r1, #64	@ 0x40
 80035ae:	2057      	movs	r0, #87	@ 0x57
 80035b0:	f7ff faa2 	bl	8002af8 <writeReg>
        break;
 80035b4:	e006      	b.n	80035c4 <setVcselPulsePeriod+0x88>

      case 18:
        writeReg(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 80035b6:	2150      	movs	r1, #80	@ 0x50
 80035b8:	2057      	movs	r0, #87	@ 0x57
 80035ba:	f7ff fa9d 	bl	8002af8 <writeReg>
        break;
 80035be:	e001      	b.n	80035c4 <setVcselPulsePeriod+0x88>

      default:
        // invalid period
        return false;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e111      	b.n	80037e8 <setVcselPulsePeriod+0x2ac>
    }
    writeReg(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 80035c4:	2108      	movs	r1, #8
 80035c6:	2056      	movs	r0, #86	@ 0x56
 80035c8:	f7ff fa96 	bl	8002af8 <writeReg>

    // apply new VCSEL period
    writeReg(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80035cc:	232d      	movs	r3, #45	@ 0x2d
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	0019      	movs	r1, r3
 80035d4:	2050      	movs	r0, #80	@ 0x50
 80035d6:	f7ff fa8f 	bl	8002af8 <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 80035da:	2408      	movs	r4, #8
 80035dc:	193b      	adds	r3, r7, r4
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	1dbb      	adds	r3, r7, #6
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	0019      	movs	r1, r3
 80035e6:	0010      	movs	r0, r2
 80035e8:	f000 fbc1 	bl	8003d6e <timeoutMicrosecondsToMclks>
 80035ec:	0002      	movs	r2, r0
    uint16_t new_pre_range_timeout_mclks =
 80035ee:	212a      	movs	r1, #42	@ 0x2a
 80035f0:	187b      	adds	r3, r7, r1
 80035f2:	801a      	strh	r2, [r3, #0]

    writeReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f000 fb56 	bl	8003caa <encodeTimeout>
 80035fe:	0003      	movs	r3, r0
 8003600:	0019      	movs	r1, r3
 8003602:	2051      	movs	r0, #81	@ 0x51
 8003604:	f7ff faa6 	bl	8002b54 <writeReg16Bit>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8003608:	193b      	adds	r3, r7, r4
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	1dbb      	adds	r3, r7, #6
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	0019      	movs	r1, r3
 8003612:	0010      	movs	r0, r2
 8003614:	f000 fbab 	bl	8003d6e <timeoutMicrosecondsToMclks>
 8003618:	0002      	movs	r2, r0
    uint16_t new_msrc_timeout_mclks =
 800361a:	2128      	movs	r1, #40	@ 0x28
 800361c:	187b      	adds	r3, r7, r1
 800361e:	801a      	strh	r2, [r3, #0]

    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8003620:	187b      	adds	r3, r7, r1
 8003622:	881a      	ldrh	r2, [r3, #0]
 8003624:	2380      	movs	r3, #128	@ 0x80
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	429a      	cmp	r2, r3
 800362a:	d805      	bhi.n	8003638 <setVcselPulsePeriod+0xfc>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 800362c:	187b      	adds	r3, r7, r1
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b2db      	uxtb	r3, r3
    writeReg(MSRC_CONFIG_TIMEOUT_MACROP,
 8003632:	3b01      	subs	r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e000      	b.n	800363a <setVcselPulsePeriod+0xfe>
 8003638:	23ff      	movs	r3, #255	@ 0xff
 800363a:	0019      	movs	r1, r3
 800363c:	2046      	movs	r0, #70	@ 0x46
 800363e:	f7ff fa5b 	bl	8002af8 <writeReg>
 8003642:	e0b7      	b.n	80037b4 <setVcselPulsePeriod+0x278>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8003644:	1dfb      	adds	r3, r7, #7
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d000      	beq.n	800364e <setVcselPulsePeriod+0x112>
 800364c:	e0b0      	b.n	80037b0 <setVcselPulsePeriod+0x274>
  {
    switch (period_pclks)
 800364e:	1dbb      	adds	r3, r7, #6
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b0e      	cmp	r3, #14
 8003654:	d061      	beq.n	800371a <setVcselPulsePeriod+0x1de>
 8003656:	dd00      	ble.n	800365a <setVcselPulsePeriod+0x11e>
 8003658:	e07c      	b.n	8003754 <setVcselPulsePeriod+0x218>
 800365a:	2b0c      	cmp	r3, #12
 800365c:	d040      	beq.n	80036e0 <setVcselPulsePeriod+0x1a4>
 800365e:	dd00      	ble.n	8003662 <setVcselPulsePeriod+0x126>
 8003660:	e078      	b.n	8003754 <setVcselPulsePeriod+0x218>
 8003662:	2b08      	cmp	r3, #8
 8003664:	d002      	beq.n	800366c <setVcselPulsePeriod+0x130>
 8003666:	2b0a      	cmp	r3, #10
 8003668:	d01d      	beq.n	80036a6 <setVcselPulsePeriod+0x16a>
 800366a:	e073      	b.n	8003754 <setVcselPulsePeriod+0x218>
    {
      case 8:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 800366c:	2110      	movs	r1, #16
 800366e:	2048      	movs	r0, #72	@ 0x48
 8003670:	f7ff fa42 	bl	8002af8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8003674:	2108      	movs	r1, #8
 8003676:	2047      	movs	r0, #71	@ 0x47
 8003678:	f7ff fa3e 	bl	8002af8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 800367c:	2102      	movs	r1, #2
 800367e:	2032      	movs	r0, #50	@ 0x32
 8003680:	f7ff fa3a 	bl	8002af8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8003684:	210c      	movs	r1, #12
 8003686:	2030      	movs	r0, #48	@ 0x30
 8003688:	f7ff fa36 	bl	8002af8 <writeReg>
        writeReg(0xFF, 0x01);
 800368c:	2101      	movs	r1, #1
 800368e:	20ff      	movs	r0, #255	@ 0xff
 8003690:	f7ff fa32 	bl	8002af8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x30);
 8003694:	2130      	movs	r1, #48	@ 0x30
 8003696:	2030      	movs	r0, #48	@ 0x30
 8003698:	f7ff fa2e 	bl	8002af8 <writeReg>
        writeReg(0xFF, 0x00);
 800369c:	2100      	movs	r1, #0
 800369e:	20ff      	movs	r0, #255	@ 0xff
 80036a0:	f7ff fa2a 	bl	8002af8 <writeReg>
        break;
 80036a4:	e058      	b.n	8003758 <setVcselPulsePeriod+0x21c>

      case 10:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 80036a6:	2128      	movs	r1, #40	@ 0x28
 80036a8:	2048      	movs	r0, #72	@ 0x48
 80036aa:	f7ff fa25 	bl	8002af8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80036ae:	2108      	movs	r1, #8
 80036b0:	2047      	movs	r0, #71	@ 0x47
 80036b2:	f7ff fa21 	bl	8002af8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80036b6:	2103      	movs	r1, #3
 80036b8:	2032      	movs	r0, #50	@ 0x32
 80036ba:	f7ff fa1d 	bl	8002af8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 80036be:	2109      	movs	r1, #9
 80036c0:	2030      	movs	r0, #48	@ 0x30
 80036c2:	f7ff fa19 	bl	8002af8 <writeReg>
        writeReg(0xFF, 0x01);
 80036c6:	2101      	movs	r1, #1
 80036c8:	20ff      	movs	r0, #255	@ 0xff
 80036ca:	f7ff fa15 	bl	8002af8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 80036ce:	2120      	movs	r1, #32
 80036d0:	2030      	movs	r0, #48	@ 0x30
 80036d2:	f7ff fa11 	bl	8002af8 <writeReg>
        writeReg(0xFF, 0x00);
 80036d6:	2100      	movs	r1, #0
 80036d8:	20ff      	movs	r0, #255	@ 0xff
 80036da:	f7ff fa0d 	bl	8002af8 <writeReg>
        break;
 80036de:	e03b      	b.n	8003758 <setVcselPulsePeriod+0x21c>

      case 12:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 80036e0:	2138      	movs	r1, #56	@ 0x38
 80036e2:	2048      	movs	r0, #72	@ 0x48
 80036e4:	f7ff fa08 	bl	8002af8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80036e8:	2108      	movs	r1, #8
 80036ea:	2047      	movs	r0, #71	@ 0x47
 80036ec:	f7ff fa04 	bl	8002af8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 80036f0:	2103      	movs	r1, #3
 80036f2:	2032      	movs	r0, #50	@ 0x32
 80036f4:	f7ff fa00 	bl	8002af8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 80036f8:	2108      	movs	r1, #8
 80036fa:	2030      	movs	r0, #48	@ 0x30
 80036fc:	f7ff f9fc 	bl	8002af8 <writeReg>
        writeReg(0xFF, 0x01);
 8003700:	2101      	movs	r1, #1
 8003702:	20ff      	movs	r0, #255	@ 0xff
 8003704:	f7ff f9f8 	bl	8002af8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8003708:	2120      	movs	r1, #32
 800370a:	2030      	movs	r0, #48	@ 0x30
 800370c:	f7ff f9f4 	bl	8002af8 <writeReg>
        writeReg(0xFF, 0x00);
 8003710:	2100      	movs	r1, #0
 8003712:	20ff      	movs	r0, #255	@ 0xff
 8003714:	f7ff f9f0 	bl	8002af8 <writeReg>
        break;
 8003718:	e01e      	b.n	8003758 <setVcselPulsePeriod+0x21c>

      case 14:
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 800371a:	2148      	movs	r1, #72	@ 0x48
 800371c:	2048      	movs	r0, #72	@ 0x48
 800371e:	f7ff f9eb 	bl	8002af8 <writeReg>
        writeReg(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8003722:	2108      	movs	r1, #8
 8003724:	2047      	movs	r0, #71	@ 0x47
 8003726:	f7ff f9e7 	bl	8002af8 <writeReg>
        writeReg(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 800372a:	2103      	movs	r1, #3
 800372c:	2032      	movs	r0, #50	@ 0x32
 800372e:	f7ff f9e3 	bl	8002af8 <writeReg>
        writeReg(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8003732:	2107      	movs	r1, #7
 8003734:	2030      	movs	r0, #48	@ 0x30
 8003736:	f7ff f9df 	bl	8002af8 <writeReg>
        writeReg(0xFF, 0x01);
 800373a:	2101      	movs	r1, #1
 800373c:	20ff      	movs	r0, #255	@ 0xff
 800373e:	f7ff f9db 	bl	8002af8 <writeReg>
        writeReg(ALGO_PHASECAL_LIM, 0x20);
 8003742:	2120      	movs	r1, #32
 8003744:	2030      	movs	r0, #48	@ 0x30
 8003746:	f7ff f9d7 	bl	8002af8 <writeReg>
        writeReg(0xFF, 0x00);
 800374a:	2100      	movs	r1, #0
 800374c:	20ff      	movs	r0, #255	@ 0xff
 800374e:	f7ff f9d3 	bl	8002af8 <writeReg>
        break;
 8003752:	e001      	b.n	8003758 <setVcselPulsePeriod+0x21c>

      default:
        // invalid period
        return false;
 8003754:	2300      	movs	r3, #0
 8003756:	e047      	b.n	80037e8 <setVcselPulsePeriod+0x2ac>
    }

    // apply new VCSEL period
    writeReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8003758:	232d      	movs	r3, #45	@ 0x2d
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	0019      	movs	r1, r3
 8003760:	2070      	movs	r0, #112	@ 0x70
 8003762:	f7ff f9c9 	bl	8002af8 <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8003766:	2408      	movs	r4, #8
 8003768:	193b      	adds	r3, r7, r4
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	1dbb      	adds	r3, r7, #6
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	0019      	movs	r1, r3
 8003772:	0010      	movs	r0, r2
 8003774:	f000 fafb 	bl	8003d6e <timeoutMicrosecondsToMclks>
 8003778:	0002      	movs	r2, r0
    uint16_t new_final_range_timeout_mclks =
 800377a:	202e      	movs	r0, #46	@ 0x2e
 800377c:	183b      	adds	r3, r7, r0
 800377e:	801a      	strh	r2, [r3, #0]

    if (enables.pre_range)
 8003780:	2320      	movs	r3, #32
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	78db      	ldrb	r3, [r3, #3]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d006      	beq.n	8003798 <setVcselPulsePeriod+0x25c>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 800378a:	193b      	adds	r3, r7, r4
 800378c:	88d9      	ldrh	r1, [r3, #6]
 800378e:	183b      	adds	r3, r7, r0
 8003790:	183a      	adds	r2, r7, r0
 8003792:	8812      	ldrh	r2, [r2, #0]
 8003794:	188a      	adds	r2, r1, r2
 8003796:	801a      	strh	r2, [r3, #0]
    }

    writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8003798:	232e      	movs	r3, #46	@ 0x2e
 800379a:	18fb      	adds	r3, r7, r3
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	0018      	movs	r0, r3
 80037a0:	f000 fa83 	bl	8003caa <encodeTimeout>
 80037a4:	0003      	movs	r3, r0
 80037a6:	0019      	movs	r1, r3
 80037a8:	2071      	movs	r0, #113	@ 0x71
 80037aa:	f7ff f9d3 	bl	8002b54 <writeReg16Bit>
 80037ae:	e001      	b.n	80037b4 <setVcselPulsePeriod+0x278>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 80037b0:	2300      	movs	r3, #0
 80037b2:	e019      	b.n	80037e8 <setVcselPulsePeriod+0x2ac>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(g_measTimBudUs);
 80037b4:	4b0e      	ldr	r3, [pc, #56]	@ (80037f0 <setVcselPulsePeriod+0x2b4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7ff fd6b 	bl	8003294 <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 80037be:	2527      	movs	r5, #39	@ 0x27
 80037c0:	197c      	adds	r4, r7, r5
 80037c2:	2001      	movs	r0, #1
 80037c4:	f7ff f9f4 	bl	8002bb0 <readReg>
 80037c8:	0003      	movs	r3, r0
 80037ca:	7023      	strb	r3, [r4, #0]
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80037cc:	2102      	movs	r1, #2
 80037ce:	2001      	movs	r0, #1
 80037d0:	f7ff f992 	bl	8002af8 <writeReg>
  performSingleRefCalibration(0x0);
 80037d4:	2000      	movs	r0, #0
 80037d6:	f000 fafb 	bl	8003dd0 <performSingleRefCalibration>
  writeReg(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 80037da:	197b      	adds	r3, r7, r5
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	0019      	movs	r1, r3
 80037e0:	2001      	movs	r0, #1
 80037e2:	f7ff f989 	bl	8002af8 <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return true;
 80037e6:	2301      	movs	r3, #1
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b00c      	add	sp, #48	@ 0x30
 80037ee:	bdb0      	pop	{r4, r5, r7, pc}
 80037f0:	20000704 	.word	0x20000704

080037f4 <getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(vcselPeriodType type)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	0002      	movs	r2, r0
 80037fc:	1dfb      	adds	r3, r7, #7
 80037fe:	701a      	strb	r2, [r3, #0]
  if (type == VcselPeriodPreRange)
 8003800:	1dfb      	adds	r3, r7, #7
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d108      	bne.n	800381a <getVcselPulsePeriod+0x26>
  {
    return decodeVcselPeriod(readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8003808:	2050      	movs	r0, #80	@ 0x50
 800380a:	f7ff f9d1 	bl	8002bb0 <readReg>
 800380e:	0003      	movs	r3, r0
 8003810:	3301      	adds	r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	18db      	adds	r3, r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	e00d      	b.n	8003836 <getVcselPulsePeriod+0x42>
  }
  else if (type == VcselPeriodFinalRange)
 800381a:	1dfb      	adds	r3, r7, #7
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d108      	bne.n	8003834 <getVcselPulsePeriod+0x40>
  {
    return decodeVcselPeriod(readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8003822:	2070      	movs	r0, #112	@ 0x70
 8003824:	f7ff f9c4 	bl	8002bb0 <readReg>
 8003828:	0003      	movs	r3, r0
 800382a:	3301      	adds	r3, #1
 800382c:	b2db      	uxtb	r3, r3
 800382e:	18db      	adds	r3, r3, r3
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e000      	b.n	8003836 <getVcselPulsePeriod+0x42>
  }
  else { return 255; }
 8003834:	23ff      	movs	r3, #255	@ 0xff
}
 8003836:	0018      	movs	r0, r3
 8003838:	46bd      	mov	sp, r7
 800383a:	b002      	add	sp, #8
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeContinuousMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint8_t tempBuffer[12];
  uint16_t temp;
  startTimeout();
 8003848:	f000 fba0 	bl	8003f8c <HAL_GetTick>
 800384c:	0003      	movs	r3, r0
 800384e:	b29a      	uxth	r2, r3
 8003850:	4b3b      	ldr	r3, [pc, #236]	@ (8003940 <readRangeContinuousMillimeters+0x100>)
 8003852:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8003854:	e014      	b.n	8003880 <readRangeContinuousMillimeters+0x40>
    if (checkTimeoutExpired())
 8003856:	4b3b      	ldr	r3, [pc, #236]	@ (8003944 <readRangeContinuousMillimeters+0x104>)
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d010      	beq.n	8003880 <readRangeContinuousMillimeters+0x40>
 800385e:	f000 fb95 	bl	8003f8c <HAL_GetTick>
 8003862:	0003      	movs	r3, r0
 8003864:	b29b      	uxth	r3, r3
 8003866:	001a      	movs	r2, r3
 8003868:	4b35      	ldr	r3, [pc, #212]	@ (8003940 <readRangeContinuousMillimeters+0x100>)
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	4a35      	ldr	r2, [pc, #212]	@ (8003944 <readRangeContinuousMillimeters+0x104>)
 8003870:	8812      	ldrh	r2, [r2, #0]
 8003872:	4293      	cmp	r3, r2
 8003874:	dd04      	ble.n	8003880 <readRangeContinuousMillimeters+0x40>
    {
      g_isTimeout = true;
 8003876:	4b34      	ldr	r3, [pc, #208]	@ (8003948 <readRangeContinuousMillimeters+0x108>)
 8003878:	2201      	movs	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
      return 65535;
 800387c:	4b33      	ldr	r3, [pc, #204]	@ (800394c <readRangeContinuousMillimeters+0x10c>)
 800387e:	e05b      	b.n	8003938 <readRangeContinuousMillimeters+0xf8>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0) {
 8003880:	2013      	movs	r0, #19
 8003882:	f7ff f995 	bl	8002bb0 <readReg>
 8003886:	0003      	movs	r3, r0
 8003888:	001a      	movs	r2, r3
 800388a:	2307      	movs	r3, #7
 800388c:	4013      	ands	r3, r2
 800388e:	d0e2      	beq.n	8003856 <readRangeContinuousMillimeters+0x16>
    }
  }
  if( extraStats == 0 ){
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d107      	bne.n	80038a6 <readRangeContinuousMillimeters+0x66>
    // assumptions: Linearity Corrective Gain is 1000 (default);
    // fractional ranging is not enabled
    temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 8003896:	2316      	movs	r3, #22
 8003898:	18fc      	adds	r4, r7, r3
 800389a:	201e      	movs	r0, #30
 800389c:	f7ff f9b8 	bl	8002c10 <readReg16Bit>
 80038a0:	0003      	movs	r3, r0
 80038a2:	8023      	strh	r3, [r4, #0]
 80038a4:	e041      	b.n	800392a <readRangeContinuousMillimeters+0xea>
    //   4: 0 ?
    //   5: ???
    // 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
    // 9,8: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
    // A,B: uncorrected distance [mm], uint16_t
    readMulti(0x14, tempBuffer, 12);
 80038a6:	2408      	movs	r4, #8
 80038a8:	193b      	adds	r3, r7, r4
 80038aa:	220c      	movs	r2, #12
 80038ac:	0019      	movs	r1, r3
 80038ae:	2014      	movs	r0, #20
 80038b0:	f7ff fa14 	bl	8002cdc <readMulti>
    extraStats->rangeStatus =  tempBuffer[0x00]>>3;
 80038b4:	0021      	movs	r1, r4
 80038b6:	187b      	adds	r3, r7, r1
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	08db      	lsrs	r3, r3, #3
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	721a      	strb	r2, [r3, #8]
    extraStats->spadCnt     = (tempBuffer[0x02]<<8) | tempBuffer[0x03];
 80038c2:	187b      	adds	r3, r7, r1
 80038c4:	789b      	ldrb	r3, [r3, #2]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	b21a      	sxth	r2, r3
 80038ca:	187b      	adds	r3, r7, r1
 80038cc:	78db      	ldrb	r3, [r3, #3]
 80038ce:	b21b      	sxth	r3, r3
 80038d0:	4313      	orrs	r3, r2
 80038d2:	b21b      	sxth	r3, r3
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	80da      	strh	r2, [r3, #6]
    extraStats->signalCnt   = (tempBuffer[0x06]<<8) | tempBuffer[0x07];
 80038da:	187b      	adds	r3, r7, r1
 80038dc:	799b      	ldrb	r3, [r3, #6]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	b21a      	sxth	r2, r3
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	79db      	ldrb	r3, [r3, #7]
 80038e6:	b21b      	sxth	r3, r3
 80038e8:	4313      	orrs	r3, r2
 80038ea:	b21b      	sxth	r3, r3
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	805a      	strh	r2, [r3, #2]
    extraStats->ambientCnt  = (tempBuffer[0x08]<<8) | tempBuffer[0x09];
 80038f2:	187b      	adds	r3, r7, r1
 80038f4:	7a1b      	ldrb	r3, [r3, #8]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	b21a      	sxth	r2, r3
 80038fa:	187b      	adds	r3, r7, r1
 80038fc:	7a5b      	ldrb	r3, [r3, #9]
 80038fe:	b21b      	sxth	r3, r3
 8003900:	4313      	orrs	r3, r2
 8003902:	b21b      	sxth	r3, r3
 8003904:	b29a      	uxth	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	809a      	strh	r2, [r3, #4]
    temp                    = (tempBuffer[0x0A]<<8) | tempBuffer[0x0B];
 800390a:	187b      	adds	r3, r7, r1
 800390c:	7a9b      	ldrb	r3, [r3, #10]
 800390e:	021b      	lsls	r3, r3, #8
 8003910:	b21a      	sxth	r2, r3
 8003912:	187b      	adds	r3, r7, r1
 8003914:	7adb      	ldrb	r3, [r3, #11]
 8003916:	b21b      	sxth	r3, r3
 8003918:	4313      	orrs	r3, r2
 800391a:	b21a      	sxth	r2, r3
 800391c:	2116      	movs	r1, #22
 800391e:	187b      	adds	r3, r7, r1
 8003920:	801a      	strh	r2, [r3, #0]
    extraStats->rawDistance = temp;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	187a      	adds	r2, r7, r1
 8003926:	8812      	ldrh	r2, [r2, #0]
 8003928:	801a      	strh	r2, [r3, #0]
  }
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 800392a:	2101      	movs	r1, #1
 800392c:	200b      	movs	r0, #11
 800392e:	f7ff f8e3 	bl	8002af8 <writeReg>
  return temp;
 8003932:	2316      	movs	r3, #22
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	881b      	ldrh	r3, [r3, #0]
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b007      	add	sp, #28
 800393e:	bd90      	pop	{r4, r7, pc}
 8003940:	20000700 	.word	0x20000700
 8003944:	200006fc 	.word	0x200006fc
 8003948:	200006fe 	.word	0x200006fe
 800394c:	0000ffff 	.word	0x0000ffff

08003950 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t readRangeSingleMillimeters( statInfo_t_VL53L0X *extraStats ) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 8003958:	2101      	movs	r1, #1
 800395a:	2080      	movs	r0, #128	@ 0x80
 800395c:	f7ff f8cc 	bl	8002af8 <writeReg>
  writeReg(0xFF, 0x01);
 8003960:	2101      	movs	r1, #1
 8003962:	20ff      	movs	r0, #255	@ 0xff
 8003964:	f7ff f8c8 	bl	8002af8 <writeReg>
  writeReg(0x00, 0x00);
 8003968:	2100      	movs	r1, #0
 800396a:	2000      	movs	r0, #0
 800396c:	f7ff f8c4 	bl	8002af8 <writeReg>
  writeReg(0x91, g_stopVariable);
 8003970:	4b21      	ldr	r3, [pc, #132]	@ (80039f8 <readRangeSingleMillimeters+0xa8>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	0019      	movs	r1, r3
 8003976:	2091      	movs	r0, #145	@ 0x91
 8003978:	f7ff f8be 	bl	8002af8 <writeReg>
  writeReg(0x00, 0x01);
 800397c:	2101      	movs	r1, #1
 800397e:	2000      	movs	r0, #0
 8003980:	f7ff f8ba 	bl	8002af8 <writeReg>
  writeReg(0xFF, 0x00);
 8003984:	2100      	movs	r1, #0
 8003986:	20ff      	movs	r0, #255	@ 0xff
 8003988:	f7ff f8b6 	bl	8002af8 <writeReg>
  writeReg(0x80, 0x00);
 800398c:	2100      	movs	r1, #0
 800398e:	2080      	movs	r0, #128	@ 0x80
 8003990:	f7ff f8b2 	bl	8002af8 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8003994:	2101      	movs	r1, #1
 8003996:	2000      	movs	r0, #0
 8003998:	f7ff f8ae 	bl	8002af8 <writeReg>
  // "Wait until start bit has been cleared"
  startTimeout();
 800399c:	f000 faf6 	bl	8003f8c <HAL_GetTick>
 80039a0:	0003      	movs	r3, r0
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	4b15      	ldr	r3, [pc, #84]	@ (80039fc <readRangeSingleMillimeters+0xac>)
 80039a6:	801a      	strh	r2, [r3, #0]
  while (readReg(SYSRANGE_START) & 0x01){
 80039a8:	e014      	b.n	80039d4 <readRangeSingleMillimeters+0x84>
    if (checkTimeoutExpired()){
 80039aa:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <readRangeSingleMillimeters+0xb0>)
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d010      	beq.n	80039d4 <readRangeSingleMillimeters+0x84>
 80039b2:	f000 faeb 	bl	8003f8c <HAL_GetTick>
 80039b6:	0003      	movs	r3, r0
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	001a      	movs	r2, r3
 80039bc:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <readRangeSingleMillimeters+0xac>)
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003a00 <readRangeSingleMillimeters+0xb0>)
 80039c4:	8812      	ldrh	r2, [r2, #0]
 80039c6:	4293      	cmp	r3, r2
 80039c8:	dd04      	ble.n	80039d4 <readRangeSingleMillimeters+0x84>
      g_isTimeout = true;
 80039ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003a04 <readRangeSingleMillimeters+0xb4>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
      return 65535;
 80039d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003a08 <readRangeSingleMillimeters+0xb8>)
 80039d2:	e00c      	b.n	80039ee <readRangeSingleMillimeters+0x9e>
  while (readReg(SYSRANGE_START) & 0x01){
 80039d4:	2000      	movs	r0, #0
 80039d6:	f7ff f8eb 	bl	8002bb0 <readReg>
 80039da:	0003      	movs	r3, r0
 80039dc:	001a      	movs	r2, r3
 80039de:	2301      	movs	r3, #1
 80039e0:	4013      	ands	r3, r2
 80039e2:	d1e2      	bne.n	80039aa <readRangeSingleMillimeters+0x5a>
    }
  }
  return readRangeContinuousMillimeters( extraStats );
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	0018      	movs	r0, r3
 80039e8:	f7ff ff2a 	bl	8003840 <readRangeContinuousMillimeters>
 80039ec:	0003      	movs	r3, r0
}
 80039ee:	0018      	movs	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b002      	add	sp, #8
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	20000702 	.word	0x20000702
 80039fc:	20000700 	.word	0x20000700
 8003a00:	200006fc 	.word	0x200006fc
 8003a04:	200006fe 	.word	0x200006fe
 8003a08:	0000ffff 	.word	0x0000ffff

08003a0c <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
uint8_t getSpadInfo(uint8_t * count, uint8_t * type_is_aperture)
{
 8003a0c:	b5b0      	push	{r4, r5, r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 8003a16:	2101      	movs	r1, #1
 8003a18:	2080      	movs	r0, #128	@ 0x80
 8003a1a:	f7ff f86d 	bl	8002af8 <writeReg>
  writeReg(0xFF, 0x01);
 8003a1e:	2101      	movs	r1, #1
 8003a20:	20ff      	movs	r0, #255	@ 0xff
 8003a22:	f7ff f869 	bl	8002af8 <writeReg>
  writeReg(0x00, 0x00);
 8003a26:	2100      	movs	r1, #0
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f7ff f865 	bl	8002af8 <writeReg>

  writeReg(0xFF, 0x06);
 8003a2e:	2106      	movs	r1, #6
 8003a30:	20ff      	movs	r0, #255	@ 0xff
 8003a32:	f7ff f861 	bl	8002af8 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 8003a36:	2083      	movs	r0, #131	@ 0x83
 8003a38:	f7ff f8ba 	bl	8002bb0 <readReg>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	001a      	movs	r2, r3
 8003a40:	2304      	movs	r3, #4
 8003a42:	4313      	orrs	r3, r2
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	0019      	movs	r1, r3
 8003a48:	2083      	movs	r0, #131	@ 0x83
 8003a4a:	f7ff f855 	bl	8002af8 <writeReg>
  writeReg(0xFF, 0x07);
 8003a4e:	2107      	movs	r1, #7
 8003a50:	20ff      	movs	r0, #255	@ 0xff
 8003a52:	f7ff f851 	bl	8002af8 <writeReg>
  writeReg(0x81, 0x01);
 8003a56:	2101      	movs	r1, #1
 8003a58:	2081      	movs	r0, #129	@ 0x81
 8003a5a:	f7ff f84d 	bl	8002af8 <writeReg>

  writeReg(0x80, 0x01);
 8003a5e:	2101      	movs	r1, #1
 8003a60:	2080      	movs	r0, #128	@ 0x80
 8003a62:	f7ff f849 	bl	8002af8 <writeReg>

  writeReg(0x94, 0x6b);
 8003a66:	216b      	movs	r1, #107	@ 0x6b
 8003a68:	2094      	movs	r0, #148	@ 0x94
 8003a6a:	f7ff f845 	bl	8002af8 <writeReg>
  writeReg(0x83, 0x00);
 8003a6e:	2100      	movs	r1, #0
 8003a70:	2083      	movs	r0, #131	@ 0x83
 8003a72:	f7ff f841 	bl	8002af8 <writeReg>
  startTimeout();
 8003a76:	f000 fa89 	bl	8003f8c <HAL_GetTick>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8003b38 <getSpadInfo+0x12c>)
 8003a80:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 8003a82:	e011      	b.n	8003aa8 <getSpadInfo+0x9c>
  {
    if (checkTimeoutExpired()) { return false; }
 8003a84:	4b2d      	ldr	r3, [pc, #180]	@ (8003b3c <getSpadInfo+0x130>)
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00d      	beq.n	8003aa8 <getSpadInfo+0x9c>
 8003a8c:	f000 fa7e 	bl	8003f8c <HAL_GetTick>
 8003a90:	0003      	movs	r3, r0
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	001a      	movs	r2, r3
 8003a96:	4b28      	ldr	r3, [pc, #160]	@ (8003b38 <getSpadInfo+0x12c>)
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	4a27      	ldr	r2, [pc, #156]	@ (8003b3c <getSpadInfo+0x130>)
 8003a9e:	8812      	ldrh	r2, [r2, #0]
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	dd01      	ble.n	8003aa8 <getSpadInfo+0x9c>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e043      	b.n	8003b30 <getSpadInfo+0x124>
  while (readReg(0x83) == 0x00)
 8003aa8:	2083      	movs	r0, #131	@ 0x83
 8003aaa:	f7ff f881 	bl	8002bb0 <readReg>
 8003aae:	1e03      	subs	r3, r0, #0
 8003ab0:	d0e8      	beq.n	8003a84 <getSpadInfo+0x78>
  }
  writeReg(0x83, 0x01);
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	2083      	movs	r0, #131	@ 0x83
 8003ab6:	f7ff f81f 	bl	8002af8 <writeReg>
  tmp = readReg(0x92);
 8003aba:	250f      	movs	r5, #15
 8003abc:	197c      	adds	r4, r7, r5
 8003abe:	2092      	movs	r0, #146	@ 0x92
 8003ac0:	f7ff f876 	bl	8002bb0 <readReg>
 8003ac4:	0003      	movs	r3, r0
 8003ac6:	7023      	strb	r3, [r4, #0]

  *count = tmp & 0x7f;
 8003ac8:	0029      	movs	r1, r5
 8003aca:	187b      	adds	r3, r7, r1
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	227f      	movs	r2, #127	@ 0x7f
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8003ad8:	187b      	adds	r3, r7, r1
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	09db      	lsrs	r3, r3, #7
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	2081      	movs	r0, #129	@ 0x81
 8003ae8:	f7ff f806 	bl	8002af8 <writeReg>
  writeReg(0xFF, 0x06);
 8003aec:	2106      	movs	r1, #6
 8003aee:	20ff      	movs	r0, #255	@ 0xff
 8003af0:	f7ff f802 	bl	8002af8 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 8003af4:	2083      	movs	r0, #131	@ 0x83
 8003af6:	f7ff f85b 	bl	8002bb0 <readReg>
 8003afa:	0003      	movs	r3, r0
 8003afc:	001a      	movs	r2, r3
 8003afe:	2304      	movs	r3, #4
 8003b00:	439a      	bics	r2, r3
 8003b02:	0013      	movs	r3, r2
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	0019      	movs	r1, r3
 8003b08:	2083      	movs	r0, #131	@ 0x83
 8003b0a:	f7fe fff5 	bl	8002af8 <writeReg>
  writeReg(0xFF, 0x01);
 8003b0e:	2101      	movs	r1, #1
 8003b10:	20ff      	movs	r0, #255	@ 0xff
 8003b12:	f7fe fff1 	bl	8002af8 <writeReg>
  writeReg(0x00, 0x01);
 8003b16:	2101      	movs	r1, #1
 8003b18:	2000      	movs	r0, #0
 8003b1a:	f7fe ffed 	bl	8002af8 <writeReg>

  writeReg(0xFF, 0x00);
 8003b1e:	2100      	movs	r1, #0
 8003b20:	20ff      	movs	r0, #255	@ 0xff
 8003b22:	f7fe ffe9 	bl	8002af8 <writeReg>
  writeReg(0x80, 0x00);
 8003b26:	2100      	movs	r1, #0
 8003b28:	2080      	movs	r0, #128	@ 0x80
 8003b2a:	f7fe ffe5 	bl	8002af8 <writeReg>

  return true;
 8003b2e:	2301      	movs	r3, #1
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b004      	add	sp, #16
 8003b36:	bdb0      	pop	{r4, r5, r7, pc}
 8003b38:	20000700 	.word	0x20000700
 8003b3c:	200006fc 	.word	0x200006fc

08003b40 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(SequenceStepEnables * enables)
{
 8003b40:	b5b0      	push	{r4, r5, r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint8_t sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);
 8003b48:	250f      	movs	r5, #15
 8003b4a:	197c      	adds	r4, r7, r5
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	f7ff f82f 	bl	8002bb0 <readReg>
 8003b52:	0003      	movs	r3, r0
 8003b54:	7023      	strb	r3, [r4, #0]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8003b56:	0029      	movs	r1, r5
 8003b58:	187b      	adds	r3, r7, r1
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2201      	movs	r2, #1
 8003b62:	4013      	ands	r3, r2
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	08db      	lsrs	r3, r3, #3
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2201      	movs	r2, #1
 8003b74:	4013      	ands	r3, r2
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8003b7c:	187b      	adds	r3, r7, r1
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2201      	movs	r2, #1
 8003b86:	4013      	ands	r3, r2
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8003b8e:	187b      	adds	r3, r7, r1
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	099b      	lsrs	r3, r3, #6
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2201      	movs	r2, #1
 8003b98:	4013      	ands	r3, r2
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8003ba0:	187b      	adds	r3, r7, r1
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	09db      	lsrs	r3, r3, #7
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	711a      	strb	r2, [r3, #4]
}
 8003bac:	46c0      	nop			@ (mov r8, r8)
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b004      	add	sp, #16
 8003bb2:	bdb0      	pop	{r4, r5, r7, pc}

08003bb4 <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	f7ff fe18 	bl	80037f4 <getVcselPulsePeriod>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	001a      	movs	r2, r3
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8003bcc:	2046      	movs	r0, #70	@ 0x46
 8003bce:	f7fe ffef 	bl	8002bb0 <readReg>
 8003bd2:	0003      	movs	r3, r0
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	0019      	movs	r1, r3
 8003be8:	0010      	movs	r0, r2
 8003bea:	f000 f891 	bl	8003d10 <timeoutMclksToMicroseconds>
 8003bee:	0002      	movs	r2, r0
  timeouts->msrc_dss_tcc_us =
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8003bf4:	2051      	movs	r0, #81	@ 0x51
 8003bf6:	f7ff f80b 	bl	8002c10 <readReg16Bit>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f000 f83e 	bl	8003c7e <decodeTimeout>
 8003c02:	0003      	movs	r3, r0
 8003c04:	001a      	movs	r2, r3
  timeouts->pre_range_mclks =
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	0019      	movs	r1, r3
 8003c16:	0010      	movs	r0, r2
 8003c18:	f000 f87a 	bl	8003d10 <timeoutMclksToMicroseconds>
 8003c1c:	0002      	movs	r2, r0
  timeouts->pre_range_us =
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 8003c22:	2001      	movs	r0, #1
 8003c24:	f7ff fde6 	bl	80037f4 <getVcselPulsePeriod>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	001a      	movs	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8003c30:	2071      	movs	r0, #113	@ 0x71
 8003c32:	f7fe ffed 	bl	8002c10 <readReg16Bit>
 8003c36:	0003      	movs	r3, r0
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f000 f820 	bl	8003c7e <decodeTimeout>
 8003c3e:	0003      	movs	r3, r0
 8003c40:	001a      	movs	r2, r3
  timeouts->final_range_mclks =
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	78db      	ldrb	r3, [r3, #3]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <getSequenceStepTimeouts+0xaa>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	891a      	ldrh	r2, [r3, #8]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	88db      	ldrh	r3, [r3, #6]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	0019      	movs	r1, r3
 8003c6a:	0010      	movs	r0, r2
 8003c6c:	f000 f850 	bl	8003d10 <timeoutMclksToMicroseconds>
 8003c70:	0002      	movs	r2, r0
  timeouts->final_range_us =
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	615a      	str	r2, [r3, #20]
}
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	b002      	add	sp, #8
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	0002      	movs	r2, r0
 8003c86:	1dbb      	adds	r3, r7, #6
 8003c88:	801a      	strh	r2, [r3, #0]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8003c8a:	1dbb      	adds	r3, r7, #6
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	22ff      	movs	r2, #255	@ 0xff
 8003c90:	4013      	ands	r3, r2
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8003c92:	1dba      	adds	r2, r7, #6
 8003c94:	8812      	ldrh	r2, [r2, #0]
 8003c96:	0a12      	lsrs	r2, r2, #8
 8003c98:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8003c9a:	4093      	lsls	r3, r2
 8003c9c:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	b29b      	uxth	r3, r3
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b002      	add	sp, #8
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	0002      	movs	r2, r0
 8003cb2:	1dbb      	adds	r3, r7, #6
 8003cb4:	801a      	strh	r2, [r3, #0]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 8003cba:	230a      	movs	r3, #10
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	801a      	strh	r2, [r3, #0]

  if (timeout_mclks > 0)
 8003cc2:	1dbb      	adds	r3, r7, #6
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d01d      	beq.n	8003d06 <encodeTimeout+0x5c>
  {
    ls_byte = timeout_mclks - 1;
 8003cca:	1dbb      	adds	r3, r7, #6
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 8003cd2:	e008      	b.n	8003ce6 <encodeTimeout+0x3c>
    {
      ls_byte >>= 1;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 8003cda:	210a      	movs	r1, #10
 8003cdc:	187b      	adds	r3, r7, r1
 8003cde:	881a      	ldrh	r2, [r3, #0]
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	3201      	adds	r2, #1
 8003ce4:	801a      	strh	r2, [r3, #0]
    while ((ls_byte & 0xFFFFFF00) > 0)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2bff      	cmp	r3, #255	@ 0xff
 8003cea:	d8f3      	bhi.n	8003cd4 <encodeTimeout+0x2a>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 8003cec:	230a      	movs	r3, #10
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	021b      	lsls	r3, r3, #8
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	21ff      	movs	r1, #255	@ 0xff
 8003cfc:	400b      	ands	r3, r1
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	4313      	orrs	r3, r2
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	e000      	b.n	8003d08 <encodeTimeout+0x5e>
  }
  else { return 0; }
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b004      	add	sp, #16
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	0002      	movs	r2, r0
 8003d18:	1dbb      	adds	r3, r7, #6
 8003d1a:	801a      	strh	r2, [r3, #0]
 8003d1c:	1d7b      	adds	r3, r7, #5
 8003d1e:	1c0a      	adds	r2, r1, #0
 8003d20:	701a      	strb	r2, [r3, #0]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8003d22:	1d7b      	adds	r3, r7, #5
 8003d24:	781a      	ldrb	r2, [r3, #0]
 8003d26:	0013      	movs	r3, r2
 8003d28:	015b      	lsls	r3, r3, #5
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	015b      	lsls	r3, r3, #5
 8003d2e:	189b      	adds	r3, r3, r2
 8003d30:	011a      	lsls	r2, r3, #4
 8003d32:	1ad2      	subs	r2, r2, r3
 8003d34:	0213      	lsls	r3, r2, #8
 8003d36:	001a      	movs	r2, r3
 8003d38:	0013      	movs	r3, r2
 8003d3a:	33f5      	adds	r3, #245	@ 0xf5
 8003d3c:	33ff      	adds	r3, #255	@ 0xff
 8003d3e:	22fa      	movs	r2, #250	@ 0xfa
 8003d40:	0091      	lsls	r1, r2, #2
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7fc f9e0 	bl	8000108 <__udivsi3>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	60fb      	str	r3, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8003d4c:	1dbb      	adds	r3, r7, #6
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	435a      	muls	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	085b      	lsrs	r3, r3, #1
 8003d58:	18d3      	adds	r3, r2, r3
 8003d5a:	22fa      	movs	r2, #250	@ 0xfa
 8003d5c:	0091      	lsls	r1, r2, #2
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7fc f9d2 	bl	8000108 <__udivsi3>
 8003d64:	0003      	movs	r3, r0
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b004      	add	sp, #16
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	000a      	movs	r2, r1
 8003d78:	1cfb      	adds	r3, r7, #3
 8003d7a:	701a      	strb	r2, [r3, #0]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8003d7c:	1cfb      	adds	r3, r7, #3
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	0013      	movs	r3, r2
 8003d82:	015b      	lsls	r3, r3, #5
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	015b      	lsls	r3, r3, #5
 8003d88:	189b      	adds	r3, r3, r2
 8003d8a:	011a      	lsls	r2, r3, #4
 8003d8c:	1ad2      	subs	r2, r2, r3
 8003d8e:	0213      	lsls	r3, r2, #8
 8003d90:	001a      	movs	r2, r3
 8003d92:	0013      	movs	r3, r2
 8003d94:	33f5      	adds	r3, #245	@ 0xf5
 8003d96:	33ff      	adds	r3, #255	@ 0xff
 8003d98:	22fa      	movs	r2, #250	@ 0xfa
 8003d9a:	0091      	lsls	r1, r2, #2
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7fc f9b3 	bl	8000108 <__udivsi3>
 8003da2:	0003      	movs	r3, r0
 8003da4:	60fb      	str	r3, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	0013      	movs	r3, r2
 8003daa:	015b      	lsls	r3, r3, #5
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	189b      	adds	r3, r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	001a      	movs	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	085b      	lsrs	r3, r3, #1
 8003dba:	18d3      	adds	r3, r2, r3
 8003dbc:	68f9      	ldr	r1, [r7, #12]
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f7fc f9a2 	bl	8000108 <__udivsi3>
 8003dc4:	0003      	movs	r3, r0
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b004      	add	sp, #16
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
uint8_t performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	1dfb      	adds	r3, r7, #7
 8003dda:	701a      	strb	r2, [r3, #0]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8003ddc:	1dfb      	adds	r3, r7, #7
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2201      	movs	r2, #1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	0019      	movs	r1, r3
 8003de8:	2000      	movs	r0, #0
 8003dea:	f7fe fe85 	bl	8002af8 <writeReg>

  startTimeout();
 8003dee:	f000 f8cd 	bl	8003f8c <HAL_GetTick>
 8003df2:	0003      	movs	r3, r0
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	4b15      	ldr	r3, [pc, #84]	@ (8003e4c <performSingleRefCalibration+0x7c>)
 8003df8:	801a      	strh	r2, [r3, #0]
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8003dfa:	e011      	b.n	8003e20 <performSingleRefCalibration+0x50>
  {
    if (checkTimeoutExpired()) { return false; }
 8003dfc:	4b14      	ldr	r3, [pc, #80]	@ (8003e50 <performSingleRefCalibration+0x80>)
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00d      	beq.n	8003e20 <performSingleRefCalibration+0x50>
 8003e04:	f000 f8c2 	bl	8003f8c <HAL_GetTick>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	001a      	movs	r2, r3
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e4c <performSingleRefCalibration+0x7c>)
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	4a0e      	ldr	r2, [pc, #56]	@ (8003e50 <performSingleRefCalibration+0x80>)
 8003e16:	8812      	ldrh	r2, [r2, #0]
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	dd01      	ble.n	8003e20 <performSingleRefCalibration+0x50>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e010      	b.n	8003e42 <performSingleRefCalibration+0x72>
  while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8003e20:	2013      	movs	r0, #19
 8003e22:	f7fe fec5 	bl	8002bb0 <readReg>
 8003e26:	0003      	movs	r3, r0
 8003e28:	001a      	movs	r2, r3
 8003e2a:	2307      	movs	r3, #7
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d0e5      	beq.n	8003dfc <performSingleRefCalibration+0x2c>
  }

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8003e30:	2101      	movs	r1, #1
 8003e32:	200b      	movs	r0, #11
 8003e34:	f7fe fe60 	bl	8002af8 <writeReg>

  writeReg(SYSRANGE_START, 0x00);
 8003e38:	2100      	movs	r1, #0
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f7fe fe5c 	bl	8002af8 <writeReg>

  return true;
 8003e40:	2301      	movs	r3, #1
}
 8003e42:	0018      	movs	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b002      	add	sp, #8
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	46c0      	nop			@ (mov r8, r8)
 8003e4c:	20000700 	.word	0x20000700
 8003e50:	200006fc 	.word	0x200006fc

08003e54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e54:	480d      	ldr	r0, [pc, #52]	@ (8003e8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e58:	f7fe fe42 	bl	8002ae0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003e5c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003e5e:	e003      	b.n	8003e68 <LoopCopyDataInit>

08003e60 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003e60:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8003e62:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003e64:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003e66:	3104      	adds	r1, #4

08003e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003e68:	480a      	ldr	r0, [pc, #40]	@ (8003e94 <LoopForever+0xa>)
  ldr r3, =_edata
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <LoopForever+0xe>)
  adds r2, r0, r1
 8003e6c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003e6e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003e70:	d3f6      	bcc.n	8003e60 <CopyDataInit>
  ldr r2, =_sbss
 8003e72:	4a0a      	ldr	r2, [pc, #40]	@ (8003e9c <LoopForever+0x12>)
  b LoopFillZerobss
 8003e74:	e002      	b.n	8003e7c <LoopFillZerobss>

08003e76 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003e76:	2300      	movs	r3, #0
  str  r3, [r2]
 8003e78:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e7a:	3204      	adds	r2, #4

08003e7c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8003e7c:	4b08      	ldr	r3, [pc, #32]	@ (8003ea0 <LoopForever+0x16>)
  cmp r2, r3
 8003e7e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003e80:	d3f9      	bcc.n	8003e76 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8003e82:	f006 faad 	bl	800a3e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e86:	f7fd f8ff 	bl	8001088 <main>

08003e8a <LoopForever>:

LoopForever:
    b LoopForever
 8003e8a:	e7fe      	b.n	8003e8a <LoopForever>
  ldr   r0, =_estack
 8003e8c:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8003e90:	0800a760 	.word	0x0800a760
  ldr r0, =_sdata
 8003e94:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003e98:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8003e9c:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8003ea0:	20000768 	.word	0x20000768

08003ea4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ea4:	e7fe      	b.n	8003ea4 <ADC1_IRQHandler>

08003ea6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003eac:	1dfb      	adds	r3, r7, #7
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003eb2:	2003      	movs	r0, #3
 8003eb4:	f000 f80e 	bl	8003ed4 <HAL_InitTick>
 8003eb8:	1e03      	subs	r3, r0, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003ebc:	1dfb      	adds	r3, r7, #7
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e001      	b.n	8003ec8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ec4:	f7fe fa98 	bl	80023f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ec8:	1dfb      	adds	r3, r7, #7
 8003eca:	781b      	ldrb	r3, [r3, #0]
}
 8003ecc:	0018      	movs	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b002      	add	sp, #8
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003edc:	230f      	movs	r3, #15
 8003ede:	18fb      	adds	r3, r7, r3
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f5c <HAL_InitTick+0x88>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d02b      	beq.n	8003f44 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8003eec:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <HAL_InitTick+0x8c>)
 8003eee:	681c      	ldr	r4, [r3, #0]
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f5c <HAL_InitTick+0x88>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	23fa      	movs	r3, #250	@ 0xfa
 8003ef8:	0098      	lsls	r0, r3, #2
 8003efa:	f7fc f905 	bl	8000108 <__udivsi3>
 8003efe:	0003      	movs	r3, r0
 8003f00:	0019      	movs	r1, r3
 8003f02:	0020      	movs	r0, r4
 8003f04:	f7fc f900 	bl	8000108 <__udivsi3>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f000 ffab 	bl	8004e66 <HAL_SYSTICK_Config>
 8003f10:	1e03      	subs	r3, r0, #0
 8003f12:	d112      	bne.n	8003f3a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d80a      	bhi.n	8003f30 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	425b      	negs	r3, r3
 8003f20:	2200      	movs	r2, #0
 8003f22:	0018      	movs	r0, r3
 8003f24:	f000 ff7a 	bl	8004e1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f28:	4b0e      	ldr	r3, [pc, #56]	@ (8003f64 <HAL_InitTick+0x90>)
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e00d      	b.n	8003f4c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003f30:	230f      	movs	r3, #15
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	2201      	movs	r2, #1
 8003f36:	701a      	strb	r2, [r3, #0]
 8003f38:	e008      	b.n	8003f4c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f3a:	230f      	movs	r3, #15
 8003f3c:	18fb      	adds	r3, r7, r3
 8003f3e:	2201      	movs	r2, #1
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	e003      	b.n	8003f4c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f44:	230f      	movs	r3, #15
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003f4c:	230f      	movs	r3, #15
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	781b      	ldrb	r3, [r3, #0]
}
 8003f52:	0018      	movs	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b005      	add	sp, #20
 8003f58:	bd90      	pop	{r4, r7, pc}
 8003f5a:	46c0      	nop			@ (mov r8, r8)
 8003f5c:	20000074 	.word	0x20000074
 8003f60:	20000068 	.word	0x20000068
 8003f64:	20000070 	.word	0x20000070

08003f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f6c:	4b05      	ldr	r3, [pc, #20]	@ (8003f84 <HAL_IncTick+0x1c>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	001a      	movs	r2, r3
 8003f72:	4b05      	ldr	r3, [pc, #20]	@ (8003f88 <HAL_IncTick+0x20>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	18d2      	adds	r2, r2, r3
 8003f78:	4b03      	ldr	r3, [pc, #12]	@ (8003f88 <HAL_IncTick+0x20>)
 8003f7a:	601a      	str	r2, [r3, #0]
}
 8003f7c:	46c0      	nop			@ (mov r8, r8)
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			@ (mov r8, r8)
 8003f84:	20000074 	.word	0x20000074
 8003f88:	20000764 	.word	0x20000764

08003f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f90:	4b02      	ldr	r3, [pc, #8]	@ (8003f9c <HAL_GetTick+0x10>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			@ (mov r8, r8)
 8003f9c:	20000764 	.word	0x20000764

08003fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fa8:	f7ff fff0 	bl	8003f8c <HAL_GetTick>
 8003fac:	0003      	movs	r3, r0
 8003fae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	d005      	beq.n	8003fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fba:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe4 <HAL_Delay+0x44>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	001a      	movs	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	189b      	adds	r3, r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	f7ff ffe0 	bl	8003f8c <HAL_GetTick>
 8003fcc:	0002      	movs	r2, r0
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d8f7      	bhi.n	8003fc8 <HAL_Delay+0x28>
  {
  }
}
 8003fd8:	46c0      	nop			@ (mov r8, r8)
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b004      	add	sp, #16
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	20000074 	.word	0x20000074

08003fe8 <LL_ADC_SetCommonPathInternalCh>:
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a05      	ldr	r2, [pc, #20]	@ (800400c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003ff8:	401a      	ands	r2, r3
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	601a      	str	r2, [r3, #0]
}
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	46bd      	mov	sp, r7
 8004006:	b002      	add	sp, #8
 8004008:	bd80      	pop	{r7, pc}
 800400a:	46c0      	nop			@ (mov r8, r8)
 800400c:	ff3fffff 	.word	0xff3fffff

08004010 <LL_ADC_GetCommonPathInternalCh>:
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	23c0      	movs	r3, #192	@ 0xc0
 800401e:	041b      	lsls	r3, r3, #16
 8004020:	4013      	ands	r3, r2
}
 8004022:	0018      	movs	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	b002      	add	sp, #8
 8004028:	bd80      	pop	{r7, pc}

0800402a <LL_ADC_SetSamplingTimeCommonChannels>:
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	2104      	movs	r1, #4
 800403e:	400a      	ands	r2, r1
 8004040:	2107      	movs	r1, #7
 8004042:	4091      	lsls	r1, r2
 8004044:	000a      	movs	r2, r1
 8004046:	43d2      	mvns	r2, r2
 8004048:	401a      	ands	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2104      	movs	r1, #4
 800404e:	400b      	ands	r3, r1
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4099      	lsls	r1, r3
 8004054:	000b      	movs	r3, r1
 8004056:	431a      	orrs	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	615a      	str	r2, [r3, #20]
}
 800405c:	46c0      	nop			@ (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	b004      	add	sp, #16
 8004062:	bd80      	pop	{r7, pc}

08004064 <LL_ADC_GetSamplingTimeCommonChannels>:
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	2104      	movs	r1, #4
 8004076:	400a      	ands	r2, r1
 8004078:	2107      	movs	r1, #7
 800407a:	4091      	lsls	r1, r2
 800407c:	000a      	movs	r2, r1
 800407e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2104      	movs	r1, #4
 8004084:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004086:	40da      	lsrs	r2, r3
 8004088:	0013      	movs	r3, r2
}
 800408a:	0018      	movs	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	b002      	add	sp, #8
 8004090:	bd80      	pop	{r7, pc}

08004092 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	23c0      	movs	r3, #192	@ 0xc0
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	4013      	ands	r3, r2
 80040a4:	d101      	bne.n	80040aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	0018      	movs	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b002      	add	sp, #8
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <LL_ADC_REG_SetSequencerRanks>:
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CHSELR,
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	211f      	movs	r1, #31
 80040c8:	400a      	ands	r2, r1
 80040ca:	210f      	movs	r1, #15
 80040cc:	4091      	lsls	r1, r2
 80040ce:	000a      	movs	r2, r1
 80040d0:	43d2      	mvns	r2, r2
 80040d2:	401a      	ands	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	0e9b      	lsrs	r3, r3, #26
 80040d8:	210f      	movs	r1, #15
 80040da:	4019      	ands	r1, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	201f      	movs	r0, #31
 80040e0:	4003      	ands	r3, r0
 80040e2:	4099      	lsls	r1, r3
 80040e4:	000b      	movs	r3, r1
 80040e6:	431a      	orrs	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040ec:	46c0      	nop			@ (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b004      	add	sp, #16
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <LL_ADC_REG_SetSequencerChAdd>:
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	025b      	lsls	r3, r3, #9
 8004106:	0a5b      	lsrs	r3, r3, #9
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800410e:	46c0      	nop			@ (mov r8, r8)
 8004110:	46bd      	mov	sp, r7
 8004112:	b002      	add	sp, #8
 8004114:	bd80      	pop	{r7, pc}

08004116 <LL_ADC_REG_SetSequencerChRem>:
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	0252      	lsls	r2, r2, #9
 8004128:	0a52      	lsrs	r2, r2, #9
 800412a:	43d2      	mvns	r2, r2
 800412c:	401a      	ands	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004132:	46c0      	nop			@ (mov r8, r8)
 8004134:	46bd      	mov	sp, r7
 8004136:	b002      	add	sp, #8
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <LL_ADC_SetChannelSamplingTime>:
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	0212      	lsls	r2, r2, #8
 8004150:	43d2      	mvns	r2, r2
 8004152:	401a      	ands	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	400b      	ands	r3, r1
 800415c:	4904      	ldr	r1, [pc, #16]	@ (8004170 <LL_ADC_SetChannelSamplingTime+0x34>)
 800415e:	400b      	ands	r3, r1
 8004160:	431a      	orrs	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	615a      	str	r2, [r3, #20]
}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	46bd      	mov	sp, r7
 800416a:	b004      	add	sp, #16
 800416c:	bd80      	pop	{r7, pc}
 800416e:	46c0      	nop			@ (mov r8, r8)
 8004170:	7fffff00 	.word	0x7fffff00

08004174 <LL_ADC_EnableInternalRegulator>:
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4a05      	ldr	r2, [pc, #20]	@ (8004198 <LL_ADC_EnableInternalRegulator+0x24>)
 8004182:	4013      	ands	r3, r2
 8004184:	2280      	movs	r2, #128	@ 0x80
 8004186:	0552      	lsls	r2, r2, #21
 8004188:	431a      	orrs	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	609a      	str	r2, [r3, #8]
}
 800418e:	46c0      	nop			@ (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	b002      	add	sp, #8
 8004194:	bd80      	pop	{r7, pc}
 8004196:	46c0      	nop			@ (mov r8, r8)
 8004198:	6fffffe8 	.word	0x6fffffe8

0800419c <LL_ADC_IsInternalRegulatorEnabled>:
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	2380      	movs	r3, #128	@ 0x80
 80041aa:	055b      	lsls	r3, r3, #21
 80041ac:	401a      	ands	r2, r3
 80041ae:	2380      	movs	r3, #128	@ 0x80
 80041b0:	055b      	lsls	r3, r3, #21
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d101      	bne.n	80041ba <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	b002      	add	sp, #8
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <LL_ADC_Enable>:
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	4a04      	ldr	r2, [pc, #16]	@ (80041e4 <LL_ADC_Enable+0x20>)
 80041d2:	4013      	ands	r3, r2
 80041d4:	2201      	movs	r2, #1
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	609a      	str	r2, [r3, #8]
}
 80041dc:	46c0      	nop			@ (mov r8, r8)
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	7fffffe8 	.word	0x7fffffe8

080041e8 <LL_ADC_Disable>:
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4a04      	ldr	r2, [pc, #16]	@ (8004208 <LL_ADC_Disable+0x20>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	2202      	movs	r2, #2
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	609a      	str	r2, [r3, #8]
}
 8004200:	46c0      	nop			@ (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b002      	add	sp, #8
 8004206:	bd80      	pop	{r7, pc}
 8004208:	7fffffe8 	.word	0x7fffffe8

0800420c <LL_ADC_IsEnabled>:
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2201      	movs	r2, #1
 800421a:	4013      	ands	r3, r2
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <LL_ADC_IsEnabled+0x18>
 8004220:	2301      	movs	r3, #1
 8004222:	e000      	b.n	8004226 <LL_ADC_IsEnabled+0x1a>
 8004224:	2300      	movs	r3, #0
}
 8004226:	0018      	movs	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	b002      	add	sp, #8
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <LL_ADC_REG_StartConversion>:
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4a04      	ldr	r2, [pc, #16]	@ (8004250 <LL_ADC_REG_StartConversion+0x20>)
 800423e:	4013      	ands	r3, r2
 8004240:	2204      	movs	r2, #4
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	609a      	str	r2, [r3, #8]
}
 8004248:	46c0      	nop			@ (mov r8, r8)
 800424a:	46bd      	mov	sp, r7
 800424c:	b002      	add	sp, #8
 800424e:	bd80      	pop	{r7, pc}
 8004250:	7fffffe8 	.word	0x7fffffe8

08004254 <LL_ADC_REG_IsConversionOngoing>:
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2204      	movs	r2, #4
 8004262:	4013      	ands	r3, r2
 8004264:	2b04      	cmp	r3, #4
 8004266:	d101      	bne.n	800426c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800426c:	2300      	movs	r3, #0
}
 800426e:	0018      	movs	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	b002      	add	sp, #8
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b088      	sub	sp, #32
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004280:	231f      	movs	r3, #31
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8004288:	2300      	movs	r3, #0
 800428a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e17e      	b.n	800459c <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	0018      	movs	r0, r3
 80042aa:	f7fe f8c9 	bl	8002440 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2254      	movs	r2, #84	@ 0x54
 80042b8:	2100      	movs	r1, #0
 80042ba:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7ff ff6b 	bl	800419c <LL_ADC_IsInternalRegulatorEnabled>
 80042c6:	1e03      	subs	r3, r0, #0
 80042c8:	d114      	bne.n	80042f4 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7ff ff50 	bl	8004174 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80042d4:	4bb3      	ldr	r3, [pc, #716]	@ (80045a4 <HAL_ADC_Init+0x32c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	49b3      	ldr	r1, [pc, #716]	@ (80045a8 <HAL_ADC_Init+0x330>)
 80042da:	0018      	movs	r0, r3
 80042dc:	f7fb ff14 	bl	8000108 <__udivsi3>
 80042e0:	0003      	movs	r3, r0
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80042e6:	e002      	b.n	80042ee <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f9      	bne.n	80042e8 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	0018      	movs	r0, r3
 80042fa:	f7ff ff4f 	bl	800419c <LL_ADC_IsInternalRegulatorEnabled>
 80042fe:	1e03      	subs	r3, r0, #0
 8004300:	d10f      	bne.n	8004322 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004306:	2210      	movs	r2, #16
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004312:	2201      	movs	r2, #1
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800431a:	231f      	movs	r3, #31
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	2201      	movs	r2, #1
 8004320:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	0018      	movs	r0, r3
 8004328:	f7ff ff94 	bl	8004254 <LL_ADC_REG_IsConversionOngoing>
 800432c:	0003      	movs	r3, r0
 800432e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004334:	2210      	movs	r2, #16
 8004336:	4013      	ands	r3, r2
 8004338:	d000      	beq.n	800433c <HAL_ADC_Init+0xc4>
 800433a:	e122      	b.n	8004582 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d000      	beq.n	8004344 <HAL_ADC_Init+0xcc>
 8004342:	e11e      	b.n	8004582 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004348:	4a98      	ldr	r2, [pc, #608]	@ (80045ac <HAL_ADC_Init+0x334>)
 800434a:	4013      	ands	r3, r2
 800434c:	2202      	movs	r2, #2
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	0018      	movs	r0, r3
 800435a:	f7ff ff57 	bl	800420c <LL_ADC_IsEnabled>
 800435e:	1e03      	subs	r3, r0, #0
 8004360:	d000      	beq.n	8004364 <HAL_ADC_Init+0xec>
 8004362:	e0ad      	b.n	80044c0 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	7e1b      	ldrb	r3, [r3, #24]
 800436c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800436e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	7e5b      	ldrb	r3, [r3, #25]
 8004374:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004376:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	7e9b      	ldrb	r3, [r3, #26]
 800437c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800437e:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_ADC_Init+0x116>
 8004388:	2380      	movs	r3, #128	@ 0x80
 800438a:	015b      	lsls	r3, r3, #5
 800438c:	e000      	b.n	8004390 <HAL_ADC_Init+0x118>
 800438e:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004390:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004396:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	da04      	bge.n	80043aa <HAL_ADC_Init+0x132>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	e001      	b.n	80043ae <HAL_ADC_Init+0x136>
 80043aa:	2380      	movs	r3, #128	@ 0x80
 80043ac:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80043ae:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	212c      	movs	r1, #44	@ 0x2c
 80043b4:	5c5b      	ldrb	r3, [r3, r1]
 80043b6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80043b8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	5c9b      	ldrb	r3, [r3, r2]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d115      	bne.n	80043f6 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	7e9b      	ldrb	r3, [r3, #26]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d105      	bne.n	80043de <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2280      	movs	r2, #128	@ 0x80
 80043d6:	0252      	lsls	r2, r2, #9
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
 80043dc:	e00b      	b.n	80043f6 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e2:	2220      	movs	r2, #32
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ee:	2201      	movs	r2, #1
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004402:	23e0      	movs	r3, #224	@ 0xe0
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800440c:	4313      	orrs	r3, r2
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4313      	orrs	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	4a65      	ldr	r2, [pc, #404]	@ (80045b0 <HAL_ADC_Init+0x338>)
 800441c:	4013      	ands	r3, r2
 800441e:	0019      	movs	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	430a      	orrs	r2, r1
 8004428:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	0f9b      	lsrs	r3, r3, #30
 8004430:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004436:	4313      	orrs	r3, r2
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	223c      	movs	r2, #60	@ 0x3c
 8004442:	5c9b      	ldrb	r3, [r3, r2]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d111      	bne.n	800446c <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	0f9b      	lsrs	r3, r3, #30
 800444e:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004454:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 800445a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8004460:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	2201      	movs	r2, #1
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	4a50      	ldr	r2, [pc, #320]	@ (80045b4 <HAL_ADC_Init+0x33c>)
 8004474:	4013      	ands	r3, r2
 8004476:	0019      	movs	r1, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	430a      	orrs	r2, r1
 8004480:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	23c0      	movs	r3, #192	@ 0xc0
 8004488:	061b      	lsls	r3, r3, #24
 800448a:	429a      	cmp	r2, r3
 800448c:	d018      	beq.n	80044c0 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004492:	2380      	movs	r3, #128	@ 0x80
 8004494:	05db      	lsls	r3, r3, #23
 8004496:	429a      	cmp	r2, r3
 8004498:	d012      	beq.n	80044c0 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800449e:	2380      	movs	r3, #128	@ 0x80
 80044a0:	061b      	lsls	r3, r3, #24
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d00c      	beq.n	80044c0 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80044a6:	4b44      	ldr	r3, [pc, #272]	@ (80045b8 <HAL_ADC_Init+0x340>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a44      	ldr	r2, [pc, #272]	@ (80045bc <HAL_ADC_Init+0x344>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	0019      	movs	r1, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	23f0      	movs	r3, #240	@ 0xf0
 80044b6:	039b      	lsls	r3, r3, #14
 80044b8:	401a      	ands	r2, r3
 80044ba:	4b3f      	ldr	r3, [pc, #252]	@ (80045b8 <HAL_ADC_Init+0x340>)
 80044bc:	430a      	orrs	r2, r1
 80044be:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6818      	ldr	r0, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c8:	001a      	movs	r2, r3
 80044ca:	2100      	movs	r1, #0
 80044cc:	f7ff fdad 	bl	800402a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d8:	4939      	ldr	r1, [pc, #228]	@ (80045c0 <HAL_ADC_Init+0x348>)
 80044da:	001a      	movs	r2, r3
 80044dc:	f7ff fda5 	bl	800402a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d109      	bne.n	80044fc <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2110      	movs	r1, #16
 80044f4:	4249      	negs	r1, r1
 80044f6:	430a      	orrs	r2, r1
 80044f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80044fa:	e018      	b.n	800452e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	2380      	movs	r3, #128	@ 0x80
 8004502:	039b      	lsls	r3, r3, #14
 8004504:	429a      	cmp	r2, r3
 8004506:	d112      	bne.n	800452e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	3b01      	subs	r3, #1
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	221c      	movs	r2, #28
 8004518:	4013      	ands	r3, r2
 800451a:	2210      	movs	r2, #16
 800451c:	4252      	negs	r2, r2
 800451e:	409a      	lsls	r2, r3
 8004520:	0011      	movs	r1, r2
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2100      	movs	r1, #0
 8004534:	0018      	movs	r0, r3
 8004536:	f7ff fd95 	bl	8004064 <LL_ADC_GetSamplingTimeCommonChannels>
 800453a:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004540:	429a      	cmp	r2, r3
 8004542:	d10b      	bne.n	800455c <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454e:	2203      	movs	r2, #3
 8004550:	4393      	bics	r3, r2
 8004552:	2201      	movs	r2, #1
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800455a:	e01c      	b.n	8004596 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004560:	2212      	movs	r2, #18
 8004562:	4393      	bics	r3, r2
 8004564:	2210      	movs	r2, #16
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004570:	2201      	movs	r2, #1
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8004578:	231f      	movs	r3, #31
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004580:	e009      	b.n	8004596 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004586:	2210      	movs	r2, #16
 8004588:	431a      	orrs	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800458e:	231f      	movs	r3, #31
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8004596:	231f      	movs	r3, #31
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	781b      	ldrb	r3, [r3, #0]
}
 800459c:	0018      	movs	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	b008      	add	sp, #32
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20000068 	.word	0x20000068
 80045a8:	00030d40 	.word	0x00030d40
 80045ac:	fffffefd 	.word	0xfffffefd
 80045b0:	ffde0201 	.word	0xffde0201
 80045b4:	1ffffc02 	.word	0x1ffffc02
 80045b8:	40012708 	.word	0x40012708
 80045bc:	ffc3ffff 	.word	0xffc3ffff
 80045c0:	7fffff04 	.word	0x7fffff04

080045c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80045c4:	b5b0      	push	{r4, r5, r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f7ff fe3d 	bl	8004254 <LL_ADC_REG_IsConversionOngoing>
 80045da:	1e03      	subs	r3, r0, #0
 80045dc:	d16c      	bne.n	80046b8 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2254      	movs	r2, #84	@ 0x54
 80045e2:	5c9b      	ldrb	r3, [r3, r2]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_ADC_Start_DMA+0x28>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e06c      	b.n	80046c6 <HAL_ADC_Start_DMA+0x102>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2254      	movs	r2, #84	@ 0x54
 80045f0:	2101      	movs	r1, #1
 80045f2:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	4013      	ands	r3, r2
 80045fe:	d113      	bne.n	8004628 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	0018      	movs	r0, r3
 8004606:	f7ff fe01 	bl	800420c <LL_ADC_IsEnabled>
 800460a:	1e03      	subs	r3, r0, #0
 800460c:	d004      	beq.n	8004618 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	0018      	movs	r0, r3
 8004614:	f7ff fde8 	bl	80041e8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2101      	movs	r1, #1
 8004624:	430a      	orrs	r2, r1
 8004626:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004628:	2517      	movs	r5, #23
 800462a:	197c      	adds	r4, r7, r5
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	0018      	movs	r0, r3
 8004630:	f000 fa3c 	bl	8004aac <ADC_Enable>
 8004634:	0003      	movs	r3, r0
 8004636:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004638:	002c      	movs	r4, r5
 800463a:	193b      	adds	r3, r7, r4
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d13e      	bne.n	80046c0 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004646:	4a22      	ldr	r2, [pc, #136]	@ (80046d0 <HAL_ADC_Start_DMA+0x10c>)
 8004648:	4013      	ands	r3, r2
 800464a:	2280      	movs	r2, #128	@ 0x80
 800464c:	0052      	lsls	r2, r2, #1
 800464e:	431a      	orrs	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465e:	4a1d      	ldr	r2, [pc, #116]	@ (80046d4 <HAL_ADC_Start_DMA+0x110>)
 8004660:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004666:	4a1c      	ldr	r2, [pc, #112]	@ (80046d8 <HAL_ADC_Start_DMA+0x114>)
 8004668:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466e:	4a1b      	ldr	r2, [pc, #108]	@ (80046dc <HAL_ADC_Start_DMA+0x118>)
 8004670:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	221c      	movs	r2, #28
 8004678:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2254      	movs	r2, #84	@ 0x54
 800467e:	2100      	movs	r1, #0
 8004680:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2110      	movs	r1, #16
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3340      	adds	r3, #64	@ 0x40
 800469c:	0019      	movs	r1, r3
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	193c      	adds	r4, r7, r4
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f000 fc76 	bl	8004f94 <HAL_DMA_Start_IT>
 80046a8:	0003      	movs	r3, r0
 80046aa:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7ff fdbd 	bl	8004230 <LL_ADC_REG_StartConversion>
 80046b6:	e003      	b.n	80046c0 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80046b8:	2317      	movs	r3, #23
 80046ba:	18fb      	adds	r3, r7, r3
 80046bc:	2202      	movs	r2, #2
 80046be:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80046c0:	2317      	movs	r3, #23
 80046c2:	18fb      	adds	r3, r7, r3
 80046c4:	781b      	ldrb	r3, [r3, #0]
}
 80046c6:	0018      	movs	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b006      	add	sp, #24
 80046cc:	bdb0      	pop	{r4, r5, r7, pc}
 80046ce:	46c0      	nop			@ (mov r8, r8)
 80046d0:	fffff0fe 	.word	0xfffff0fe
 80046d4:	08004ba9 	.word	0x08004ba9
 80046d8:	08004c71 	.word	0x08004c71
 80046dc:	08004c8f 	.word	0x08004c8f

080046e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80046e8:	46c0      	nop			@ (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b002      	add	sp, #8
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80046f8:	46c0      	nop			@ (mov r8, r8)
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800470a:	2317      	movs	r3, #23
 800470c:	18fb      	adds	r3, r7, r3
 800470e:	2200      	movs	r2, #0
 8004710:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2254      	movs	r2, #84	@ 0x54
 800471a:	5c9b      	ldrb	r3, [r3, r2]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x24>
 8004720:	2302      	movs	r3, #2
 8004722:	e1be      	b.n	8004aa2 <HAL_ADC_ConfigChannel+0x3a2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2254      	movs	r2, #84	@ 0x54
 8004728:	2101      	movs	r1, #1
 800472a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	0018      	movs	r0, r3
 8004732:	f7ff fd8f 	bl	8004254 <LL_ADC_REG_IsConversionOngoing>
 8004736:	1e03      	subs	r3, r0, #0
 8004738:	d000      	beq.n	800473c <HAL_ADC_ConfigChannel+0x3c>
 800473a:	e1a1      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d100      	bne.n	8004746 <HAL_ADC_ConfigChannel+0x46>
 8004744:	e152      	b.n	80049ec <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	2380      	movs	r3, #128	@ 0x80
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	429a      	cmp	r2, r3
 8004750:	d004      	beq.n	800475c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004756:	4ac2      	ldr	r2, [pc, #776]	@ (8004a60 <HAL_ADC_ConfigChannel+0x360>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d108      	bne.n	800476e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	0019      	movs	r1, r3
 8004766:	0010      	movs	r0, r2
 8004768:	f7ff fcc4 	bl	80040f4 <LL_ADC_REG_SetSequencerChAdd>
 800476c:	e0ed      	b.n	800494a <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	211f      	movs	r1, #31
 8004778:	400b      	ands	r3, r1
 800477a:	210f      	movs	r1, #15
 800477c:	4099      	lsls	r1, r3
 800477e:	000b      	movs	r3, r1
 8004780:	43db      	mvns	r3, r3
 8004782:	4013      	ands	r3, r2
 8004784:	0019      	movs	r1, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	025b      	lsls	r3, r3, #9
 800478c:	0a5b      	lsrs	r3, r3, #9
 800478e:	d105      	bne.n	800479c <HAL_ADC_ConfigChannel+0x9c>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	0e9b      	lsrs	r3, r3, #26
 8004796:	221f      	movs	r2, #31
 8004798:	4013      	ands	r3, r2
 800479a:	e0bc      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2201      	movs	r2, #1
 80047a2:	4013      	ands	r3, r2
 80047a4:	d000      	beq.n	80047a8 <HAL_ADC_ConfigChannel+0xa8>
 80047a6:	e0b5      	b.n	8004914 <HAL_ADC_ConfigChannel+0x214>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2202      	movs	r2, #2
 80047ae:	4013      	ands	r3, r2
 80047b0:	d000      	beq.n	80047b4 <HAL_ADC_ConfigChannel+0xb4>
 80047b2:	e0ad      	b.n	8004910 <HAL_ADC_ConfigChannel+0x210>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2204      	movs	r2, #4
 80047ba:	4013      	ands	r3, r2
 80047bc:	d000      	beq.n	80047c0 <HAL_ADC_ConfigChannel+0xc0>
 80047be:	e0a5      	b.n	800490c <HAL_ADC_ConfigChannel+0x20c>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2208      	movs	r2, #8
 80047c6:	4013      	ands	r3, r2
 80047c8:	d000      	beq.n	80047cc <HAL_ADC_ConfigChannel+0xcc>
 80047ca:	e09d      	b.n	8004908 <HAL_ADC_ConfigChannel+0x208>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2210      	movs	r2, #16
 80047d2:	4013      	ands	r3, r2
 80047d4:	d000      	beq.n	80047d8 <HAL_ADC_ConfigChannel+0xd8>
 80047d6:	e095      	b.n	8004904 <HAL_ADC_ConfigChannel+0x204>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2220      	movs	r2, #32
 80047de:	4013      	ands	r3, r2
 80047e0:	d000      	beq.n	80047e4 <HAL_ADC_ConfigChannel+0xe4>
 80047e2:	e08d      	b.n	8004900 <HAL_ADC_ConfigChannel+0x200>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2240      	movs	r2, #64	@ 0x40
 80047ea:	4013      	ands	r3, r2
 80047ec:	d000      	beq.n	80047f0 <HAL_ADC_ConfigChannel+0xf0>
 80047ee:	e085      	b.n	80048fc <HAL_ADC_ConfigChannel+0x1fc>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2280      	movs	r2, #128	@ 0x80
 80047f6:	4013      	ands	r3, r2
 80047f8:	d000      	beq.n	80047fc <HAL_ADC_ConfigChannel+0xfc>
 80047fa:	e07d      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x1f8>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	2380      	movs	r3, #128	@ 0x80
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	4013      	ands	r3, r2
 8004806:	d000      	beq.n	800480a <HAL_ADC_ConfigChannel+0x10a>
 8004808:	e074      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x1f4>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	2380      	movs	r3, #128	@ 0x80
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4013      	ands	r3, r2
 8004814:	d000      	beq.n	8004818 <HAL_ADC_ConfigChannel+0x118>
 8004816:	e06b      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x1f0>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2380      	movs	r3, #128	@ 0x80
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4013      	ands	r3, r2
 8004822:	d000      	beq.n	8004826 <HAL_ADC_ConfigChannel+0x126>
 8004824:	e062      	b.n	80048ec <HAL_ADC_ConfigChannel+0x1ec>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	2380      	movs	r3, #128	@ 0x80
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	4013      	ands	r3, r2
 8004830:	d000      	beq.n	8004834 <HAL_ADC_ConfigChannel+0x134>
 8004832:	e059      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x1e8>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	2380      	movs	r3, #128	@ 0x80
 800483a:	015b      	lsls	r3, r3, #5
 800483c:	4013      	ands	r3, r2
 800483e:	d151      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x1e4>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	2380      	movs	r3, #128	@ 0x80
 8004846:	019b      	lsls	r3, r3, #6
 8004848:	4013      	ands	r3, r2
 800484a:	d149      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x1e0>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	2380      	movs	r3, #128	@ 0x80
 8004852:	01db      	lsls	r3, r3, #7
 8004854:	4013      	ands	r3, r2
 8004856:	d141      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x1dc>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	2380      	movs	r3, #128	@ 0x80
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	4013      	ands	r3, r2
 8004862:	d139      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x1d8>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2380      	movs	r3, #128	@ 0x80
 800486a:	025b      	lsls	r3, r3, #9
 800486c:	4013      	ands	r3, r2
 800486e:	d131      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x1d4>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	2380      	movs	r3, #128	@ 0x80
 8004876:	029b      	lsls	r3, r3, #10
 8004878:	4013      	ands	r3, r2
 800487a:	d129      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x1d0>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	2380      	movs	r3, #128	@ 0x80
 8004882:	02db      	lsls	r3, r3, #11
 8004884:	4013      	ands	r3, r2
 8004886:	d121      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x1cc>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	2380      	movs	r3, #128	@ 0x80
 800488e:	031b      	lsls	r3, r3, #12
 8004890:	4013      	ands	r3, r2
 8004892:	d119      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x1c8>
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	2380      	movs	r3, #128	@ 0x80
 800489a:	035b      	lsls	r3, r3, #13
 800489c:	4013      	ands	r3, r2
 800489e:	d111      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x1c4>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	2380      	movs	r3, #128	@ 0x80
 80048a6:	039b      	lsls	r3, r3, #14
 80048a8:	4013      	ands	r3, r2
 80048aa:	d109      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x1c0>
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	2380      	movs	r3, #128	@ 0x80
 80048b2:	03db      	lsls	r3, r3, #15
 80048b4:	4013      	ands	r3, r2
 80048b6:	d001      	beq.n	80048bc <HAL_ADC_ConfigChannel+0x1bc>
 80048b8:	2316      	movs	r3, #22
 80048ba:	e02c      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048bc:	2300      	movs	r3, #0
 80048be:	e02a      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048c0:	2315      	movs	r3, #21
 80048c2:	e028      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048c4:	2314      	movs	r3, #20
 80048c6:	e026      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048c8:	2313      	movs	r3, #19
 80048ca:	e024      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048cc:	2312      	movs	r3, #18
 80048ce:	e022      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048d0:	2311      	movs	r3, #17
 80048d2:	e020      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048d4:	2310      	movs	r3, #16
 80048d6:	e01e      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048d8:	230f      	movs	r3, #15
 80048da:	e01c      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048dc:	230e      	movs	r3, #14
 80048de:	e01a      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048e0:	230d      	movs	r3, #13
 80048e2:	e018      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048e4:	230c      	movs	r3, #12
 80048e6:	e016      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048e8:	230b      	movs	r3, #11
 80048ea:	e014      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048ec:	230a      	movs	r3, #10
 80048ee:	e012      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048f0:	2309      	movs	r3, #9
 80048f2:	e010      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048f4:	2308      	movs	r3, #8
 80048f6:	e00e      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048f8:	2307      	movs	r3, #7
 80048fa:	e00c      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 80048fc:	2306      	movs	r3, #6
 80048fe:	e00a      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 8004900:	2305      	movs	r3, #5
 8004902:	e008      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 8004904:	2304      	movs	r3, #4
 8004906:	e006      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 8004908:	2303      	movs	r3, #3
 800490a:	e004      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 800490c:	2302      	movs	r3, #2
 800490e:	e002      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <HAL_ADC_ConfigChannel+0x216>
 8004914:	2300      	movs	r3, #0
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	6852      	ldr	r2, [r2, #4]
 800491a:	201f      	movs	r0, #31
 800491c:	4002      	ands	r2, r0
 800491e:	4093      	lsls	r3, r2
 8004920:	000a      	movs	r2, r1
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	089b      	lsrs	r3, r3, #2
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	429a      	cmp	r2, r3
 8004936:	d808      	bhi.n	800494a <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	001a      	movs	r2, r3
 8004946:	f7ff fbb5 	bl	80040b4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6819      	ldr	r1, [r3, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	001a      	movs	r2, r3
 8004958:	f7ff fbf0 	bl	800413c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	db00      	blt.n	8004966 <HAL_ADC_ConfigChannel+0x266>
 8004964:	e096      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004966:	4b3f      	ldr	r3, [pc, #252]	@ (8004a64 <HAL_ADC_ConfigChannel+0x364>)
 8004968:	0018      	movs	r0, r3
 800496a:	f7ff fb51 	bl	8004010 <LL_ADC_GetCommonPathInternalCh>
 800496e:	0003      	movs	r3, r0
 8004970:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a3c      	ldr	r2, [pc, #240]	@ (8004a68 <HAL_ADC_ConfigChannel+0x368>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d123      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	2380      	movs	r3, #128	@ 0x80
 8004980:	041b      	lsls	r3, r3, #16
 8004982:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004984:	d11e      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	2280      	movs	r2, #128	@ 0x80
 800498a:	0412      	lsls	r2, r2, #16
 800498c:	4313      	orrs	r3, r2
 800498e:	4a35      	ldr	r2, [pc, #212]	@ (8004a64 <HAL_ADC_ConfigChannel+0x364>)
 8004990:	0019      	movs	r1, r3
 8004992:	0010      	movs	r0, r2
 8004994:	f7ff fb28 	bl	8003fe8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8004998:	4b34      	ldr	r3, [pc, #208]	@ (8004a6c <HAL_ADC_ConfigChannel+0x36c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4934      	ldr	r1, [pc, #208]	@ (8004a70 <HAL_ADC_ConfigChannel+0x370>)
 800499e:	0018      	movs	r0, r3
 80049a0:	f7fb fbb2 	bl	8000108 <__udivsi3>
 80049a4:	0003      	movs	r3, r0
 80049a6:	001a      	movs	r2, r3
 80049a8:	0013      	movs	r3, r2
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	189b      	adds	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	3301      	adds	r3, #1
 80049b2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049b4:	e002      	b.n	80049bc <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f9      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049c2:	e067      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a74 <HAL_ADC_ConfigChannel+0x374>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d162      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	2380      	movs	r3, #128	@ 0x80
 80049d2:	03db      	lsls	r3, r3, #15
 80049d4:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80049d6:	d15d      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2280      	movs	r2, #128	@ 0x80
 80049dc:	03d2      	lsls	r2, r2, #15
 80049de:	4313      	orrs	r3, r2
 80049e0:	4a20      	ldr	r2, [pc, #128]	@ (8004a64 <HAL_ADC_ConfigChannel+0x364>)
 80049e2:	0019      	movs	r1, r3
 80049e4:	0010      	movs	r0, r2
 80049e6:	f7ff faff 	bl	8003fe8 <LL_ADC_SetCommonPathInternalCh>
 80049ea:	e053      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	2380      	movs	r3, #128	@ 0x80
 80049f2:	061b      	lsls	r3, r3, #24
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d004      	beq.n	8004a02 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049fc:	4a18      	ldr	r2, [pc, #96]	@ (8004a60 <HAL_ADC_ConfigChannel+0x360>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d107      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	0010      	movs	r0, r2
 8004a0e:	f7ff fb82 	bl	8004116 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	da3c      	bge.n	8004a94 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a1a:	4b12      	ldr	r3, [pc, #72]	@ (8004a64 <HAL_ADC_ConfigChannel+0x364>)
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	f7ff faf7 	bl	8004010 <LL_ADC_GetCommonPathInternalCh>
 8004a22:	0003      	movs	r3, r0
 8004a24:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8004a68 <HAL_ADC_ConfigChannel+0x368>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d108      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	4a11      	ldr	r2, [pc, #68]	@ (8004a78 <HAL_ADC_ConfigChannel+0x378>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	4a0b      	ldr	r2, [pc, #44]	@ (8004a64 <HAL_ADC_ConfigChannel+0x364>)
 8004a38:	0019      	movs	r1, r3
 8004a3a:	0010      	movs	r0, r2
 8004a3c:	f7ff fad4 	bl	8003fe8 <LL_ADC_SetCommonPathInternalCh>
 8004a40:	e028      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a0b      	ldr	r2, [pc, #44]	@ (8004a74 <HAL_ADC_ConfigChannel+0x374>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d123      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4a0b      	ldr	r2, [pc, #44]	@ (8004a7c <HAL_ADC_ConfigChannel+0x37c>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	4a04      	ldr	r2, [pc, #16]	@ (8004a64 <HAL_ADC_ConfigChannel+0x364>)
 8004a54:	0019      	movs	r1, r3
 8004a56:	0010      	movs	r0, r2
 8004a58:	f7ff fac6 	bl	8003fe8 <LL_ADC_SetCommonPathInternalCh>
 8004a5c:	e01a      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x394>
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	80000004 	.word	0x80000004
 8004a64:	40012708 	.word	0x40012708
 8004a68:	a4000200 	.word	0xa4000200
 8004a6c:	20000068 	.word	0x20000068
 8004a70:	00030d40 	.word	0x00030d40
 8004a74:	a8000400 	.word	0xa8000400
 8004a78:	ff7fffff 	.word	0xff7fffff
 8004a7c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a84:	2220      	movs	r2, #32
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004a8c:	2317      	movs	r3, #23
 8004a8e:	18fb      	adds	r3, r7, r3
 8004a90:	2201      	movs	r2, #1
 8004a92:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2254      	movs	r2, #84	@ 0x54
 8004a98:	2100      	movs	r1, #0
 8004a9a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8004a9c:	2317      	movs	r3, #23
 8004a9e:	18fb      	adds	r3, r7, r3
 8004aa0:	781b      	ldrb	r3, [r3, #0]
}
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b006      	add	sp, #24
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	46c0      	nop			@ (mov r8, r8)

08004aac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	0018      	movs	r0, r3
 8004abe:	f7ff fba5 	bl	800420c <LL_ADC_IsEnabled>
 8004ac2:	1e03      	subs	r3, r0, #0
 8004ac4:	d162      	bne.n	8004b8c <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4a32      	ldr	r2, [pc, #200]	@ (8004b98 <ADC_Enable+0xec>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d00d      	beq.n	8004aee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad6:	2210      	movs	r2, #16
 8004ad8:	431a      	orrs	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e04f      	b.n	8004b8e <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7ff fb66 	bl	80041c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8004af8:	4b28      	ldr	r3, [pc, #160]	@ (8004b9c <ADC_Enable+0xf0>)
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7ff fa88 	bl	8004010 <LL_ADC_GetCommonPathInternalCh>
 8004b00:	0002      	movs	r2, r0
 8004b02:	2380      	movs	r3, #128	@ 0x80
 8004b04:	041b      	lsls	r3, r3, #16
 8004b06:	4013      	ands	r3, r2
 8004b08:	d00f      	beq.n	8004b2a <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b0a:	4b25      	ldr	r3, [pc, #148]	@ (8004ba0 <ADC_Enable+0xf4>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4925      	ldr	r1, [pc, #148]	@ (8004ba4 <ADC_Enable+0xf8>)
 8004b10:	0018      	movs	r0, r3
 8004b12:	f7fb faf9 	bl	8000108 <__udivsi3>
 8004b16:	0003      	movs	r3, r0
 8004b18:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8004b1a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b1c:	e002      	b.n	8004b24 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f9      	bne.n	8004b1e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	7e5b      	ldrb	r3, [r3, #25]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d02c      	beq.n	8004b8c <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004b32:	f7ff fa2b 	bl	8003f8c <HAL_GetTick>
 8004b36:	0003      	movs	r3, r0
 8004b38:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b3a:	e020      	b.n	8004b7e <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	0018      	movs	r0, r3
 8004b42:	f7ff fb63 	bl	800420c <LL_ADC_IsEnabled>
 8004b46:	1e03      	subs	r3, r0, #0
 8004b48:	d104      	bne.n	8004b54 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7ff fb38 	bl	80041c4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b54:	f7ff fa1a 	bl	8003f8c <HAL_GetTick>
 8004b58:	0002      	movs	r2, r0
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d90d      	bls.n	8004b7e <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b66:	2210      	movs	r2, #16
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b72:	2201      	movs	r2, #1
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e007      	b.n	8004b8e <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2201      	movs	r2, #1
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d1d7      	bne.n	8004b3c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	0018      	movs	r0, r3
 8004b90:	46bd      	mov	sp, r7
 8004b92:	b004      	add	sp, #16
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	46c0      	nop			@ (mov r8, r8)
 8004b98:	80000017 	.word	0x80000017
 8004b9c:	40012708 	.word	0x40012708
 8004ba0:	20000068 	.word	0x20000068
 8004ba4:	00030d40 	.word	0x00030d40

08004ba8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bba:	2250      	movs	r2, #80	@ 0x50
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d141      	bne.n	8004c44 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc4:	2280      	movs	r2, #128	@ 0x80
 8004bc6:	0092      	lsls	r2, r2, #2
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f7ff fa5d 	bl	8004092 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004bd8:	1e03      	subs	r3, r0, #0
 8004bda:	d02e      	beq.n	8004c3a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	7e9b      	ldrb	r3, [r3, #26]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d12a      	bne.n	8004c3a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2208      	movs	r2, #8
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d123      	bne.n	8004c3a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f7ff fb2c 	bl	8004254 <LL_ADC_REG_IsConversionOngoing>
 8004bfc:	1e03      	subs	r3, r0, #0
 8004bfe:	d110      	bne.n	8004c22 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	210c      	movs	r1, #12
 8004c0c:	438a      	bics	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c14:	4a15      	ldr	r2, [pc, #84]	@ (8004c6c <ADC_DMAConvCplt+0xc4>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	2201      	movs	r2, #1
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c20:	e00b      	b.n	8004c3a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c26:	2220      	movs	r2, #32
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c32:	2201      	movs	r2, #1
 8004c34:	431a      	orrs	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f7fc fa11 	bl	8001064 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c42:	e00f      	b.n	8004c64 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c48:	2210      	movs	r2, #16
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	0018      	movs	r0, r3
 8004c52:	f7ff fd4d 	bl	80046f0 <HAL_ADC_ErrorCallback>
}
 8004c56:	e005      	b.n	8004c64 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	0010      	movs	r0, r2
 8004c62:	4798      	blx	r3
}
 8004c64:	46c0      	nop			@ (mov r8, r8)
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b004      	add	sp, #16
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	fffffefe 	.word	0xfffffefe

08004c70 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7ff fd2d 	bl	80046e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004c86:	46c0      	nop			@ (mov r8, r8)
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b004      	add	sp, #16
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca0:	2240      	movs	r2, #64	@ 0x40
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cac:	2204      	movs	r2, #4
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7ff fd1a 	bl	80046f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cbc:	46c0      	nop			@ (mov r8, r8)
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b004      	add	sp, #16
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	0002      	movs	r2, r0
 8004ccc:	1dfb      	adds	r3, r7, #7
 8004cce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004cd0:	1dfb      	adds	r3, r7, #7
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cd6:	d809      	bhi.n	8004cec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cd8:	1dfb      	adds	r3, r7, #7
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	001a      	movs	r2, r3
 8004cde:	231f      	movs	r3, #31
 8004ce0:	401a      	ands	r2, r3
 8004ce2:	4b04      	ldr	r3, [pc, #16]	@ (8004cf4 <__NVIC_EnableIRQ+0x30>)
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	4091      	lsls	r1, r2
 8004ce8:	000a      	movs	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004cec:	46c0      	nop			@ (mov r8, r8)
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	b002      	add	sp, #8
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	e000e100 	.word	0xe000e100

08004cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cf8:	b590      	push	{r4, r7, lr}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	0002      	movs	r2, r0
 8004d00:	6039      	str	r1, [r7, #0]
 8004d02:	1dfb      	adds	r3, r7, #7
 8004d04:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d06:	1dfb      	adds	r3, r7, #7
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d0c:	d828      	bhi.n	8004d60 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d0e:	4a2f      	ldr	r2, [pc, #188]	@ (8004dcc <__NVIC_SetPriority+0xd4>)
 8004d10:	1dfb      	adds	r3, r7, #7
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	b25b      	sxtb	r3, r3
 8004d16:	089b      	lsrs	r3, r3, #2
 8004d18:	33c0      	adds	r3, #192	@ 0xc0
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	589b      	ldr	r3, [r3, r2]
 8004d1e:	1dfa      	adds	r2, r7, #7
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	0011      	movs	r1, r2
 8004d24:	2203      	movs	r2, #3
 8004d26:	400a      	ands	r2, r1
 8004d28:	00d2      	lsls	r2, r2, #3
 8004d2a:	21ff      	movs	r1, #255	@ 0xff
 8004d2c:	4091      	lsls	r1, r2
 8004d2e:	000a      	movs	r2, r1
 8004d30:	43d2      	mvns	r2, r2
 8004d32:	401a      	ands	r2, r3
 8004d34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	019b      	lsls	r3, r3, #6
 8004d3a:	22ff      	movs	r2, #255	@ 0xff
 8004d3c:	401a      	ands	r2, r3
 8004d3e:	1dfb      	adds	r3, r7, #7
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	0018      	movs	r0, r3
 8004d44:	2303      	movs	r3, #3
 8004d46:	4003      	ands	r3, r0
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d4c:	481f      	ldr	r0, [pc, #124]	@ (8004dcc <__NVIC_SetPriority+0xd4>)
 8004d4e:	1dfb      	adds	r3, r7, #7
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	b25b      	sxtb	r3, r3
 8004d54:	089b      	lsrs	r3, r3, #2
 8004d56:	430a      	orrs	r2, r1
 8004d58:	33c0      	adds	r3, #192	@ 0xc0
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004d5e:	e031      	b.n	8004dc4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d60:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd0 <__NVIC_SetPriority+0xd8>)
 8004d62:	1dfb      	adds	r3, r7, #7
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	0019      	movs	r1, r3
 8004d68:	230f      	movs	r3, #15
 8004d6a:	400b      	ands	r3, r1
 8004d6c:	3b08      	subs	r3, #8
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	3306      	adds	r3, #6
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	18d3      	adds	r3, r2, r3
 8004d76:	3304      	adds	r3, #4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	1dfa      	adds	r2, r7, #7
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	0011      	movs	r1, r2
 8004d80:	2203      	movs	r2, #3
 8004d82:	400a      	ands	r2, r1
 8004d84:	00d2      	lsls	r2, r2, #3
 8004d86:	21ff      	movs	r1, #255	@ 0xff
 8004d88:	4091      	lsls	r1, r2
 8004d8a:	000a      	movs	r2, r1
 8004d8c:	43d2      	mvns	r2, r2
 8004d8e:	401a      	ands	r2, r3
 8004d90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	019b      	lsls	r3, r3, #6
 8004d96:	22ff      	movs	r2, #255	@ 0xff
 8004d98:	401a      	ands	r2, r3
 8004d9a:	1dfb      	adds	r3, r7, #7
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	0018      	movs	r0, r3
 8004da0:	2303      	movs	r3, #3
 8004da2:	4003      	ands	r3, r0
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004da8:	4809      	ldr	r0, [pc, #36]	@ (8004dd0 <__NVIC_SetPriority+0xd8>)
 8004daa:	1dfb      	adds	r3, r7, #7
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	001c      	movs	r4, r3
 8004db0:	230f      	movs	r3, #15
 8004db2:	4023      	ands	r3, r4
 8004db4:	3b08      	subs	r3, #8
 8004db6:	089b      	lsrs	r3, r3, #2
 8004db8:	430a      	orrs	r2, r1
 8004dba:	3306      	adds	r3, #6
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	18c3      	adds	r3, r0, r3
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	601a      	str	r2, [r3, #0]
}
 8004dc4:	46c0      	nop			@ (mov r8, r8)
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b003      	add	sp, #12
 8004dca:	bd90      	pop	{r4, r7, pc}
 8004dcc:	e000e100 	.word	0xe000e100
 8004dd0:	e000ed00 	.word	0xe000ed00

08004dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	1e5a      	subs	r2, r3, #1
 8004de0:	2380      	movs	r3, #128	@ 0x80
 8004de2:	045b      	lsls	r3, r3, #17
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d301      	bcc.n	8004dec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004de8:	2301      	movs	r3, #1
 8004dea:	e010      	b.n	8004e0e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dec:	4b0a      	ldr	r3, [pc, #40]	@ (8004e18 <SysTick_Config+0x44>)
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	3a01      	subs	r2, #1
 8004df2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004df4:	2301      	movs	r3, #1
 8004df6:	425b      	negs	r3, r3
 8004df8:	2103      	movs	r1, #3
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f7ff ff7c 	bl	8004cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e00:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <SysTick_Config+0x44>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e06:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <SysTick_Config+0x44>)
 8004e08:	2207      	movs	r2, #7
 8004e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	0018      	movs	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b002      	add	sp, #8
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	46c0      	nop			@ (mov r8, r8)
 8004e18:	e000e010 	.word	0xe000e010

08004e1c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	607a      	str	r2, [r7, #4]
 8004e26:	210f      	movs	r1, #15
 8004e28:	187b      	adds	r3, r7, r1
 8004e2a:	1c02      	adds	r2, r0, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	187b      	adds	r3, r7, r1
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	b25b      	sxtb	r3, r3
 8004e36:	0011      	movs	r1, r2
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f7ff ff5d 	bl	8004cf8 <__NVIC_SetPriority>
}
 8004e3e:	46c0      	nop			@ (mov r8, r8)
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b004      	add	sp, #16
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b082      	sub	sp, #8
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	0002      	movs	r2, r0
 8004e4e:	1dfb      	adds	r3, r7, #7
 8004e50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e52:	1dfb      	adds	r3, r7, #7
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	b25b      	sxtb	r3, r3
 8004e58:	0018      	movs	r0, r3
 8004e5a:	f7ff ff33 	bl	8004cc4 <__NVIC_EnableIRQ>
}
 8004e5e:	46c0      	nop			@ (mov r8, r8)
 8004e60:	46bd      	mov	sp, r7
 8004e62:	b002      	add	sp, #8
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	0018      	movs	r0, r3
 8004e72:	f7ff ffaf 	bl	8004dd4 <SysTick_Config>
 8004e76:	0003      	movs	r3, r0
}
 8004e78:	0018      	movs	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b002      	add	sp, #8
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e077      	b.n	8004f82 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a3d      	ldr	r2, [pc, #244]	@ (8004f8c <HAL_DMA_Init+0x10c>)
 8004e98:	4694      	mov	ip, r2
 8004e9a:	4463      	add	r3, ip
 8004e9c:	2114      	movs	r1, #20
 8004e9e:	0018      	movs	r0, r3
 8004ea0:	f7fb f932 	bl	8000108 <__udivsi3>
 8004ea4:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8004ea6:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2225      	movs	r2, #37	@ 0x25
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4934      	ldr	r1, [pc, #208]	@ (8004f90 <HAL_DMA_Init+0x110>)
 8004ec0:	400a      	ands	r2, r1
 8004ec2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6819      	ldr	r1, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	0018      	movs	r0, r3
 8004efe:	f000 faab 	bl	8005458 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	2380      	movs	r3, #128	@ 0x80
 8004f08:	01db      	lsls	r3, r3, #7
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d102      	bne.n	8004f14 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1c:	21ff      	movs	r1, #255	@ 0xff
 8004f1e:	400a      	ands	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004f2a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d011      	beq.n	8004f58 <HAL_DMA_Init+0xd8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b04      	cmp	r3, #4
 8004f3a:	d80d      	bhi.n	8004f58 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f000 fab6 	bl	80054b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	e008      	b.n	8004f6a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2225      	movs	r2, #37	@ 0x25
 8004f74:	2101      	movs	r1, #1
 8004f76:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2224      	movs	r2, #36	@ 0x24
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	0018      	movs	r0, r3
 8004f84:	46bd      	mov	sp, r7
 8004f86:	b002      	add	sp, #8
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	46c0      	nop			@ (mov r8, r8)
 8004f8c:	bffdfff8 	.word	0xbffdfff8
 8004f90:	ffff800f 	.word	0xffff800f

08004f94 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2317      	movs	r3, #23
 8004fa4:	18fb      	adds	r3, r7, r3
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2224      	movs	r2, #36	@ 0x24
 8004fae:	5c9b      	ldrb	r3, [r3, r2]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_DMA_Start_IT+0x24>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e070      	b.n	800509a <HAL_DMA_Start_IT+0x106>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2224      	movs	r2, #36	@ 0x24
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2225      	movs	r2, #37	@ 0x25
 8004fc4:	5c9b      	ldrb	r3, [r3, r2]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d157      	bne.n	800507c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2225      	movs	r2, #37	@ 0x25
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	438a      	bics	r2, r1
 8004fe8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f9f1 	bl	80053d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d008      	beq.n	8005010 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	210e      	movs	r1, #14
 800500a:	430a      	orrs	r2, r1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e00f      	b.n	8005030 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2104      	movs	r1, #4
 800501c:	438a      	bics	r2, r1
 800501e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	210a      	movs	r1, #10
 800502c:	430a      	orrs	r2, r1
 800502e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	2380      	movs	r3, #128	@ 0x80
 8005038:	025b      	lsls	r3, r3, #9
 800503a:	4013      	ands	r3, r2
 800503c:	d008      	beq.n	8005050 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005048:	2180      	movs	r1, #128	@ 0x80
 800504a:	0049      	lsls	r1, r1, #1
 800504c:	430a      	orrs	r2, r1
 800504e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005062:	2180      	movs	r1, #128	@ 0x80
 8005064:	0049      	lsls	r1, r1, #1
 8005066:	430a      	orrs	r2, r1
 8005068:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2101      	movs	r1, #1
 8005076:	430a      	orrs	r2, r1
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	e007      	b.n	800508c <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2224      	movs	r2, #36	@ 0x24
 8005080:	2100      	movs	r1, #0
 8005082:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005084:	2317      	movs	r3, #23
 8005086:	18fb      	adds	r3, r7, r3
 8005088:	2202      	movs	r2, #2
 800508a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2224      	movs	r2, #36	@ 0x24
 8005090:	2100      	movs	r1, #0
 8005092:	5499      	strb	r1, [r3, r2]

  return status;
 8005094:	2317      	movs	r3, #23
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	781b      	ldrb	r3, [r3, #0]
}
 800509a:	0018      	movs	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	b006      	add	sp, #24
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e050      	b.n	8005158 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2225      	movs	r2, #37	@ 0x25
 80050ba:	5c9b      	ldrb	r3, [r3, r2]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d008      	beq.n	80050d4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2204      	movs	r2, #4
 80050c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2224      	movs	r2, #36	@ 0x24
 80050cc:	2100      	movs	r1, #0
 80050ce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e041      	b.n	8005158 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	210e      	movs	r1, #14
 80050e0:	438a      	bics	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ee:	491c      	ldr	r1, [pc, #112]	@ (8005160 <HAL_DMA_Abort+0xbc>)
 80050f0:	400a      	ands	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2101      	movs	r1, #1
 8005100:	438a      	bics	r2, r1
 8005102:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8005104:	4b17      	ldr	r3, [pc, #92]	@ (8005164 <HAL_DMA_Abort+0xc0>)
 8005106:	6859      	ldr	r1, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510c:	221c      	movs	r2, #28
 800510e:	4013      	ands	r3, r2
 8005110:	2201      	movs	r2, #1
 8005112:	409a      	lsls	r2, r3
 8005114:	4b13      	ldr	r3, [pc, #76]	@ (8005164 <HAL_DMA_Abort+0xc0>)
 8005116:	430a      	orrs	r2, r1
 8005118:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005122:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00c      	beq.n	8005146 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005136:	490a      	ldr	r1, [pc, #40]	@ (8005160 <HAL_DMA_Abort+0xbc>)
 8005138:	400a      	ands	r2, r1
 800513a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005144:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2225      	movs	r2, #37	@ 0x25
 800514a:	2101      	movs	r1, #1
 800514c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2224      	movs	r2, #36	@ 0x24
 8005152:	2100      	movs	r1, #0
 8005154:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	0018      	movs	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	b002      	add	sp, #8
 800515e:	bd80      	pop	{r7, pc}
 8005160:	fffffeff 	.word	0xfffffeff
 8005164:	40020000 	.word	0x40020000

08005168 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005170:	230f      	movs	r3, #15
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2224      	movs	r2, #36	@ 0x24
 800517c:	2100      	movs	r1, #0
 800517e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2224      	movs	r2, #36	@ 0x24
 8005184:	5c9b      	ldrb	r3, [r3, r2]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_DMA_Abort_IT+0x26>
 800518a:	2302      	movs	r3, #2
 800518c:	e05e      	b.n	800524c <HAL_DMA_Abort_IT+0xe4>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2224      	movs	r2, #36	@ 0x24
 8005192:	2101      	movs	r1, #1
 8005194:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2225      	movs	r2, #37	@ 0x25
 800519a:	5c9b      	ldrb	r3, [r3, r2]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d007      	beq.n	80051b2 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2204      	movs	r2, #4
 80051a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80051a8:	230f      	movs	r3, #15
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	2201      	movs	r2, #1
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e049      	b.n	8005246 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	210e      	movs	r1, #14
 80051be:	438a      	bics	r2, r1
 80051c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2101      	movs	r1, #1
 80051ce:	438a      	bics	r2, r1
 80051d0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051dc:	491d      	ldr	r1, [pc, #116]	@ (8005254 <HAL_DMA_Abort_IT+0xec>)
 80051de:	400a      	ands	r2, r1
 80051e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80051e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005258 <HAL_DMA_Abort_IT+0xf0>)
 80051e4:	6859      	ldr	r1, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ea:	221c      	movs	r2, #28
 80051ec:	4013      	ands	r3, r2
 80051ee:	2201      	movs	r2, #1
 80051f0:	409a      	lsls	r2, r3
 80051f2:	4b19      	ldr	r3, [pc, #100]	@ (8005258 <HAL_DMA_Abort_IT+0xf0>)
 80051f4:	430a      	orrs	r2, r1
 80051f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005200:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00c      	beq.n	8005224 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005214:	490f      	ldr	r1, [pc, #60]	@ (8005254 <HAL_DMA_Abort_IT+0xec>)
 8005216:	400a      	ands	r2, r1
 8005218:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005222:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2225      	movs	r2, #37	@ 0x25
 8005228:	2101      	movs	r1, #1
 800522a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2224      	movs	r2, #36	@ 0x24
 8005230:	2100      	movs	r1, #0
 8005232:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005238:	2b00      	cmp	r3, #0
 800523a:	d004      	beq.n	8005246 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	0010      	movs	r0, r2
 8005244:	4798      	blx	r3
    }
  }
  return status;
 8005246:	230f      	movs	r3, #15
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	781b      	ldrb	r3, [r3, #0]
}
 800524c:	0018      	movs	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	b004      	add	sp, #16
 8005252:	bd80      	pop	{r7, pc}
 8005254:	fffffeff 	.word	0xfffffeff
 8005258:	40020000 	.word	0x40020000

0800525c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8005264:	4b55      	ldr	r3, [pc, #340]	@ (80053bc <HAL_DMA_IRQHandler+0x160>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	221c      	movs	r2, #28
 8005278:	4013      	ands	r3, r2
 800527a:	2204      	movs	r2, #4
 800527c:	409a      	lsls	r2, r3
 800527e:	0013      	movs	r3, r2
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4013      	ands	r3, r2
 8005284:	d027      	beq.n	80052d6 <HAL_DMA_IRQHandler+0x7a>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2204      	movs	r2, #4
 800528a:	4013      	ands	r3, r2
 800528c:	d023      	beq.n	80052d6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2220      	movs	r2, #32
 8005296:	4013      	ands	r3, r2
 8005298:	d107      	bne.n	80052aa <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2104      	movs	r1, #4
 80052a6:	438a      	bics	r2, r1
 80052a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80052aa:	4b44      	ldr	r3, [pc, #272]	@ (80053bc <HAL_DMA_IRQHandler+0x160>)
 80052ac:	6859      	ldr	r1, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b2:	221c      	movs	r2, #28
 80052b4:	4013      	ands	r3, r2
 80052b6:	2204      	movs	r2, #4
 80052b8:	409a      	lsls	r2, r3
 80052ba:	4b40      	ldr	r3, [pc, #256]	@ (80053bc <HAL_DMA_IRQHandler+0x160>)
 80052bc:	430a      	orrs	r2, r1
 80052be:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d100      	bne.n	80052ca <HAL_DMA_IRQHandler+0x6e>
 80052c8:	e073      	b.n	80053b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	0010      	movs	r0, r2
 80052d2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80052d4:	e06d      	b.n	80053b2 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052da:	221c      	movs	r2, #28
 80052dc:	4013      	ands	r3, r2
 80052de:	2202      	movs	r2, #2
 80052e0:	409a      	lsls	r2, r3
 80052e2:	0013      	movs	r3, r2
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4013      	ands	r3, r2
 80052e8:	d02e      	beq.n	8005348 <HAL_DMA_IRQHandler+0xec>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2202      	movs	r2, #2
 80052ee:	4013      	ands	r3, r2
 80052f0:	d02a      	beq.n	8005348 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2220      	movs	r2, #32
 80052fa:	4013      	ands	r3, r2
 80052fc:	d10b      	bne.n	8005316 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	210a      	movs	r1, #10
 800530a:	438a      	bics	r2, r1
 800530c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2225      	movs	r2, #37	@ 0x25
 8005312:	2101      	movs	r1, #1
 8005314:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8005316:	4b29      	ldr	r3, [pc, #164]	@ (80053bc <HAL_DMA_IRQHandler+0x160>)
 8005318:	6859      	ldr	r1, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531e:	221c      	movs	r2, #28
 8005320:	4013      	ands	r3, r2
 8005322:	2202      	movs	r2, #2
 8005324:	409a      	lsls	r2, r3
 8005326:	4b25      	ldr	r3, [pc, #148]	@ (80053bc <HAL_DMA_IRQHandler+0x160>)
 8005328:	430a      	orrs	r2, r1
 800532a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2224      	movs	r2, #36	@ 0x24
 8005330:	2100      	movs	r1, #0
 8005332:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d03a      	beq.n	80053b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	0010      	movs	r0, r2
 8005344:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005346:	e034      	b.n	80053b2 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534c:	221c      	movs	r2, #28
 800534e:	4013      	ands	r3, r2
 8005350:	2208      	movs	r2, #8
 8005352:	409a      	lsls	r2, r3
 8005354:	0013      	movs	r3, r2
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4013      	ands	r3, r2
 800535a:	d02b      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x158>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2208      	movs	r2, #8
 8005360:	4013      	ands	r3, r2
 8005362:	d027      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	210e      	movs	r1, #14
 8005370:	438a      	bics	r2, r1
 8005372:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8005374:	4b11      	ldr	r3, [pc, #68]	@ (80053bc <HAL_DMA_IRQHandler+0x160>)
 8005376:	6859      	ldr	r1, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	221c      	movs	r2, #28
 800537e:	4013      	ands	r3, r2
 8005380:	2201      	movs	r2, #1
 8005382:	409a      	lsls	r2, r3
 8005384:	4b0d      	ldr	r3, [pc, #52]	@ (80053bc <HAL_DMA_IRQHandler+0x160>)
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2225      	movs	r2, #37	@ 0x25
 8005394:	2101      	movs	r1, #1
 8005396:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2224      	movs	r2, #36	@ 0x24
 800539c:	2100      	movs	r1, #0
 800539e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	0010      	movs	r0, r2
 80053b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	46c0      	nop			@ (mov r8, r8)
}
 80053b6:	46bd      	mov	sp, r7
 80053b8:	b004      	add	sp, #16
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	40020000 	.word	0x40020000

080053c0 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2225      	movs	r2, #37	@ 0x25
 80053cc:	5c9b      	ldrb	r3, [r3, r2]
 80053ce:	b2db      	uxtb	r3, r3
}
 80053d0:	0018      	movs	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b002      	add	sp, #8
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80053ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d004      	beq.n	8005402 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005400:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8005402:	4b14      	ldr	r3, [pc, #80]	@ (8005454 <DMA_SetConfig+0x7c>)
 8005404:	6859      	ldr	r1, [r3, #4]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540a:	221c      	movs	r2, #28
 800540c:	4013      	ands	r3, r2
 800540e:	2201      	movs	r2, #1
 8005410:	409a      	lsls	r2, r3
 8005412:	4b10      	ldr	r3, [pc, #64]	@ (8005454 <DMA_SetConfig+0x7c>)
 8005414:	430a      	orrs	r2, r1
 8005416:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	2b10      	cmp	r3, #16
 8005426:	d108      	bne.n	800543a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005438:	e007      	b.n	800544a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	60da      	str	r2, [r3, #12]
}
 800544a:	46c0      	nop			@ (mov r8, r8)
 800544c:	46bd      	mov	sp, r7
 800544e:	b004      	add	sp, #16
 8005450:	bd80      	pop	{r7, pc}
 8005452:	46c0      	nop			@ (mov r8, r8)
 8005454:	40020000 	.word	0x40020000

08005458 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	001a      	movs	r2, r3
 8005466:	23ff      	movs	r3, #255	@ 0xff
 8005468:	4013      	ands	r3, r2
 800546a:	3b08      	subs	r3, #8
 800546c:	2114      	movs	r1, #20
 800546e:	0018      	movs	r0, r3
 8005470:	f7fa fe4a 	bl	8000108 <__udivsi3>
 8005474:	0003      	movs	r3, r0
 8005476:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547c:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800547e:	4a0a      	ldr	r2, [pc, #40]	@ (80054a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005480:	4694      	mov	ip, r2
 8005482:	4463      	add	r3, ip
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	001a      	movs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a07      	ldr	r2, [pc, #28]	@ (80054ac <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005490:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	221c      	movs	r2, #28
 8005496:	4013      	ands	r3, r2
 8005498:	2201      	movs	r2, #1
 800549a:	409a      	lsls	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80054a0:	46c0      	nop			@ (mov r8, r8)
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b004      	add	sp, #16
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	10008200 	.word	0x10008200
 80054ac:	40020880 	.word	0x40020880

080054b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	22ff      	movs	r2, #255	@ 0xff
 80054be:	4013      	ands	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4a0a      	ldr	r2, [pc, #40]	@ (80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80054c6:	4694      	mov	ip, r2
 80054c8:	4463      	add	r3, ip
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	001a      	movs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a07      	ldr	r2, [pc, #28]	@ (80054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80054d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	3b01      	subs	r3, #1
 80054dc:	2203      	movs	r2, #3
 80054de:	4013      	ands	r3, r2
 80054e0:	2201      	movs	r2, #1
 80054e2:	409a      	lsls	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80054e8:	46c0      	nop			@ (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b004      	add	sp, #16
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	1000823f 	.word	0x1000823f
 80054f4:	40020940 	.word	0x40020940

080054f8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005506:	e153      	b.n	80057b0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2101      	movs	r1, #1
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4091      	lsls	r1, r2
 8005512:	000a      	movs	r2, r1
 8005514:	4013      	ands	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d100      	bne.n	8005520 <HAL_GPIO_Init+0x28>
 800551e:	e144      	b.n	80057aa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b02      	cmp	r3, #2
 8005526:	d003      	beq.n	8005530 <HAL_GPIO_Init+0x38>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b12      	cmp	r3, #18
 800552e:	d125      	bne.n	800557c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	08da      	lsrs	r2, r3, #3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3208      	adds	r2, #8
 8005538:	0092      	lsls	r2, r2, #2
 800553a:	58d3      	ldr	r3, [r2, r3]
 800553c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	2207      	movs	r2, #7
 8005542:	4013      	ands	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	220f      	movs	r2, #15
 8005548:	409a      	lsls	r2, r3
 800554a:	0013      	movs	r3, r2
 800554c:	43da      	mvns	r2, r3
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	4013      	ands	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	220f      	movs	r2, #15
 800555a:	401a      	ands	r2, r3
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	2107      	movs	r1, #7
 8005560:	400b      	ands	r3, r1
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	409a      	lsls	r2, r3
 8005566:	0013      	movs	r3, r2
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	08da      	lsrs	r2, r3, #3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3208      	adds	r2, #8
 8005576:	0092      	lsls	r2, r2, #2
 8005578:	6979      	ldr	r1, [r7, #20]
 800557a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	2203      	movs	r2, #3
 8005588:	409a      	lsls	r2, r3
 800558a:	0013      	movs	r3, r2
 800558c:	43da      	mvns	r2, r3
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	4013      	ands	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2203      	movs	r2, #3
 800559a:	401a      	ands	r2, r3
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	005b      	lsls	r3, r3, #1
 80055a0:	409a      	lsls	r2, r3
 80055a2:	0013      	movs	r3, r2
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d00b      	beq.n	80055d0 <HAL_GPIO_Init+0xd8>
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d007      	beq.n	80055d0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055c4:	2b11      	cmp	r3, #17
 80055c6:	d003      	beq.n	80055d0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b12      	cmp	r3, #18
 80055ce:	d130      	bne.n	8005632 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	2203      	movs	r2, #3
 80055dc:	409a      	lsls	r2, r3
 80055de:	0013      	movs	r3, r2
 80055e0:	43da      	mvns	r2, r3
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	4013      	ands	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	409a      	lsls	r2, r3
 80055f2:	0013      	movs	r3, r2
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005606:	2201      	movs	r2, #1
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	409a      	lsls	r2, r3
 800560c:	0013      	movs	r3, r2
 800560e:	43da      	mvns	r2, r3
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	4013      	ands	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	091b      	lsrs	r3, r3, #4
 800561c:	2201      	movs	r2, #1
 800561e:	401a      	ands	r2, r3
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	409a      	lsls	r2, r3
 8005624:	0013      	movs	r3, r2
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b03      	cmp	r3, #3
 8005638:	d017      	beq.n	800566a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	2203      	movs	r2, #3
 8005646:	409a      	lsls	r2, r3
 8005648:	0013      	movs	r3, r2
 800564a:	43da      	mvns	r2, r3
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4013      	ands	r3, r2
 8005650:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	409a      	lsls	r2, r3
 800565c:	0013      	movs	r3, r2
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	2380      	movs	r3, #128	@ 0x80
 8005670:	055b      	lsls	r3, r3, #21
 8005672:	4013      	ands	r3, r2
 8005674:	d100      	bne.n	8005678 <HAL_GPIO_Init+0x180>
 8005676:	e098      	b.n	80057aa <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005678:	4a53      	ldr	r2, [pc, #332]	@ (80057c8 <HAL_GPIO_Init+0x2d0>)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	089b      	lsrs	r3, r3, #2
 800567e:	3318      	adds	r3, #24
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	589b      	ldr	r3, [r3, r2]
 8005684:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2203      	movs	r2, #3
 800568a:	4013      	ands	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	220f      	movs	r2, #15
 8005690:	409a      	lsls	r2, r3
 8005692:	0013      	movs	r3, r2
 8005694:	43da      	mvns	r2, r3
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	4013      	ands	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	23a0      	movs	r3, #160	@ 0xa0
 80056a0:	05db      	lsls	r3, r3, #23
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d019      	beq.n	80056da <HAL_GPIO_Init+0x1e2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a48      	ldr	r2, [pc, #288]	@ (80057cc <HAL_GPIO_Init+0x2d4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d013      	beq.n	80056d6 <HAL_GPIO_Init+0x1de>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a47      	ldr	r2, [pc, #284]	@ (80057d0 <HAL_GPIO_Init+0x2d8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00d      	beq.n	80056d2 <HAL_GPIO_Init+0x1da>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a46      	ldr	r2, [pc, #280]	@ (80057d4 <HAL_GPIO_Init+0x2dc>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d007      	beq.n	80056ce <HAL_GPIO_Init+0x1d6>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a45      	ldr	r2, [pc, #276]	@ (80057d8 <HAL_GPIO_Init+0x2e0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d101      	bne.n	80056ca <HAL_GPIO_Init+0x1d2>
 80056c6:	2305      	movs	r3, #5
 80056c8:	e008      	b.n	80056dc <HAL_GPIO_Init+0x1e4>
 80056ca:	2306      	movs	r3, #6
 80056cc:	e006      	b.n	80056dc <HAL_GPIO_Init+0x1e4>
 80056ce:	2303      	movs	r3, #3
 80056d0:	e004      	b.n	80056dc <HAL_GPIO_Init+0x1e4>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e002      	b.n	80056dc <HAL_GPIO_Init+0x1e4>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <HAL_GPIO_Init+0x1e4>
 80056da:	2300      	movs	r3, #0
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	2103      	movs	r1, #3
 80056e0:	400a      	ands	r2, r1
 80056e2:	00d2      	lsls	r2, r2, #3
 80056e4:	4093      	lsls	r3, r2
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80056ec:	4936      	ldr	r1, [pc, #216]	@ (80057c8 <HAL_GPIO_Init+0x2d0>)
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	089b      	lsrs	r3, r3, #2
 80056f2:	3318      	adds	r3, #24
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80056fa:	4a33      	ldr	r2, [pc, #204]	@ (80057c8 <HAL_GPIO_Init+0x2d0>)
 80056fc:	2380      	movs	r3, #128	@ 0x80
 80056fe:	58d3      	ldr	r3, [r2, r3]
 8005700:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	43da      	mvns	r2, r3
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	4013      	ands	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	2380      	movs	r3, #128	@ 0x80
 8005712:	025b      	lsls	r3, r3, #9
 8005714:	4013      	ands	r3, r2
 8005716:	d003      	beq.n	8005720 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8005720:	4929      	ldr	r1, [pc, #164]	@ (80057c8 <HAL_GPIO_Init+0x2d0>)
 8005722:	2280      	movs	r2, #128	@ 0x80
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8005728:	4a27      	ldr	r2, [pc, #156]	@ (80057c8 <HAL_GPIO_Init+0x2d0>)
 800572a:	2384      	movs	r3, #132	@ 0x84
 800572c:	58d3      	ldr	r3, [r2, r3]
 800572e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	43da      	mvns	r2, r3
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	4013      	ands	r3, r2
 8005738:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	2380      	movs	r3, #128	@ 0x80
 8005740:	029b      	lsls	r3, r3, #10
 8005742:	4013      	ands	r3, r2
 8005744:	d003      	beq.n	800574e <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800574e:	491e      	ldr	r1, [pc, #120]	@ (80057c8 <HAL_GPIO_Init+0x2d0>)
 8005750:	2284      	movs	r2, #132	@ 0x84
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005756:	4b1c      	ldr	r3, [pc, #112]	@ (80057c8 <HAL_GPIO_Init+0x2d0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	43da      	mvns	r2, r3
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	4013      	ands	r3, r2
 8005764:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	2380      	movs	r3, #128	@ 0x80
 800576c:	035b      	lsls	r3, r3, #13
 800576e:	4013      	ands	r3, r2
 8005770:	d003      	beq.n	800577a <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800577a:	4b13      	ldr	r3, [pc, #76]	@ (80057c8 <HAL_GPIO_Init+0x2d0>)
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8005780:	4b11      	ldr	r3, [pc, #68]	@ (80057c8 <HAL_GPIO_Init+0x2d0>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	43da      	mvns	r2, r3
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	4013      	ands	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	2380      	movs	r3, #128	@ 0x80
 8005796:	039b      	lsls	r3, r3, #14
 8005798:	4013      	ands	r3, r2
 800579a:	d003      	beq.n	80057a4 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80057a4:	4b08      	ldr	r3, [pc, #32]	@ (80057c8 <HAL_GPIO_Init+0x2d0>)
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	3301      	adds	r3, #1
 80057ae:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	40da      	lsrs	r2, r3
 80057b8:	1e13      	subs	r3, r2, #0
 80057ba:	d000      	beq.n	80057be <HAL_GPIO_Init+0x2c6>
 80057bc:	e6a4      	b.n	8005508 <HAL_GPIO_Init+0x10>
  }
}
 80057be:	46c0      	nop			@ (mov r8, r8)
 80057c0:	46c0      	nop			@ (mov r8, r8)
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b006      	add	sp, #24
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40021800 	.word	0x40021800
 80057cc:	50000400 	.word	0x50000400
 80057d0:	50000800 	.word	0x50000800
 80057d4:	50000c00 	.word	0x50000c00
 80057d8:	50001400 	.word	0x50001400

080057dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	0008      	movs	r0, r1
 80057e6:	0011      	movs	r1, r2
 80057e8:	1cbb      	adds	r3, r7, #2
 80057ea:	1c02      	adds	r2, r0, #0
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	1c7b      	adds	r3, r7, #1
 80057f0:	1c0a      	adds	r2, r1, #0
 80057f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057f4:	1c7b      	adds	r3, r7, #1
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d004      	beq.n	8005806 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057fc:	1cbb      	adds	r3, r7, #2
 80057fe:	881a      	ldrh	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005804:	e003      	b.n	800580e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005806:	1cbb      	adds	r3, r7, #2
 8005808:	881a      	ldrh	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800580e:	46c0      	nop			@ (mov r8, r8)
 8005810:	46bd      	mov	sp, r7
 8005812:	b002      	add	sp, #8
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e08f      	b.n	800594a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2241      	movs	r2, #65	@ 0x41
 800582e:	5c9b      	ldrb	r3, [r3, r2]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d107      	bne.n	8005846 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2240      	movs	r2, #64	@ 0x40
 800583a:	2100      	movs	r1, #0
 800583c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	0018      	movs	r0, r3
 8005842:	f7fc fea7 	bl	8002594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2241      	movs	r2, #65	@ 0x41
 800584a:	2124      	movs	r1, #36	@ 0x24
 800584c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2101      	movs	r1, #1
 800585a:	438a      	bics	r2, r1
 800585c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	493b      	ldr	r1, [pc, #236]	@ (8005954 <HAL_I2C_Init+0x13c>)
 8005868:	400a      	ands	r2, r1
 800586a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4938      	ldr	r1, [pc, #224]	@ (8005958 <HAL_I2C_Init+0x140>)
 8005878:	400a      	ands	r2, r1
 800587a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d108      	bne.n	8005896 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2180      	movs	r1, #128	@ 0x80
 800588e:	0209      	lsls	r1, r1, #8
 8005890:	430a      	orrs	r2, r1
 8005892:	609a      	str	r2, [r3, #8]
 8005894:	e007      	b.n	80058a6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2184      	movs	r1, #132	@ 0x84
 80058a0:	0209      	lsls	r1, r1, #8
 80058a2:	430a      	orrs	r2, r1
 80058a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d109      	bne.n	80058c2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2180      	movs	r1, #128	@ 0x80
 80058ba:	0109      	lsls	r1, r1, #4
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
 80058c0:	e007      	b.n	80058d2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4923      	ldr	r1, [pc, #140]	@ (800595c <HAL_I2C_Init+0x144>)
 80058ce:	400a      	ands	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4920      	ldr	r1, [pc, #128]	@ (8005960 <HAL_I2C_Init+0x148>)
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	491a      	ldr	r1, [pc, #104]	@ (8005958 <HAL_I2C_Init+0x140>)
 80058ee:	400a      	ands	r2, r1
 80058f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	431a      	orrs	r2, r3
 80058fc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69d9      	ldr	r1, [r3, #28]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1a      	ldr	r2, [r3, #32]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2101      	movs	r1, #1
 8005928:	430a      	orrs	r2, r1
 800592a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2241      	movs	r2, #65	@ 0x41
 8005936:	2120      	movs	r1, #32
 8005938:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2242      	movs	r2, #66	@ 0x42
 8005944:	2100      	movs	r1, #0
 8005946:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	0018      	movs	r0, r3
 800594c:	46bd      	mov	sp, r7
 800594e:	b002      	add	sp, #8
 8005950:	bd80      	pop	{r7, pc}
 8005952:	46c0      	nop			@ (mov r8, r8)
 8005954:	f0ffffff 	.word	0xf0ffffff
 8005958:	ffff7fff 	.word	0xffff7fff
 800595c:	fffff7ff 	.word	0xfffff7ff
 8005960:	02008000 	.word	0x02008000

08005964 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005964:	b590      	push	{r4, r7, lr}
 8005966:	b089      	sub	sp, #36	@ 0x24
 8005968:	af02      	add	r7, sp, #8
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	000c      	movs	r4, r1
 800596e:	0010      	movs	r0, r2
 8005970:	0019      	movs	r1, r3
 8005972:	230a      	movs	r3, #10
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	1c22      	adds	r2, r4, #0
 8005978:	801a      	strh	r2, [r3, #0]
 800597a:	2308      	movs	r3, #8
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	1c02      	adds	r2, r0, #0
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	1dbb      	adds	r3, r7, #6
 8005984:	1c0a      	adds	r2, r1, #0
 8005986:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2241      	movs	r2, #65	@ 0x41
 800598c:	5c9b      	ldrb	r3, [r3, r2]
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b20      	cmp	r3, #32
 8005992:	d000      	beq.n	8005996 <HAL_I2C_Mem_Write+0x32>
 8005994:	e10c      	b.n	8005bb0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005998:	2b00      	cmp	r3, #0
 800599a:	d004      	beq.n	80059a6 <HAL_I2C_Mem_Write+0x42>
 800599c:	232c      	movs	r3, #44	@ 0x2c
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d105      	bne.n	80059b2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2280      	movs	r2, #128	@ 0x80
 80059aa:	0092      	lsls	r2, r2, #2
 80059ac:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e0ff      	b.n	8005bb2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2240      	movs	r2, #64	@ 0x40
 80059b6:	5c9b      	ldrb	r3, [r3, r2]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_I2C_Mem_Write+0x5c>
 80059bc:	2302      	movs	r3, #2
 80059be:	e0f8      	b.n	8005bb2 <HAL_I2C_Mem_Write+0x24e>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2240      	movs	r2, #64	@ 0x40
 80059c4:	2101      	movs	r1, #1
 80059c6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059c8:	f7fe fae0 	bl	8003f8c <HAL_GetTick>
 80059cc:	0003      	movs	r3, r0
 80059ce:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059d0:	2380      	movs	r3, #128	@ 0x80
 80059d2:	0219      	lsls	r1, r3, #8
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	2319      	movs	r3, #25
 80059dc:	2201      	movs	r2, #1
 80059de:	f001 f8e1 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 80059e2:	1e03      	subs	r3, r0, #0
 80059e4:	d001      	beq.n	80059ea <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e0e3      	b.n	8005bb2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2241      	movs	r2, #65	@ 0x41
 80059ee:	2121      	movs	r1, #33	@ 0x21
 80059f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2242      	movs	r2, #66	@ 0x42
 80059f6:	2140      	movs	r1, #64	@ 0x40
 80059f8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	222c      	movs	r2, #44	@ 0x2c
 8005a0a:	18ba      	adds	r2, r7, r2
 8005a0c:	8812      	ldrh	r2, [r2, #0]
 8005a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a16:	1dbb      	adds	r3, r7, #6
 8005a18:	881c      	ldrh	r4, [r3, #0]
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	881a      	ldrh	r2, [r3, #0]
 8005a20:	230a      	movs	r3, #10
 8005a22:	18fb      	adds	r3, r7, r3
 8005a24:	8819      	ldrh	r1, [r3, #0]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	0023      	movs	r3, r4
 8005a32:	f000 fb9d 	bl	8006170 <I2C_RequestMemoryWrite>
 8005a36:	1e03      	subs	r3, r0, #0
 8005a38:	d005      	beq.n	8005a46 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2240      	movs	r2, #64	@ 0x40
 8005a3e:	2100      	movs	r1, #0
 8005a40:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e0b5      	b.n	8005bb2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2bff      	cmp	r3, #255	@ 0xff
 8005a4e:	d911      	bls.n	8005a74 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	22ff      	movs	r2, #255	@ 0xff
 8005a54:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	2380      	movs	r3, #128	@ 0x80
 8005a5e:	045c      	lsls	r4, r3, #17
 8005a60:	230a      	movs	r3, #10
 8005a62:	18fb      	adds	r3, r7, r3
 8005a64:	8819      	ldrh	r1, [r3, #0]
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	2300      	movs	r3, #0
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	0023      	movs	r3, r4
 8005a6e:	f001 fa73 	bl	8006f58 <I2C_TransferConfig>
 8005a72:	e012      	b.n	8005a9a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	2380      	movs	r3, #128	@ 0x80
 8005a86:	049c      	lsls	r4, r3, #18
 8005a88:	230a      	movs	r3, #10
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	8819      	ldrh	r1, [r3, #0]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	2300      	movs	r3, #0
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	0023      	movs	r3, r4
 8005a96:	f001 fa5f 	bl	8006f58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f001 f8d7 	bl	8006c54 <I2C_WaitOnTXISFlagUntilTimeout>
 8005aa6:	1e03      	subs	r3, r0, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e081      	b.n	8005bb2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab2:	781a      	ldrb	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d03a      	beq.n	8005b5e <HAL_I2C_Mem_Write+0x1fa>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d136      	bne.n	8005b5e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	0013      	movs	r3, r2
 8005afa:	2200      	movs	r2, #0
 8005afc:	2180      	movs	r1, #128	@ 0x80
 8005afe:	f001 f851 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 8005b02:	1e03      	subs	r3, r0, #0
 8005b04:	d001      	beq.n	8005b0a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e053      	b.n	8005bb2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2bff      	cmp	r3, #255	@ 0xff
 8005b12:	d911      	bls.n	8005b38 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	22ff      	movs	r2, #255	@ 0xff
 8005b18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	2380      	movs	r3, #128	@ 0x80
 8005b22:	045c      	lsls	r4, r3, #17
 8005b24:	230a      	movs	r3, #10
 8005b26:	18fb      	adds	r3, r7, r3
 8005b28:	8819      	ldrh	r1, [r3, #0]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	0023      	movs	r3, r4
 8005b32:	f001 fa11 	bl	8006f58 <I2C_TransferConfig>
 8005b36:	e012      	b.n	8005b5e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	2380      	movs	r3, #128	@ 0x80
 8005b4a:	049c      	lsls	r4, r3, #18
 8005b4c:	230a      	movs	r3, #10
 8005b4e:	18fb      	adds	r3, r7, r3
 8005b50:	8819      	ldrh	r1, [r3, #0]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	2300      	movs	r3, #0
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	0023      	movs	r3, r4
 8005b5a:	f001 f9fd 	bl	8006f58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d198      	bne.n	8005a9a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f001 f8b6 	bl	8006ce0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b74:	1e03      	subs	r3, r0, #0
 8005b76:	d001      	beq.n	8005b7c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e01a      	b.n	8005bb2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2220      	movs	r2, #32
 8005b82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	490b      	ldr	r1, [pc, #44]	@ (8005bbc <HAL_I2C_Mem_Write+0x258>)
 8005b90:	400a      	ands	r2, r1
 8005b92:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2241      	movs	r2, #65	@ 0x41
 8005b98:	2120      	movs	r1, #32
 8005b9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2242      	movs	r2, #66	@ 0x42
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2240      	movs	r2, #64	@ 0x40
 8005ba8:	2100      	movs	r1, #0
 8005baa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	e000      	b.n	8005bb2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005bb0:	2302      	movs	r3, #2
  }
}
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	b007      	add	sp, #28
 8005bb8:	bd90      	pop	{r4, r7, pc}
 8005bba:	46c0      	nop			@ (mov r8, r8)
 8005bbc:	fe00e800 	.word	0xfe00e800

08005bc0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc0:	b590      	push	{r4, r7, lr}
 8005bc2:	b089      	sub	sp, #36	@ 0x24
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	000c      	movs	r4, r1
 8005bca:	0010      	movs	r0, r2
 8005bcc:	0019      	movs	r1, r3
 8005bce:	230a      	movs	r3, #10
 8005bd0:	18fb      	adds	r3, r7, r3
 8005bd2:	1c22      	adds	r2, r4, #0
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	2308      	movs	r3, #8
 8005bd8:	18fb      	adds	r3, r7, r3
 8005bda:	1c02      	adds	r2, r0, #0
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	1dbb      	adds	r3, r7, #6
 8005be0:	1c0a      	adds	r2, r1, #0
 8005be2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2241      	movs	r2, #65	@ 0x41
 8005be8:	5c9b      	ldrb	r3, [r3, r2]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d000      	beq.n	8005bf2 <HAL_I2C_Mem_Read+0x32>
 8005bf0:	e110      	b.n	8005e14 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d004      	beq.n	8005c02 <HAL_I2C_Mem_Read+0x42>
 8005bf8:	232c      	movs	r3, #44	@ 0x2c
 8005bfa:	18fb      	adds	r3, r7, r3
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d105      	bne.n	8005c0e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2280      	movs	r2, #128	@ 0x80
 8005c06:	0092      	lsls	r2, r2, #2
 8005c08:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e103      	b.n	8005e16 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2240      	movs	r2, #64	@ 0x40
 8005c12:	5c9b      	ldrb	r3, [r3, r2]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_I2C_Mem_Read+0x5c>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e0fc      	b.n	8005e16 <HAL_I2C_Mem_Read+0x256>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2240      	movs	r2, #64	@ 0x40
 8005c20:	2101      	movs	r1, #1
 8005c22:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c24:	f7fe f9b2 	bl	8003f8c <HAL_GetTick>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c2c:	2380      	movs	r3, #128	@ 0x80
 8005c2e:	0219      	lsls	r1, r3, #8
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	2319      	movs	r3, #25
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f000 ffb3 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 8005c3e:	1e03      	subs	r3, r0, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e0e7      	b.n	8005e16 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2241      	movs	r2, #65	@ 0x41
 8005c4a:	2122      	movs	r1, #34	@ 0x22
 8005c4c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2242      	movs	r2, #66	@ 0x42
 8005c52:	2140      	movs	r1, #64	@ 0x40
 8005c54:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	222c      	movs	r2, #44	@ 0x2c
 8005c66:	18ba      	adds	r2, r7, r2
 8005c68:	8812      	ldrh	r2, [r2, #0]
 8005c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c72:	1dbb      	adds	r3, r7, #6
 8005c74:	881c      	ldrh	r4, [r3, #0]
 8005c76:	2308      	movs	r3, #8
 8005c78:	18fb      	adds	r3, r7, r3
 8005c7a:	881a      	ldrh	r2, [r3, #0]
 8005c7c:	230a      	movs	r3, #10
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	8819      	ldrh	r1, [r3, #0]
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	0023      	movs	r3, r4
 8005c8e:	f000 fad3 	bl	8006238 <I2C_RequestMemoryRead>
 8005c92:	1e03      	subs	r3, r0, #0
 8005c94:	d005      	beq.n	8005ca2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2240      	movs	r2, #64	@ 0x40
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e0b9      	b.n	8005e16 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2bff      	cmp	r3, #255	@ 0xff
 8005caa:	d911      	bls.n	8005cd0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	22ff      	movs	r2, #255	@ 0xff
 8005cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	2380      	movs	r3, #128	@ 0x80
 8005cba:	045c      	lsls	r4, r3, #17
 8005cbc:	230a      	movs	r3, #10
 8005cbe:	18fb      	adds	r3, r7, r3
 8005cc0:	8819      	ldrh	r1, [r3, #0]
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	4b56      	ldr	r3, [pc, #344]	@ (8005e20 <HAL_I2C_Mem_Read+0x260>)
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	0023      	movs	r3, r4
 8005cca:	f001 f945 	bl	8006f58 <I2C_TransferConfig>
 8005cce:	e012      	b.n	8005cf6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	2380      	movs	r3, #128	@ 0x80
 8005ce2:	049c      	lsls	r4, r3, #18
 8005ce4:	230a      	movs	r3, #10
 8005ce6:	18fb      	adds	r3, r7, r3
 8005ce8:	8819      	ldrh	r1, [r3, #0]
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	4b4c      	ldr	r3, [pc, #304]	@ (8005e20 <HAL_I2C_Mem_Read+0x260>)
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	0023      	movs	r3, r4
 8005cf2:	f001 f931 	bl	8006f58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	0013      	movs	r3, r2
 8005d00:	2200      	movs	r2, #0
 8005d02:	2104      	movs	r1, #4
 8005d04:	f000 ff4e 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 8005d08:	1e03      	subs	r3, r0, #0
 8005d0a:	d001      	beq.n	8005d10 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e082      	b.n	8005e16 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d03a      	beq.n	8005dc2 <HAL_I2C_Mem_Read+0x202>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d136      	bne.n	8005dc2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	0013      	movs	r3, r2
 8005d5e:	2200      	movs	r2, #0
 8005d60:	2180      	movs	r1, #128	@ 0x80
 8005d62:	f000 ff1f 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 8005d66:	1e03      	subs	r3, r0, #0
 8005d68:	d001      	beq.n	8005d6e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e053      	b.n	8005e16 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2bff      	cmp	r3, #255	@ 0xff
 8005d76:	d911      	bls.n	8005d9c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	22ff      	movs	r2, #255	@ 0xff
 8005d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	2380      	movs	r3, #128	@ 0x80
 8005d86:	045c      	lsls	r4, r3, #17
 8005d88:	230a      	movs	r3, #10
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	8819      	ldrh	r1, [r3, #0]
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	2300      	movs	r3, #0
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	0023      	movs	r3, r4
 8005d96:	f001 f8df 	bl	8006f58 <I2C_TransferConfig>
 8005d9a:	e012      	b.n	8005dc2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	2380      	movs	r3, #128	@ 0x80
 8005dae:	049c      	lsls	r4, r3, #18
 8005db0:	230a      	movs	r3, #10
 8005db2:	18fb      	adds	r3, r7, r3
 8005db4:	8819      	ldrh	r1, [r3, #0]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	2300      	movs	r3, #0
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	0023      	movs	r3, r4
 8005dbe:	f001 f8cb 	bl	8006f58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d194      	bne.n	8005cf6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	0018      	movs	r0, r3
 8005dd4:	f000 ff84 	bl	8006ce0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005dd8:	1e03      	subs	r3, r0, #0
 8005dda:	d001      	beq.n	8005de0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e01a      	b.n	8005e16 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2220      	movs	r2, #32
 8005de6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	490c      	ldr	r1, [pc, #48]	@ (8005e24 <HAL_I2C_Mem_Read+0x264>)
 8005df4:	400a      	ands	r2, r1
 8005df6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2241      	movs	r2, #65	@ 0x41
 8005dfc:	2120      	movs	r1, #32
 8005dfe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2242      	movs	r2, #66	@ 0x42
 8005e04:	2100      	movs	r1, #0
 8005e06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2240      	movs	r2, #64	@ 0x40
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	e000      	b.n	8005e16 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8005e14:	2302      	movs	r3, #2
  }
}
 8005e16:	0018      	movs	r0, r3
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	b007      	add	sp, #28
 8005e1c:	bd90      	pop	{r4, r7, pc}
 8005e1e:	46c0      	nop			@ (mov r8, r8)
 8005e20:	80002400 	.word	0x80002400
 8005e24:	fe00e800 	.word	0xfe00e800

08005e28 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	68f9      	ldr	r1, [r7, #12]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
  }
}
 8005e54:	46c0      	nop			@ (mov r8, r8)
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b004      	add	sp, #16
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	2380      	movs	r3, #128	@ 0x80
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d00e      	beq.n	8005e9c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2280      	movs	r2, #128	@ 0x80
 8005e82:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005e84:	d00a      	beq.n	8005e9c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2280      	movs	r2, #128	@ 0x80
 8005e98:	0052      	lsls	r2, r2, #1
 8005e9a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	2380      	movs	r3, #128	@ 0x80
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	2280      	movs	r2, #128	@ 0x80
 8005eaa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005eac:	d00a      	beq.n	8005ec4 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb2:	2208      	movs	r2, #8
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2280      	movs	r2, #128	@ 0x80
 8005ec0:	00d2      	lsls	r2, r2, #3
 8005ec2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	2380      	movs	r3, #128	@ 0x80
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d00e      	beq.n	8005eec <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2280      	movs	r2, #128	@ 0x80
 8005ed2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005ed4:	d00a      	beq.n	8005eec <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eda:	2202      	movs	r2, #2
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2280      	movs	r2, #128	@ 0x80
 8005ee8:	0092      	lsls	r2, r2, #2
 8005eea:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	220b      	movs	r2, #11
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	d005      	beq.n	8005f06 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	0011      	movs	r1, r2
 8005f00:	0018      	movs	r0, r3
 8005f02:	f000 fce3 	bl	80068cc <I2C_ITError>
  }
}
 8005f06:	46c0      	nop			@ (mov r8, r8)
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	b006      	add	sp, #24
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b082      	sub	sp, #8
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005f16:	46c0      	nop			@ (mov r8, r8)
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	b002      	add	sp, #8
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005f26:	46c0      	nop			@ (mov r8, r8)
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	b002      	add	sp, #8
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	0008      	movs	r0, r1
 8005f38:	0011      	movs	r1, r2
 8005f3a:	1cfb      	adds	r3, r7, #3
 8005f3c:	1c02      	adds	r2, r0, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	003b      	movs	r3, r7
 8005f42:	1c0a      	adds	r2, r1, #0
 8005f44:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005f46:	46c0      	nop			@ (mov r8, r8)
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	b002      	add	sp, #8
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b082      	sub	sp, #8
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005f56:	46c0      	nop			@ (mov r8, r8)
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	b002      	add	sp, #8
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b082      	sub	sp, #8
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b002      	add	sp, #8
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2240      	movs	r2, #64	@ 0x40
 8005f8a:	5c9b      	ldrb	r3, [r3, r2]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d101      	bne.n	8005f94 <I2C_Slave_ISR_IT+0x24>
 8005f90:	2302      	movs	r3, #2
 8005f92:	e0e7      	b.n	8006164 <I2C_Slave_ISR_IT+0x1f4>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2240      	movs	r2, #64	@ 0x40
 8005f98:	2101      	movs	r1, #1
 8005f9a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d00a      	beq.n	8005fba <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005faa:	d006      	beq.n	8005fba <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	0011      	movs	r1, r2
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f000 faaa 	bl	800650c <I2C_ITSlaveCplt>
 8005fb8:	e0cf      	b.n	800615a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2210      	movs	r2, #16
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d052      	beq.n	8006068 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2210      	movs	r2, #16
 8005fc6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005fc8:	d04e      	beq.n	8006068 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d12d      	bne.n	8006030 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2241      	movs	r2, #65	@ 0x41
 8005fd8:	5c9b      	ldrb	r3, [r3, r2]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b28      	cmp	r3, #40	@ 0x28
 8005fde:	d10b      	bne.n	8005ff8 <I2C_Slave_ISR_IT+0x88>
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	2380      	movs	r3, #128	@ 0x80
 8005fe4:	049b      	lsls	r3, r3, #18
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d106      	bne.n	8005ff8 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	0011      	movs	r1, r2
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f000 fc13 	bl	800681c <I2C_ITListenCplt>
 8005ff6:	e036      	b.n	8006066 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2241      	movs	r2, #65	@ 0x41
 8005ffc:	5c9b      	ldrb	r3, [r3, r2]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b29      	cmp	r3, #41	@ 0x29
 8006002:	d110      	bne.n	8006026 <I2C_Slave_ISR_IT+0xb6>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	4a59      	ldr	r2, [pc, #356]	@ (800616c <I2C_Slave_ISR_IT+0x1fc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00c      	beq.n	8006026 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2210      	movs	r2, #16
 8006012:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	0018      	movs	r0, r3
 8006018:	f000 fd83 	bl	8006b22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	0018      	movs	r0, r3
 8006020:	f000 fa10 	bl	8006444 <I2C_ITSlaveSeqCplt>
 8006024:	e01f      	b.n	8006066 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2210      	movs	r2, #16
 800602c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800602e:	e091      	b.n	8006154 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2210      	movs	r2, #16
 8006036:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603c:	2204      	movs	r2, #4
 800603e:	431a      	orrs	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <I2C_Slave_ISR_IT+0xe6>
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	2380      	movs	r3, #128	@ 0x80
 800604e:	045b      	lsls	r3, r3, #17
 8006050:	429a      	cmp	r2, r3
 8006052:	d000      	beq.n	8006056 <I2C_Slave_ISR_IT+0xe6>
 8006054:	e07e      	b.n	8006154 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	0011      	movs	r1, r2
 800605e:	0018      	movs	r0, r3
 8006060:	f000 fc34 	bl	80068cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006064:	e076      	b.n	8006154 <I2C_Slave_ISR_IT+0x1e4>
 8006066:	e075      	b.n	8006154 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	2204      	movs	r2, #4
 800606c:	4013      	ands	r3, r2
 800606e:	d02f      	beq.n	80060d0 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2204      	movs	r2, #4
 8006074:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006076:	d02b      	beq.n	80060d0 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d018      	beq.n	80060b4 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d14c      	bne.n	8006158 <I2C_Slave_ISR_IT+0x1e8>
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	4a2a      	ldr	r2, [pc, #168]	@ (800616c <I2C_Slave_ISR_IT+0x1fc>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d048      	beq.n	8006158 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	0018      	movs	r0, r3
 80060ca:	f000 f9bb 	bl	8006444 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80060ce:	e043      	b.n	8006158 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	2208      	movs	r2, #8
 80060d4:	4013      	ands	r3, r2
 80060d6:	d00a      	beq.n	80060ee <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2208      	movs	r2, #8
 80060dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80060de:	d006      	beq.n	80060ee <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	0011      	movs	r1, r2
 80060e6:	0018      	movs	r0, r3
 80060e8:	f000 f908 	bl	80062fc <I2C_ITAddrCplt>
 80060ec:	e035      	b.n	800615a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2202      	movs	r2, #2
 80060f2:	4013      	ands	r3, r2
 80060f4:	d031      	beq.n	800615a <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80060fc:	d02d      	beq.n	800615a <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d018      	beq.n	800613a <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006138:	e00f      	b.n	800615a <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800613a:	697a      	ldr	r2, [r7, #20]
 800613c:	2380      	movs	r3, #128	@ 0x80
 800613e:	045b      	lsls	r3, r3, #17
 8006140:	429a      	cmp	r2, r3
 8006142:	d002      	beq.n	800614a <I2C_Slave_ISR_IT+0x1da>
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d107      	bne.n	800615a <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	0018      	movs	r0, r3
 800614e:	f000 f979 	bl	8006444 <I2C_ITSlaveSeqCplt>
 8006152:	e002      	b.n	800615a <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8006154:	46c0      	nop			@ (mov r8, r8)
 8006156:	e000      	b.n	800615a <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8006158:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2240      	movs	r2, #64	@ 0x40
 800615e:	2100      	movs	r1, #0
 8006160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	0018      	movs	r0, r3
 8006166:	46bd      	mov	sp, r7
 8006168:	b006      	add	sp, #24
 800616a:	bd80      	pop	{r7, pc}
 800616c:	ffff0000 	.word	0xffff0000

08006170 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006170:	b5b0      	push	{r4, r5, r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af02      	add	r7, sp, #8
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	000c      	movs	r4, r1
 800617a:	0010      	movs	r0, r2
 800617c:	0019      	movs	r1, r3
 800617e:	250a      	movs	r5, #10
 8006180:	197b      	adds	r3, r7, r5
 8006182:	1c22      	adds	r2, r4, #0
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	2308      	movs	r3, #8
 8006188:	18fb      	adds	r3, r7, r3
 800618a:	1c02      	adds	r2, r0, #0
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	1dbb      	adds	r3, r7, #6
 8006190:	1c0a      	adds	r2, r1, #0
 8006192:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006194:	1dbb      	adds	r3, r7, #6
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b2da      	uxtb	r2, r3
 800619a:	2380      	movs	r3, #128	@ 0x80
 800619c:	045c      	lsls	r4, r3, #17
 800619e:	197b      	adds	r3, r7, r5
 80061a0:	8819      	ldrh	r1, [r3, #0]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	4b23      	ldr	r3, [pc, #140]	@ (8006234 <I2C_RequestMemoryWrite+0xc4>)
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	0023      	movs	r3, r4
 80061aa:	f000 fed5 	bl	8006f58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b0:	6a39      	ldr	r1, [r7, #32]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	0018      	movs	r0, r3
 80061b6:	f000 fd4d 	bl	8006c54 <I2C_WaitOnTXISFlagUntilTimeout>
 80061ba:	1e03      	subs	r3, r0, #0
 80061bc:	d001      	beq.n	80061c2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e033      	b.n	800622a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061c2:	1dbb      	adds	r3, r7, #6
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d107      	bne.n	80061da <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061ca:	2308      	movs	r3, #8
 80061cc:	18fb      	adds	r3, r7, r3
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80061d8:	e019      	b.n	800620e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061da:	2308      	movs	r3, #8
 80061dc:	18fb      	adds	r3, r7, r3
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	0a1b      	lsrs	r3, r3, #8
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ee:	6a39      	ldr	r1, [r7, #32]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	0018      	movs	r0, r3
 80061f4:	f000 fd2e 	bl	8006c54 <I2C_WaitOnTXISFlagUntilTimeout>
 80061f8:	1e03      	subs	r3, r0, #0
 80061fa:	d001      	beq.n	8006200 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e014      	b.n	800622a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006200:	2308      	movs	r3, #8
 8006202:	18fb      	adds	r3, r7, r3
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b2da      	uxtb	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800620e:	6a3a      	ldr	r2, [r7, #32]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	0013      	movs	r3, r2
 8006218:	2200      	movs	r2, #0
 800621a:	2180      	movs	r1, #128	@ 0x80
 800621c:	f000 fcc2 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 8006220:	1e03      	subs	r3, r0, #0
 8006222:	d001      	beq.n	8006228 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e000      	b.n	800622a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	0018      	movs	r0, r3
 800622c:	46bd      	mov	sp, r7
 800622e:	b004      	add	sp, #16
 8006230:	bdb0      	pop	{r4, r5, r7, pc}
 8006232:	46c0      	nop			@ (mov r8, r8)
 8006234:	80002000 	.word	0x80002000

08006238 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006238:	b5b0      	push	{r4, r5, r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	000c      	movs	r4, r1
 8006242:	0010      	movs	r0, r2
 8006244:	0019      	movs	r1, r3
 8006246:	250a      	movs	r5, #10
 8006248:	197b      	adds	r3, r7, r5
 800624a:	1c22      	adds	r2, r4, #0
 800624c:	801a      	strh	r2, [r3, #0]
 800624e:	2308      	movs	r3, #8
 8006250:	18fb      	adds	r3, r7, r3
 8006252:	1c02      	adds	r2, r0, #0
 8006254:	801a      	strh	r2, [r3, #0]
 8006256:	1dbb      	adds	r3, r7, #6
 8006258:	1c0a      	adds	r2, r1, #0
 800625a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800625c:	1dbb      	adds	r3, r7, #6
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	197b      	adds	r3, r7, r5
 8006264:	8819      	ldrh	r1, [r3, #0]
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	4b23      	ldr	r3, [pc, #140]	@ (80062f8 <I2C_RequestMemoryRead+0xc0>)
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	2300      	movs	r3, #0
 800626e:	f000 fe73 	bl	8006f58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006274:	6a39      	ldr	r1, [r7, #32]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	0018      	movs	r0, r3
 800627a:	f000 fceb 	bl	8006c54 <I2C_WaitOnTXISFlagUntilTimeout>
 800627e:	1e03      	subs	r3, r0, #0
 8006280:	d001      	beq.n	8006286 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e033      	b.n	80062ee <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006286:	1dbb      	adds	r3, r7, #6
 8006288:	881b      	ldrh	r3, [r3, #0]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d107      	bne.n	800629e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800628e:	2308      	movs	r3, #8
 8006290:	18fb      	adds	r3, r7, r3
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	629a      	str	r2, [r3, #40]	@ 0x28
 800629c:	e019      	b.n	80062d2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800629e:	2308      	movs	r3, #8
 80062a0:	18fb      	adds	r3, r7, r3
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	0a1b      	lsrs	r3, r3, #8
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b2:	6a39      	ldr	r1, [r7, #32]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	0018      	movs	r0, r3
 80062b8:	f000 fccc 	bl	8006c54 <I2C_WaitOnTXISFlagUntilTimeout>
 80062bc:	1e03      	subs	r3, r0, #0
 80062be:	d001      	beq.n	80062c4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e014      	b.n	80062ee <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062c4:	2308      	movs	r3, #8
 80062c6:	18fb      	adds	r3, r7, r3
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b2da      	uxtb	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80062d2:	6a3a      	ldr	r2, [r7, #32]
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	0013      	movs	r3, r2
 80062dc:	2200      	movs	r2, #0
 80062de:	2140      	movs	r1, #64	@ 0x40
 80062e0:	f000 fc60 	bl	8006ba4 <I2C_WaitOnFlagUntilTimeout>
 80062e4:	1e03      	subs	r3, r0, #0
 80062e6:	d001      	beq.n	80062ec <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e000      	b.n	80062ee <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	0018      	movs	r0, r3
 80062f0:	46bd      	mov	sp, r7
 80062f2:	b004      	add	sp, #16
 80062f4:	bdb0      	pop	{r4, r5, r7, pc}
 80062f6:	46c0      	nop			@ (mov r8, r8)
 80062f8:	80002000 	.word	0x80002000

080062fc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80062fc:	b5b0      	push	{r4, r5, r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2241      	movs	r2, #65	@ 0x41
 800630a:	5c9b      	ldrb	r3, [r3, r2]
 800630c:	b2db      	uxtb	r3, r3
 800630e:	001a      	movs	r2, r3
 8006310:	2328      	movs	r3, #40	@ 0x28
 8006312:	4013      	ands	r3, r2
 8006314:	2b28      	cmp	r3, #40	@ 0x28
 8006316:	d000      	beq.n	800631a <I2C_ITAddrCplt+0x1e>
 8006318:	e088      	b.n	800642c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	0c1b      	lsrs	r3, r3, #16
 8006322:	b2da      	uxtb	r2, r3
 8006324:	250f      	movs	r5, #15
 8006326:	197b      	adds	r3, r7, r5
 8006328:	2101      	movs	r1, #1
 800632a:	400a      	ands	r2, r1
 800632c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	0c1b      	lsrs	r3, r3, #16
 8006336:	b29a      	uxth	r2, r3
 8006338:	200c      	movs	r0, #12
 800633a:	183b      	adds	r3, r7, r0
 800633c:	21fe      	movs	r1, #254	@ 0xfe
 800633e:	400a      	ands	r2, r1
 8006340:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	b29a      	uxth	r2, r3
 800634a:	240a      	movs	r4, #10
 800634c:	193b      	adds	r3, r7, r4
 800634e:	0592      	lsls	r2, r2, #22
 8006350:	0d92      	lsrs	r2, r2, #22
 8006352:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	b29a      	uxth	r2, r3
 800635c:	2308      	movs	r3, #8
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	21fe      	movs	r1, #254	@ 0xfe
 8006362:	400a      	ands	r2, r1
 8006364:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	2b02      	cmp	r3, #2
 800636c:	d148      	bne.n	8006400 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800636e:	0021      	movs	r1, r4
 8006370:	187b      	adds	r3, r7, r1
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	09db      	lsrs	r3, r3, #7
 8006376:	b29a      	uxth	r2, r3
 8006378:	183b      	adds	r3, r7, r0
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	4053      	eors	r3, r2
 800637e:	b29b      	uxth	r3, r3
 8006380:	001a      	movs	r2, r3
 8006382:	2306      	movs	r3, #6
 8006384:	4013      	ands	r3, r2
 8006386:	d120      	bne.n	80063ca <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006388:	183b      	adds	r3, r7, r0
 800638a:	187a      	adds	r2, r7, r1
 800638c:	8812      	ldrh	r2, [r2, #0]
 800638e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d14c      	bne.n	800643c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2208      	movs	r2, #8
 80063ae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2240      	movs	r2, #64	@ 0x40
 80063b4:	2100      	movs	r1, #0
 80063b6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80063b8:	183b      	adds	r3, r7, r0
 80063ba:	881a      	ldrh	r2, [r3, #0]
 80063bc:	197b      	adds	r3, r7, r5
 80063be:	7819      	ldrb	r1, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	0018      	movs	r0, r3
 80063c4:	f7ff fdb3 	bl	8005f2e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80063c8:	e038      	b.n	800643c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80063ca:	240c      	movs	r4, #12
 80063cc:	193b      	adds	r3, r7, r4
 80063ce:	2208      	movs	r2, #8
 80063d0:	18ba      	adds	r2, r7, r2
 80063d2:	8812      	ldrh	r2, [r2, #0]
 80063d4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80063d6:	2380      	movs	r3, #128	@ 0x80
 80063d8:	021a      	lsls	r2, r3, #8
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	0011      	movs	r1, r2
 80063de:	0018      	movs	r0, r3
 80063e0:	f000 fdf4 	bl	8006fcc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2240      	movs	r2, #64	@ 0x40
 80063e8:	2100      	movs	r1, #0
 80063ea:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80063ec:	193b      	adds	r3, r7, r4
 80063ee:	881a      	ldrh	r2, [r3, #0]
 80063f0:	230f      	movs	r3, #15
 80063f2:	18fb      	adds	r3, r7, r3
 80063f4:	7819      	ldrb	r1, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	0018      	movs	r0, r3
 80063fa:	f7ff fd98 	bl	8005f2e <HAL_I2C_AddrCallback>
}
 80063fe:	e01d      	b.n	800643c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006400:	2380      	movs	r3, #128	@ 0x80
 8006402:	021a      	lsls	r2, r3, #8
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	0011      	movs	r1, r2
 8006408:	0018      	movs	r0, r3
 800640a:	f000 fddf 	bl	8006fcc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2240      	movs	r2, #64	@ 0x40
 8006412:	2100      	movs	r1, #0
 8006414:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006416:	230c      	movs	r3, #12
 8006418:	18fb      	adds	r3, r7, r3
 800641a:	881a      	ldrh	r2, [r3, #0]
 800641c:	230f      	movs	r3, #15
 800641e:	18fb      	adds	r3, r7, r3
 8006420:	7819      	ldrb	r1, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	0018      	movs	r0, r3
 8006426:	f7ff fd82 	bl	8005f2e <HAL_I2C_AddrCallback>
}
 800642a:	e007      	b.n	800643c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2208      	movs	r2, #8
 8006432:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2240      	movs	r2, #64	@ 0x40
 8006438:	2100      	movs	r1, #0
 800643a:	5499      	strb	r1, [r3, r2]
}
 800643c:	46c0      	nop			@ (mov r8, r8)
 800643e:	46bd      	mov	sp, r7
 8006440:	b004      	add	sp, #16
 8006442:	bdb0      	pop	{r4, r5, r7, pc}

08006444 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2242      	movs	r2, #66	@ 0x42
 8006458:	2100      	movs	r1, #0
 800645a:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	2380      	movs	r3, #128	@ 0x80
 8006460:	01db      	lsls	r3, r3, #7
 8006462:	4013      	ands	r3, r2
 8006464:	d008      	beq.n	8006478 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4924      	ldr	r1, [pc, #144]	@ (8006504 <I2C_ITSlaveSeqCplt+0xc0>)
 8006472:	400a      	ands	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	e00c      	b.n	8006492 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	2380      	movs	r3, #128	@ 0x80
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	4013      	ands	r3, r2
 8006480:	d007      	beq.n	8006492 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	491e      	ldr	r1, [pc, #120]	@ (8006508 <I2C_ITSlaveSeqCplt+0xc4>)
 800648e:	400a      	ands	r2, r1
 8006490:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2241      	movs	r2, #65	@ 0x41
 8006496:	5c9b      	ldrb	r3, [r3, r2]
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b29      	cmp	r3, #41	@ 0x29
 800649c:	d114      	bne.n	80064c8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2241      	movs	r2, #65	@ 0x41
 80064a2:	2128      	movs	r1, #40	@ 0x28
 80064a4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2221      	movs	r2, #33	@ 0x21
 80064aa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2101      	movs	r1, #1
 80064b0:	0018      	movs	r0, r3
 80064b2:	f000 fd8b 	bl	8006fcc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2240      	movs	r2, #64	@ 0x40
 80064ba:	2100      	movs	r1, #0
 80064bc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	0018      	movs	r0, r3
 80064c2:	f7ff fd24 	bl	8005f0e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80064c6:	e019      	b.n	80064fc <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2241      	movs	r2, #65	@ 0x41
 80064cc:	5c9b      	ldrb	r3, [r3, r2]
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80064d2:	d113      	bne.n	80064fc <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2241      	movs	r2, #65	@ 0x41
 80064d8:	2128      	movs	r1, #40	@ 0x28
 80064da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2222      	movs	r2, #34	@ 0x22
 80064e0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2102      	movs	r1, #2
 80064e6:	0018      	movs	r0, r3
 80064e8:	f000 fd70 	bl	8006fcc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2240      	movs	r2, #64	@ 0x40
 80064f0:	2100      	movs	r1, #0
 80064f2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	0018      	movs	r0, r3
 80064f8:	f7ff fd11 	bl	8005f1e <HAL_I2C_SlaveRxCpltCallback>
}
 80064fc:	46c0      	nop			@ (mov r8, r8)
 80064fe:	46bd      	mov	sp, r7
 8006500:	b004      	add	sp, #16
 8006502:	bd80      	pop	{r7, pc}
 8006504:	ffffbfff 	.word	0xffffbfff
 8006508:	ffff7fff 	.word	0xffff7fff

0800650c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006526:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006528:	200b      	movs	r0, #11
 800652a:	183b      	adds	r3, r7, r0
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	2141      	movs	r1, #65	@ 0x41
 8006530:	5c52      	ldrb	r2, [r2, r1]
 8006532:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2220      	movs	r2, #32
 800653a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800653c:	183b      	adds	r3, r7, r0
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b21      	cmp	r3, #33	@ 0x21
 8006542:	d003      	beq.n	800654c <I2C_ITSlaveCplt+0x40>
 8006544:	183b      	adds	r3, r7, r0
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b29      	cmp	r3, #41	@ 0x29
 800654a:	d109      	bne.n	8006560 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800654c:	4aac      	ldr	r2, [pc, #688]	@ (8006800 <I2C_ITSlaveCplt+0x2f4>)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	0011      	movs	r1, r2
 8006552:	0018      	movs	r0, r3
 8006554:	f000 fd3a 	bl	8006fcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2221      	movs	r2, #33	@ 0x21
 800655c:	631a      	str	r2, [r3, #48]	@ 0x30
 800655e:	e020      	b.n	80065a2 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006560:	220b      	movs	r2, #11
 8006562:	18bb      	adds	r3, r7, r2
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b22      	cmp	r3, #34	@ 0x22
 8006568:	d003      	beq.n	8006572 <I2C_ITSlaveCplt+0x66>
 800656a:	18bb      	adds	r3, r7, r2
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006570:	d109      	bne.n	8006586 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006572:	4aa4      	ldr	r2, [pc, #656]	@ (8006804 <I2C_ITSlaveCplt+0x2f8>)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	0011      	movs	r1, r2
 8006578:	0018      	movs	r0, r3
 800657a:	f000 fd27 	bl	8006fcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2222      	movs	r2, #34	@ 0x22
 8006582:	631a      	str	r2, [r3, #48]	@ 0x30
 8006584:	e00d      	b.n	80065a2 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006586:	230b      	movs	r3, #11
 8006588:	18fb      	adds	r3, r7, r3
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b28      	cmp	r3, #40	@ 0x28
 800658e:	d108      	bne.n	80065a2 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006590:	4a9d      	ldr	r2, [pc, #628]	@ (8006808 <I2C_ITSlaveCplt+0x2fc>)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	0011      	movs	r1, r2
 8006596:	0018      	movs	r0, r3
 8006598:	f000 fd18 	bl	8006fcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2180      	movs	r1, #128	@ 0x80
 80065ae:	0209      	lsls	r1, r1, #8
 80065b0:	430a      	orrs	r2, r1
 80065b2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4993      	ldr	r1, [pc, #588]	@ (800680c <I2C_ITSlaveCplt+0x300>)
 80065c0:	400a      	ands	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	0018      	movs	r0, r3
 80065c8:	f000 faab 	bl	8006b22 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	2380      	movs	r3, #128	@ 0x80
 80065d0:	01db      	lsls	r3, r3, #7
 80065d2:	4013      	ands	r3, r2
 80065d4:	d013      	beq.n	80065fe <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	498b      	ldr	r1, [pc, #556]	@ (8006810 <I2C_ITSlaveCplt+0x304>)
 80065e2:	400a      	ands	r2, r1
 80065e4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01f      	beq.n	800662e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80065fc:	e017      	b.n	800662e <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	2380      	movs	r3, #128	@ 0x80
 8006602:	021b      	lsls	r3, r3, #8
 8006604:	4013      	ands	r3, r2
 8006606:	d012      	beq.n	800662e <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4980      	ldr	r1, [pc, #512]	@ (8006814 <I2C_ITSlaveCplt+0x308>)
 8006614:	400a      	ands	r2, r1
 8006616:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800661c:	2b00      	cmp	r3, #0
 800661e:	d006      	beq.n	800662e <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	b29a      	uxth	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2204      	movs	r2, #4
 8006632:	4013      	ands	r3, r2
 8006634:	d020      	beq.n	8006678 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2204      	movs	r2, #4
 800663a:	4393      	bics	r3, r2
 800663c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006650:	1c5a      	adds	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d005      	beq.n	800668e <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006686:	2204      	movs	r2, #4
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2210      	movs	r2, #16
 8006692:	4013      	ands	r3, r2
 8006694:	d04f      	beq.n	8006736 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	2210      	movs	r2, #16
 800669a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800669c:	d04b      	beq.n	8006736 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d12d      	bne.n	8006704 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2241      	movs	r2, #65	@ 0x41
 80066ac:	5c9b      	ldrb	r3, [r3, r2]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b28      	cmp	r3, #40	@ 0x28
 80066b2:	d10b      	bne.n	80066cc <I2C_ITSlaveCplt+0x1c0>
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	2380      	movs	r3, #128	@ 0x80
 80066b8:	049b      	lsls	r3, r3, #18
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d106      	bne.n	80066cc <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	0011      	movs	r1, r2
 80066c4:	0018      	movs	r0, r3
 80066c6:	f000 f8a9 	bl	800681c <I2C_ITListenCplt>
 80066ca:	e034      	b.n	8006736 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2241      	movs	r2, #65	@ 0x41
 80066d0:	5c9b      	ldrb	r3, [r3, r2]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b29      	cmp	r3, #41	@ 0x29
 80066d6:	d110      	bne.n	80066fa <I2C_ITSlaveCplt+0x1ee>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4a4f      	ldr	r2, [pc, #316]	@ (8006818 <I2C_ITSlaveCplt+0x30c>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00c      	beq.n	80066fa <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2210      	movs	r2, #16
 80066e6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	0018      	movs	r0, r3
 80066ec:	f000 fa19 	bl	8006b22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	0018      	movs	r0, r3
 80066f4:	f7ff fea6 	bl	8006444 <I2C_ITSlaveSeqCplt>
 80066f8:	e01d      	b.n	8006736 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2210      	movs	r2, #16
 8006700:	61da      	str	r2, [r3, #28]
 8006702:	e018      	b.n	8006736 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2210      	movs	r2, #16
 800670a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006710:	2204      	movs	r2, #4
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d004      	beq.n	8006728 <I2C_ITSlaveCplt+0x21c>
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	2380      	movs	r3, #128	@ 0x80
 8006722:	045b      	lsls	r3, r3, #17
 8006724:	429a      	cmp	r2, r3
 8006726:	d106      	bne.n	8006736 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	0011      	movs	r1, r2
 8006730:	0018      	movs	r0, r3
 8006732:	f000 f8cb 	bl	80068cc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2242      	movs	r2, #66	@ 0x42
 800673a:	2100      	movs	r1, #0
 800673c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006748:	2b00      	cmp	r3, #0
 800674a:	d013      	beq.n	8006774 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	0011      	movs	r1, r2
 8006754:	0018      	movs	r0, r3
 8006756:	f000 f8b9 	bl	80068cc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2241      	movs	r2, #65	@ 0x41
 800675e:	5c9b      	ldrb	r3, [r3, r2]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b28      	cmp	r3, #40	@ 0x28
 8006764:	d147      	bne.n	80067f6 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	0011      	movs	r1, r2
 800676c:	0018      	movs	r0, r3
 800676e:	f000 f855 	bl	800681c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006772:	e040      	b.n	80067f6 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006778:	4a27      	ldr	r2, [pc, #156]	@ (8006818 <I2C_ITSlaveCplt+0x30c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d016      	beq.n	80067ac <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	0018      	movs	r0, r3
 8006782:	f7ff fe5f 	bl	8006444 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a23      	ldr	r2, [pc, #140]	@ (8006818 <I2C_ITSlaveCplt+0x30c>)
 800678a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2241      	movs	r2, #65	@ 0x41
 8006790:	2120      	movs	r1, #32
 8006792:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2240      	movs	r2, #64	@ 0x40
 800679e:	2100      	movs	r1, #0
 80067a0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	0018      	movs	r0, r3
 80067a6:	f7ff fbd2 	bl	8005f4e <HAL_I2C_ListenCpltCallback>
}
 80067aa:	e024      	b.n	80067f6 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2241      	movs	r2, #65	@ 0x41
 80067b0:	5c9b      	ldrb	r3, [r3, r2]
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b22      	cmp	r3, #34	@ 0x22
 80067b6:	d10f      	bne.n	80067d8 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2241      	movs	r2, #65	@ 0x41
 80067bc:	2120      	movs	r1, #32
 80067be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2240      	movs	r2, #64	@ 0x40
 80067ca:	2100      	movs	r1, #0
 80067cc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	0018      	movs	r0, r3
 80067d2:	f7ff fba4 	bl	8005f1e <HAL_I2C_SlaveRxCpltCallback>
}
 80067d6:	e00e      	b.n	80067f6 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2241      	movs	r2, #65	@ 0x41
 80067dc:	2120      	movs	r1, #32
 80067de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2240      	movs	r2, #64	@ 0x40
 80067ea:	2100      	movs	r1, #0
 80067ec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	0018      	movs	r0, r3
 80067f2:	f7ff fb8c 	bl	8005f0e <HAL_I2C_SlaveTxCpltCallback>
}
 80067f6:	46c0      	nop			@ (mov r8, r8)
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b006      	add	sp, #24
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	46c0      	nop			@ (mov r8, r8)
 8006800:	00008001 	.word	0x00008001
 8006804:	00008002 	.word	0x00008002
 8006808:	00008003 	.word	0x00008003
 800680c:	fe00e800 	.word	0xfe00e800
 8006810:	ffffbfff 	.word	0xffffbfff
 8006814:	ffff7fff 	.word	0xffff7fff
 8006818:	ffff0000 	.word	0xffff0000

0800681c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a26      	ldr	r2, [pc, #152]	@ (80068c4 <I2C_ITListenCplt+0xa8>)
 800682a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2241      	movs	r2, #65	@ 0x41
 8006836:	2120      	movs	r1, #32
 8006838:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2242      	movs	r2, #66	@ 0x42
 800683e:	2100      	movs	r1, #0
 8006840:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2204      	movs	r2, #4
 800684c:	4013      	ands	r3, r2
 800684e:	d022      	beq.n	8006896 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800686c:	2b00      	cmp	r3, #0
 800686e:	d012      	beq.n	8006896 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006880:	b29b      	uxth	r3, r3
 8006882:	3b01      	subs	r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800688e:	2204      	movs	r2, #4
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006896:	4a0c      	ldr	r2, [pc, #48]	@ (80068c8 <I2C_ITListenCplt+0xac>)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	0011      	movs	r1, r2
 800689c:	0018      	movs	r0, r3
 800689e:	f000 fb95 	bl	8006fcc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2210      	movs	r2, #16
 80068a8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2240      	movs	r2, #64	@ 0x40
 80068ae:	2100      	movs	r1, #0
 80068b0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	0018      	movs	r0, r3
 80068b6:	f7ff fb4a 	bl	8005f4e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80068ba:	46c0      	nop			@ (mov r8, r8)
 80068bc:	46bd      	mov	sp, r7
 80068be:	b002      	add	sp, #8
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	46c0      	nop			@ (mov r8, r8)
 80068c4:	ffff0000 	.word	0xffff0000
 80068c8:	00008003 	.word	0x00008003

080068cc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80068d6:	200f      	movs	r0, #15
 80068d8:	183b      	adds	r3, r7, r0
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	2141      	movs	r1, #65	@ 0x41
 80068de:	5c52      	ldrb	r2, [r2, r1]
 80068e0:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2242      	movs	r2, #66	@ 0x42
 80068e6:	2100      	movs	r1, #0
 80068e8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a72      	ldr	r2, [pc, #456]	@ (8006ab8 <I2C_ITError+0x1ec>)
 80068ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	431a      	orrs	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006902:	183b      	adds	r3, r7, r0
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b28      	cmp	r3, #40	@ 0x28
 8006908:	d007      	beq.n	800691a <I2C_ITError+0x4e>
 800690a:	183b      	adds	r3, r7, r0
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b29      	cmp	r3, #41	@ 0x29
 8006910:	d003      	beq.n	800691a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006912:	183b      	adds	r3, r7, r0
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b2a      	cmp	r3, #42	@ 0x2a
 8006918:	d10c      	bne.n	8006934 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2103      	movs	r1, #3
 800691e:	0018      	movs	r0, r3
 8006920:	f000 fb54 	bl	8006fcc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2241      	movs	r2, #65	@ 0x41
 8006928:	2128      	movs	r1, #40	@ 0x28
 800692a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a63      	ldr	r2, [pc, #396]	@ (8006abc <I2C_ITError+0x1f0>)
 8006930:	635a      	str	r2, [r3, #52]	@ 0x34
 8006932:	e032      	b.n	800699a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006934:	4a62      	ldr	r2, [pc, #392]	@ (8006ac0 <I2C_ITError+0x1f4>)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	0011      	movs	r1, r2
 800693a:	0018      	movs	r0, r3
 800693c:	f000 fb46 	bl	8006fcc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	0018      	movs	r0, r3
 8006944:	f000 f8ed 	bl	8006b22 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2241      	movs	r2, #65	@ 0x41
 800694c:	5c9b      	ldrb	r3, [r3, r2]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b60      	cmp	r3, #96	@ 0x60
 8006952:	d01f      	beq.n	8006994 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2241      	movs	r2, #65	@ 0x41
 8006958:	2120      	movs	r1, #32
 800695a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2220      	movs	r2, #32
 8006964:	4013      	ands	r3, r2
 8006966:	2b20      	cmp	r3, #32
 8006968:	d114      	bne.n	8006994 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	2210      	movs	r2, #16
 8006972:	4013      	ands	r3, r2
 8006974:	2b10      	cmp	r3, #16
 8006976:	d109      	bne.n	800698c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2210      	movs	r2, #16
 800697e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006984:	2204      	movs	r2, #4
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2220      	movs	r2, #32
 8006992:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d03b      	beq.n	8006a20 <I2C_ITError+0x154>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b11      	cmp	r3, #17
 80069ac:	d002      	beq.n	80069b4 <I2C_ITError+0xe8>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b21      	cmp	r3, #33	@ 0x21
 80069b2:	d135      	bne.n	8006a20 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	2380      	movs	r3, #128	@ 0x80
 80069bc:	01db      	lsls	r3, r3, #7
 80069be:	401a      	ands	r2, r3
 80069c0:	2380      	movs	r3, #128	@ 0x80
 80069c2:	01db      	lsls	r3, r3, #7
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d107      	bne.n	80069d8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	493c      	ldr	r1, [pc, #240]	@ (8006ac4 <I2C_ITError+0x1f8>)
 80069d4:	400a      	ands	r2, r1
 80069d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069dc:	0018      	movs	r0, r3
 80069de:	f7fe fcef 	bl	80053c0 <HAL_DMA_GetState>
 80069e2:	0003      	movs	r3, r0
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d016      	beq.n	8006a16 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ec:	4a36      	ldr	r2, [pc, #216]	@ (8006ac8 <I2C_ITError+0x1fc>)
 80069ee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2240      	movs	r2, #64	@ 0x40
 80069f4:	2100      	movs	r1, #0
 80069f6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fc:	0018      	movs	r0, r3
 80069fe:	f7fe fbb3 	bl	8005168 <HAL_DMA_Abort_IT>
 8006a02:	1e03      	subs	r3, r0, #0
 8006a04:	d051      	beq.n	8006aaa <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a10:	0018      	movs	r0, r3
 8006a12:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a14:	e049      	b.n	8006aaa <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f000 f859 	bl	8006ad0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a1e:	e044      	b.n	8006aaa <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d03b      	beq.n	8006aa0 <I2C_ITError+0x1d4>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b12      	cmp	r3, #18
 8006a2c:	d002      	beq.n	8006a34 <I2C_ITError+0x168>
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b22      	cmp	r3, #34	@ 0x22
 8006a32:	d135      	bne.n	8006aa0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	2380      	movs	r3, #128	@ 0x80
 8006a3c:	021b      	lsls	r3, r3, #8
 8006a3e:	401a      	ands	r2, r3
 8006a40:	2380      	movs	r3, #128	@ 0x80
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d107      	bne.n	8006a58 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	491e      	ldr	r1, [pc, #120]	@ (8006acc <I2C_ITError+0x200>)
 8006a54:	400a      	ands	r2, r1
 8006a56:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	f7fe fcaf 	bl	80053c0 <HAL_DMA_GetState>
 8006a62:	0003      	movs	r3, r0
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d016      	beq.n	8006a96 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a6c:	4a16      	ldr	r2, [pc, #88]	@ (8006ac8 <I2C_ITError+0x1fc>)
 8006a6e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2240      	movs	r2, #64	@ 0x40
 8006a74:	2100      	movs	r1, #0
 8006a76:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f7fe fb73 	bl	8005168 <HAL_DMA_Abort_IT>
 8006a82:	1e03      	subs	r3, r0, #0
 8006a84:	d013      	beq.n	8006aae <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a90:	0018      	movs	r0, r3
 8006a92:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a94:	e00b      	b.n	8006aae <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	0018      	movs	r0, r3
 8006a9a:	f000 f819 	bl	8006ad0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a9e:	e006      	b.n	8006aae <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f000 f814 	bl	8006ad0 <I2C_TreatErrorCallback>
  }
}
 8006aa8:	e002      	b.n	8006ab0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006aaa:	46c0      	nop			@ (mov r8, r8)
 8006aac:	e000      	b.n	8006ab0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006aae:	46c0      	nop			@ (mov r8, r8)
}
 8006ab0:	46c0      	nop			@ (mov r8, r8)
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	b004      	add	sp, #16
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	ffff0000 	.word	0xffff0000
 8006abc:	08005f71 	.word	0x08005f71
 8006ac0:	00008003 	.word	0x00008003
 8006ac4:	ffffbfff 	.word	0xffffbfff
 8006ac8:	08006b67 	.word	0x08006b67
 8006acc:	ffff7fff 	.word	0xffff7fff

08006ad0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2241      	movs	r2, #65	@ 0x41
 8006adc:	5c9b      	ldrb	r3, [r3, r2]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b60      	cmp	r3, #96	@ 0x60
 8006ae2:	d10f      	bne.n	8006b04 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2241      	movs	r2, #65	@ 0x41
 8006ae8:	2120      	movs	r1, #32
 8006aea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2240      	movs	r2, #64	@ 0x40
 8006af6:	2100      	movs	r1, #0
 8006af8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	0018      	movs	r0, r3
 8006afe:	f7ff fa2e 	bl	8005f5e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b02:	e00a      	b.n	8006b1a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2240      	movs	r2, #64	@ 0x40
 8006b0e:	2100      	movs	r1, #0
 8006b10:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	0018      	movs	r0, r3
 8006b16:	f7fa fa55 	bl	8000fc4 <HAL_I2C_ErrorCallback>
}
 8006b1a:	46c0      	nop			@ (mov r8, r8)
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	b002      	add	sp, #8
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	2202      	movs	r2, #2
 8006b32:	4013      	ands	r3, r2
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d103      	bne.n	8006b40 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	2201      	movs	r2, #1
 8006b48:	4013      	ands	r3, r2
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d007      	beq.n	8006b5e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699a      	ldr	r2, [r3, #24]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2101      	movs	r1, #1
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	619a      	str	r2, [r3, #24]
  }
}
 8006b5e:	46c0      	nop			@ (mov r8, r8)
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b002      	add	sp, #8
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b084      	sub	sp, #16
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b80:	2200      	movs	r2, #0
 8006b82:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b90:	2200      	movs	r2, #0
 8006b92:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	0018      	movs	r0, r3
 8006b98:	f7ff ff9a 	bl	8006ad0 <I2C_TreatErrorCallback>
}
 8006b9c:	46c0      	nop			@ (mov r8, r8)
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	b004      	add	sp, #16
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	603b      	str	r3, [r7, #0]
 8006bb0:	1dfb      	adds	r3, r7, #7
 8006bb2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bb4:	e03a      	b.n	8006c2c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	f000 f8d3 	bl	8006d68 <I2C_IsErrorOccurred>
 8006bc2:	1e03      	subs	r3, r0, #0
 8006bc4:	d001      	beq.n	8006bca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e040      	b.n	8006c4c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	d02d      	beq.n	8006c2c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd0:	f7fd f9dc 	bl	8003f8c <HAL_GetTick>
 8006bd4:	0002      	movs	r2, r0
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d302      	bcc.n	8006be6 <I2C_WaitOnFlagUntilTimeout+0x42>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d122      	bne.n	8006c2c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	425a      	negs	r2, r3
 8006bf6:	4153      	adcs	r3, r2
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	001a      	movs	r2, r3
 8006bfc:	1dfb      	adds	r3, r7, #7
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d113      	bne.n	8006c2c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c08:	2220      	movs	r2, #32
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2241      	movs	r2, #65	@ 0x41
 8006c14:	2120      	movs	r1, #32
 8006c16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2242      	movs	r2, #66	@ 0x42
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2240      	movs	r2, #64	@ 0x40
 8006c24:	2100      	movs	r1, #0
 8006c26:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e00f      	b.n	8006c4c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	4013      	ands	r3, r2
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	425a      	negs	r2, r3
 8006c3c:	4153      	adcs	r3, r2
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	001a      	movs	r2, r3
 8006c42:	1dfb      	adds	r3, r7, #7
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d0b5      	beq.n	8006bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	b004      	add	sp, #16
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c60:	e032      	b.n	8006cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f000 f87d 	bl	8006d68 <I2C_IsErrorOccurred>
 8006c6e:	1e03      	subs	r3, r0, #0
 8006c70:	d001      	beq.n	8006c76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e030      	b.n	8006cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	d025      	beq.n	8006cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7c:	f7fd f986 	bl	8003f8c <HAL_GetTick>
 8006c80:	0002      	movs	r2, r0
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d302      	bcc.n	8006c92 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d11a      	bne.n	8006cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d013      	beq.n	8006cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2241      	movs	r2, #65	@ 0x41
 8006cb0:	2120      	movs	r1, #32
 8006cb2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2242      	movs	r2, #66	@ 0x42
 8006cb8:	2100      	movs	r1, #0
 8006cba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2240      	movs	r2, #64	@ 0x40
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e007      	b.n	8006cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d1c5      	bne.n	8006c62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	0018      	movs	r0, r3
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	b004      	add	sp, #16
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cec:	e02f      	b.n	8006d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	68b9      	ldr	r1, [r7, #8]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f000 f837 	bl	8006d68 <I2C_IsErrorOccurred>
 8006cfa:	1e03      	subs	r3, r0, #0
 8006cfc:	d001      	beq.n	8006d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e02d      	b.n	8006d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d02:	f7fd f943 	bl	8003f8c <HAL_GetTick>
 8006d06:	0002      	movs	r2, r0
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d302      	bcc.n	8006d18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d11a      	bne.n	8006d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	4013      	ands	r3, r2
 8006d22:	2b20      	cmp	r3, #32
 8006d24:	d013      	beq.n	8006d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2241      	movs	r2, #65	@ 0x41
 8006d36:	2120      	movs	r1, #32
 8006d38:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2242      	movs	r2, #66	@ 0x42
 8006d3e:	2100      	movs	r1, #0
 8006d40:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2240      	movs	r2, #64	@ 0x40
 8006d46:	2100      	movs	r1, #0
 8006d48:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e007      	b.n	8006d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	2220      	movs	r2, #32
 8006d56:	4013      	ands	r3, r2
 8006d58:	2b20      	cmp	r3, #32
 8006d5a:	d1c8      	bne.n	8006cee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	0018      	movs	r0, r3
 8006d60:	46bd      	mov	sp, r7
 8006d62:	b004      	add	sp, #16
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08a      	sub	sp, #40	@ 0x28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d74:	2327      	movs	r3, #39	@ 0x27
 8006d76:	18fb      	adds	r3, r7, r3
 8006d78:	2200      	movs	r2, #0
 8006d7a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	2210      	movs	r2, #16
 8006d90:	4013      	ands	r3, r2
 8006d92:	d100      	bne.n	8006d96 <I2C_IsErrorOccurred+0x2e>
 8006d94:	e079      	b.n	8006e8a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2210      	movs	r2, #16
 8006d9c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d9e:	e057      	b.n	8006e50 <I2C_IsErrorOccurred+0xe8>
 8006da0:	2227      	movs	r2, #39	@ 0x27
 8006da2:	18bb      	adds	r3, r7, r2
 8006da4:	18ba      	adds	r2, r7, r2
 8006da6:	7812      	ldrb	r2, [r2, #0]
 8006da8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	3301      	adds	r3, #1
 8006dae:	d04f      	beq.n	8006e50 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006db0:	f7fd f8ec 	bl	8003f8c <HAL_GetTick>
 8006db4:	0002      	movs	r2, r0
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d302      	bcc.n	8006dc6 <I2C_IsErrorOccurred+0x5e>
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d144      	bne.n	8006e50 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	2380      	movs	r3, #128	@ 0x80
 8006dce:	01db      	lsls	r3, r3, #7
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006dd4:	2013      	movs	r0, #19
 8006dd6:	183b      	adds	r3, r7, r0
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	2142      	movs	r1, #66	@ 0x42
 8006ddc:	5c52      	ldrb	r2, [r2, r1]
 8006dde:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	2380      	movs	r3, #128	@ 0x80
 8006de8:	021b      	lsls	r3, r3, #8
 8006dea:	401a      	ands	r2, r3
 8006dec:	2380      	movs	r3, #128	@ 0x80
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d126      	bne.n	8006e42 <I2C_IsErrorOccurred+0xda>
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	2380      	movs	r3, #128	@ 0x80
 8006df8:	01db      	lsls	r3, r3, #7
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d021      	beq.n	8006e42 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8006dfe:	183b      	adds	r3, r7, r0
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d01d      	beq.n	8006e42 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2180      	movs	r1, #128	@ 0x80
 8006e12:	01c9      	lsls	r1, r1, #7
 8006e14:	430a      	orrs	r2, r1
 8006e16:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006e18:	f7fd f8b8 	bl	8003f8c <HAL_GetTick>
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e20:	e00f      	b.n	8006e42 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006e22:	f7fd f8b3 	bl	8003f8c <HAL_GetTick>
 8006e26:	0002      	movs	r2, r0
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b19      	cmp	r3, #25
 8006e2e:	d908      	bls.n	8006e42 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	2220      	movs	r2, #32
 8006e34:	4313      	orrs	r3, r2
 8006e36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006e38:	2327      	movs	r3, #39	@ 0x27
 8006e3a:	18fb      	adds	r3, r7, r3
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	701a      	strb	r2, [r3, #0]

              break;
 8006e40:	e006      	b.n	8006e50 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b20      	cmp	r3, #32
 8006e4e:	d1e8      	bne.n	8006e22 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	2220      	movs	r2, #32
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	d004      	beq.n	8006e68 <I2C_IsErrorOccurred+0x100>
 8006e5e:	2327      	movs	r3, #39	@ 0x27
 8006e60:	18fb      	adds	r3, r7, r3
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d09b      	beq.n	8006da0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006e68:	2327      	movs	r3, #39	@ 0x27
 8006e6a:	18fb      	adds	r3, r7, r3
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d103      	bne.n	8006e7a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2220      	movs	r2, #32
 8006e78:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	2204      	movs	r2, #4
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006e82:	2327      	movs	r3, #39	@ 0x27
 8006e84:	18fb      	adds	r3, r7, r3
 8006e86:	2201      	movs	r2, #1
 8006e88:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	2380      	movs	r3, #128	@ 0x80
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	4013      	ands	r3, r2
 8006e9a:	d00c      	beq.n	8006eb6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2280      	movs	r2, #128	@ 0x80
 8006eaa:	0052      	lsls	r2, r2, #1
 8006eac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006eae:	2327      	movs	r3, #39	@ 0x27
 8006eb0:	18fb      	adds	r3, r7, r3
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	2380      	movs	r3, #128	@ 0x80
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	d00c      	beq.n	8006eda <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	2208      	movs	r2, #8
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2280      	movs	r2, #128	@ 0x80
 8006ece:	00d2      	lsls	r2, r2, #3
 8006ed0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ed2:	2327      	movs	r3, #39	@ 0x27
 8006ed4:	18fb      	adds	r3, r7, r3
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	2380      	movs	r3, #128	@ 0x80
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	d00c      	beq.n	8006efe <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2280      	movs	r2, #128	@ 0x80
 8006ef2:	0092      	lsls	r2, r2, #2
 8006ef4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ef6:	2327      	movs	r3, #39	@ 0x27
 8006ef8:	18fb      	adds	r3, r7, r3
 8006efa:	2201      	movs	r2, #1
 8006efc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006efe:	2327      	movs	r3, #39	@ 0x27
 8006f00:	18fb      	adds	r3, r7, r3
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d01d      	beq.n	8006f44 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	0018      	movs	r0, r3
 8006f0c:	f7ff fe09 	bl	8006b22 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	490e      	ldr	r1, [pc, #56]	@ (8006f54 <I2C_IsErrorOccurred+0x1ec>)
 8006f1c:	400a      	ands	r2, r1
 8006f1e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2241      	movs	r2, #65	@ 0x41
 8006f30:	2120      	movs	r1, #32
 8006f32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2242      	movs	r2, #66	@ 0x42
 8006f38:	2100      	movs	r1, #0
 8006f3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2240      	movs	r2, #64	@ 0x40
 8006f40:	2100      	movs	r1, #0
 8006f42:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006f44:	2327      	movs	r3, #39	@ 0x27
 8006f46:	18fb      	adds	r3, r7, r3
 8006f48:	781b      	ldrb	r3, [r3, #0]
}
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	b00a      	add	sp, #40	@ 0x28
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	46c0      	nop			@ (mov r8, r8)
 8006f54:	fe00e800 	.word	0xfe00e800

08006f58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f58:	b590      	push	{r4, r7, lr}
 8006f5a:	b087      	sub	sp, #28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	0008      	movs	r0, r1
 8006f62:	0011      	movs	r1, r2
 8006f64:	607b      	str	r3, [r7, #4]
 8006f66:	240a      	movs	r4, #10
 8006f68:	193b      	adds	r3, r7, r4
 8006f6a:	1c02      	adds	r2, r0, #0
 8006f6c:	801a      	strh	r2, [r3, #0]
 8006f6e:	2009      	movs	r0, #9
 8006f70:	183b      	adds	r3, r7, r0
 8006f72:	1c0a      	adds	r2, r1, #0
 8006f74:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f76:	193b      	adds	r3, r7, r4
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	059b      	lsls	r3, r3, #22
 8006f7c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f7e:	183b      	adds	r3, r7, r0
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	0419      	lsls	r1, r3, #16
 8006f84:	23ff      	movs	r3, #255	@ 0xff
 8006f86:	041b      	lsls	r3, r3, #16
 8006f88:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f8a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f92:	4313      	orrs	r3, r2
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fa2:	0d51      	lsrs	r1, r2, #21
 8006fa4:	2280      	movs	r2, #128	@ 0x80
 8006fa6:	00d2      	lsls	r2, r2, #3
 8006fa8:	400a      	ands	r2, r1
 8006faa:	4907      	ldr	r1, [pc, #28]	@ (8006fc8 <I2C_TransferConfig+0x70>)
 8006fac:	430a      	orrs	r2, r1
 8006fae:	43d2      	mvns	r2, r2
 8006fb0:	401a      	ands	r2, r3
 8006fb2:	0011      	movs	r1, r2
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006fbe:	46c0      	nop			@ (mov r8, r8)
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	b007      	add	sp, #28
 8006fc4:	bd90      	pop	{r4, r7, pc}
 8006fc6:	46c0      	nop			@ (mov r8, r8)
 8006fc8:	03ff63ff 	.word	0x03ff63ff

08006fcc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	000a      	movs	r2, r1
 8006fd6:	1cbb      	adds	r3, r7, #2
 8006fd8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006fde:	1cbb      	adds	r3, r7, #2
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	d010      	beq.n	800700a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2242      	movs	r2, #66	@ 0x42
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2241      	movs	r2, #65	@ 0x41
 8006ff4:	5c9b      	ldrb	r3, [r3, r2]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	001a      	movs	r2, r3
 8006ffa:	2328      	movs	r3, #40	@ 0x28
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	2b28      	cmp	r3, #40	@ 0x28
 8007000:	d003      	beq.n	800700a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	22b0      	movs	r2, #176	@ 0xb0
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800700a:	1cbb      	adds	r3, r7, #2
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	2202      	movs	r2, #2
 8007010:	4013      	ands	r3, r2
 8007012:	d010      	beq.n	8007036 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2244      	movs	r2, #68	@ 0x44
 8007018:	4313      	orrs	r3, r2
 800701a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2241      	movs	r2, #65	@ 0x41
 8007020:	5c9b      	ldrb	r3, [r3, r2]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	001a      	movs	r2, r3
 8007026:	2328      	movs	r3, #40	@ 0x28
 8007028:	4013      	ands	r3, r2
 800702a:	2b28      	cmp	r3, #40	@ 0x28
 800702c:	d003      	beq.n	8007036 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	22b0      	movs	r2, #176	@ 0xb0
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007036:	1cbb      	adds	r3, r7, #2
 8007038:	2200      	movs	r2, #0
 800703a:	5e9b      	ldrsh	r3, [r3, r2]
 800703c:	2b00      	cmp	r3, #0
 800703e:	da03      	bge.n	8007048 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	22b8      	movs	r2, #184	@ 0xb8
 8007044:	4313      	orrs	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007048:	1cbb      	adds	r3, r7, #2
 800704a:	881b      	ldrh	r3, [r3, #0]
 800704c:	2b10      	cmp	r3, #16
 800704e:	d103      	bne.n	8007058 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2290      	movs	r2, #144	@ 0x90
 8007054:	4313      	orrs	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007058:	1cbb      	adds	r3, r7, #2
 800705a:	881b      	ldrh	r3, [r3, #0]
 800705c:	2b20      	cmp	r3, #32
 800705e:	d103      	bne.n	8007068 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2220      	movs	r2, #32
 8007064:	4313      	orrs	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007068:	1cbb      	adds	r3, r7, #2
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	2b40      	cmp	r3, #64	@ 0x40
 800706e:	d103      	bne.n	8007078 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2240      	movs	r2, #64	@ 0x40
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	43d9      	mvns	r1, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	400a      	ands	r2, r1
 8007088:	601a      	str	r2, [r3, #0]
}
 800708a:	46c0      	nop			@ (mov r8, r8)
 800708c:	46bd      	mov	sp, r7
 800708e:	b004      	add	sp, #16
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2241      	movs	r2, #65	@ 0x41
 80070a2:	5c9b      	ldrb	r3, [r3, r2]
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d138      	bne.n	800711c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2240      	movs	r2, #64	@ 0x40
 80070ae:	5c9b      	ldrb	r3, [r3, r2]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e032      	b.n	800711e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2240      	movs	r2, #64	@ 0x40
 80070bc:	2101      	movs	r1, #1
 80070be:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2241      	movs	r2, #65	@ 0x41
 80070c4:	2124      	movs	r1, #36	@ 0x24
 80070c6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2101      	movs	r1, #1
 80070d4:	438a      	bics	r2, r1
 80070d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4911      	ldr	r1, [pc, #68]	@ (8007128 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80070e4:	400a      	ands	r2, r1
 80070e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6819      	ldr	r1, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2101      	movs	r1, #1
 8007104:	430a      	orrs	r2, r1
 8007106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2241      	movs	r2, #65	@ 0x41
 800710c:	2120      	movs	r1, #32
 800710e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2240      	movs	r2, #64	@ 0x40
 8007114:	2100      	movs	r1, #0
 8007116:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	e000      	b.n	800711e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800711c:	2302      	movs	r3, #2
  }
}
 800711e:	0018      	movs	r0, r3
 8007120:	46bd      	mov	sp, r7
 8007122:	b002      	add	sp, #8
 8007124:	bd80      	pop	{r7, pc}
 8007126:	46c0      	nop			@ (mov r8, r8)
 8007128:	ffffefff 	.word	0xffffefff

0800712c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2241      	movs	r2, #65	@ 0x41
 800713a:	5c9b      	ldrb	r3, [r3, r2]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b20      	cmp	r3, #32
 8007140:	d139      	bne.n	80071b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2240      	movs	r2, #64	@ 0x40
 8007146:	5c9b      	ldrb	r3, [r3, r2]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800714c:	2302      	movs	r3, #2
 800714e:	e033      	b.n	80071b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2240      	movs	r2, #64	@ 0x40
 8007154:	2101      	movs	r1, #1
 8007156:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2241      	movs	r2, #65	@ 0x41
 800715c:	2124      	movs	r1, #36	@ 0x24
 800715e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2101      	movs	r1, #1
 800716c:	438a      	bics	r2, r1
 800716e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4a11      	ldr	r2, [pc, #68]	@ (80071c0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800717c:	4013      	ands	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	021b      	lsls	r3, r3, #8
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2101      	movs	r1, #1
 800719e:	430a      	orrs	r2, r1
 80071a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2241      	movs	r2, #65	@ 0x41
 80071a6:	2120      	movs	r1, #32
 80071a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2240      	movs	r2, #64	@ 0x40
 80071ae:	2100      	movs	r1, #0
 80071b0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	e000      	b.n	80071b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80071b6:	2302      	movs	r3, #2
  }
}
 80071b8:	0018      	movs	r0, r3
 80071ba:	46bd      	mov	sp, r7
 80071bc:	b004      	add	sp, #16
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	fffff0ff 	.word	0xfffff0ff

080071c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e20f      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2201      	movs	r2, #1
 80071dc:	4013      	ands	r3, r2
 80071de:	d100      	bne.n	80071e2 <HAL_RCC_OscConfig+0x1e>
 80071e0:	e069      	b.n	80072b6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071e2:	4bc8      	ldr	r3, [pc, #800]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	2238      	movs	r2, #56	@ 0x38
 80071e8:	4013      	ands	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	d105      	bne.n	80071fe <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d15d      	bne.n	80072b6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e1fb      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	2380      	movs	r3, #128	@ 0x80
 8007204:	025b      	lsls	r3, r3, #9
 8007206:	429a      	cmp	r2, r3
 8007208:	d107      	bne.n	800721a <HAL_RCC_OscConfig+0x56>
 800720a:	4bbe      	ldr	r3, [pc, #760]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	4bbd      	ldr	r3, [pc, #756]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007210:	2180      	movs	r1, #128	@ 0x80
 8007212:	0249      	lsls	r1, r1, #9
 8007214:	430a      	orrs	r2, r1
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	e020      	b.n	800725c <HAL_RCC_OscConfig+0x98>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	23a0      	movs	r3, #160	@ 0xa0
 8007220:	02db      	lsls	r3, r3, #11
 8007222:	429a      	cmp	r2, r3
 8007224:	d10e      	bne.n	8007244 <HAL_RCC_OscConfig+0x80>
 8007226:	4bb7      	ldr	r3, [pc, #732]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4bb6      	ldr	r3, [pc, #728]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 800722c:	2180      	movs	r1, #128	@ 0x80
 800722e:	02c9      	lsls	r1, r1, #11
 8007230:	430a      	orrs	r2, r1
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	4bb3      	ldr	r3, [pc, #716]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	4bb2      	ldr	r3, [pc, #712]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 800723a:	2180      	movs	r1, #128	@ 0x80
 800723c:	0249      	lsls	r1, r1, #9
 800723e:	430a      	orrs	r2, r1
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	e00b      	b.n	800725c <HAL_RCC_OscConfig+0x98>
 8007244:	4baf      	ldr	r3, [pc, #700]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	4bae      	ldr	r3, [pc, #696]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 800724a:	49af      	ldr	r1, [pc, #700]	@ (8007508 <HAL_RCC_OscConfig+0x344>)
 800724c:	400a      	ands	r2, r1
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	4bac      	ldr	r3, [pc, #688]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	4bab      	ldr	r3, [pc, #684]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007256:	49ad      	ldr	r1, [pc, #692]	@ (800750c <HAL_RCC_OscConfig+0x348>)
 8007258:	400a      	ands	r2, r1
 800725a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d014      	beq.n	800728e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007264:	f7fc fe92 	bl	8003f8c <HAL_GetTick>
 8007268:	0003      	movs	r3, r0
 800726a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800726c:	e008      	b.n	8007280 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800726e:	f7fc fe8d 	bl	8003f8c <HAL_GetTick>
 8007272:	0002      	movs	r2, r0
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b64      	cmp	r3, #100	@ 0x64
 800727a:	d901      	bls.n	8007280 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e1ba      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007280:	4ba0      	ldr	r3, [pc, #640]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	2380      	movs	r3, #128	@ 0x80
 8007286:	029b      	lsls	r3, r3, #10
 8007288:	4013      	ands	r3, r2
 800728a:	d0f0      	beq.n	800726e <HAL_RCC_OscConfig+0xaa>
 800728c:	e013      	b.n	80072b6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728e:	f7fc fe7d 	bl	8003f8c <HAL_GetTick>
 8007292:	0003      	movs	r3, r0
 8007294:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8007298:	f7fc fe78 	bl	8003f8c <HAL_GetTick>
 800729c:	0002      	movs	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b64      	cmp	r3, #100	@ 0x64
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e1a5      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80072aa:	4b96      	ldr	r3, [pc, #600]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	2380      	movs	r3, #128	@ 0x80
 80072b0:	029b      	lsls	r3, r3, #10
 80072b2:	4013      	ands	r3, r2
 80072b4:	d1f0      	bne.n	8007298 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2202      	movs	r2, #2
 80072bc:	4013      	ands	r3, r2
 80072be:	d100      	bne.n	80072c2 <HAL_RCC_OscConfig+0xfe>
 80072c0:	e086      	b.n	80073d0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072c2:	4b90      	ldr	r3, [pc, #576]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	2238      	movs	r2, #56	@ 0x38
 80072c8:	4013      	ands	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d12f      	bne.n	8007332 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e18b      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072de:	4b89      	ldr	r3, [pc, #548]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	4a8b      	ldr	r2, [pc, #556]	@ (8007510 <HAL_RCC_OscConfig+0x34c>)
 80072e4:	4013      	ands	r3, r2
 80072e6:	0019      	movs	r1, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	021a      	lsls	r2, r3, #8
 80072ee:	4b85      	ldr	r3, [pc, #532]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80072f0:	430a      	orrs	r2, r1
 80072f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d112      	bne.n	8007320 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80072fa:	4b82      	ldr	r3, [pc, #520]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a85      	ldr	r2, [pc, #532]	@ (8007514 <HAL_RCC_OscConfig+0x350>)
 8007300:	4013      	ands	r3, r2
 8007302:	0019      	movs	r1, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691a      	ldr	r2, [r3, #16]
 8007308:	4b7e      	ldr	r3, [pc, #504]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 800730a:	430a      	orrs	r2, r1
 800730c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800730e:	4b7d      	ldr	r3, [pc, #500]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	0adb      	lsrs	r3, r3, #11
 8007314:	2207      	movs	r2, #7
 8007316:	4013      	ands	r3, r2
 8007318:	4a7f      	ldr	r2, [pc, #508]	@ (8007518 <HAL_RCC_OscConfig+0x354>)
 800731a:	40da      	lsrs	r2, r3
 800731c:	4b7f      	ldr	r3, [pc, #508]	@ (800751c <HAL_RCC_OscConfig+0x358>)
 800731e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007320:	4b7f      	ldr	r3, [pc, #508]	@ (8007520 <HAL_RCC_OscConfig+0x35c>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	0018      	movs	r0, r3
 8007326:	f7fc fdd5 	bl	8003ed4 <HAL_InitTick>
 800732a:	1e03      	subs	r3, r0, #0
 800732c:	d050      	beq.n	80073d0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e161      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d030      	beq.n	800739c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800733a:	4b72      	ldr	r3, [pc, #456]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a75      	ldr	r2, [pc, #468]	@ (8007514 <HAL_RCC_OscConfig+0x350>)
 8007340:	4013      	ands	r3, r2
 8007342:	0019      	movs	r1, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691a      	ldr	r2, [r3, #16]
 8007348:	4b6e      	ldr	r3, [pc, #440]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 800734a:	430a      	orrs	r2, r1
 800734c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800734e:	4b6d      	ldr	r3, [pc, #436]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4b6c      	ldr	r3, [pc, #432]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007354:	2180      	movs	r1, #128	@ 0x80
 8007356:	0049      	lsls	r1, r1, #1
 8007358:	430a      	orrs	r2, r1
 800735a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800735c:	f7fc fe16 	bl	8003f8c <HAL_GetTick>
 8007360:	0003      	movs	r3, r0
 8007362:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007364:	e008      	b.n	8007378 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8007366:	f7fc fe11 	bl	8003f8c <HAL_GetTick>
 800736a:	0002      	movs	r2, r0
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e13e      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007378:	4b62      	ldr	r3, [pc, #392]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	2380      	movs	r3, #128	@ 0x80
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	4013      	ands	r3, r2
 8007382:	d0f0      	beq.n	8007366 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007384:	4b5f      	ldr	r3, [pc, #380]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	4a61      	ldr	r2, [pc, #388]	@ (8007510 <HAL_RCC_OscConfig+0x34c>)
 800738a:	4013      	ands	r3, r2
 800738c:	0019      	movs	r1, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	021a      	lsls	r2, r3, #8
 8007394:	4b5b      	ldr	r3, [pc, #364]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007396:	430a      	orrs	r2, r1
 8007398:	605a      	str	r2, [r3, #4]
 800739a:	e019      	b.n	80073d0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800739c:	4b59      	ldr	r3, [pc, #356]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	4b58      	ldr	r3, [pc, #352]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80073a2:	4960      	ldr	r1, [pc, #384]	@ (8007524 <HAL_RCC_OscConfig+0x360>)
 80073a4:	400a      	ands	r2, r1
 80073a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a8:	f7fc fdf0 	bl	8003f8c <HAL_GetTick>
 80073ac:	0003      	movs	r3, r0
 80073ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073b0:	e008      	b.n	80073c4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80073b2:	f7fc fdeb 	bl	8003f8c <HAL_GetTick>
 80073b6:	0002      	movs	r2, r0
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d901      	bls.n	80073c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e118      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80073c4:	4b4f      	ldr	r3, [pc, #316]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	2380      	movs	r3, #128	@ 0x80
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	4013      	ands	r3, r2
 80073ce:	d1f0      	bne.n	80073b2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2208      	movs	r2, #8
 80073d6:	4013      	ands	r3, r2
 80073d8:	d042      	beq.n	8007460 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80073da:	4b4a      	ldr	r3, [pc, #296]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	2238      	movs	r2, #56	@ 0x38
 80073e0:	4013      	ands	r3, r2
 80073e2:	2b18      	cmp	r3, #24
 80073e4:	d105      	bne.n	80073f2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d138      	bne.n	8007460 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e101      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d019      	beq.n	800742e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80073fa:	4b42      	ldr	r3, [pc, #264]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80073fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80073fe:	4b41      	ldr	r3, [pc, #260]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007400:	2101      	movs	r1, #1
 8007402:	430a      	orrs	r2, r1
 8007404:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007406:	f7fc fdc1 	bl	8003f8c <HAL_GetTick>
 800740a:	0003      	movs	r3, r0
 800740c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800740e:	e008      	b.n	8007422 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007410:	f7fc fdbc 	bl	8003f8c <HAL_GetTick>
 8007414:	0002      	movs	r2, r0
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	2b02      	cmp	r3, #2
 800741c:	d901      	bls.n	8007422 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800741e:	2303      	movs	r3, #3
 8007420:	e0e9      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8007422:	4b38      	ldr	r3, [pc, #224]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007426:	2202      	movs	r2, #2
 8007428:	4013      	ands	r3, r2
 800742a:	d0f1      	beq.n	8007410 <HAL_RCC_OscConfig+0x24c>
 800742c:	e018      	b.n	8007460 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800742e:	4b35      	ldr	r3, [pc, #212]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007430:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007432:	4b34      	ldr	r3, [pc, #208]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007434:	2101      	movs	r1, #1
 8007436:	438a      	bics	r2, r1
 8007438:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800743a:	f7fc fda7 	bl	8003f8c <HAL_GetTick>
 800743e:	0003      	movs	r3, r0
 8007440:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8007444:	f7fc fda2 	bl	8003f8c <HAL_GetTick>
 8007448:	0002      	movs	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e0cf      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8007456:	4b2b      	ldr	r3, [pc, #172]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800745a:	2202      	movs	r2, #2
 800745c:	4013      	ands	r3, r2
 800745e:	d1f1      	bne.n	8007444 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2204      	movs	r2, #4
 8007466:	4013      	ands	r3, r2
 8007468:	d100      	bne.n	800746c <HAL_RCC_OscConfig+0x2a8>
 800746a:	e084      	b.n	8007576 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800746c:	230f      	movs	r3, #15
 800746e:	18fb      	adds	r3, r7, r3
 8007470:	2200      	movs	r2, #0
 8007472:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8007474:	4b23      	ldr	r3, [pc, #140]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	2238      	movs	r2, #56	@ 0x38
 800747a:	4013      	ands	r3, r2
 800747c:	2b20      	cmp	r3, #32
 800747e:	d106      	bne.n	800748e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d000      	beq.n	800748a <HAL_RCC_OscConfig+0x2c6>
 8007488:	e075      	b.n	8007576 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e0b3      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d106      	bne.n	80074a4 <HAL_RCC_OscConfig+0x2e0>
 8007496:	4b1b      	ldr	r3, [pc, #108]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 8007498:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800749a:	4b1a      	ldr	r3, [pc, #104]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 800749c:	2101      	movs	r1, #1
 800749e:	430a      	orrs	r2, r1
 80074a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80074a2:	e01c      	b.n	80074de <HAL_RCC_OscConfig+0x31a>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	2b05      	cmp	r3, #5
 80074aa:	d10c      	bne.n	80074c6 <HAL_RCC_OscConfig+0x302>
 80074ac:	4b15      	ldr	r3, [pc, #84]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80074ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80074b0:	4b14      	ldr	r3, [pc, #80]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80074b2:	2104      	movs	r1, #4
 80074b4:	430a      	orrs	r2, r1
 80074b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80074b8:	4b12      	ldr	r3, [pc, #72]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80074ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80074bc:	4b11      	ldr	r3, [pc, #68]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80074be:	2101      	movs	r1, #1
 80074c0:	430a      	orrs	r2, r1
 80074c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80074c4:	e00b      	b.n	80074de <HAL_RCC_OscConfig+0x31a>
 80074c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80074c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80074ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80074cc:	2101      	movs	r1, #1
 80074ce:	438a      	bics	r2, r1
 80074d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80074d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80074d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80074d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007504 <HAL_RCC_OscConfig+0x340>)
 80074d8:	2104      	movs	r1, #4
 80074da:	438a      	bics	r2, r1
 80074dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d028      	beq.n	8007538 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e6:	f7fc fd51 	bl	8003f8c <HAL_GetTick>
 80074ea:	0003      	movs	r3, r0
 80074ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80074ee:	e01d      	b.n	800752c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074f0:	f7fc fd4c 	bl	8003f8c <HAL_GetTick>
 80074f4:	0002      	movs	r2, r0
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	4a0b      	ldr	r2, [pc, #44]	@ (8007528 <HAL_RCC_OscConfig+0x364>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d915      	bls.n	800752c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e078      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
 8007504:	40021000 	.word	0x40021000
 8007508:	fffeffff 	.word	0xfffeffff
 800750c:	fffbffff 	.word	0xfffbffff
 8007510:	ffff80ff 	.word	0xffff80ff
 8007514:	ffffc7ff 	.word	0xffffc7ff
 8007518:	02dc6c00 	.word	0x02dc6c00
 800751c:	20000068 	.word	0x20000068
 8007520:	20000070 	.word	0x20000070
 8007524:	fffffeff 	.word	0xfffffeff
 8007528:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800752c:	4b34      	ldr	r3, [pc, #208]	@ (8007600 <HAL_RCC_OscConfig+0x43c>)
 800752e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007530:	2202      	movs	r2, #2
 8007532:	4013      	ands	r3, r2
 8007534:	d0dc      	beq.n	80074f0 <HAL_RCC_OscConfig+0x32c>
 8007536:	e013      	b.n	8007560 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007538:	f7fc fd28 	bl	8003f8c <HAL_GetTick>
 800753c:	0003      	movs	r3, r0
 800753e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8007540:	e009      	b.n	8007556 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007542:	f7fc fd23 	bl	8003f8c <HAL_GetTick>
 8007546:	0002      	movs	r2, r0
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	4a2d      	ldr	r2, [pc, #180]	@ (8007604 <HAL_RCC_OscConfig+0x440>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e04f      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8007556:	4b2a      	ldr	r3, [pc, #168]	@ (8007600 <HAL_RCC_OscConfig+0x43c>)
 8007558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800755a:	2202      	movs	r2, #2
 800755c:	4013      	ands	r3, r2
 800755e:	d1f0      	bne.n	8007542 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007560:	230f      	movs	r3, #15
 8007562:	18fb      	adds	r3, r7, r3
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d105      	bne.n	8007576 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800756a:	4b25      	ldr	r3, [pc, #148]	@ (8007600 <HAL_RCC_OscConfig+0x43c>)
 800756c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800756e:	4b24      	ldr	r3, [pc, #144]	@ (8007600 <HAL_RCC_OscConfig+0x43c>)
 8007570:	4925      	ldr	r1, [pc, #148]	@ (8007608 <HAL_RCC_OscConfig+0x444>)
 8007572:	400a      	ands	r2, r1
 8007574:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2210      	movs	r2, #16
 800757c:	4013      	ands	r3, r2
 800757e:	d039      	beq.n	80075f4 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d01b      	beq.n	80075c0 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007588:	4b1d      	ldr	r3, [pc, #116]	@ (8007600 <HAL_RCC_OscConfig+0x43c>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	4b1c      	ldr	r3, [pc, #112]	@ (8007600 <HAL_RCC_OscConfig+0x43c>)
 800758e:	2180      	movs	r1, #128	@ 0x80
 8007590:	03c9      	lsls	r1, r1, #15
 8007592:	430a      	orrs	r2, r1
 8007594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007596:	f7fc fcf9 	bl	8003f8c <HAL_GetTick>
 800759a:	0003      	movs	r3, r0
 800759c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800759e:	e008      	b.n	80075b2 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075a0:	f7fc fcf4 	bl	8003f8c <HAL_GetTick>
 80075a4:	0002      	movs	r2, r0
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e021      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80075b2:	4b13      	ldr	r3, [pc, #76]	@ (8007600 <HAL_RCC_OscConfig+0x43c>)
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	2380      	movs	r3, #128	@ 0x80
 80075b8:	041b      	lsls	r3, r3, #16
 80075ba:	4013      	ands	r3, r2
 80075bc:	d0f0      	beq.n	80075a0 <HAL_RCC_OscConfig+0x3dc>
 80075be:	e019      	b.n	80075f4 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80075c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007600 <HAL_RCC_OscConfig+0x43c>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007600 <HAL_RCC_OscConfig+0x43c>)
 80075c6:	4911      	ldr	r1, [pc, #68]	@ (800760c <HAL_RCC_OscConfig+0x448>)
 80075c8:	400a      	ands	r2, r1
 80075ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075cc:	f7fc fcde 	bl	8003f8c <HAL_GetTick>
 80075d0:	0003      	movs	r3, r0
 80075d2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80075d4:	e008      	b.n	80075e8 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075d6:	f7fc fcd9 	bl	8003f8c <HAL_GetTick>
 80075da:	0002      	movs	r2, r0
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d901      	bls.n	80075e8 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e006      	b.n	80075f6 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80075e8:	4b05      	ldr	r3, [pc, #20]	@ (8007600 <HAL_RCC_OscConfig+0x43c>)
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	2380      	movs	r3, #128	@ 0x80
 80075ee:	041b      	lsls	r3, r3, #16
 80075f0:	4013      	ands	r3, r2
 80075f2:	d1f0      	bne.n	80075d6 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	0018      	movs	r0, r3
 80075f8:	46bd      	mov	sp, r7
 80075fa:	b006      	add	sp, #24
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	46c0      	nop			@ (mov r8, r8)
 8007600:	40021000 	.word	0x40021000
 8007604:	00001388 	.word	0x00001388
 8007608:	efffffff 	.word	0xefffffff
 800760c:	ffbfffff 	.word	0xffbfffff

08007610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e0f6      	b.n	8007812 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007624:	4b7d      	ldr	r3, [pc, #500]	@ (800781c <HAL_RCC_ClockConfig+0x20c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2207      	movs	r2, #7
 800762a:	4013      	ands	r3, r2
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d91e      	bls.n	8007670 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007632:	4b7a      	ldr	r3, [pc, #488]	@ (800781c <HAL_RCC_ClockConfig+0x20c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2207      	movs	r2, #7
 8007638:	4393      	bics	r3, r2
 800763a:	0019      	movs	r1, r3
 800763c:	4b77      	ldr	r3, [pc, #476]	@ (800781c <HAL_RCC_ClockConfig+0x20c>)
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007644:	f7fc fca2 	bl	8003f8c <HAL_GetTick>
 8007648:	0003      	movs	r3, r0
 800764a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800764c:	e009      	b.n	8007662 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800764e:	f7fc fc9d 	bl	8003f8c <HAL_GetTick>
 8007652:	0002      	movs	r2, r0
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	4a71      	ldr	r2, [pc, #452]	@ (8007820 <HAL_RCC_ClockConfig+0x210>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e0d7      	b.n	8007812 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007662:	4b6e      	ldr	r3, [pc, #440]	@ (800781c <HAL_RCC_ClockConfig+0x20c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2207      	movs	r2, #7
 8007668:	4013      	ands	r3, r2
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d1ee      	bne.n	800764e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2202      	movs	r2, #2
 8007676:	4013      	ands	r3, r2
 8007678:	d017      	beq.n	80076aa <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2204      	movs	r2, #4
 8007680:	4013      	ands	r3, r2
 8007682:	d008      	beq.n	8007696 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007684:	4b67      	ldr	r3, [pc, #412]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	4a67      	ldr	r2, [pc, #412]	@ (8007828 <HAL_RCC_ClockConfig+0x218>)
 800768a:	401a      	ands	r2, r3
 800768c:	4b65      	ldr	r3, [pc, #404]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 800768e:	21b0      	movs	r1, #176	@ 0xb0
 8007690:	0109      	lsls	r1, r1, #4
 8007692:	430a      	orrs	r2, r1
 8007694:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007696:	4b63      	ldr	r3, [pc, #396]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	4a64      	ldr	r2, [pc, #400]	@ (800782c <HAL_RCC_ClockConfig+0x21c>)
 800769c:	4013      	ands	r3, r2
 800769e:	0019      	movs	r1, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	4b5f      	ldr	r3, [pc, #380]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 80076a6:	430a      	orrs	r2, r1
 80076a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2201      	movs	r2, #1
 80076b0:	4013      	ands	r3, r2
 80076b2:	d100      	bne.n	80076b6 <HAL_RCC_ClockConfig+0xa6>
 80076b4:	e061      	b.n	800777a <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80076b6:	4b5b      	ldr	r3, [pc, #364]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	221c      	movs	r2, #28
 80076bc:	4393      	bics	r3, r2
 80076be:	0019      	movs	r1, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	4b57      	ldr	r3, [pc, #348]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 80076c6:	430a      	orrs	r2, r1
 80076c8:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d107      	bne.n	80076e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80076d2:	4b54      	ldr	r3, [pc, #336]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	2380      	movs	r3, #128	@ 0x80
 80076d8:	029b      	lsls	r3, r3, #10
 80076da:	4013      	ands	r3, r2
 80076dc:	d12b      	bne.n	8007736 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e097      	b.n	8007812 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d107      	bne.n	80076fa <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076ea:	4b4e      	ldr	r3, [pc, #312]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	2380      	movs	r3, #128	@ 0x80
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	4013      	ands	r3, r2
 80076f4:	d11f      	bne.n	8007736 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e08b      	b.n	8007812 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d107      	bne.n	8007712 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8007702:	4b48      	ldr	r3, [pc, #288]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	2380      	movs	r3, #128	@ 0x80
 8007708:	041b      	lsls	r3, r3, #16
 800770a:	4013      	ands	r3, r2
 800770c:	d113      	bne.n	8007736 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e07f      	b.n	8007812 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2b03      	cmp	r3, #3
 8007718:	d106      	bne.n	8007728 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800771a:	4b42      	ldr	r3, [pc, #264]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 800771c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800771e:	2202      	movs	r2, #2
 8007720:	4013      	ands	r3, r2
 8007722:	d108      	bne.n	8007736 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e074      	b.n	8007812 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007728:	4b3e      	ldr	r3, [pc, #248]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 800772a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800772c:	2202      	movs	r2, #2
 800772e:	4013      	ands	r3, r2
 8007730:	d101      	bne.n	8007736 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e06d      	b.n	8007812 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007736:	4b3b      	ldr	r3, [pc, #236]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	2207      	movs	r2, #7
 800773c:	4393      	bics	r3, r2
 800773e:	0019      	movs	r1, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	4b37      	ldr	r3, [pc, #220]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 8007746:	430a      	orrs	r2, r1
 8007748:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800774a:	f7fc fc1f 	bl	8003f8c <HAL_GetTick>
 800774e:	0003      	movs	r3, r0
 8007750:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007752:	e009      	b.n	8007768 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8007754:	f7fc fc1a 	bl	8003f8c <HAL_GetTick>
 8007758:	0002      	movs	r2, r0
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	4a30      	ldr	r2, [pc, #192]	@ (8007820 <HAL_RCC_ClockConfig+0x210>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d901      	bls.n	8007768 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e054      	b.n	8007812 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007768:	4b2e      	ldr	r3, [pc, #184]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	2238      	movs	r2, #56	@ 0x38
 800776e:	401a      	ands	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	429a      	cmp	r2, r3
 8007778:	d1ec      	bne.n	8007754 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800777a:	4b28      	ldr	r3, [pc, #160]	@ (800781c <HAL_RCC_ClockConfig+0x20c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2207      	movs	r2, #7
 8007780:	4013      	ands	r3, r2
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d21e      	bcs.n	80077c6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007788:	4b24      	ldr	r3, [pc, #144]	@ (800781c <HAL_RCC_ClockConfig+0x20c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2207      	movs	r2, #7
 800778e:	4393      	bics	r3, r2
 8007790:	0019      	movs	r1, r3
 8007792:	4b22      	ldr	r3, [pc, #136]	@ (800781c <HAL_RCC_ClockConfig+0x20c>)
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800779a:	f7fc fbf7 	bl	8003f8c <HAL_GetTick>
 800779e:	0003      	movs	r3, r0
 80077a0:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80077a2:	e009      	b.n	80077b8 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80077a4:	f7fc fbf2 	bl	8003f8c <HAL_GetTick>
 80077a8:	0002      	movs	r2, r0
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	4a1c      	ldr	r2, [pc, #112]	@ (8007820 <HAL_RCC_ClockConfig+0x210>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e02c      	b.n	8007812 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80077b8:	4b18      	ldr	r3, [pc, #96]	@ (800781c <HAL_RCC_ClockConfig+0x20c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2207      	movs	r2, #7
 80077be:	4013      	ands	r3, r2
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d1ee      	bne.n	80077a4 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2204      	movs	r2, #4
 80077cc:	4013      	ands	r3, r2
 80077ce:	d009      	beq.n	80077e4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80077d0:	4b14      	ldr	r3, [pc, #80]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	4a16      	ldr	r2, [pc, #88]	@ (8007830 <HAL_RCC_ClockConfig+0x220>)
 80077d6:	4013      	ands	r3, r2
 80077d8:	0019      	movs	r1, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691a      	ldr	r2, [r3, #16]
 80077de:	4b11      	ldr	r3, [pc, #68]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 80077e0:	430a      	orrs	r2, r1
 80077e2:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80077e4:	f000 f82c 	bl	8007840 <HAL_RCC_GetSysClockFreq>
 80077e8:	0001      	movs	r1, r0
 80077ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007824 <HAL_RCC_ClockConfig+0x214>)
 80077ec:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80077ee:	0a1b      	lsrs	r3, r3, #8
 80077f0:	220f      	movs	r2, #15
 80077f2:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80077f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007834 <HAL_RCC_ClockConfig+0x224>)
 80077f6:	0092      	lsls	r2, r2, #2
 80077f8:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80077fa:	221f      	movs	r2, #31
 80077fc:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80077fe:	000a      	movs	r2, r1
 8007800:	40da      	lsrs	r2, r3
 8007802:	4b0d      	ldr	r3, [pc, #52]	@ (8007838 <HAL_RCC_ClockConfig+0x228>)
 8007804:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007806:	4b0d      	ldr	r3, [pc, #52]	@ (800783c <HAL_RCC_ClockConfig+0x22c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	0018      	movs	r0, r3
 800780c:	f7fc fb62 	bl	8003ed4 <HAL_InitTick>
 8007810:	0003      	movs	r3, r0
}
 8007812:	0018      	movs	r0, r3
 8007814:	46bd      	mov	sp, r7
 8007816:	b004      	add	sp, #16
 8007818:	bd80      	pop	{r7, pc}
 800781a:	46c0      	nop			@ (mov r8, r8)
 800781c:	40022000 	.word	0x40022000
 8007820:	00001388 	.word	0x00001388
 8007824:	40021000 	.word	0x40021000
 8007828:	ffff84ff 	.word	0xffff84ff
 800782c:	fffff0ff 	.word	0xfffff0ff
 8007830:	ffff8fff 	.word	0xffff8fff
 8007834:	0800a67c 	.word	0x0800a67c
 8007838:	20000068 	.word	0x20000068
 800783c:	20000070 	.word	0x20000070

08007840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8007846:	4b27      	ldr	r3, [pc, #156]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	089b      	lsrs	r3, r3, #2
 800784c:	2207      	movs	r2, #7
 800784e:	4013      	ands	r3, r2
 8007850:	3301      	adds	r3, #1
 8007852:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007854:	4b23      	ldr	r3, [pc, #140]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	2238      	movs	r2, #56	@ 0x38
 800785a:	4013      	ands	r3, r2
 800785c:	d10f      	bne.n	800787e <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800785e:	4b21      	ldr	r3, [pc, #132]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	0adb      	lsrs	r3, r3, #11
 8007864:	2207      	movs	r2, #7
 8007866:	4013      	ands	r3, r2
 8007868:	2201      	movs	r2, #1
 800786a:	409a      	lsls	r2, r3
 800786c:	0013      	movs	r3, r2
 800786e:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007870:	6879      	ldr	r1, [r7, #4]
 8007872:	481d      	ldr	r0, [pc, #116]	@ (80078e8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8007874:	f7f8 fc48 	bl	8000108 <__udivsi3>
 8007878:	0003      	movs	r3, r0
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	e027      	b.n	80078ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800787e:	4b19      	ldr	r3, [pc, #100]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	2238      	movs	r2, #56	@ 0x38
 8007884:	4013      	ands	r3, r2
 8007886:	2b08      	cmp	r3, #8
 8007888:	d102      	bne.n	8007890 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800788a:	4b18      	ldr	r3, [pc, #96]	@ (80078ec <HAL_RCC_GetSysClockFreq+0xac>)
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	e01e      	b.n	80078ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8007890:	4b14      	ldr	r3, [pc, #80]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	2238      	movs	r2, #56	@ 0x38
 8007896:	4013      	ands	r3, r2
 8007898:	2b20      	cmp	r3, #32
 800789a:	d103      	bne.n	80078a4 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800789c:	2380      	movs	r3, #128	@ 0x80
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	e014      	b.n	80078ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80078a4:	4b0f      	ldr	r3, [pc, #60]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	2238      	movs	r2, #56	@ 0x38
 80078aa:	4013      	ands	r3, r2
 80078ac:	2b18      	cmp	r3, #24
 80078ae:	d103      	bne.n	80078b8 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80078b0:	23fa      	movs	r3, #250	@ 0xfa
 80078b2:	01db      	lsls	r3, r3, #7
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	e00a      	b.n	80078ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 80078b8:	4b0a      	ldr	r3, [pc, #40]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2238      	movs	r2, #56	@ 0x38
 80078be:	4013      	ands	r3, r2
 80078c0:	2b10      	cmp	r3, #16
 80078c2:	d102      	bne.n	80078ca <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 80078c4:	4b08      	ldr	r3, [pc, #32]	@ (80078e8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	e001      	b.n	80078ce <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 80078ce:	68b9      	ldr	r1, [r7, #8]
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7f8 fc19 	bl	8000108 <__udivsi3>
 80078d6:	0003      	movs	r3, r0
 80078d8:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80078da:	68fb      	ldr	r3, [r7, #12]
}
 80078dc:	0018      	movs	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	b004      	add	sp, #16
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	40021000 	.word	0x40021000
 80078e8:	02dc6c00 	.word	0x02dc6c00
 80078ec:	007a1200 	.word	0x007a1200

080078f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80078f4:	f7ff ffa4 	bl	8007840 <HAL_RCC_GetSysClockFreq>
 80078f8:	0001      	movs	r1, r0
 80078fa:	4b09      	ldr	r3, [pc, #36]	@ (8007920 <HAL_RCC_GetHCLKFreq+0x30>)
 80078fc:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80078fe:	0a1b      	lsrs	r3, r3, #8
 8007900:	220f      	movs	r2, #15
 8007902:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8007904:	4b07      	ldr	r3, [pc, #28]	@ (8007924 <HAL_RCC_GetHCLKFreq+0x34>)
 8007906:	0092      	lsls	r2, r2, #2
 8007908:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800790a:	221f      	movs	r2, #31
 800790c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800790e:	000a      	movs	r2, r1
 8007910:	40da      	lsrs	r2, r3
 8007912:	4b05      	ldr	r3, [pc, #20]	@ (8007928 <HAL_RCC_GetHCLKFreq+0x38>)
 8007914:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8007916:	4b04      	ldr	r3, [pc, #16]	@ (8007928 <HAL_RCC_GetHCLKFreq+0x38>)
 8007918:	681b      	ldr	r3, [r3, #0]
}
 800791a:	0018      	movs	r0, r3
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40021000 	.word	0x40021000
 8007924:	0800a67c 	.word	0x0800a67c
 8007928:	20000068 	.word	0x20000068

0800792c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8007930:	f7ff ffde 	bl	80078f0 <HAL_RCC_GetHCLKFreq>
 8007934:	0001      	movs	r1, r0
 8007936:	4b07      	ldr	r3, [pc, #28]	@ (8007954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	0b1b      	lsrs	r3, r3, #12
 800793c:	2207      	movs	r2, #7
 800793e:	401a      	ands	r2, r3
 8007940:	4b05      	ldr	r3, [pc, #20]	@ (8007958 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8007942:	0092      	lsls	r2, r2, #2
 8007944:	58d3      	ldr	r3, [r2, r3]
 8007946:	221f      	movs	r2, #31
 8007948:	4013      	ands	r3, r2
 800794a:	40d9      	lsrs	r1, r3
 800794c:	000b      	movs	r3, r1
}
 800794e:	0018      	movs	r0, r3
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	40021000 	.word	0x40021000
 8007958:	0800a6bc 	.word	0x0800a6bc

0800795c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007964:	2313      	movs	r3, #19
 8007966:	18fb      	adds	r3, r7, r3
 8007968:	2200      	movs	r2, #0
 800796a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800796c:	2312      	movs	r3, #18
 800796e:	18fb      	adds	r3, r7, r3
 8007970:	2200      	movs	r2, #0
 8007972:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2240      	movs	r2, #64	@ 0x40
 800797a:	4013      	ands	r3, r2
 800797c:	d100      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800797e:	e079      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007980:	2011      	movs	r0, #17
 8007982:	183b      	adds	r3, r7, r0
 8007984:	2200      	movs	r2, #0
 8007986:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007988:	4b6a      	ldr	r3, [pc, #424]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800798a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800798c:	2380      	movs	r3, #128	@ 0x80
 800798e:	055b      	lsls	r3, r3, #21
 8007990:	4013      	ands	r3, r2
 8007992:	d110      	bne.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007994:	4b67      	ldr	r3, [pc, #412]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007998:	4b66      	ldr	r3, [pc, #408]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800799a:	2180      	movs	r1, #128	@ 0x80
 800799c:	0549      	lsls	r1, r1, #21
 800799e:	430a      	orrs	r2, r1
 80079a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80079a2:	4b64      	ldr	r3, [pc, #400]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079a6:	2380      	movs	r3, #128	@ 0x80
 80079a8:	055b      	lsls	r3, r3, #21
 80079aa:	4013      	ands	r3, r2
 80079ac:	60bb      	str	r3, [r7, #8]
 80079ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079b0:	183b      	adds	r3, r7, r0
 80079b2:	2201      	movs	r2, #1
 80079b4:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80079b6:	4b5f      	ldr	r3, [pc, #380]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079ba:	23c0      	movs	r3, #192	@ 0xc0
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4013      	ands	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d019      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d014      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80079d2:	4b58      	ldr	r3, [pc, #352]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079d6:	4a58      	ldr	r2, [pc, #352]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80079d8:	4013      	ands	r3, r2
 80079da:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079dc:	4b55      	ldr	r3, [pc, #340]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079e0:	4b54      	ldr	r3, [pc, #336]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079e2:	2180      	movs	r1, #128	@ 0x80
 80079e4:	0249      	lsls	r1, r1, #9
 80079e6:	430a      	orrs	r2, r1
 80079e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079ea:	4b52      	ldr	r3, [pc, #328]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079ee:	4b51      	ldr	r3, [pc, #324]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079f0:	4952      	ldr	r1, [pc, #328]	@ (8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80079f2:	400a      	ands	r2, r1
 80079f4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80079f6:	4b4f      	ldr	r3, [pc, #316]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2201      	movs	r2, #1
 8007a00:	4013      	ands	r3, r2
 8007a02:	d016      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a04:	f7fc fac2 	bl	8003f8c <HAL_GetTick>
 8007a08:	0003      	movs	r3, r0
 8007a0a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007a0c:	e00c      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a0e:	f7fc fabd 	bl	8003f8c <HAL_GetTick>
 8007a12:	0002      	movs	r2, r0
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	4a49      	ldr	r2, [pc, #292]	@ (8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d904      	bls.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8007a1e:	2313      	movs	r3, #19
 8007a20:	18fb      	adds	r3, r7, r3
 8007a22:	2203      	movs	r2, #3
 8007a24:	701a      	strb	r2, [r3, #0]
          break;
 8007a26:	e004      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8007a28:	4b42      	ldr	r3, [pc, #264]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a2c:	2202      	movs	r2, #2
 8007a2e:	4013      	ands	r3, r2
 8007a30:	d0ed      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8007a32:	2313      	movs	r3, #19
 8007a34:	18fb      	adds	r3, r7, r3
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10a      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a40:	4a3d      	ldr	r2, [pc, #244]	@ (8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007a42:	4013      	ands	r3, r2
 8007a44:	0019      	movs	r1, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	69da      	ldr	r2, [r3, #28]
 8007a4a:	4b3a      	ldr	r3, [pc, #232]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a50:	e005      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a52:	2312      	movs	r3, #18
 8007a54:	18fb      	adds	r3, r7, r3
 8007a56:	2213      	movs	r2, #19
 8007a58:	18ba      	adds	r2, r7, r2
 8007a5a:	7812      	ldrb	r2, [r2, #0]
 8007a5c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a5e:	2311      	movs	r3, #17
 8007a60:	18fb      	adds	r3, r7, r3
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d105      	bne.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a68:	4b32      	ldr	r3, [pc, #200]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a6c:	4b31      	ldr	r3, [pc, #196]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a6e:	4935      	ldr	r1, [pc, #212]	@ (8007b44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8007a70:	400a      	ands	r2, r1
 8007a72:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	d009      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a82:	2203      	movs	r2, #3
 8007a84:	4393      	bics	r3, r2
 8007a86:	0019      	movs	r1, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689a      	ldr	r2, [r3, #8]
 8007a8c:	4b29      	ldr	r3, [pc, #164]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2202      	movs	r2, #2
 8007a98:	4013      	ands	r3, r2
 8007a9a:	d009      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a9c:	4b25      	ldr	r3, [pc, #148]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa0:	4a29      	ldr	r2, [pc, #164]	@ (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	0019      	movs	r1, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68da      	ldr	r2, [r3, #12]
 8007aaa:	4b22      	ldr	r3, [pc, #136]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007aac:	430a      	orrs	r2, r1
 8007aae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	d008      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007aba:	4b1e      	ldr	r3, [pc, #120]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	0899      	lsrs	r1, r3, #2
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2208      	movs	r2, #8
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	d009      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ad6:	4b17      	ldr	r3, [pc, #92]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ada:	4a1c      	ldr	r2, [pc, #112]	@ (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8007adc:	4013      	ands	r3, r2
 8007ade:	0019      	movs	r1, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	695a      	ldr	r2, [r3, #20]
 8007ae4:	4b13      	ldr	r3, [pc, #76]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2204      	movs	r2, #4
 8007af0:	4013      	ands	r3, r2
 8007af2:	d009      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007af4:	4b0f      	ldr	r3, [pc, #60]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af8:	4a15      	ldr	r2, [pc, #84]	@ (8007b50 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8007afa:	4013      	ands	r3, r2
 8007afc:	0019      	movs	r1, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691a      	ldr	r2, [r3, #16]
 8007b02:	4b0c      	ldr	r3, [pc, #48]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b04:	430a      	orrs	r2, r1
 8007b06:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2280      	movs	r2, #128	@ 0x80
 8007b0e:	4013      	ands	r3, r2
 8007b10:	d009      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8007b12:	4b08      	ldr	r3, [pc, #32]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	22e0      	movs	r2, #224	@ 0xe0
 8007b18:	4393      	bics	r3, r2
 8007b1a:	0019      	movs	r1, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	4b04      	ldr	r3, [pc, #16]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b22:	430a      	orrs	r2, r1
 8007b24:	601a      	str	r2, [r3, #0]
  }
  return status;
 8007b26:	2312      	movs	r3, #18
 8007b28:	18fb      	adds	r3, r7, r3
 8007b2a:	781b      	ldrb	r3, [r3, #0]
}
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	b006      	add	sp, #24
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	40021000 	.word	0x40021000
 8007b38:	fffffcff 	.word	0xfffffcff
 8007b3c:	fffeffff 	.word	0xfffeffff
 8007b40:	00001388 	.word	0x00001388
 8007b44:	efffffff 	.word	0xefffffff
 8007b48:	ffffcfff 	.word	0xffffcfff
 8007b4c:	ffffefff 	.word	0xffffefff
 8007b50:	ffff3fff 	.word	0xffff3fff

08007b54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e0a8      	b.n	8007cb8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d109      	bne.n	8007b82 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	2382      	movs	r3, #130	@ 0x82
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d009      	beq.n	8007b8e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	61da      	str	r2, [r3, #28]
 8007b80:	e005      	b.n	8007b8e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	225d      	movs	r2, #93	@ 0x5d
 8007b98:	5c9b      	ldrb	r3, [r3, r2]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d107      	bne.n	8007bb0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	225c      	movs	r2, #92	@ 0x5c
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	0018      	movs	r0, r3
 8007bac:	f7fa fd5c 	bl	8002668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	225d      	movs	r2, #93	@ 0x5d
 8007bb4:	2102      	movs	r1, #2
 8007bb6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2140      	movs	r1, #64	@ 0x40
 8007bc4:	438a      	bics	r2, r1
 8007bc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68da      	ldr	r2, [r3, #12]
 8007bcc:	23e0      	movs	r3, #224	@ 0xe0
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d902      	bls.n	8007bda <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	e002      	b.n	8007be0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007bda:	2380      	movs	r3, #128	@ 0x80
 8007bdc:	015b      	lsls	r3, r3, #5
 8007bde:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68da      	ldr	r2, [r3, #12]
 8007be4:	23f0      	movs	r3, #240	@ 0xf0
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d008      	beq.n	8007bfe <HAL_SPI_Init+0xaa>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	23e0      	movs	r3, #224	@ 0xe0
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d002      	beq.n	8007bfe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	2382      	movs	r3, #130	@ 0x82
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	401a      	ands	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6899      	ldr	r1, [r3, #8]
 8007c0c:	2384      	movs	r3, #132	@ 0x84
 8007c0e:	021b      	lsls	r3, r3, #8
 8007c10:	400b      	ands	r3, r1
 8007c12:	431a      	orrs	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	2102      	movs	r1, #2
 8007c1a:	400b      	ands	r3, r1
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	695b      	ldr	r3, [r3, #20]
 8007c22:	2101      	movs	r1, #1
 8007c24:	400b      	ands	r3, r1
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6999      	ldr	r1, [r3, #24]
 8007c2c:	2380      	movs	r3, #128	@ 0x80
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	400b      	ands	r3, r1
 8007c32:	431a      	orrs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	2138      	movs	r1, #56	@ 0x38
 8007c3a:	400b      	ands	r3, r1
 8007c3c:	431a      	orrs	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	2180      	movs	r1, #128	@ 0x80
 8007c44:	400b      	ands	r3, r1
 8007c46:	431a      	orrs	r2, r3
 8007c48:	0011      	movs	r1, r2
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c4e:	2380      	movs	r3, #128	@ 0x80
 8007c50:	019b      	lsls	r3, r3, #6
 8007c52:	401a      	ands	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	0c1b      	lsrs	r3, r3, #16
 8007c62:	2204      	movs	r2, #4
 8007c64:	401a      	ands	r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c6a:	2110      	movs	r1, #16
 8007c6c:	400b      	ands	r3, r1
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c74:	2108      	movs	r1, #8
 8007c76:	400b      	ands	r3, r1
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68d9      	ldr	r1, [r3, #12]
 8007c7e:	23f0      	movs	r3, #240	@ 0xf0
 8007c80:	011b      	lsls	r3, r3, #4
 8007c82:	400b      	ands	r3, r1
 8007c84:	431a      	orrs	r2, r3
 8007c86:	0011      	movs	r1, r2
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	2380      	movs	r3, #128	@ 0x80
 8007c8c:	015b      	lsls	r3, r3, #5
 8007c8e:	401a      	ands	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	69da      	ldr	r2, [r3, #28]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4907      	ldr	r1, [pc, #28]	@ (8007cc0 <HAL_SPI_Init+0x16c>)
 8007ca4:	400a      	ands	r2, r1
 8007ca6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	225d      	movs	r2, #93	@ 0x5d
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	0018      	movs	r0, r3
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	b004      	add	sp, #16
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	fffff7ff 	.word	0xfffff7ff

08007cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e04a      	b.n	8007d6c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	223d      	movs	r2, #61	@ 0x3d
 8007cda:	5c9b      	ldrb	r3, [r3, r2]
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d107      	bne.n	8007cf2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	223c      	movs	r2, #60	@ 0x3c
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	0018      	movs	r0, r3
 8007cee:	f7fa fd61 	bl	80027b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	223d      	movs	r2, #61	@ 0x3d
 8007cf6:	2102      	movs	r1, #2
 8007cf8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	3304      	adds	r3, #4
 8007d02:	0019      	movs	r1, r3
 8007d04:	0010      	movs	r0, r2
 8007d06:	f000 f98d 	bl	8008024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2248      	movs	r2, #72	@ 0x48
 8007d0e:	2101      	movs	r1, #1
 8007d10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	223e      	movs	r2, #62	@ 0x3e
 8007d16:	2101      	movs	r1, #1
 8007d18:	5499      	strb	r1, [r3, r2]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	223f      	movs	r2, #63	@ 0x3f
 8007d1e:	2101      	movs	r1, #1
 8007d20:	5499      	strb	r1, [r3, r2]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2240      	movs	r2, #64	@ 0x40
 8007d26:	2101      	movs	r1, #1
 8007d28:	5499      	strb	r1, [r3, r2]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2241      	movs	r2, #65	@ 0x41
 8007d2e:	2101      	movs	r1, #1
 8007d30:	5499      	strb	r1, [r3, r2]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2242      	movs	r2, #66	@ 0x42
 8007d36:	2101      	movs	r1, #1
 8007d38:	5499      	strb	r1, [r3, r2]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2243      	movs	r2, #67	@ 0x43
 8007d3e:	2101      	movs	r1, #1
 8007d40:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2244      	movs	r2, #68	@ 0x44
 8007d46:	2101      	movs	r1, #1
 8007d48:	5499      	strb	r1, [r3, r2]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2245      	movs	r2, #69	@ 0x45
 8007d4e:	2101      	movs	r1, #1
 8007d50:	5499      	strb	r1, [r3, r2]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2246      	movs	r2, #70	@ 0x46
 8007d56:	2101      	movs	r1, #1
 8007d58:	5499      	strb	r1, [r3, r2]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2247      	movs	r2, #71	@ 0x47
 8007d5e:	2101      	movs	r1, #1
 8007d60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	223d      	movs	r2, #61	@ 0x3d
 8007d66:	2101      	movs	r1, #1
 8007d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	b002      	add	sp, #8
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e04a      	b.n	8007e1c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	223d      	movs	r2, #61	@ 0x3d
 8007d8a:	5c9b      	ldrb	r3, [r3, r2]
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d107      	bne.n	8007da2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	223c      	movs	r2, #60	@ 0x3c
 8007d96:	2100      	movs	r1, #0
 8007d98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	0018      	movs	r0, r3
 8007d9e:	f7fa fce9 	bl	8002774 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	223d      	movs	r2, #61	@ 0x3d
 8007da6:	2102      	movs	r1, #2
 8007da8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3304      	adds	r3, #4
 8007db2:	0019      	movs	r1, r3
 8007db4:	0010      	movs	r0, r2
 8007db6:	f000 f935 	bl	8008024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2248      	movs	r2, #72	@ 0x48
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	223e      	movs	r2, #62	@ 0x3e
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	5499      	strb	r1, [r3, r2]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	223f      	movs	r2, #63	@ 0x3f
 8007dce:	2101      	movs	r1, #1
 8007dd0:	5499      	strb	r1, [r3, r2]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2240      	movs	r2, #64	@ 0x40
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	5499      	strb	r1, [r3, r2]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2241      	movs	r2, #65	@ 0x41
 8007dde:	2101      	movs	r1, #1
 8007de0:	5499      	strb	r1, [r3, r2]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2242      	movs	r2, #66	@ 0x42
 8007de6:	2101      	movs	r1, #1
 8007de8:	5499      	strb	r1, [r3, r2]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2243      	movs	r2, #67	@ 0x43
 8007dee:	2101      	movs	r1, #1
 8007df0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2244      	movs	r2, #68	@ 0x44
 8007df6:	2101      	movs	r1, #1
 8007df8:	5499      	strb	r1, [r3, r2]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2245      	movs	r2, #69	@ 0x45
 8007dfe:	2101      	movs	r1, #1
 8007e00:	5499      	strb	r1, [r3, r2]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2246      	movs	r2, #70	@ 0x46
 8007e06:	2101      	movs	r1, #1
 8007e08:	5499      	strb	r1, [r3, r2]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2247      	movs	r2, #71	@ 0x47
 8007e0e:	2101      	movs	r1, #1
 8007e10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	223d      	movs	r2, #61	@ 0x3d
 8007e16:	2101      	movs	r1, #1
 8007e18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	0018      	movs	r0, r3
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	b002      	add	sp, #8
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e30:	2317      	movs	r3, #23
 8007e32:	18fb      	adds	r3, r7, r3
 8007e34:	2200      	movs	r2, #0
 8007e36:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	223c      	movs	r2, #60	@ 0x3c
 8007e3c:	5c9b      	ldrb	r3, [r3, r2]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d101      	bne.n	8007e46 <HAL_TIM_PWM_ConfigChannel+0x22>
 8007e42:	2302      	movs	r3, #2
 8007e44:	e0e5      	b.n	8008012 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	223c      	movs	r2, #60	@ 0x3c
 8007e4a:	2101      	movs	r1, #1
 8007e4c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b14      	cmp	r3, #20
 8007e52:	d900      	bls.n	8007e56 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007e54:	e0d1      	b.n	8007ffa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	009a      	lsls	r2, r3, #2
 8007e5a:	4b70      	ldr	r3, [pc, #448]	@ (800801c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007e5c:	18d3      	adds	r3, r2, r3
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	0011      	movs	r1, r2
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	f000 f95e 	bl	800812c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699a      	ldr	r2, [r3, #24]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2108      	movs	r1, #8
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2104      	movs	r1, #4
 8007e8c:	438a      	bics	r2, r1
 8007e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6999      	ldr	r1, [r3, #24]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	691a      	ldr	r2, [r3, #16]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	619a      	str	r2, [r3, #24]
      break;
 8007ea2:	e0af      	b.n	8008004 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	0011      	movs	r1, r2
 8007eac:	0018      	movs	r0, r3
 8007eae:	f000 f9bd 	bl	800822c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	699a      	ldr	r2, [r3, #24]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2180      	movs	r1, #128	@ 0x80
 8007ebe:	0109      	lsls	r1, r1, #4
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699a      	ldr	r2, [r3, #24]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4954      	ldr	r1, [pc, #336]	@ (8008020 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007ed0:	400a      	ands	r2, r1
 8007ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6999      	ldr	r1, [r3, #24]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	021a      	lsls	r2, r3, #8
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	619a      	str	r2, [r3, #24]
      break;
 8007ee8:	e08c      	b.n	8008004 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	0011      	movs	r1, r2
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f000 fa18 	bl	8008328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	69da      	ldr	r2, [r3, #28]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2108      	movs	r1, #8
 8007f04:	430a      	orrs	r2, r1
 8007f06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	69da      	ldr	r2, [r3, #28]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2104      	movs	r1, #4
 8007f14:	438a      	bics	r2, r1
 8007f16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69d9      	ldr	r1, [r3, #28]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	691a      	ldr	r2, [r3, #16]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	61da      	str	r2, [r3, #28]
      break;
 8007f2a:	e06b      	b.n	8008004 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	0011      	movs	r1, r2
 8007f34:	0018      	movs	r0, r3
 8007f36:	f000 fa79 	bl	800842c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2180      	movs	r1, #128	@ 0x80
 8007f46:	0109      	lsls	r1, r1, #4
 8007f48:	430a      	orrs	r2, r1
 8007f4a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	69da      	ldr	r2, [r3, #28]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4932      	ldr	r1, [pc, #200]	@ (8008020 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007f58:	400a      	ands	r2, r1
 8007f5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	69d9      	ldr	r1, [r3, #28]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	021a      	lsls	r2, r3, #8
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	61da      	str	r2, [r3, #28]
      break;
 8007f70:	e048      	b.n	8008004 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	0011      	movs	r1, r2
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	f000 faba 	bl	80084f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2108      	movs	r1, #8
 8007f8c:	430a      	orrs	r2, r1
 8007f8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2104      	movs	r1, #4
 8007f9c:	438a      	bics	r2, r1
 8007f9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	691a      	ldr	r2, [r3, #16]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007fb2:	e027      	b.n	8008004 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	0011      	movs	r1, r2
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	f000 faf3 	bl	80085a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2180      	movs	r1, #128	@ 0x80
 8007fce:	0109      	lsls	r1, r1, #4
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4910      	ldr	r1, [pc, #64]	@ (8008020 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007fe0:	400a      	ands	r2, r1
 8007fe2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	021a      	lsls	r2, r3, #8
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007ff8:	e004      	b.n	8008004 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007ffa:	2317      	movs	r3, #23
 8007ffc:	18fb      	adds	r3, r7, r3
 8007ffe:	2201      	movs	r2, #1
 8008000:	701a      	strb	r2, [r3, #0]
      break;
 8008002:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	223c      	movs	r2, #60	@ 0x3c
 8008008:	2100      	movs	r1, #0
 800800a:	5499      	strb	r1, [r3, r2]

  return status;
 800800c:	2317      	movs	r3, #23
 800800e:	18fb      	adds	r3, r7, r3
 8008010:	781b      	ldrb	r3, [r3, #0]
}
 8008012:	0018      	movs	r0, r3
 8008014:	46bd      	mov	sp, r7
 8008016:	b006      	add	sp, #24
 8008018:	bd80      	pop	{r7, pc}
 800801a:	46c0      	nop			@ (mov r8, r8)
 800801c:	0800a6dc 	.word	0x0800a6dc
 8008020:	fffffbff 	.word	0xfffffbff

08008024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a37      	ldr	r2, [pc, #220]	@ (8008114 <TIM_Base_SetConfig+0xf0>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d008      	beq.n	800804e <TIM_Base_SetConfig+0x2a>
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	2380      	movs	r3, #128	@ 0x80
 8008040:	05db      	lsls	r3, r3, #23
 8008042:	429a      	cmp	r2, r3
 8008044:	d003      	beq.n	800804e <TIM_Base_SetConfig+0x2a>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a33      	ldr	r2, [pc, #204]	@ (8008118 <TIM_Base_SetConfig+0xf4>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d108      	bne.n	8008060 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2270      	movs	r2, #112	@ 0x70
 8008052:	4393      	bics	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	4313      	orrs	r3, r2
 800805e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a2c      	ldr	r2, [pc, #176]	@ (8008114 <TIM_Base_SetConfig+0xf0>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d014      	beq.n	8008092 <TIM_Base_SetConfig+0x6e>
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	2380      	movs	r3, #128	@ 0x80
 800806c:	05db      	lsls	r3, r3, #23
 800806e:	429a      	cmp	r2, r3
 8008070:	d00f      	beq.n	8008092 <TIM_Base_SetConfig+0x6e>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a28      	ldr	r2, [pc, #160]	@ (8008118 <TIM_Base_SetConfig+0xf4>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d00b      	beq.n	8008092 <TIM_Base_SetConfig+0x6e>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a27      	ldr	r2, [pc, #156]	@ (800811c <TIM_Base_SetConfig+0xf8>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d007      	beq.n	8008092 <TIM_Base_SetConfig+0x6e>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a26      	ldr	r2, [pc, #152]	@ (8008120 <TIM_Base_SetConfig+0xfc>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d003      	beq.n	8008092 <TIM_Base_SetConfig+0x6e>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a25      	ldr	r2, [pc, #148]	@ (8008124 <TIM_Base_SetConfig+0x100>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d108      	bne.n	80080a4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	4a24      	ldr	r2, [pc, #144]	@ (8008128 <TIM_Base_SetConfig+0x104>)
 8008096:	4013      	ands	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2280      	movs	r2, #128	@ 0x80
 80080a8:	4393      	bics	r3, r2
 80080aa:	001a      	movs	r2, r3
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	689a      	ldr	r2, [r3, #8]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a11      	ldr	r2, [pc, #68]	@ (8008114 <TIM_Base_SetConfig+0xf0>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d007      	beq.n	80080e2 <TIM_Base_SetConfig+0xbe>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a12      	ldr	r2, [pc, #72]	@ (8008120 <TIM_Base_SetConfig+0xfc>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d003      	beq.n	80080e2 <TIM_Base_SetConfig+0xbe>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a11      	ldr	r2, [pc, #68]	@ (8008124 <TIM_Base_SetConfig+0x100>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d103      	bne.n	80080ea <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	691a      	ldr	r2, [r3, #16]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2201      	movs	r2, #1
 80080f6:	4013      	ands	r3, r2
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d106      	bne.n	800810a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	2201      	movs	r2, #1
 8008102:	4393      	bics	r3, r2
 8008104:	001a      	movs	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	611a      	str	r2, [r3, #16]
  }
}
 800810a:	46c0      	nop			@ (mov r8, r8)
 800810c:	46bd      	mov	sp, r7
 800810e:	b004      	add	sp, #16
 8008110:	bd80      	pop	{r7, pc}
 8008112:	46c0      	nop			@ (mov r8, r8)
 8008114:	40012c00 	.word	0x40012c00
 8008118:	40000400 	.word	0x40000400
 800811c:	40002000 	.word	0x40002000
 8008120:	40014400 	.word	0x40014400
 8008124:	40014800 	.word	0x40014800
 8008128:	fffffcff 	.word	0xfffffcff

0800812c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a1b      	ldr	r3, [r3, #32]
 8008140:	2201      	movs	r2, #1
 8008142:	4393      	bics	r3, r2
 8008144:	001a      	movs	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4a2e      	ldr	r2, [pc, #184]	@ (8008214 <TIM_OC1_SetConfig+0xe8>)
 800815a:	4013      	ands	r3, r2
 800815c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2203      	movs	r2, #3
 8008162:	4393      	bics	r3, r2
 8008164:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4313      	orrs	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2202      	movs	r2, #2
 8008174:	4393      	bics	r3, r2
 8008176:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	4313      	orrs	r3, r2
 8008180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a24      	ldr	r2, [pc, #144]	@ (8008218 <TIM_OC1_SetConfig+0xec>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d007      	beq.n	800819a <TIM_OC1_SetConfig+0x6e>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a23      	ldr	r2, [pc, #140]	@ (800821c <TIM_OC1_SetConfig+0xf0>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d003      	beq.n	800819a <TIM_OC1_SetConfig+0x6e>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a22      	ldr	r2, [pc, #136]	@ (8008220 <TIM_OC1_SetConfig+0xf4>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d10c      	bne.n	80081b4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2208      	movs	r2, #8
 800819e:	4393      	bics	r3, r2
 80081a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	2204      	movs	r2, #4
 80081b0:	4393      	bics	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a18      	ldr	r2, [pc, #96]	@ (8008218 <TIM_OC1_SetConfig+0xec>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d007      	beq.n	80081cc <TIM_OC1_SetConfig+0xa0>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a17      	ldr	r2, [pc, #92]	@ (800821c <TIM_OC1_SetConfig+0xf0>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d003      	beq.n	80081cc <TIM_OC1_SetConfig+0xa0>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a16      	ldr	r2, [pc, #88]	@ (8008220 <TIM_OC1_SetConfig+0xf4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d111      	bne.n	80081f0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	4a15      	ldr	r2, [pc, #84]	@ (8008224 <TIM_OC1_SetConfig+0xf8>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	4a14      	ldr	r2, [pc, #80]	@ (8008228 <TIM_OC1_SetConfig+0xfc>)
 80081d8:	4013      	ands	r3, r2
 80081da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	621a      	str	r2, [r3, #32]
}
 800820a:	46c0      	nop			@ (mov r8, r8)
 800820c:	46bd      	mov	sp, r7
 800820e:	b006      	add	sp, #24
 8008210:	bd80      	pop	{r7, pc}
 8008212:	46c0      	nop			@ (mov r8, r8)
 8008214:	fffeff8f 	.word	0xfffeff8f
 8008218:	40012c00 	.word	0x40012c00
 800821c:	40014400 	.word	0x40014400
 8008220:	40014800 	.word	0x40014800
 8008224:	fffffeff 	.word	0xfffffeff
 8008228:	fffffdff 	.word	0xfffffdff

0800822c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	2210      	movs	r2, #16
 8008242:	4393      	bics	r3, r2
 8008244:	001a      	movs	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	4a2c      	ldr	r2, [pc, #176]	@ (800830c <TIM_OC2_SetConfig+0xe0>)
 800825a:	4013      	ands	r3, r2
 800825c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4a2b      	ldr	r2, [pc, #172]	@ (8008310 <TIM_OC2_SetConfig+0xe4>)
 8008262:	4013      	ands	r3, r2
 8008264:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	021b      	lsls	r3, r3, #8
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	4313      	orrs	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2220      	movs	r2, #32
 8008276:	4393      	bics	r3, r2
 8008278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	011b      	lsls	r3, r3, #4
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	4313      	orrs	r3, r2
 8008284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a22      	ldr	r2, [pc, #136]	@ (8008314 <TIM_OC2_SetConfig+0xe8>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d10d      	bne.n	80082aa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2280      	movs	r2, #128	@ 0x80
 8008292:	4393      	bics	r3, r2
 8008294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	4313      	orrs	r3, r2
 80082a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2240      	movs	r2, #64	@ 0x40
 80082a6:	4393      	bics	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a19      	ldr	r2, [pc, #100]	@ (8008314 <TIM_OC2_SetConfig+0xe8>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d007      	beq.n	80082c2 <TIM_OC2_SetConfig+0x96>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a18      	ldr	r2, [pc, #96]	@ (8008318 <TIM_OC2_SetConfig+0xec>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d003      	beq.n	80082c2 <TIM_OC2_SetConfig+0x96>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a17      	ldr	r2, [pc, #92]	@ (800831c <TIM_OC2_SetConfig+0xf0>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d113      	bne.n	80082ea <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	4a16      	ldr	r2, [pc, #88]	@ (8008320 <TIM_OC2_SetConfig+0xf4>)
 80082c6:	4013      	ands	r3, r2
 80082c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	4a15      	ldr	r2, [pc, #84]	@ (8008324 <TIM_OC2_SetConfig+0xf8>)
 80082ce:	4013      	ands	r3, r2
 80082d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	4313      	orrs	r3, r2
 80082dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	621a      	str	r2, [r3, #32]
}
 8008304:	46c0      	nop			@ (mov r8, r8)
 8008306:	46bd      	mov	sp, r7
 8008308:	b006      	add	sp, #24
 800830a:	bd80      	pop	{r7, pc}
 800830c:	feff8fff 	.word	0xfeff8fff
 8008310:	fffffcff 	.word	0xfffffcff
 8008314:	40012c00 	.word	0x40012c00
 8008318:	40014400 	.word	0x40014400
 800831c:	40014800 	.word	0x40014800
 8008320:	fffffbff 	.word	0xfffffbff
 8008324:	fffff7ff 	.word	0xfffff7ff

08008328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	4a31      	ldr	r2, [pc, #196]	@ (8008404 <TIM_OC3_SetConfig+0xdc>)
 800833e:	401a      	ands	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4a2d      	ldr	r2, [pc, #180]	@ (8008408 <TIM_OC3_SetConfig+0xe0>)
 8008354:	4013      	ands	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2203      	movs	r2, #3
 800835c:	4393      	bics	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	4a27      	ldr	r2, [pc, #156]	@ (800840c <TIM_OC3_SetConfig+0xe4>)
 800836e:	4013      	ands	r3, r2
 8008370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	021b      	lsls	r3, r3, #8
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	4313      	orrs	r3, r2
 800837c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a23      	ldr	r2, [pc, #140]	@ (8008410 <TIM_OC3_SetConfig+0xe8>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d10d      	bne.n	80083a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	4a22      	ldr	r2, [pc, #136]	@ (8008414 <TIM_OC3_SetConfig+0xec>)
 800838a:	4013      	ands	r3, r2
 800838c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	021b      	lsls	r3, r3, #8
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	4313      	orrs	r3, r2
 8008398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	4a1e      	ldr	r2, [pc, #120]	@ (8008418 <TIM_OC3_SetConfig+0xf0>)
 800839e:	4013      	ands	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a1a      	ldr	r2, [pc, #104]	@ (8008410 <TIM_OC3_SetConfig+0xe8>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d007      	beq.n	80083ba <TIM_OC3_SetConfig+0x92>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a1b      	ldr	r2, [pc, #108]	@ (800841c <TIM_OC3_SetConfig+0xf4>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d003      	beq.n	80083ba <TIM_OC3_SetConfig+0x92>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a1a      	ldr	r2, [pc, #104]	@ (8008420 <TIM_OC3_SetConfig+0xf8>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d113      	bne.n	80083e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	4a19      	ldr	r2, [pc, #100]	@ (8008424 <TIM_OC3_SetConfig+0xfc>)
 80083be:	4013      	ands	r3, r2
 80083c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	4a18      	ldr	r2, [pc, #96]	@ (8008428 <TIM_OC3_SetConfig+0x100>)
 80083c6:	4013      	ands	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	699b      	ldr	r3, [r3, #24]
 80083da:	011b      	lsls	r3, r3, #4
 80083dc:	693a      	ldr	r2, [r7, #16]
 80083de:	4313      	orrs	r3, r2
 80083e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	621a      	str	r2, [r3, #32]
}
 80083fc:	46c0      	nop			@ (mov r8, r8)
 80083fe:	46bd      	mov	sp, r7
 8008400:	b006      	add	sp, #24
 8008402:	bd80      	pop	{r7, pc}
 8008404:	fffffeff 	.word	0xfffffeff
 8008408:	fffeff8f 	.word	0xfffeff8f
 800840c:	fffffdff 	.word	0xfffffdff
 8008410:	40012c00 	.word	0x40012c00
 8008414:	fffff7ff 	.word	0xfffff7ff
 8008418:	fffffbff 	.word	0xfffffbff
 800841c:	40014400 	.word	0x40014400
 8008420:	40014800 	.word	0x40014800
 8008424:	ffffefff 	.word	0xffffefff
 8008428:	ffffdfff 	.word	0xffffdfff

0800842c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	4a24      	ldr	r2, [pc, #144]	@ (80084d4 <TIM_OC4_SetConfig+0xa8>)
 8008442:	401a      	ands	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4a20      	ldr	r2, [pc, #128]	@ (80084d8 <TIM_OC4_SetConfig+0xac>)
 8008458:	4013      	ands	r3, r2
 800845a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4a1f      	ldr	r2, [pc, #124]	@ (80084dc <TIM_OC4_SetConfig+0xb0>)
 8008460:	4013      	ands	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	021b      	lsls	r3, r3, #8
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	4313      	orrs	r3, r2
 800846e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	4a1b      	ldr	r2, [pc, #108]	@ (80084e0 <TIM_OC4_SetConfig+0xb4>)
 8008474:	4013      	ands	r3, r2
 8008476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	031b      	lsls	r3, r3, #12
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	4313      	orrs	r3, r2
 8008482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a17      	ldr	r2, [pc, #92]	@ (80084e4 <TIM_OC4_SetConfig+0xb8>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d007      	beq.n	800849c <TIM_OC4_SetConfig+0x70>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a16      	ldr	r2, [pc, #88]	@ (80084e8 <TIM_OC4_SetConfig+0xbc>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d003      	beq.n	800849c <TIM_OC4_SetConfig+0x70>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a15      	ldr	r2, [pc, #84]	@ (80084ec <TIM_OC4_SetConfig+0xc0>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d109      	bne.n	80084b0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	4a14      	ldr	r2, [pc, #80]	@ (80084f0 <TIM_OC4_SetConfig+0xc4>)
 80084a0:	4013      	ands	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	019b      	lsls	r3, r3, #6
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	621a      	str	r2, [r3, #32]
}
 80084ca:	46c0      	nop			@ (mov r8, r8)
 80084cc:	46bd      	mov	sp, r7
 80084ce:	b006      	add	sp, #24
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	46c0      	nop			@ (mov r8, r8)
 80084d4:	ffffefff 	.word	0xffffefff
 80084d8:	feff8fff 	.word	0xfeff8fff
 80084dc:	fffffcff 	.word	0xfffffcff
 80084e0:	ffffdfff 	.word	0xffffdfff
 80084e4:	40012c00 	.word	0x40012c00
 80084e8:	40014400 	.word	0x40014400
 80084ec:	40014800 	.word	0x40014800
 80084f0:	ffffbfff 	.word	0xffffbfff

080084f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a1b      	ldr	r3, [r3, #32]
 8008502:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	4a21      	ldr	r2, [pc, #132]	@ (8008590 <TIM_OC5_SetConfig+0x9c>)
 800850a:	401a      	ands	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800851a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4a1d      	ldr	r2, [pc, #116]	@ (8008594 <TIM_OC5_SetConfig+0xa0>)
 8008520:	4013      	ands	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	4313      	orrs	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	4a19      	ldr	r2, [pc, #100]	@ (8008598 <TIM_OC5_SetConfig+0xa4>)
 8008532:	4013      	ands	r3, r2
 8008534:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	041b      	lsls	r3, r3, #16
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	4313      	orrs	r3, r2
 8008540:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a15      	ldr	r2, [pc, #84]	@ (800859c <TIM_OC5_SetConfig+0xa8>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d007      	beq.n	800855a <TIM_OC5_SetConfig+0x66>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a14      	ldr	r2, [pc, #80]	@ (80085a0 <TIM_OC5_SetConfig+0xac>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d003      	beq.n	800855a <TIM_OC5_SetConfig+0x66>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a13      	ldr	r2, [pc, #76]	@ (80085a4 <TIM_OC5_SetConfig+0xb0>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d109      	bne.n	800856e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	4a0c      	ldr	r2, [pc, #48]	@ (8008590 <TIM_OC5_SetConfig+0x9c>)
 800855e:	4013      	ands	r3, r2
 8008560:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	021b      	lsls	r3, r3, #8
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	621a      	str	r2, [r3, #32]
}
 8008588:	46c0      	nop			@ (mov r8, r8)
 800858a:	46bd      	mov	sp, r7
 800858c:	b006      	add	sp, #24
 800858e:	bd80      	pop	{r7, pc}
 8008590:	fffeffff 	.word	0xfffeffff
 8008594:	fffeff8f 	.word	0xfffeff8f
 8008598:	fffdffff 	.word	0xfffdffff
 800859c:	40012c00 	.word	0x40012c00
 80085a0:	40014400 	.word	0x40014400
 80085a4:	40014800 	.word	0x40014800

080085a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	4a22      	ldr	r2, [pc, #136]	@ (8008648 <TIM_OC6_SetConfig+0xa0>)
 80085be:	401a      	ands	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4a1e      	ldr	r2, [pc, #120]	@ (800864c <TIM_OC6_SetConfig+0xa4>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	021b      	lsls	r3, r3, #8
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	4a1a      	ldr	r2, [pc, #104]	@ (8008650 <TIM_OC6_SetConfig+0xa8>)
 80085e8:	4013      	ands	r3, r2
 80085ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	051b      	lsls	r3, r3, #20
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a16      	ldr	r2, [pc, #88]	@ (8008654 <TIM_OC6_SetConfig+0xac>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d007      	beq.n	8008610 <TIM_OC6_SetConfig+0x68>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a15      	ldr	r2, [pc, #84]	@ (8008658 <TIM_OC6_SetConfig+0xb0>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d003      	beq.n	8008610 <TIM_OC6_SetConfig+0x68>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a14      	ldr	r2, [pc, #80]	@ (800865c <TIM_OC6_SetConfig+0xb4>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d109      	bne.n	8008624 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	4a13      	ldr	r2, [pc, #76]	@ (8008660 <TIM_OC6_SetConfig+0xb8>)
 8008614:	4013      	ands	r3, r2
 8008616:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	029b      	lsls	r3, r3, #10
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4313      	orrs	r3, r2
 8008622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	621a      	str	r2, [r3, #32]
}
 800863e:	46c0      	nop			@ (mov r8, r8)
 8008640:	46bd      	mov	sp, r7
 8008642:	b006      	add	sp, #24
 8008644:	bd80      	pop	{r7, pc}
 8008646:	46c0      	nop			@ (mov r8, r8)
 8008648:	ffefffff 	.word	0xffefffff
 800864c:	feff8fff 	.word	0xfeff8fff
 8008650:	ffdfffff 	.word	0xffdfffff
 8008654:	40012c00 	.word	0x40012c00
 8008658:	40014400 	.word	0x40014400
 800865c:	40014800 	.word	0x40014800
 8008660:	fffbffff 	.word	0xfffbffff

08008664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	223c      	movs	r2, #60	@ 0x3c
 8008672:	5c9b      	ldrb	r3, [r3, r2]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d101      	bne.n	800867c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008678:	2302      	movs	r3, #2
 800867a:	e050      	b.n	800871e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	223c      	movs	r2, #60	@ 0x3c
 8008680:	2101      	movs	r1, #1
 8008682:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	223d      	movs	r2, #61	@ 0x3d
 8008688:	2102      	movs	r1, #2
 800868a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a21      	ldr	r2, [pc, #132]	@ (8008728 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d108      	bne.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4a20      	ldr	r2, [pc, #128]	@ (800872c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80086aa:	4013      	ands	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2270      	movs	r2, #112	@ 0x70
 80086bc:	4393      	bics	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a14      	ldr	r2, [pc, #80]	@ (8008728 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d00a      	beq.n	80086f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	2380      	movs	r3, #128	@ 0x80
 80086e2:	05db      	lsls	r3, r3, #23
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d004      	beq.n	80086f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a10      	ldr	r2, [pc, #64]	@ (8008730 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d10c      	bne.n	800870c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2280      	movs	r2, #128	@ 0x80
 80086f6:	4393      	bics	r3, r2
 80086f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	4313      	orrs	r3, r2
 8008702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	223d      	movs	r2, #61	@ 0x3d
 8008710:	2101      	movs	r1, #1
 8008712:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	223c      	movs	r2, #60	@ 0x3c
 8008718:	2100      	movs	r1, #0
 800871a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	0018      	movs	r0, r3
 8008720:	46bd      	mov	sp, r7
 8008722:	b004      	add	sp, #16
 8008724:	bd80      	pop	{r7, pc}
 8008726:	46c0      	nop			@ (mov r8, r8)
 8008728:	40012c00 	.word	0x40012c00
 800872c:	ff0fffff 	.word	0xff0fffff
 8008730:	40000400 	.word	0x40000400

08008734 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	223c      	movs	r2, #60	@ 0x3c
 8008746:	5c9b      	ldrb	r3, [r3, r2]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d101      	bne.n	8008750 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800874c:	2302      	movs	r3, #2
 800874e:	e06f      	b.n	8008830 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	223c      	movs	r2, #60	@ 0x3c
 8008754:	2101      	movs	r1, #1
 8008756:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	22ff      	movs	r2, #255	@ 0xff
 800875c:	4393      	bics	r3, r2
 800875e:	001a      	movs	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	4313      	orrs	r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4a33      	ldr	r2, [pc, #204]	@ (8008838 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800876c:	401a      	ands	r2, r3
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	4313      	orrs	r3, r2
 8008774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	4a30      	ldr	r2, [pc, #192]	@ (800883c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800877a:	401a      	ands	r2, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4a2e      	ldr	r2, [pc, #184]	@ (8008840 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8008788:	401a      	ands	r2, r3
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	4a2b      	ldr	r2, [pc, #172]	@ (8008844 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008796:	401a      	ands	r2, r3
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4a29      	ldr	r2, [pc, #164]	@ (8008848 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80087a4:	401a      	ands	r2, r3
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	4a26      	ldr	r2, [pc, #152]	@ (800884c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80087b2:	401a      	ands	r2, r3
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b8:	4313      	orrs	r3, r2
 80087ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	4a24      	ldr	r2, [pc, #144]	@ (8008850 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80087c0:	401a      	ands	r2, r3
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	041b      	lsls	r3, r3, #16
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4a21      	ldr	r2, [pc, #132]	@ (8008854 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80087d0:	401a      	ands	r2, r3
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	69db      	ldr	r3, [r3, #28]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a1e      	ldr	r2, [pc, #120]	@ (8008858 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d11c      	bne.n	800881e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4a1d      	ldr	r2, [pc, #116]	@ (800885c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80087e8:	401a      	ands	r2, r3
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ee:	051b      	lsls	r3, r3, #20
 80087f0:	4313      	orrs	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4a1a      	ldr	r2, [pc, #104]	@ (8008860 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80087f8:	401a      	ands	r2, r3
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4a17      	ldr	r2, [pc, #92]	@ (8008864 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008806:	401a      	ands	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800880c:	4313      	orrs	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	4a15      	ldr	r2, [pc, #84]	@ (8008868 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008814:	401a      	ands	r2, r3
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	223c      	movs	r2, #60	@ 0x3c
 800882a:	2100      	movs	r1, #0
 800882c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	0018      	movs	r0, r3
 8008832:	46bd      	mov	sp, r7
 8008834:	b004      	add	sp, #16
 8008836:	bd80      	pop	{r7, pc}
 8008838:	fffffcff 	.word	0xfffffcff
 800883c:	fffffbff 	.word	0xfffffbff
 8008840:	fffff7ff 	.word	0xfffff7ff
 8008844:	ffffefff 	.word	0xffffefff
 8008848:	ffffdfff 	.word	0xffffdfff
 800884c:	ffffbfff 	.word	0xffffbfff
 8008850:	fff0ffff 	.word	0xfff0ffff
 8008854:	efffffff 	.word	0xefffffff
 8008858:	40012c00 	.word	0x40012c00
 800885c:	ff0fffff 	.word	0xff0fffff
 8008860:	feffffff 	.word	0xfeffffff
 8008864:	fdffffff 	.word	0xfdffffff
 8008868:	dfffffff 	.word	0xdfffffff

0800886c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b08a      	sub	sp, #40	@ 0x28
 8008870:	af02      	add	r7, sp, #8
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	603b      	str	r3, [r7, #0]
 8008878:	1dbb      	adds	r3, r7, #6
 800887a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2288      	movs	r2, #136	@ 0x88
 8008880:	589b      	ldr	r3, [r3, r2]
 8008882:	2b20      	cmp	r3, #32
 8008884:	d000      	beq.n	8008888 <HAL_UART_Transmit+0x1c>
 8008886:	e090      	b.n	80089aa <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <HAL_UART_Transmit+0x2a>
 800888e:	1dbb      	adds	r3, r7, #6
 8008890:	881b      	ldrh	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e088      	b.n	80089ac <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	2380      	movs	r3, #128	@ 0x80
 80088a0:	015b      	lsls	r3, r3, #5
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d109      	bne.n	80088ba <HAL_UART_Transmit+0x4e>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d105      	bne.n	80088ba <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2201      	movs	r2, #1
 80088b2:	4013      	ands	r3, r2
 80088b4:	d001      	beq.n	80088ba <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e078      	b.n	80089ac <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2290      	movs	r2, #144	@ 0x90
 80088be:	2100      	movs	r1, #0
 80088c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2288      	movs	r2, #136	@ 0x88
 80088c6:	2121      	movs	r1, #33	@ 0x21
 80088c8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088ca:	f7fb fb5f 	bl	8003f8c <HAL_GetTick>
 80088ce:	0003      	movs	r3, r0
 80088d0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	1dba      	adds	r2, r7, #6
 80088d6:	2154      	movs	r1, #84	@ 0x54
 80088d8:	8812      	ldrh	r2, [r2, #0]
 80088da:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	1dba      	adds	r2, r7, #6
 80088e0:	2156      	movs	r1, #86	@ 0x56
 80088e2:	8812      	ldrh	r2, [r2, #0]
 80088e4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	689a      	ldr	r2, [r3, #8]
 80088ea:	2380      	movs	r3, #128	@ 0x80
 80088ec:	015b      	lsls	r3, r3, #5
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d108      	bne.n	8008904 <HAL_UART_Transmit+0x98>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d104      	bne.n	8008904 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80088fa:	2300      	movs	r3, #0
 80088fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	61bb      	str	r3, [r7, #24]
 8008902:	e003      	b.n	800890c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008908:	2300      	movs	r3, #0
 800890a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800890c:	e030      	b.n	8008970 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	0013      	movs	r3, r2
 8008918:	2200      	movs	r2, #0
 800891a:	2180      	movs	r1, #128	@ 0x80
 800891c:	f000 ffc8 	bl	80098b0 <UART_WaitOnFlagUntilTimeout>
 8008920:	1e03      	subs	r3, r0, #0
 8008922:	d005      	beq.n	8008930 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2288      	movs	r2, #136	@ 0x88
 8008928:	2120      	movs	r1, #32
 800892a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e03d      	b.n	80089ac <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10b      	bne.n	800894e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	001a      	movs	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	05d2      	lsls	r2, r2, #23
 8008942:	0dd2      	lsrs	r2, r2, #23
 8008944:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	3302      	adds	r3, #2
 800894a:	61bb      	str	r3, [r7, #24]
 800894c:	e007      	b.n	800895e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	781a      	ldrb	r2, [r3, #0]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	3301      	adds	r3, #1
 800895c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2256      	movs	r2, #86	@ 0x56
 8008962:	5a9b      	ldrh	r3, [r3, r2]
 8008964:	b29b      	uxth	r3, r3
 8008966:	3b01      	subs	r3, #1
 8008968:	b299      	uxth	r1, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2256      	movs	r2, #86	@ 0x56
 800896e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2256      	movs	r2, #86	@ 0x56
 8008974:	5a9b      	ldrh	r3, [r3, r2]
 8008976:	b29b      	uxth	r3, r3
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1c8      	bne.n	800890e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	0013      	movs	r3, r2
 8008986:	2200      	movs	r2, #0
 8008988:	2140      	movs	r1, #64	@ 0x40
 800898a:	f000 ff91 	bl	80098b0 <UART_WaitOnFlagUntilTimeout>
 800898e:	1e03      	subs	r3, r0, #0
 8008990:	d005      	beq.n	800899e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2288      	movs	r2, #136	@ 0x88
 8008996:	2120      	movs	r1, #32
 8008998:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e006      	b.n	80089ac <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2288      	movs	r2, #136	@ 0x88
 80089a2:	2120      	movs	r1, #32
 80089a4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	e000      	b.n	80089ac <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80089aa:	2302      	movs	r3, #2
  }
}
 80089ac:	0018      	movs	r0, r3
 80089ae:	46bd      	mov	sp, r7
 80089b0:	b008      	add	sp, #32
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b098      	sub	sp, #96	@ 0x60
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 80089bc:	2301      	movs	r3, #1
 80089be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80089c0:	f3ef 8310 	mrs	r3, PRIMASK
 80089c4:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80089c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 80089c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80089ca:	2301      	movs	r3, #1
 80089cc:	637b      	str	r3, [r7, #52]	@ 0x34
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d0:	f383 8810 	msr	PRIMASK, r3
}
 80089d4:	46c0      	nop			@ (mov r8, r8)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	498a      	ldr	r1, [pc, #552]	@ (8008c0c <HAL_UART_Abort_IT+0x258>)
 80089e2:	400a      	ands	r2, r1
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80089e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ec:	f383 8810 	msr	PRIMASK, r3
}
 80089f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80089f2:	f3ef 8310 	mrs	r3, PRIMASK
 80089f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80089f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 80089fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80089fc:	2301      	movs	r3, #1
 80089fe:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a02:	f383 8810 	msr	PRIMASK, r3
}
 8008a06:	46c0      	nop			@ (mov r8, r8)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	497f      	ldr	r1, [pc, #508]	@ (8008c10 <HAL_UART_Abort_IT+0x25c>)
 8008a14:	400a      	ands	r2, r1
 8008a16:	609a      	str	r2, [r3, #8]
 8008a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a1a:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a1e:	f383 8810 	msr	PRIMASK, r3
}
 8008a22:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d118      	bne.n	8008a5e <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a30:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008a34:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a36:	2301      	movs	r3, #1
 8008a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3c:	f383 8810 	msr	PRIMASK, r3
}
 8008a40:	46c0      	nop			@ (mov r8, r8)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2110      	movs	r1, #16
 8008a4e:	438a      	bics	r2, r1
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a58:	f383 8810 	msr	PRIMASK, r3
}
 8008a5c:	46c0      	nop			@ (mov r8, r8)

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00f      	beq.n	8008a86 <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	2280      	movs	r2, #128	@ 0x80
 8008a6e:	4013      	ands	r3, r2
 8008a70:	2b80      	cmp	r3, #128	@ 0x80
 8008a72:	d104      	bne.n	8008a7e <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a78:	4a66      	ldr	r2, [pc, #408]	@ (8008c14 <HAL_UART_Abort_IT+0x260>)
 8008a7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8008a7c:	e003      	b.n	8008a86 <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a82:	2200      	movs	r2, #0
 8008a84:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2280      	movs	r2, #128	@ 0x80
 8008a8a:	589b      	ldr	r3, [r3, r2]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d011      	beq.n	8008ab4 <HAL_UART_Abort_IT+0x100>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	2240      	movs	r2, #64	@ 0x40
 8008a98:	4013      	ands	r3, r2
 8008a9a:	2b40      	cmp	r3, #64	@ 0x40
 8008a9c:	d105      	bne.n	8008aaa <HAL_UART_Abort_IT+0xf6>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2280      	movs	r2, #128	@ 0x80
 8008aa2:	589b      	ldr	r3, [r3, r2]
 8008aa4:	4a5c      	ldr	r2, [pc, #368]	@ (8008c18 <HAL_UART_Abort_IT+0x264>)
 8008aa6:	639a      	str	r2, [r3, #56]	@ 0x38
 8008aa8:	e004      	b.n	8008ab4 <HAL_UART_Abort_IT+0x100>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2280      	movs	r2, #128	@ 0x80
 8008aae:	589b      	ldr	r3, [r3, r2]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	2280      	movs	r2, #128	@ 0x80
 8008abc:	4013      	ands	r3, r2
 8008abe:	2b80      	cmp	r3, #128	@ 0x80
 8008ac0:	d12a      	bne.n	8008b18 <HAL_UART_Abort_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ac6:	61bb      	str	r3, [r7, #24]
  return(result);
 8008ac8:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008acc:	2301      	movs	r3, #1
 8008ace:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	f383 8810 	msr	PRIMASK, r3
}
 8008ad6:	46c0      	nop			@ (mov r8, r8)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689a      	ldr	r2, [r3, #8]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2180      	movs	r1, #128	@ 0x80
 8008ae4:	438a      	bics	r2, r1
 8008ae6:	609a      	str	r2, [r3, #8]
 8008ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	f383 8810 	msr	PRIMASK, r3
}
 8008af2:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00d      	beq.n	8008b18 <HAL_UART_Abort_IT+0x164>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b00:	0018      	movs	r0, r3
 8008b02:	f7fc fb31 	bl	8005168 <HAL_DMA_Abort_IT>
 8008b06:	1e03      	subs	r3, r0, #0
 8008b08:	d004      	beq.n	8008b14 <HAL_UART_Abort_IT+0x160>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b0e:	2200      	movs	r2, #0
 8008b10:	639a      	str	r2, [r3, #56]	@ 0x38
 8008b12:	e001      	b.n	8008b18 <HAL_UART_Abort_IT+0x164>
      }
      else
      {
        abortcplt = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	2240      	movs	r2, #64	@ 0x40
 8008b20:	4013      	ands	r3, r2
 8008b22:	2b40      	cmp	r3, #64	@ 0x40
 8008b24:	d12f      	bne.n	8008b86 <HAL_UART_Abort_IT+0x1d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008b26:	f3ef 8310 	mrs	r3, PRIMASK
 8008b2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b30:	2301      	movs	r3, #1
 8008b32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f383 8810 	msr	PRIMASK, r3
}
 8008b3a:	46c0      	nop			@ (mov r8, r8)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689a      	ldr	r2, [r3, #8]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2140      	movs	r1, #64	@ 0x40
 8008b48:	438a      	bics	r2, r1
 8008b4a:	609a      	str	r2, [r3, #8]
 8008b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f383 8810 	msr	PRIMASK, r3
}
 8008b56:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2280      	movs	r2, #128	@ 0x80
 8008b5c:	589b      	ldr	r3, [r3, r2]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d011      	beq.n	8008b86 <HAL_UART_Abort_IT+0x1d2>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2280      	movs	r2, #128	@ 0x80
 8008b66:	589b      	ldr	r3, [r3, r2]
 8008b68:	0018      	movs	r0, r3
 8008b6a:	f7fc fafd 	bl	8005168 <HAL_DMA_Abort_IT>
 8008b6e:	1e03      	subs	r3, r0, #0
 8008b70:	d007      	beq.n	8008b82 <HAL_UART_Abort_IT+0x1ce>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2280      	movs	r2, #128	@ 0x80
 8008b76:	589b      	ldr	r3, [r3, r2]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	639a      	str	r2, [r3, #56]	@ 0x38
        abortcplt = 1U;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b80:	e001      	b.n	8008b86 <HAL_UART_Abort_IT+0x1d2>
      }
      else
      {
        abortcplt = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8008b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d13a      	bne.n	8008c02 <HAL_UART_Abort_IT+0x24e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2256      	movs	r2, #86	@ 0x56
 8008b90:	2100      	movs	r1, #0
 8008b92:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	225e      	movs	r2, #94	@ 0x5e
 8008b98:	2100      	movs	r1, #0
 8008b9a:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2290      	movs	r2, #144	@ 0x90
 8008bac:	2100      	movs	r1, #0
 8008bae:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	220f      	movs	r2, #15
 8008bb6:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008bbc:	2380      	movs	r3, #128	@ 0x80
 8008bbe:	059b      	lsls	r3, r3, #22
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d107      	bne.n	8008bd4 <HAL_UART_Abort_IT+0x220>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	699a      	ldr	r2, [r3, #24]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2110      	movs	r1, #16
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	699a      	ldr	r2, [r3, #24]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2108      	movs	r1, #8
 8008be0:	430a      	orrs	r2, r1
 8008be2:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2288      	movs	r2, #136	@ 0x88
 8008be8:	2120      	movs	r1, #32
 8008bea:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	228c      	movs	r2, #140	@ 0x8c
 8008bf0:	2120      	movs	r1, #32
 8008bf2:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	0018      	movs	r0, r3
 8008bfe:	f000 fb73 	bl	80092e8 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	0018      	movs	r0, r3
 8008c06:	46bd      	mov	sp, r7
 8008c08:	b018      	add	sp, #96	@ 0x60
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	fffffe1f 	.word	0xfffffe1f
 8008c10:	ef7ffffe 	.word	0xef7ffffe
 8008c14:	08009e4f 	.word	0x08009e4f
 8008c18:	08009edf 	.word	0x08009edf

08008c1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c1c:	b5b0      	push	{r4, r5, r7, lr}
 8008c1e:	b0aa      	sub	sp, #168	@ 0xa8
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	22a4      	movs	r2, #164	@ 0xa4
 8008c2c:	18b9      	adds	r1, r7, r2
 8008c2e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	20a0      	movs	r0, #160	@ 0xa0
 8008c38:	1839      	adds	r1, r7, r0
 8008c3a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	249c      	movs	r4, #156	@ 0x9c
 8008c44:	1939      	adds	r1, r7, r4
 8008c46:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008c48:	0011      	movs	r1, r2
 8008c4a:	18bb      	adds	r3, r7, r2
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4aa2      	ldr	r2, [pc, #648]	@ (8008ed8 <HAL_UART_IRQHandler+0x2bc>)
 8008c50:	4013      	ands	r3, r2
 8008c52:	2298      	movs	r2, #152	@ 0x98
 8008c54:	18bd      	adds	r5, r7, r2
 8008c56:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8008c58:	18bb      	adds	r3, r7, r2
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d11a      	bne.n	8008c96 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c60:	187b      	adds	r3, r7, r1
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2220      	movs	r2, #32
 8008c66:	4013      	ands	r3, r2
 8008c68:	d015      	beq.n	8008c96 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c6a:	183b      	adds	r3, r7, r0
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2220      	movs	r2, #32
 8008c70:	4013      	ands	r3, r2
 8008c72:	d105      	bne.n	8008c80 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c74:	193b      	adds	r3, r7, r4
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	2380      	movs	r3, #128	@ 0x80
 8008c7a:	055b      	lsls	r3, r3, #21
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	d00a      	beq.n	8008c96 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d100      	bne.n	8008c8a <HAL_UART_IRQHandler+0x6e>
 8008c88:	e2fb      	b.n	8009282 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	0010      	movs	r0, r2
 8008c92:	4798      	blx	r3
      }
      return;
 8008c94:	e2f5      	b.n	8009282 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c96:	2398      	movs	r3, #152	@ 0x98
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d100      	bne.n	8008ca2 <HAL_UART_IRQHandler+0x86>
 8008ca0:	e122      	b.n	8008ee8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ca2:	239c      	movs	r3, #156	@ 0x9c
 8008ca4:	18fb      	adds	r3, r7, r3
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a8c      	ldr	r2, [pc, #560]	@ (8008edc <HAL_UART_IRQHandler+0x2c0>)
 8008caa:	4013      	ands	r3, r2
 8008cac:	d106      	bne.n	8008cbc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008cae:	23a0      	movs	r3, #160	@ 0xa0
 8008cb0:	18fb      	adds	r3, r7, r3
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a8a      	ldr	r2, [pc, #552]	@ (8008ee0 <HAL_UART_IRQHandler+0x2c4>)
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	d100      	bne.n	8008cbc <HAL_UART_IRQHandler+0xa0>
 8008cba:	e115      	b.n	8008ee8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cbc:	23a4      	movs	r3, #164	@ 0xa4
 8008cbe:	18fb      	adds	r3, r7, r3
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	d012      	beq.n	8008cee <HAL_UART_IRQHandler+0xd2>
 8008cc8:	23a0      	movs	r3, #160	@ 0xa0
 8008cca:	18fb      	adds	r3, r7, r3
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	2380      	movs	r3, #128	@ 0x80
 8008cd0:	005b      	lsls	r3, r3, #1
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	d00b      	beq.n	8008cee <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2290      	movs	r2, #144	@ 0x90
 8008ce2:	589b      	ldr	r3, [r3, r2]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	431a      	orrs	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2190      	movs	r1, #144	@ 0x90
 8008cec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cee:	23a4      	movs	r3, #164	@ 0xa4
 8008cf0:	18fb      	adds	r3, r7, r3
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2202      	movs	r2, #2
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	d011      	beq.n	8008d1e <HAL_UART_IRQHandler+0x102>
 8008cfa:	239c      	movs	r3, #156	@ 0x9c
 8008cfc:	18fb      	adds	r3, r7, r3
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2201      	movs	r2, #1
 8008d02:	4013      	ands	r3, r2
 8008d04:	d00b      	beq.n	8008d1e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2290      	movs	r2, #144	@ 0x90
 8008d12:	589b      	ldr	r3, [r3, r2]
 8008d14:	2204      	movs	r2, #4
 8008d16:	431a      	orrs	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2190      	movs	r1, #144	@ 0x90
 8008d1c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d1e:	23a4      	movs	r3, #164	@ 0xa4
 8008d20:	18fb      	adds	r3, r7, r3
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2204      	movs	r2, #4
 8008d26:	4013      	ands	r3, r2
 8008d28:	d011      	beq.n	8008d4e <HAL_UART_IRQHandler+0x132>
 8008d2a:	239c      	movs	r3, #156	@ 0x9c
 8008d2c:	18fb      	adds	r3, r7, r3
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2201      	movs	r2, #1
 8008d32:	4013      	ands	r3, r2
 8008d34:	d00b      	beq.n	8008d4e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2204      	movs	r2, #4
 8008d3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2290      	movs	r2, #144	@ 0x90
 8008d42:	589b      	ldr	r3, [r3, r2]
 8008d44:	2202      	movs	r2, #2
 8008d46:	431a      	orrs	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2190      	movs	r1, #144	@ 0x90
 8008d4c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008d4e:	23a4      	movs	r3, #164	@ 0xa4
 8008d50:	18fb      	adds	r3, r7, r3
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2208      	movs	r2, #8
 8008d56:	4013      	ands	r3, r2
 8008d58:	d017      	beq.n	8008d8a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d5a:	23a0      	movs	r3, #160	@ 0xa0
 8008d5c:	18fb      	adds	r3, r7, r3
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2220      	movs	r2, #32
 8008d62:	4013      	ands	r3, r2
 8008d64:	d105      	bne.n	8008d72 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008d66:	239c      	movs	r3, #156	@ 0x9c
 8008d68:	18fb      	adds	r3, r7, r3
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a5b      	ldr	r2, [pc, #364]	@ (8008edc <HAL_UART_IRQHandler+0x2c0>)
 8008d6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d70:	d00b      	beq.n	8008d8a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2208      	movs	r2, #8
 8008d78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2290      	movs	r2, #144	@ 0x90
 8008d7e:	589b      	ldr	r3, [r3, r2]
 8008d80:	2208      	movs	r2, #8
 8008d82:	431a      	orrs	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2190      	movs	r1, #144	@ 0x90
 8008d88:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d8a:	23a4      	movs	r3, #164	@ 0xa4
 8008d8c:	18fb      	adds	r3, r7, r3
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	2380      	movs	r3, #128	@ 0x80
 8008d92:	011b      	lsls	r3, r3, #4
 8008d94:	4013      	ands	r3, r2
 8008d96:	d013      	beq.n	8008dc0 <HAL_UART_IRQHandler+0x1a4>
 8008d98:	23a0      	movs	r3, #160	@ 0xa0
 8008d9a:	18fb      	adds	r3, r7, r3
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	2380      	movs	r3, #128	@ 0x80
 8008da0:	04db      	lsls	r3, r3, #19
 8008da2:	4013      	ands	r3, r2
 8008da4:	d00c      	beq.n	8008dc0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2280      	movs	r2, #128	@ 0x80
 8008dac:	0112      	lsls	r2, r2, #4
 8008dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2290      	movs	r2, #144	@ 0x90
 8008db4:	589b      	ldr	r3, [r3, r2]
 8008db6:	2220      	movs	r2, #32
 8008db8:	431a      	orrs	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2190      	movs	r1, #144	@ 0x90
 8008dbe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2290      	movs	r2, #144	@ 0x90
 8008dc4:	589b      	ldr	r3, [r3, r2]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d100      	bne.n	8008dcc <HAL_UART_IRQHandler+0x1b0>
 8008dca:	e25c      	b.n	8009286 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008dcc:	23a4      	movs	r3, #164	@ 0xa4
 8008dce:	18fb      	adds	r3, r7, r3
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	d015      	beq.n	8008e04 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008dd8:	23a0      	movs	r3, #160	@ 0xa0
 8008dda:	18fb      	adds	r3, r7, r3
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2220      	movs	r2, #32
 8008de0:	4013      	ands	r3, r2
 8008de2:	d106      	bne.n	8008df2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008de4:	239c      	movs	r3, #156	@ 0x9c
 8008de6:	18fb      	adds	r3, r7, r3
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	2380      	movs	r3, #128	@ 0x80
 8008dec:	055b      	lsls	r3, r3, #21
 8008dee:	4013      	ands	r3, r2
 8008df0:	d008      	beq.n	8008e04 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d004      	beq.n	8008e04 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	0010      	movs	r0, r2
 8008e02:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2290      	movs	r2, #144	@ 0x90
 8008e08:	589b      	ldr	r3, [r3, r2]
 8008e0a:	2194      	movs	r1, #148	@ 0x94
 8008e0c:	187a      	adds	r2, r7, r1
 8008e0e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	2240      	movs	r2, #64	@ 0x40
 8008e18:	4013      	ands	r3, r2
 8008e1a:	2b40      	cmp	r3, #64	@ 0x40
 8008e1c:	d004      	beq.n	8008e28 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e1e:	187b      	adds	r3, r7, r1
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2228      	movs	r2, #40	@ 0x28
 8008e24:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e26:	d04c      	beq.n	8008ec2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	f000 fe96 	bl	8009b5c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	2240      	movs	r2, #64	@ 0x40
 8008e38:	4013      	ands	r3, r2
 8008e3a:	2b40      	cmp	r3, #64	@ 0x40
 8008e3c:	d13c      	bne.n	8008eb8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e42:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8008e44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e46:	2090      	movs	r0, #144	@ 0x90
 8008e48:	183a      	adds	r2, r7, r0
 8008e4a:	6013      	str	r3, [r2, #0]
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e52:	f383 8810 	msr	PRIMASK, r3
}
 8008e56:	46c0      	nop			@ (mov r8, r8)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689a      	ldr	r2, [r3, #8]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2140      	movs	r1, #64	@ 0x40
 8008e64:	438a      	bics	r2, r1
 8008e66:	609a      	str	r2, [r3, #8]
 8008e68:	183b      	adds	r3, r7, r0
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e70:	f383 8810 	msr	PRIMASK, r3
}
 8008e74:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2280      	movs	r2, #128	@ 0x80
 8008e7a:	589b      	ldr	r3, [r3, r2]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d016      	beq.n	8008eae <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2280      	movs	r2, #128	@ 0x80
 8008e84:	589b      	ldr	r3, [r3, r2]
 8008e86:	4a17      	ldr	r2, [pc, #92]	@ (8008ee4 <HAL_UART_IRQHandler+0x2c8>)
 8008e88:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2280      	movs	r2, #128	@ 0x80
 8008e8e:	589b      	ldr	r3, [r3, r2]
 8008e90:	0018      	movs	r0, r3
 8008e92:	f7fc f969 	bl	8005168 <HAL_DMA_Abort_IT>
 8008e96:	1e03      	subs	r3, r0, #0
 8008e98:	d01c      	beq.n	8008ed4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2280      	movs	r2, #128	@ 0x80
 8008e9e:	589b      	ldr	r3, [r3, r2]
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	2180      	movs	r1, #128	@ 0x80
 8008ea6:	5852      	ldr	r2, [r2, r1]
 8008ea8:	0010      	movs	r0, r2
 8008eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eac:	e012      	b.n	8008ed4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	f000 fa11 	bl	80092d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb6:	e00d      	b.n	8008ed4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	0018      	movs	r0, r3
 8008ebc:	f000 fa0c 	bl	80092d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ec0:	e008      	b.n	8008ed4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	0018      	movs	r0, r3
 8008ec6:	f000 fa07 	bl	80092d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2290      	movs	r2, #144	@ 0x90
 8008ece:	2100      	movs	r1, #0
 8008ed0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008ed2:	e1d8      	b.n	8009286 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed4:	46c0      	nop			@ (mov r8, r8)
    return;
 8008ed6:	e1d6      	b.n	8009286 <HAL_UART_IRQHandler+0x66a>
 8008ed8:	0000080f 	.word	0x0000080f
 8008edc:	10000001 	.word	0x10000001
 8008ee0:	04000120 	.word	0x04000120
 8008ee4:	08009e21 	.word	0x08009e21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d000      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x2d6>
 8008ef0:	e15d      	b.n	80091ae <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008ef2:	23a4      	movs	r3, #164	@ 0xa4
 8008ef4:	18fb      	adds	r3, r7, r3
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2210      	movs	r2, #16
 8008efa:	4013      	ands	r3, r2
 8008efc:	d100      	bne.n	8008f00 <HAL_UART_IRQHandler+0x2e4>
 8008efe:	e156      	b.n	80091ae <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f00:	23a0      	movs	r3, #160	@ 0xa0
 8008f02:	18fb      	adds	r3, r7, r3
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2210      	movs	r2, #16
 8008f08:	4013      	ands	r3, r2
 8008f0a:	d100      	bne.n	8008f0e <HAL_UART_IRQHandler+0x2f2>
 8008f0c:	e14f      	b.n	80091ae <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2210      	movs	r2, #16
 8008f14:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	2240      	movs	r2, #64	@ 0x40
 8008f1e:	4013      	ands	r3, r2
 8008f20:	2b40      	cmp	r3, #64	@ 0x40
 8008f22:	d000      	beq.n	8008f26 <HAL_UART_IRQHandler+0x30a>
 8008f24:	e0c3      	b.n	80090ae <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2280      	movs	r2, #128	@ 0x80
 8008f2a:	589b      	ldr	r3, [r3, r2]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	217e      	movs	r1, #126	@ 0x7e
 8008f32:	187b      	adds	r3, r7, r1
 8008f34:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008f36:	187b      	adds	r3, r7, r1
 8008f38:	881b      	ldrh	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d100      	bne.n	8008f40 <HAL_UART_IRQHandler+0x324>
 8008f3e:	e097      	b.n	8009070 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	225c      	movs	r2, #92	@ 0x5c
 8008f44:	5a9b      	ldrh	r3, [r3, r2]
 8008f46:	187a      	adds	r2, r7, r1
 8008f48:	8812      	ldrh	r2, [r2, #0]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d300      	bcc.n	8008f50 <HAL_UART_IRQHandler+0x334>
 8008f4e:	e08f      	b.n	8009070 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	187a      	adds	r2, r7, r1
 8008f54:	215e      	movs	r1, #94	@ 0x5e
 8008f56:	8812      	ldrh	r2, [r2, #0]
 8008f58:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2280      	movs	r2, #128	@ 0x80
 8008f5e:	589b      	ldr	r3, [r3, r2]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2220      	movs	r2, #32
 8008f66:	4013      	ands	r3, r2
 8008f68:	d170      	bne.n	800904c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8008f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8008f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f72:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f74:	2301      	movs	r3, #1
 8008f76:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f7a:	f383 8810 	msr	PRIMASK, r3
}
 8008f7e:	46c0      	nop			@ (mov r8, r8)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	49c4      	ldr	r1, [pc, #784]	@ (800929c <HAL_UART_IRQHandler+0x680>)
 8008f8c:	400a      	ands	r2, r1
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f92:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f96:	f383 8810 	msr	PRIMASK, r3
}
 8008f9a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8008fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8008fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa4:	677b      	str	r3, [r7, #116]	@ 0x74
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fac:	f383 8810 	msr	PRIMASK, r3
}
 8008fb0:	46c0      	nop			@ (mov r8, r8)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	438a      	bics	r2, r1
 8008fc0:	609a      	str	r2, [r3, #8]
 8008fc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008fc4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fc8:	f383 8810 	msr	PRIMASK, r3
}
 8008fcc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008fce:	f3ef 8310 	mrs	r3, PRIMASK
 8008fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8008fd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8008fd8:	2301      	movs	r3, #1
 8008fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fde:	f383 8810 	msr	PRIMASK, r3
}
 8008fe2:	46c0      	nop			@ (mov r8, r8)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2140      	movs	r1, #64	@ 0x40
 8008ff0:	438a      	bics	r2, r1
 8008ff2:	609a      	str	r2, [r3, #8]
 8008ff4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ff6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ffa:	f383 8810 	msr	PRIMASK, r3
}
 8008ffe:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	228c      	movs	r2, #140	@ 0x8c
 8009004:	2120      	movs	r1, #32
 8009006:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800900e:	f3ef 8310 	mrs	r3, PRIMASK
 8009012:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8009014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009016:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009018:	2301      	movs	r3, #1
 800901a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800901c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800901e:	f383 8810 	msr	PRIMASK, r3
}
 8009022:	46c0      	nop			@ (mov r8, r8)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2110      	movs	r1, #16
 8009030:	438a      	bics	r2, r1
 8009032:	601a      	str	r2, [r3, #0]
 8009034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009036:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009038:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800903a:	f383 8810 	msr	PRIMASK, r3
}
 800903e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2280      	movs	r2, #128	@ 0x80
 8009044:	589b      	ldr	r3, [r3, r2]
 8009046:	0018      	movs	r0, r3
 8009048:	f7fc f82c 	bl	80050a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2202      	movs	r2, #2
 8009050:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	225c      	movs	r2, #92	@ 0x5c
 8009056:	5a9a      	ldrh	r2, [r3, r2]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	215e      	movs	r1, #94	@ 0x5e
 800905c:	5a5b      	ldrh	r3, [r3, r1]
 800905e:	b29b      	uxth	r3, r3
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	b29a      	uxth	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	0011      	movs	r1, r2
 8009068:	0018      	movs	r0, r3
 800906a:	f7f8 fceb 	bl	8001a44 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800906e:	e10c      	b.n	800928a <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	225c      	movs	r2, #92	@ 0x5c
 8009074:	5a9b      	ldrh	r3, [r3, r2]
 8009076:	227e      	movs	r2, #126	@ 0x7e
 8009078:	18ba      	adds	r2, r7, r2
 800907a:	8812      	ldrh	r2, [r2, #0]
 800907c:	429a      	cmp	r2, r3
 800907e:	d000      	beq.n	8009082 <HAL_UART_IRQHandler+0x466>
 8009080:	e103      	b.n	800928a <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2280      	movs	r2, #128	@ 0x80
 8009086:	589b      	ldr	r3, [r3, r2]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2220      	movs	r2, #32
 800908e:	4013      	ands	r3, r2
 8009090:	2b20      	cmp	r3, #32
 8009092:	d000      	beq.n	8009096 <HAL_UART_IRQHandler+0x47a>
 8009094:	e0f9      	b.n	800928a <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2202      	movs	r2, #2
 800909a:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	225c      	movs	r2, #92	@ 0x5c
 80090a0:	5a9a      	ldrh	r2, [r3, r2]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	0011      	movs	r1, r2
 80090a6:	0018      	movs	r0, r3
 80090a8:	f7f8 fccc 	bl	8001a44 <HAL_UARTEx_RxEventCallback>
      return;
 80090ac:	e0ed      	b.n	800928a <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	225c      	movs	r2, #92	@ 0x5c
 80090b2:	5a99      	ldrh	r1, [r3, r2]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	225e      	movs	r2, #94	@ 0x5e
 80090b8:	5a9b      	ldrh	r3, [r3, r2]
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	208e      	movs	r0, #142	@ 0x8e
 80090be:	183b      	adds	r3, r7, r0
 80090c0:	1a8a      	subs	r2, r1, r2
 80090c2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	225e      	movs	r2, #94	@ 0x5e
 80090c8:	5a9b      	ldrh	r3, [r3, r2]
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d100      	bne.n	80090d2 <HAL_UART_IRQHandler+0x4b6>
 80090d0:	e0dd      	b.n	800928e <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80090d2:	183b      	adds	r3, r7, r0
 80090d4:	881b      	ldrh	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d100      	bne.n	80090dc <HAL_UART_IRQHandler+0x4c0>
 80090da:	e0d8      	b.n	800928e <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80090dc:	f3ef 8310 	mrs	r3, PRIMASK
 80090e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80090e2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090e4:	2488      	movs	r4, #136	@ 0x88
 80090e6:	193a      	adds	r2, r7, r4
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	2301      	movs	r3, #1
 80090ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	f383 8810 	msr	PRIMASK, r3
}
 80090f4:	46c0      	nop			@ (mov r8, r8)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4967      	ldr	r1, [pc, #412]	@ (80092a0 <HAL_UART_IRQHandler+0x684>)
 8009102:	400a      	ands	r2, r1
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	193b      	adds	r3, r7, r4
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	f383 8810 	msr	PRIMASK, r3
}
 8009112:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009114:	f3ef 8310 	mrs	r3, PRIMASK
 8009118:	61bb      	str	r3, [r7, #24]
  return(result);
 800911a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800911c:	2484      	movs	r4, #132	@ 0x84
 800911e:	193a      	adds	r2, r7, r4
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	2301      	movs	r3, #1
 8009124:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	f383 8810 	msr	PRIMASK, r3
}
 800912c:	46c0      	nop			@ (mov r8, r8)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689a      	ldr	r2, [r3, #8]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	495a      	ldr	r1, [pc, #360]	@ (80092a4 <HAL_UART_IRQHandler+0x688>)
 800913a:	400a      	ands	r2, r1
 800913c:	609a      	str	r2, [r3, #8]
 800913e:	193b      	adds	r3, r7, r4
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	f383 8810 	msr	PRIMASK, r3
}
 800914a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	228c      	movs	r2, #140	@ 0x8c
 8009150:	2120      	movs	r1, #32
 8009152:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009160:	f3ef 8310 	mrs	r3, PRIMASK
 8009164:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009168:	2480      	movs	r4, #128	@ 0x80
 800916a:	193a      	adds	r2, r7, r4
 800916c:	6013      	str	r3, [r2, #0]
 800916e:	2301      	movs	r3, #1
 8009170:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009174:	f383 8810 	msr	PRIMASK, r3
}
 8009178:	46c0      	nop			@ (mov r8, r8)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2110      	movs	r1, #16
 8009186:	438a      	bics	r2, r1
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	193b      	adds	r3, r7, r4
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009192:	f383 8810 	msr	PRIMASK, r3
}
 8009196:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800919e:	183b      	adds	r3, r7, r0
 80091a0:	881a      	ldrh	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	0011      	movs	r1, r2
 80091a6:	0018      	movs	r0, r3
 80091a8:	f7f8 fc4c 	bl	8001a44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091ac:	e06f      	b.n	800928e <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80091ae:	23a4      	movs	r3, #164	@ 0xa4
 80091b0:	18fb      	adds	r3, r7, r3
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	2380      	movs	r3, #128	@ 0x80
 80091b6:	035b      	lsls	r3, r3, #13
 80091b8:	4013      	ands	r3, r2
 80091ba:	d010      	beq.n	80091de <HAL_UART_IRQHandler+0x5c2>
 80091bc:	239c      	movs	r3, #156	@ 0x9c
 80091be:	18fb      	adds	r3, r7, r3
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	2380      	movs	r3, #128	@ 0x80
 80091c4:	03db      	lsls	r3, r3, #15
 80091c6:	4013      	ands	r3, r2
 80091c8:	d009      	beq.n	80091de <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2280      	movs	r2, #128	@ 0x80
 80091d0:	0352      	lsls	r2, r2, #13
 80091d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	0018      	movs	r0, r3
 80091d8:	f000 ff60 	bl	800a09c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80091dc:	e05a      	b.n	8009294 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80091de:	23a4      	movs	r3, #164	@ 0xa4
 80091e0:	18fb      	adds	r3, r7, r3
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2280      	movs	r2, #128	@ 0x80
 80091e6:	4013      	ands	r3, r2
 80091e8:	d016      	beq.n	8009218 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80091ea:	23a0      	movs	r3, #160	@ 0xa0
 80091ec:	18fb      	adds	r3, r7, r3
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2280      	movs	r2, #128	@ 0x80
 80091f2:	4013      	ands	r3, r2
 80091f4:	d106      	bne.n	8009204 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80091f6:	239c      	movs	r3, #156	@ 0x9c
 80091f8:	18fb      	adds	r3, r7, r3
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	2380      	movs	r3, #128	@ 0x80
 80091fe:	041b      	lsls	r3, r3, #16
 8009200:	4013      	ands	r3, r2
 8009202:	d009      	beq.n	8009218 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009208:	2b00      	cmp	r3, #0
 800920a:	d042      	beq.n	8009292 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	0010      	movs	r0, r2
 8009214:	4798      	blx	r3
    }
    return;
 8009216:	e03c      	b.n	8009292 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009218:	23a4      	movs	r3, #164	@ 0xa4
 800921a:	18fb      	adds	r3, r7, r3
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2240      	movs	r2, #64	@ 0x40
 8009220:	4013      	ands	r3, r2
 8009222:	d00a      	beq.n	800923a <HAL_UART_IRQHandler+0x61e>
 8009224:	23a0      	movs	r3, #160	@ 0xa0
 8009226:	18fb      	adds	r3, r7, r3
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2240      	movs	r2, #64	@ 0x40
 800922c:	4013      	ands	r3, r2
 800922e:	d004      	beq.n	800923a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	0018      	movs	r0, r3
 8009234:	f000 fe94 	bl	8009f60 <UART_EndTransmit_IT>
    return;
 8009238:	e02c      	b.n	8009294 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800923a:	23a4      	movs	r3, #164	@ 0xa4
 800923c:	18fb      	adds	r3, r7, r3
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	2380      	movs	r3, #128	@ 0x80
 8009242:	041b      	lsls	r3, r3, #16
 8009244:	4013      	ands	r3, r2
 8009246:	d00b      	beq.n	8009260 <HAL_UART_IRQHandler+0x644>
 8009248:	23a0      	movs	r3, #160	@ 0xa0
 800924a:	18fb      	adds	r3, r7, r3
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	2380      	movs	r3, #128	@ 0x80
 8009250:	05db      	lsls	r3, r3, #23
 8009252:	4013      	ands	r3, r2
 8009254:	d004      	beq.n	8009260 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	0018      	movs	r0, r3
 800925a:	f000 ff2f 	bl	800a0bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800925e:	e019      	b.n	8009294 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009260:	23a4      	movs	r3, #164	@ 0xa4
 8009262:	18fb      	adds	r3, r7, r3
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	2380      	movs	r3, #128	@ 0x80
 8009268:	045b      	lsls	r3, r3, #17
 800926a:	4013      	ands	r3, r2
 800926c:	d012      	beq.n	8009294 <HAL_UART_IRQHandler+0x678>
 800926e:	23a0      	movs	r3, #160	@ 0xa0
 8009270:	18fb      	adds	r3, r7, r3
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	da0d      	bge.n	8009294 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	0018      	movs	r0, r3
 800927c:	f000 ff16 	bl	800a0ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009280:	e008      	b.n	8009294 <HAL_UART_IRQHandler+0x678>
      return;
 8009282:	46c0      	nop			@ (mov r8, r8)
 8009284:	e006      	b.n	8009294 <HAL_UART_IRQHandler+0x678>
    return;
 8009286:	46c0      	nop			@ (mov r8, r8)
 8009288:	e004      	b.n	8009294 <HAL_UART_IRQHandler+0x678>
      return;
 800928a:	46c0      	nop			@ (mov r8, r8)
 800928c:	e002      	b.n	8009294 <HAL_UART_IRQHandler+0x678>
      return;
 800928e:	46c0      	nop			@ (mov r8, r8)
 8009290:	e000      	b.n	8009294 <HAL_UART_IRQHandler+0x678>
    return;
 8009292:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009294:	46bd      	mov	sp, r7
 8009296:	b02a      	add	sp, #168	@ 0xa8
 8009298:	bdb0      	pop	{r4, r5, r7, pc}
 800929a:	46c0      	nop			@ (mov r8, r8)
 800929c:	fffffeff 	.word	0xfffffeff
 80092a0:	fffffedf 	.word	0xfffffedf
 80092a4:	effffffe 	.word	0xeffffffe

080092a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80092b0:	46c0      	nop			@ (mov r8, r8)
 80092b2:	46bd      	mov	sp, r7
 80092b4:	b002      	add	sp, #8
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80092c0:	46c0      	nop			@ (mov r8, r8)
 80092c2:	46bd      	mov	sp, r7
 80092c4:	b002      	add	sp, #8
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80092d0:	46c0      	nop			@ (mov r8, r8)
 80092d2:	46bd      	mov	sp, r7
 80092d4:	b002      	add	sp, #8
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80092e0:	46c0      	nop			@ (mov r8, r8)
 80092e2:	46bd      	mov	sp, r7
 80092e4:	b002      	add	sp, #8
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80092f0:	46c0      	nop			@ (mov r8, r8)
 80092f2:	46bd      	mov	sp, r7
 80092f4:	b002      	add	sp, #8
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b088      	sub	sp, #32
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009300:	231e      	movs	r3, #30
 8009302:	18fb      	adds	r3, r7, r3
 8009304:	2200      	movs	r2, #0
 8009306:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	431a      	orrs	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	431a      	orrs	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	69db      	ldr	r3, [r3, #28]
 800931c:	4313      	orrs	r3, r2
 800931e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4aab      	ldr	r2, [pc, #684]	@ (80095d4 <UART_SetConfig+0x2dc>)
 8009328:	4013      	ands	r3, r2
 800932a:	0019      	movs	r1, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	430a      	orrs	r2, r1
 8009334:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	4aa6      	ldr	r2, [pc, #664]	@ (80095d8 <UART_SetConfig+0x2e0>)
 800933e:	4013      	ands	r3, r2
 8009340:	0019      	movs	r1, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a1b      	ldr	r3, [r3, #32]
 8009358:	697a      	ldr	r2, [r7, #20]
 800935a:	4313      	orrs	r3, r2
 800935c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	4a9d      	ldr	r2, [pc, #628]	@ (80095dc <UART_SetConfig+0x2e4>)
 8009366:	4013      	ands	r3, r2
 8009368:	0019      	movs	r1, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	430a      	orrs	r2, r1
 8009372:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937a:	220f      	movs	r2, #15
 800937c:	4393      	bics	r3, r2
 800937e:	0019      	movs	r1, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	430a      	orrs	r2, r1
 800938a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a93      	ldr	r2, [pc, #588]	@ (80095e0 <UART_SetConfig+0x2e8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d127      	bne.n	80093e6 <UART_SetConfig+0xee>
 8009396:	4b93      	ldr	r3, [pc, #588]	@ (80095e4 <UART_SetConfig+0x2ec>)
 8009398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800939a:	2203      	movs	r2, #3
 800939c:	4013      	ands	r3, r2
 800939e:	2b03      	cmp	r3, #3
 80093a0:	d017      	beq.n	80093d2 <UART_SetConfig+0xda>
 80093a2:	d81b      	bhi.n	80093dc <UART_SetConfig+0xe4>
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d00a      	beq.n	80093be <UART_SetConfig+0xc6>
 80093a8:	d818      	bhi.n	80093dc <UART_SetConfig+0xe4>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <UART_SetConfig+0xbc>
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d00a      	beq.n	80093c8 <UART_SetConfig+0xd0>
 80093b2:	e013      	b.n	80093dc <UART_SetConfig+0xe4>
 80093b4:	231f      	movs	r3, #31
 80093b6:	18fb      	adds	r3, r7, r3
 80093b8:	2200      	movs	r2, #0
 80093ba:	701a      	strb	r2, [r3, #0]
 80093bc:	e021      	b.n	8009402 <UART_SetConfig+0x10a>
 80093be:	231f      	movs	r3, #31
 80093c0:	18fb      	adds	r3, r7, r3
 80093c2:	2202      	movs	r2, #2
 80093c4:	701a      	strb	r2, [r3, #0]
 80093c6:	e01c      	b.n	8009402 <UART_SetConfig+0x10a>
 80093c8:	231f      	movs	r3, #31
 80093ca:	18fb      	adds	r3, r7, r3
 80093cc:	2204      	movs	r2, #4
 80093ce:	701a      	strb	r2, [r3, #0]
 80093d0:	e017      	b.n	8009402 <UART_SetConfig+0x10a>
 80093d2:	231f      	movs	r3, #31
 80093d4:	18fb      	adds	r3, r7, r3
 80093d6:	2208      	movs	r2, #8
 80093d8:	701a      	strb	r2, [r3, #0]
 80093da:	e012      	b.n	8009402 <UART_SetConfig+0x10a>
 80093dc:	231f      	movs	r3, #31
 80093de:	18fb      	adds	r3, r7, r3
 80093e0:	2210      	movs	r2, #16
 80093e2:	701a      	strb	r2, [r3, #0]
 80093e4:	e00d      	b.n	8009402 <UART_SetConfig+0x10a>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a7f      	ldr	r2, [pc, #508]	@ (80095e8 <UART_SetConfig+0x2f0>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d104      	bne.n	80093fa <UART_SetConfig+0x102>
 80093f0:	231f      	movs	r3, #31
 80093f2:	18fb      	adds	r3, r7, r3
 80093f4:	2200      	movs	r2, #0
 80093f6:	701a      	strb	r2, [r3, #0]
 80093f8:	e003      	b.n	8009402 <UART_SetConfig+0x10a>
 80093fa:	231f      	movs	r3, #31
 80093fc:	18fb      	adds	r3, r7, r3
 80093fe:	2210      	movs	r2, #16
 8009400:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	69da      	ldr	r2, [r3, #28]
 8009406:	2380      	movs	r3, #128	@ 0x80
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	429a      	cmp	r2, r3
 800940c:	d000      	beq.n	8009410 <UART_SetConfig+0x118>
 800940e:	e06f      	b.n	80094f0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8009410:	231f      	movs	r3, #31
 8009412:	18fb      	adds	r3, r7, r3
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	2b08      	cmp	r3, #8
 8009418:	d01f      	beq.n	800945a <UART_SetConfig+0x162>
 800941a:	dc22      	bgt.n	8009462 <UART_SetConfig+0x16a>
 800941c:	2b04      	cmp	r3, #4
 800941e:	d017      	beq.n	8009450 <UART_SetConfig+0x158>
 8009420:	dc1f      	bgt.n	8009462 <UART_SetConfig+0x16a>
 8009422:	2b00      	cmp	r3, #0
 8009424:	d002      	beq.n	800942c <UART_SetConfig+0x134>
 8009426:	2b02      	cmp	r3, #2
 8009428:	d005      	beq.n	8009436 <UART_SetConfig+0x13e>
 800942a:	e01a      	b.n	8009462 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800942c:	f7fe fa7e 	bl	800792c <HAL_RCC_GetPCLK1Freq>
 8009430:	0003      	movs	r3, r0
 8009432:	61bb      	str	r3, [r7, #24]
        break;
 8009434:	e01c      	b.n	8009470 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8009436:	4b6b      	ldr	r3, [pc, #428]	@ (80095e4 <UART_SetConfig+0x2ec>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	095b      	lsrs	r3, r3, #5
 800943c:	2207      	movs	r2, #7
 800943e:	4013      	ands	r3, r2
 8009440:	3301      	adds	r3, #1
 8009442:	0019      	movs	r1, r3
 8009444:	4869      	ldr	r0, [pc, #420]	@ (80095ec <UART_SetConfig+0x2f4>)
 8009446:	f7f6 fe5f 	bl	8000108 <__udivsi3>
 800944a:	0003      	movs	r3, r0
 800944c:	61bb      	str	r3, [r7, #24]
        break;
 800944e:	e00f      	b.n	8009470 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009450:	f7fe f9f6 	bl	8007840 <HAL_RCC_GetSysClockFreq>
 8009454:	0003      	movs	r3, r0
 8009456:	61bb      	str	r3, [r7, #24]
        break;
 8009458:	e00a      	b.n	8009470 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800945a:	2380      	movs	r3, #128	@ 0x80
 800945c:	021b      	lsls	r3, r3, #8
 800945e:	61bb      	str	r3, [r7, #24]
        break;
 8009460:	e006      	b.n	8009470 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8009462:	2300      	movs	r3, #0
 8009464:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009466:	231e      	movs	r3, #30
 8009468:	18fb      	adds	r3, r7, r3
 800946a:	2201      	movs	r2, #1
 800946c:	701a      	strb	r2, [r3, #0]
        break;
 800946e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d100      	bne.n	8009478 <UART_SetConfig+0x180>
 8009476:	e097      	b.n	80095a8 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800947c:	4b5c      	ldr	r3, [pc, #368]	@ (80095f0 <UART_SetConfig+0x2f8>)
 800947e:	0052      	lsls	r2, r2, #1
 8009480:	5ad3      	ldrh	r3, [r2, r3]
 8009482:	0019      	movs	r1, r3
 8009484:	69b8      	ldr	r0, [r7, #24]
 8009486:	f7f6 fe3f 	bl	8000108 <__udivsi3>
 800948a:	0003      	movs	r3, r0
 800948c:	005a      	lsls	r2, r3, #1
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	085b      	lsrs	r3, r3, #1
 8009494:	18d2      	adds	r2, r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	0019      	movs	r1, r3
 800949c:	0010      	movs	r0, r2
 800949e:	f7f6 fe33 	bl	8000108 <__udivsi3>
 80094a2:	0003      	movs	r3, r0
 80094a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	2b0f      	cmp	r3, #15
 80094aa:	d91c      	bls.n	80094e6 <UART_SetConfig+0x1ee>
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	2380      	movs	r3, #128	@ 0x80
 80094b0:	025b      	lsls	r3, r3, #9
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d217      	bcs.n	80094e6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	200e      	movs	r0, #14
 80094bc:	183b      	adds	r3, r7, r0
 80094be:	210f      	movs	r1, #15
 80094c0:	438a      	bics	r2, r1
 80094c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	085b      	lsrs	r3, r3, #1
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	2207      	movs	r2, #7
 80094cc:	4013      	ands	r3, r2
 80094ce:	b299      	uxth	r1, r3
 80094d0:	183b      	adds	r3, r7, r0
 80094d2:	183a      	adds	r2, r7, r0
 80094d4:	8812      	ldrh	r2, [r2, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	183a      	adds	r2, r7, r0
 80094e0:	8812      	ldrh	r2, [r2, #0]
 80094e2:	60da      	str	r2, [r3, #12]
 80094e4:	e060      	b.n	80095a8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80094e6:	231e      	movs	r3, #30
 80094e8:	18fb      	adds	r3, r7, r3
 80094ea:	2201      	movs	r2, #1
 80094ec:	701a      	strb	r2, [r3, #0]
 80094ee:	e05b      	b.n	80095a8 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094f0:	231f      	movs	r3, #31
 80094f2:	18fb      	adds	r3, r7, r3
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	2b08      	cmp	r3, #8
 80094f8:	d01f      	beq.n	800953a <UART_SetConfig+0x242>
 80094fa:	dc22      	bgt.n	8009542 <UART_SetConfig+0x24a>
 80094fc:	2b04      	cmp	r3, #4
 80094fe:	d017      	beq.n	8009530 <UART_SetConfig+0x238>
 8009500:	dc1f      	bgt.n	8009542 <UART_SetConfig+0x24a>
 8009502:	2b00      	cmp	r3, #0
 8009504:	d002      	beq.n	800950c <UART_SetConfig+0x214>
 8009506:	2b02      	cmp	r3, #2
 8009508:	d005      	beq.n	8009516 <UART_SetConfig+0x21e>
 800950a:	e01a      	b.n	8009542 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800950c:	f7fe fa0e 	bl	800792c <HAL_RCC_GetPCLK1Freq>
 8009510:	0003      	movs	r3, r0
 8009512:	61bb      	str	r3, [r7, #24]
        break;
 8009514:	e01c      	b.n	8009550 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8009516:	4b33      	ldr	r3, [pc, #204]	@ (80095e4 <UART_SetConfig+0x2ec>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	095b      	lsrs	r3, r3, #5
 800951c:	2207      	movs	r2, #7
 800951e:	4013      	ands	r3, r2
 8009520:	3301      	adds	r3, #1
 8009522:	0019      	movs	r1, r3
 8009524:	4831      	ldr	r0, [pc, #196]	@ (80095ec <UART_SetConfig+0x2f4>)
 8009526:	f7f6 fdef 	bl	8000108 <__udivsi3>
 800952a:	0003      	movs	r3, r0
 800952c:	61bb      	str	r3, [r7, #24]
        break;
 800952e:	e00f      	b.n	8009550 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009530:	f7fe f986 	bl	8007840 <HAL_RCC_GetSysClockFreq>
 8009534:	0003      	movs	r3, r0
 8009536:	61bb      	str	r3, [r7, #24]
        break;
 8009538:	e00a      	b.n	8009550 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800953a:	2380      	movs	r3, #128	@ 0x80
 800953c:	021b      	lsls	r3, r3, #8
 800953e:	61bb      	str	r3, [r7, #24]
        break;
 8009540:	e006      	b.n	8009550 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8009542:	2300      	movs	r3, #0
 8009544:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009546:	231e      	movs	r3, #30
 8009548:	18fb      	adds	r3, r7, r3
 800954a:	2201      	movs	r2, #1
 800954c:	701a      	strb	r2, [r3, #0]
        break;
 800954e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d028      	beq.n	80095a8 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800955a:	4b25      	ldr	r3, [pc, #148]	@ (80095f0 <UART_SetConfig+0x2f8>)
 800955c:	0052      	lsls	r2, r2, #1
 800955e:	5ad3      	ldrh	r3, [r2, r3]
 8009560:	0019      	movs	r1, r3
 8009562:	69b8      	ldr	r0, [r7, #24]
 8009564:	f7f6 fdd0 	bl	8000108 <__udivsi3>
 8009568:	0003      	movs	r3, r0
 800956a:	001a      	movs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	085b      	lsrs	r3, r3, #1
 8009572:	18d2      	adds	r2, r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	0019      	movs	r1, r3
 800957a:	0010      	movs	r0, r2
 800957c:	f7f6 fdc4 	bl	8000108 <__udivsi3>
 8009580:	0003      	movs	r3, r0
 8009582:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	2b0f      	cmp	r3, #15
 8009588:	d90a      	bls.n	80095a0 <UART_SetConfig+0x2a8>
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	2380      	movs	r3, #128	@ 0x80
 800958e:	025b      	lsls	r3, r3, #9
 8009590:	429a      	cmp	r2, r3
 8009592:	d205      	bcs.n	80095a0 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	b29a      	uxth	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60da      	str	r2, [r3, #12]
 800959e:	e003      	b.n	80095a8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80095a0:	231e      	movs	r3, #30
 80095a2:	18fb      	adds	r3, r7, r3
 80095a4:	2201      	movs	r2, #1
 80095a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	226a      	movs	r2, #106	@ 0x6a
 80095ac:	2101      	movs	r1, #1
 80095ae:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2268      	movs	r2, #104	@ 0x68
 80095b4:	2101      	movs	r1, #1
 80095b6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80095c4:	231e      	movs	r3, #30
 80095c6:	18fb      	adds	r3, r7, r3
 80095c8:	781b      	ldrb	r3, [r3, #0]
}
 80095ca:	0018      	movs	r0, r3
 80095cc:	46bd      	mov	sp, r7
 80095ce:	b008      	add	sp, #32
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	46c0      	nop			@ (mov r8, r8)
 80095d4:	cfff69f3 	.word	0xcfff69f3
 80095d8:	ffffcfff 	.word	0xffffcfff
 80095dc:	11fff4ff 	.word	0x11fff4ff
 80095e0:	40013800 	.word	0x40013800
 80095e4:	40021000 	.word	0x40021000
 80095e8:	40004400 	.word	0x40004400
 80095ec:	02dc6c00 	.word	0x02dc6c00
 80095f0:	0800a730 	.word	0x0800a730

080095f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009600:	2208      	movs	r2, #8
 8009602:	4013      	ands	r3, r2
 8009604:	d00b      	beq.n	800961e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	4a4a      	ldr	r2, [pc, #296]	@ (8009738 <UART_AdvFeatureConfig+0x144>)
 800960e:	4013      	ands	r3, r2
 8009610:	0019      	movs	r1, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	430a      	orrs	r2, r1
 800961c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009622:	2201      	movs	r2, #1
 8009624:	4013      	ands	r3, r2
 8009626:	d00b      	beq.n	8009640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	4a43      	ldr	r2, [pc, #268]	@ (800973c <UART_AdvFeatureConfig+0x148>)
 8009630:	4013      	ands	r3, r2
 8009632:	0019      	movs	r1, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	430a      	orrs	r2, r1
 800963e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009644:	2202      	movs	r2, #2
 8009646:	4013      	ands	r3, r2
 8009648:	d00b      	beq.n	8009662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	4a3b      	ldr	r2, [pc, #236]	@ (8009740 <UART_AdvFeatureConfig+0x14c>)
 8009652:	4013      	ands	r3, r2
 8009654:	0019      	movs	r1, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	430a      	orrs	r2, r1
 8009660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009666:	2204      	movs	r2, #4
 8009668:	4013      	ands	r3, r2
 800966a:	d00b      	beq.n	8009684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	4a34      	ldr	r2, [pc, #208]	@ (8009744 <UART_AdvFeatureConfig+0x150>)
 8009674:	4013      	ands	r3, r2
 8009676:	0019      	movs	r1, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	430a      	orrs	r2, r1
 8009682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009688:	2210      	movs	r2, #16
 800968a:	4013      	ands	r3, r2
 800968c:	d00b      	beq.n	80096a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	4a2c      	ldr	r2, [pc, #176]	@ (8009748 <UART_AdvFeatureConfig+0x154>)
 8009696:	4013      	ands	r3, r2
 8009698:	0019      	movs	r1, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	430a      	orrs	r2, r1
 80096a4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096aa:	2220      	movs	r2, #32
 80096ac:	4013      	ands	r3, r2
 80096ae:	d00b      	beq.n	80096c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	4a25      	ldr	r2, [pc, #148]	@ (800974c <UART_AdvFeatureConfig+0x158>)
 80096b8:	4013      	ands	r3, r2
 80096ba:	0019      	movs	r1, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096cc:	2240      	movs	r2, #64	@ 0x40
 80096ce:	4013      	ands	r3, r2
 80096d0:	d01d      	beq.n	800970e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009750 <UART_AdvFeatureConfig+0x15c>)
 80096da:	4013      	ands	r3, r2
 80096dc:	0019      	movs	r1, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096ee:	2380      	movs	r3, #128	@ 0x80
 80096f0:	035b      	lsls	r3, r3, #13
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d10b      	bne.n	800970e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	4a15      	ldr	r2, [pc, #84]	@ (8009754 <UART_AdvFeatureConfig+0x160>)
 80096fe:	4013      	ands	r3, r2
 8009700:	0019      	movs	r1, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	430a      	orrs	r2, r1
 800970c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009712:	2280      	movs	r2, #128	@ 0x80
 8009714:	4013      	ands	r3, r2
 8009716:	d00b      	beq.n	8009730 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	4a0e      	ldr	r2, [pc, #56]	@ (8009758 <UART_AdvFeatureConfig+0x164>)
 8009720:	4013      	ands	r3, r2
 8009722:	0019      	movs	r1, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	430a      	orrs	r2, r1
 800972e:	605a      	str	r2, [r3, #4]
  }
}
 8009730:	46c0      	nop			@ (mov r8, r8)
 8009732:	46bd      	mov	sp, r7
 8009734:	b002      	add	sp, #8
 8009736:	bd80      	pop	{r7, pc}
 8009738:	ffff7fff 	.word	0xffff7fff
 800973c:	fffdffff 	.word	0xfffdffff
 8009740:	fffeffff 	.word	0xfffeffff
 8009744:	fffbffff 	.word	0xfffbffff
 8009748:	ffffefff 	.word	0xffffefff
 800974c:	ffffdfff 	.word	0xffffdfff
 8009750:	ffefffff 	.word	0xffefffff
 8009754:	ff9fffff 	.word	0xff9fffff
 8009758:	fff7ffff 	.word	0xfff7ffff

0800975c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b092      	sub	sp, #72	@ 0x48
 8009760:	af02      	add	r7, sp, #8
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2290      	movs	r2, #144	@ 0x90
 8009768:	2100      	movs	r1, #0
 800976a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800976c:	f7fa fc0e 	bl	8003f8c <HAL_GetTick>
 8009770:	0003      	movs	r3, r0
 8009772:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2208      	movs	r2, #8
 800977c:	4013      	ands	r3, r2
 800977e:	2b08      	cmp	r3, #8
 8009780:	d12d      	bne.n	80097de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009784:	2280      	movs	r2, #128	@ 0x80
 8009786:	0391      	lsls	r1, r2, #14
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	4a47      	ldr	r2, [pc, #284]	@ (80098a8 <UART_CheckIdleState+0x14c>)
 800978c:	9200      	str	r2, [sp, #0]
 800978e:	2200      	movs	r2, #0
 8009790:	f000 f88e 	bl	80098b0 <UART_WaitOnFlagUntilTimeout>
 8009794:	1e03      	subs	r3, r0, #0
 8009796:	d022      	beq.n	80097de <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009798:	f3ef 8310 	mrs	r3, PRIMASK
 800979c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800979e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80097a2:	2301      	movs	r3, #1
 80097a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a8:	f383 8810 	msr	PRIMASK, r3
}
 80097ac:	46c0      	nop			@ (mov r8, r8)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2180      	movs	r1, #128	@ 0x80
 80097ba:	438a      	bics	r2, r1
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c4:	f383 8810 	msr	PRIMASK, r3
}
 80097c8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2288      	movs	r2, #136	@ 0x88
 80097ce:	2120      	movs	r1, #32
 80097d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2284      	movs	r2, #132	@ 0x84
 80097d6:	2100      	movs	r1, #0
 80097d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097da:	2303      	movs	r3, #3
 80097dc:	e060      	b.n	80098a0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2204      	movs	r2, #4
 80097e6:	4013      	ands	r3, r2
 80097e8:	2b04      	cmp	r3, #4
 80097ea:	d146      	bne.n	800987a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097ee:	2280      	movs	r2, #128	@ 0x80
 80097f0:	03d1      	lsls	r1, r2, #15
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	4a2c      	ldr	r2, [pc, #176]	@ (80098a8 <UART_CheckIdleState+0x14c>)
 80097f6:	9200      	str	r2, [sp, #0]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f000 f859 	bl	80098b0 <UART_WaitOnFlagUntilTimeout>
 80097fe:	1e03      	subs	r3, r0, #0
 8009800:	d03b      	beq.n	800987a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009802:	f3ef 8310 	mrs	r3, PRIMASK
 8009806:	60fb      	str	r3, [r7, #12]
  return(result);
 8009808:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800980a:	637b      	str	r3, [r7, #52]	@ 0x34
 800980c:	2301      	movs	r3, #1
 800980e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	f383 8810 	msr	PRIMASK, r3
}
 8009816:	46c0      	nop			@ (mov r8, r8)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4922      	ldr	r1, [pc, #136]	@ (80098ac <UART_CheckIdleState+0x150>)
 8009824:	400a      	ands	r2, r1
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800982a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f383 8810 	msr	PRIMASK, r3
}
 8009832:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009834:	f3ef 8310 	mrs	r3, PRIMASK
 8009838:	61bb      	str	r3, [r7, #24]
  return(result);
 800983a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800983c:	633b      	str	r3, [r7, #48]	@ 0x30
 800983e:	2301      	movs	r3, #1
 8009840:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	f383 8810 	msr	PRIMASK, r3
}
 8009848:	46c0      	nop			@ (mov r8, r8)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	689a      	ldr	r2, [r3, #8]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2101      	movs	r1, #1
 8009856:	438a      	bics	r2, r1
 8009858:	609a      	str	r2, [r3, #8]
 800985a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	f383 8810 	msr	PRIMASK, r3
}
 8009864:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	228c      	movs	r2, #140	@ 0x8c
 800986a:	2120      	movs	r1, #32
 800986c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2284      	movs	r2, #132	@ 0x84
 8009872:	2100      	movs	r1, #0
 8009874:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e012      	b.n	80098a0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2288      	movs	r2, #136	@ 0x88
 800987e:	2120      	movs	r1, #32
 8009880:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	228c      	movs	r2, #140	@ 0x8c
 8009886:	2120      	movs	r1, #32
 8009888:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2284      	movs	r2, #132	@ 0x84
 800989a:	2100      	movs	r1, #0
 800989c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	0018      	movs	r0, r3
 80098a2:	46bd      	mov	sp, r7
 80098a4:	b010      	add	sp, #64	@ 0x40
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	01ffffff 	.word	0x01ffffff
 80098ac:	fffffedf 	.word	0xfffffedf

080098b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	603b      	str	r3, [r7, #0]
 80098bc:	1dfb      	adds	r3, r7, #7
 80098be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098c0:	e051      	b.n	8009966 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	3301      	adds	r3, #1
 80098c6:	d04e      	beq.n	8009966 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098c8:	f7fa fb60 	bl	8003f8c <HAL_GetTick>
 80098cc:	0002      	movs	r2, r0
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	69ba      	ldr	r2, [r7, #24]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d302      	bcc.n	80098de <UART_WaitOnFlagUntilTimeout+0x2e>
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80098de:	2303      	movs	r3, #3
 80098e0:	e051      	b.n	8009986 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2204      	movs	r2, #4
 80098ea:	4013      	ands	r3, r2
 80098ec:	d03b      	beq.n	8009966 <UART_WaitOnFlagUntilTimeout+0xb6>
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2b80      	cmp	r3, #128	@ 0x80
 80098f2:	d038      	beq.n	8009966 <UART_WaitOnFlagUntilTimeout+0xb6>
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2b40      	cmp	r3, #64	@ 0x40
 80098f8:	d035      	beq.n	8009966 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69db      	ldr	r3, [r3, #28]
 8009900:	2208      	movs	r2, #8
 8009902:	4013      	ands	r3, r2
 8009904:	2b08      	cmp	r3, #8
 8009906:	d111      	bne.n	800992c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2208      	movs	r2, #8
 800990e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	0018      	movs	r0, r3
 8009914:	f000 f922 	bl	8009b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2290      	movs	r2, #144	@ 0x90
 800991c:	2108      	movs	r1, #8
 800991e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2284      	movs	r2, #132	@ 0x84
 8009924:	2100      	movs	r1, #0
 8009926:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	e02c      	b.n	8009986 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	69da      	ldr	r2, [r3, #28]
 8009932:	2380      	movs	r3, #128	@ 0x80
 8009934:	011b      	lsls	r3, r3, #4
 8009936:	401a      	ands	r2, r3
 8009938:	2380      	movs	r3, #128	@ 0x80
 800993a:	011b      	lsls	r3, r3, #4
 800993c:	429a      	cmp	r2, r3
 800993e:	d112      	bne.n	8009966 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2280      	movs	r2, #128	@ 0x80
 8009946:	0112      	lsls	r2, r2, #4
 8009948:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	0018      	movs	r0, r3
 800994e:	f000 f905 	bl	8009b5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2290      	movs	r2, #144	@ 0x90
 8009956:	2120      	movs	r1, #32
 8009958:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2284      	movs	r2, #132	@ 0x84
 800995e:	2100      	movs	r1, #0
 8009960:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e00f      	b.n	8009986 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	4013      	ands	r3, r2
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	425a      	negs	r2, r3
 8009976:	4153      	adcs	r3, r2
 8009978:	b2db      	uxtb	r3, r3
 800997a:	001a      	movs	r2, r3
 800997c:	1dfb      	adds	r3, r7, #7
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	d09e      	beq.n	80098c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	0018      	movs	r0, r3
 8009988:	46bd      	mov	sp, r7
 800998a:	b004      	add	sp, #16
 800998c:	bd80      	pop	{r7, pc}
	...

08009990 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b090      	sub	sp, #64	@ 0x40
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	1dbb      	adds	r3, r7, #6
 800999c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	1dba      	adds	r2, r7, #6
 80099a8:	215c      	movs	r1, #92	@ 0x5c
 80099aa:	8812      	ldrh	r2, [r2, #0]
 80099ac:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2290      	movs	r2, #144	@ 0x90
 80099b2:	2100      	movs	r1, #0
 80099b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	228c      	movs	r2, #140	@ 0x8c
 80099ba:	2122      	movs	r1, #34	@ 0x22
 80099bc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2280      	movs	r2, #128	@ 0x80
 80099c2:	589b      	ldr	r3, [r3, r2]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d02d      	beq.n	8009a24 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2280      	movs	r2, #128	@ 0x80
 80099cc:	589b      	ldr	r3, [r3, r2]
 80099ce:	4a40      	ldr	r2, [pc, #256]	@ (8009ad0 <UART_Start_Receive_DMA+0x140>)
 80099d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2280      	movs	r2, #128	@ 0x80
 80099d6:	589b      	ldr	r3, [r3, r2]
 80099d8:	4a3e      	ldr	r2, [pc, #248]	@ (8009ad4 <UART_Start_Receive_DMA+0x144>)
 80099da:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2280      	movs	r2, #128	@ 0x80
 80099e0:	589b      	ldr	r3, [r3, r2]
 80099e2:	4a3d      	ldr	r2, [pc, #244]	@ (8009ad8 <UART_Start_Receive_DMA+0x148>)
 80099e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2280      	movs	r2, #128	@ 0x80
 80099ea:	589b      	ldr	r3, [r3, r2]
 80099ec:	2200      	movs	r2, #0
 80099ee:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2280      	movs	r2, #128	@ 0x80
 80099f4:	5898      	ldr	r0, [r3, r2]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	3324      	adds	r3, #36	@ 0x24
 80099fc:	0019      	movs	r1, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a02:	001a      	movs	r2, r3
 8009a04:	1dbb      	adds	r3, r7, #6
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	f7fb fac4 	bl	8004f94 <HAL_DMA_Start_IT>
 8009a0c:	1e03      	subs	r3, r0, #0
 8009a0e:	d009      	beq.n	8009a24 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2290      	movs	r2, #144	@ 0x90
 8009a14:	2110      	movs	r1, #16
 8009a16:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	228c      	movs	r2, #140	@ 0x8c
 8009a1c:	2120      	movs	r1, #32
 8009a1e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e050      	b.n	8009ac6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d019      	beq.n	8009a60 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8009a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a36:	2301      	movs	r3, #1
 8009a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3c:	f383 8810 	msr	PRIMASK, r3
}
 8009a40:	46c0      	nop			@ (mov r8, r8)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2180      	movs	r1, #128	@ 0x80
 8009a4e:	0049      	lsls	r1, r1, #1
 8009a50:	430a      	orrs	r2, r1
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a56:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a5a:	f383 8810 	msr	PRIMASK, r3
}
 8009a5e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009a60:	f3ef 8310 	mrs	r3, PRIMASK
 8009a64:	613b      	str	r3, [r7, #16]
  return(result);
 8009a66:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f383 8810 	msr	PRIMASK, r3
}
 8009a74:	46c0      	nop			@ (mov r8, r8)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689a      	ldr	r2, [r3, #8]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2101      	movs	r1, #1
 8009a82:	430a      	orrs	r2, r1
 8009a84:	609a      	str	r2, [r3, #8]
 8009a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	f383 8810 	msr	PRIMASK, r3
}
 8009a90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009a92:	f3ef 8310 	mrs	r3, PRIMASK
 8009a96:	61fb      	str	r3, [r7, #28]
  return(result);
 8009a98:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009aa0:	6a3b      	ldr	r3, [r7, #32]
 8009aa2:	f383 8810 	msr	PRIMASK, r3
}
 8009aa6:	46c0      	nop			@ (mov r8, r8)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	689a      	ldr	r2, [r3, #8]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2140      	movs	r1, #64	@ 0x40
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	609a      	str	r2, [r3, #8]
 8009ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009abe:	f383 8810 	msr	PRIMASK, r3
}
 8009ac2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	b010      	add	sp, #64	@ 0x40
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	46c0      	nop			@ (mov r8, r8)
 8009ad0:	08009c29 	.word	0x08009c29
 8009ad4:	08009d59 	.word	0x08009d59
 8009ad8:	08009d9b 	.word	0x08009d9b

08009adc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08a      	sub	sp, #40	@ 0x28
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ae8:	60bb      	str	r3, [r7, #8]
  return(result);
 8009aea:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aee:	2301      	movs	r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f383 8810 	msr	PRIMASK, r3
}
 8009af8:	46c0      	nop			@ (mov r8, r8)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	21c0      	movs	r1, #192	@ 0xc0
 8009b06:	438a      	bics	r2, r1
 8009b08:	601a      	str	r2, [r3, #0]
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f383 8810 	msr	PRIMASK, r3
}
 8009b14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009b16:	f3ef 8310 	mrs	r3, PRIMASK
 8009b1a:	617b      	str	r3, [r7, #20]
  return(result);
 8009b1c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009b1e:	623b      	str	r3, [r7, #32]
 8009b20:	2301      	movs	r3, #1
 8009b22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	f383 8810 	msr	PRIMASK, r3
}
 8009b2a:	46c0      	nop			@ (mov r8, r8)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	689a      	ldr	r2, [r3, #8]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4908      	ldr	r1, [pc, #32]	@ (8009b58 <UART_EndTxTransfer+0x7c>)
 8009b38:	400a      	ands	r2, r1
 8009b3a:	609a      	str	r2, [r3, #8]
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	f383 8810 	msr	PRIMASK, r3
}
 8009b46:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2288      	movs	r2, #136	@ 0x88
 8009b4c:	2120      	movs	r1, #32
 8009b4e:	5099      	str	r1, [r3, r2]
}
 8009b50:	46c0      	nop			@ (mov r8, r8)
 8009b52:	46bd      	mov	sp, r7
 8009b54:	b00a      	add	sp, #40	@ 0x28
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	ff7fffff 	.word	0xff7fffff

08009b5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b08e      	sub	sp, #56	@ 0x38
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009b64:	f3ef 8310 	mrs	r3, PRIMASK
 8009b68:	617b      	str	r3, [r7, #20]
  return(result);
 8009b6a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b6e:	2301      	movs	r3, #1
 8009b70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	f383 8810 	msr	PRIMASK, r3
}
 8009b78:	46c0      	nop			@ (mov r8, r8)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4926      	ldr	r1, [pc, #152]	@ (8009c20 <UART_EndRxTransfer+0xc4>)
 8009b86:	400a      	ands	r2, r1
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	f383 8810 	msr	PRIMASK, r3
}
 8009b94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009b96:	f3ef 8310 	mrs	r3, PRIMASK
 8009b9a:	623b      	str	r3, [r7, #32]
  return(result);
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba6:	f383 8810 	msr	PRIMASK, r3
}
 8009baa:	46c0      	nop			@ (mov r8, r8)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	689a      	ldr	r2, [r3, #8]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	491b      	ldr	r1, [pc, #108]	@ (8009c24 <UART_EndRxTransfer+0xc8>)
 8009bb8:	400a      	ands	r2, r1
 8009bba:	609a      	str	r2, [r3, #8]
 8009bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc2:	f383 8810 	msr	PRIMASK, r3
}
 8009bc6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d118      	bne.n	8009c02 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8009bd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009bd6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bda:	2301      	movs	r3, #1
 8009bdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f383 8810 	msr	PRIMASK, r3
}
 8009be4:	46c0      	nop			@ (mov r8, r8)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2110      	movs	r1, #16
 8009bf2:	438a      	bics	r2, r1
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f383 8810 	msr	PRIMASK, r3
}
 8009c00:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	228c      	movs	r2, #140	@ 0x8c
 8009c06:	2120      	movs	r1, #32
 8009c08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009c16:	46c0      	nop			@ (mov r8, r8)
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	b00e      	add	sp, #56	@ 0x38
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	46c0      	nop			@ (mov r8, r8)
 8009c20:	fffffedf 	.word	0xfffffedf
 8009c24:	effffffe 	.word	0xeffffffe

08009c28 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b094      	sub	sp, #80	@ 0x50
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c34:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2220      	movs	r2, #32
 8009c3e:	4013      	ands	r3, r2
 8009c40:	d16f      	bne.n	8009d22 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8009c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c44:	225e      	movs	r2, #94	@ 0x5e
 8009c46:	2100      	movs	r1, #0
 8009c48:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c4e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c50:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c54:	2301      	movs	r3, #1
 8009c56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	f383 8810 	msr	PRIMASK, r3
}
 8009c5e:	46c0      	nop			@ (mov r8, r8)
 8009c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	493a      	ldr	r1, [pc, #232]	@ (8009d54 <UART_DMAReceiveCplt+0x12c>)
 8009c6c:	400a      	ands	r2, r1
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	f383 8810 	msr	PRIMASK, r3
}
 8009c7a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8009c80:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c86:	2301      	movs	r3, #1
 8009c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8c:	f383 8810 	msr	PRIMASK, r3
}
 8009c90:	46c0      	nop			@ (mov r8, r8)
 8009c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	689a      	ldr	r2, [r3, #8]
 8009c98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	438a      	bics	r2, r1
 8009ca0:	609a      	str	r2, [r3, #8]
 8009ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca8:	f383 8810 	msr	PRIMASK, r3
}
 8009cac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009cae:	f3ef 8310 	mrs	r3, PRIMASK
 8009cb2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009cb8:	2301      	movs	r3, #1
 8009cba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cbe:	f383 8810 	msr	PRIMASK, r3
}
 8009cc2:	46c0      	nop			@ (mov r8, r8)
 8009cc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689a      	ldr	r2, [r3, #8]
 8009cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2140      	movs	r1, #64	@ 0x40
 8009cd0:	438a      	bics	r2, r1
 8009cd2:	609a      	str	r2, [r3, #8]
 8009cd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cda:	f383 8810 	msr	PRIMASK, r3
}
 8009cde:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ce0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ce2:	228c      	movs	r2, #140	@ 0x8c
 8009ce4:	2120      	movs	r1, #32
 8009ce6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d118      	bne.n	8009d22 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8009cf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	f383 8810 	msr	PRIMASK, r3
}
 8009d04:	46c0      	nop			@ (mov r8, r8)
 8009d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2110      	movs	r1, #16
 8009d12:	438a      	bics	r2, r1
 8009d14:	601a      	str	r2, [r3, #0]
 8009d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	f383 8810 	msr	PRIMASK, r3
}
 8009d20:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d24:	2200      	movs	r2, #0
 8009d26:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d108      	bne.n	8009d42 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d32:	225c      	movs	r2, #92	@ 0x5c
 8009d34:	5a9a      	ldrh	r2, [r3, r2]
 8009d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d38:	0011      	movs	r1, r2
 8009d3a:	0018      	movs	r0, r3
 8009d3c:	f7f7 fe82 	bl	8001a44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d40:	e003      	b.n	8009d4a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8009d42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d44:	0018      	movs	r0, r3
 8009d46:	f7ff fab7 	bl	80092b8 <HAL_UART_RxCpltCallback>
}
 8009d4a:	46c0      	nop			@ (mov r8, r8)
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	b014      	add	sp, #80	@ 0x50
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	46c0      	nop			@ (mov r8, r8)
 8009d54:	fffffeff 	.word	0xfffffeff

08009d58 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d64:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d10a      	bne.n	8009d8a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	225c      	movs	r2, #92	@ 0x5c
 8009d78:	5a9b      	ldrh	r3, [r3, r2]
 8009d7a:	085b      	lsrs	r3, r3, #1
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	0011      	movs	r1, r2
 8009d82:	0018      	movs	r0, r3
 8009d84:	f7f7 fe5e 	bl	8001a44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d88:	e003      	b.n	8009d92 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	f7ff fa9b 	bl	80092c8 <HAL_UART_RxHalfCpltCallback>
}
 8009d92:	46c0      	nop			@ (mov r8, r8)
 8009d94:	46bd      	mov	sp, r7
 8009d96:	b004      	add	sp, #16
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b086      	sub	sp, #24
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2288      	movs	r2, #136	@ 0x88
 8009dac:	589b      	ldr	r3, [r3, r2]
 8009dae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	228c      	movs	r2, #140	@ 0x8c
 8009db4:	589b      	ldr	r3, [r3, r2]
 8009db6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	2280      	movs	r2, #128	@ 0x80
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	2b80      	cmp	r3, #128	@ 0x80
 8009dc4:	d10a      	bne.n	8009ddc <UART_DMAError+0x42>
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	2b21      	cmp	r3, #33	@ 0x21
 8009dca:	d107      	bne.n	8009ddc <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	2256      	movs	r2, #86	@ 0x56
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	0018      	movs	r0, r3
 8009dd8:	f7ff fe80 	bl	8009adc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	2240      	movs	r2, #64	@ 0x40
 8009de4:	4013      	ands	r3, r2
 8009de6:	2b40      	cmp	r3, #64	@ 0x40
 8009de8:	d10a      	bne.n	8009e00 <UART_DMAError+0x66>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2b22      	cmp	r3, #34	@ 0x22
 8009dee:	d107      	bne.n	8009e00 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	225e      	movs	r2, #94	@ 0x5e
 8009df4:	2100      	movs	r1, #0
 8009df6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	0018      	movs	r0, r3
 8009dfc:	f7ff feae 	bl	8009b5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	2290      	movs	r2, #144	@ 0x90
 8009e04:	589b      	ldr	r3, [r3, r2]
 8009e06:	2210      	movs	r2, #16
 8009e08:	431a      	orrs	r2, r3
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	2190      	movs	r1, #144	@ 0x90
 8009e0e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	0018      	movs	r0, r3
 8009e14:	f7ff fa60 	bl	80092d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e18:	46c0      	nop			@ (mov r8, r8)
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	b006      	add	sp, #24
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	225e      	movs	r2, #94	@ 0x5e
 8009e32:	2100      	movs	r1, #0
 8009e34:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2256      	movs	r2, #86	@ 0x56
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	0018      	movs	r0, r3
 8009e42:	f7ff fa49 	bl	80092d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e46:	46c0      	nop			@ (mov r8, r8)
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	b004      	add	sp, #16
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e5a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e60:	2200      	movs	r2, #0
 8009e62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2280      	movs	r2, #128	@ 0x80
 8009e68:	589b      	ldr	r3, [r3, r2]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d005      	beq.n	8009e7a <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2280      	movs	r2, #128	@ 0x80
 8009e72:	589b      	ldr	r3, [r3, r2]
 8009e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d12d      	bne.n	8009ed6 <UART_DMATxAbortCallback+0x88>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2256      	movs	r2, #86	@ 0x56
 8009e7e:	2100      	movs	r1, #0
 8009e80:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	225e      	movs	r2, #94	@ 0x5e
 8009e86:	2100      	movs	r1, #0
 8009e88:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2290      	movs	r2, #144	@ 0x90
 8009e8e:	2100      	movs	r1, #0
 8009e90:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	220f      	movs	r2, #15
 8009e98:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009e9e:	2380      	movs	r3, #128	@ 0x80
 8009ea0:	059b      	lsls	r3, r3, #22
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d107      	bne.n	8009eb6 <UART_DMATxAbortCallback+0x68>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	699a      	ldr	r2, [r3, #24]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2110      	movs	r1, #16
 8009eb2:	430a      	orrs	r2, r1
 8009eb4:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2288      	movs	r2, #136	@ 0x88
 8009eba:	2120      	movs	r1, #32
 8009ebc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	228c      	movs	r2, #140	@ 0x8c
 8009ec2:	2120      	movs	r1, #32
 8009ec4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	0018      	movs	r0, r3
 8009ed0:	f7ff fa0a 	bl	80092e8 <HAL_UART_AbortCpltCallback>
 8009ed4:	e000      	b.n	8009ed8 <UART_DMATxAbortCallback+0x8a>
      return;
 8009ed6:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	b004      	add	sp, #16
 8009edc:	bd80      	pop	{r7, pc}

08009ede <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b084      	sub	sp, #16
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eea:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2280      	movs	r2, #128	@ 0x80
 8009ef0:	589b      	ldr	r3, [r3, r2]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d004      	beq.n	8009f08 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d127      	bne.n	8009f58 <UART_DMARxAbortCallback+0x7a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2256      	movs	r2, #86	@ 0x56
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	225e      	movs	r2, #94	@ 0x5e
 8009f14:	2100      	movs	r1, #0
 8009f16:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2290      	movs	r2, #144	@ 0x90
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	220f      	movs	r2, #15
 8009f26:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	699a      	ldr	r2, [r3, #24]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2108      	movs	r1, #8
 8009f34:	430a      	orrs	r2, r1
 8009f36:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2288      	movs	r2, #136	@ 0x88
 8009f3c:	2120      	movs	r1, #32
 8009f3e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	228c      	movs	r2, #140	@ 0x8c
 8009f44:	2120      	movs	r1, #32
 8009f46:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	0018      	movs	r0, r3
 8009f52:	f7ff f9c9 	bl	80092e8 <HAL_UART_AbortCpltCallback>
 8009f56:	e000      	b.n	8009f5a <UART_DMARxAbortCallback+0x7c>
      return;
 8009f58:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	b004      	add	sp, #16
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009f68:	f3ef 8310 	mrs	r3, PRIMASK
 8009f6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f6e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f70:	617b      	str	r3, [r7, #20]
 8009f72:	2301      	movs	r3, #1
 8009f74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f383 8810 	msr	PRIMASK, r3
}
 8009f7c:	46c0      	nop			@ (mov r8, r8)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2140      	movs	r1, #64	@ 0x40
 8009f8a:	438a      	bics	r2, r1
 8009f8c:	601a      	str	r2, [r3, #0]
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	f383 8810 	msr	PRIMASK, r3
}
 8009f98:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2288      	movs	r2, #136	@ 0x88
 8009f9e:	2120      	movs	r1, #32
 8009fa0:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	0018      	movs	r0, r3
 8009fac:	f7ff f97c 	bl	80092a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fb0:	46c0      	nop			@ (mov r8, r8)
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	b006      	add	sp, #24
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
 8009fc4:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d101      	bne.n	8009fd0 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e05d      	b.n	800a08c <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2288      	movs	r2, #136	@ 0x88
 8009fd4:	589b      	ldr	r3, [r3, r2]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d107      	bne.n	8009fea <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2284      	movs	r2, #132	@ 0x84
 8009fde:	2100      	movs	r1, #0
 8009fe0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	f7f8 fc43 	bl	8002870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2288      	movs	r2, #136	@ 0x88
 8009fee:	2124      	movs	r1, #36	@ 0x24
 8009ff0:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	438a      	bics	r2, r1
 800a000:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a006:	2b00      	cmp	r3, #0
 800a008:	d003      	beq.n	800a012 <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	0018      	movs	r0, r3
 800a00e:	f7ff faf1 	bl	80095f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	0018      	movs	r0, r3
 800a016:	f7ff f96f 	bl	80092f8 <UART_SetConfig>
 800a01a:	0003      	movs	r3, r0
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d101      	bne.n	800a024 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e033      	b.n	800a08c <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	689a      	ldr	r2, [r3, #8]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2180      	movs	r1, #128	@ 0x80
 800a030:	01c9      	lsls	r1, r1, #7
 800a032:	430a      	orrs	r2, r1
 800a034:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	4a15      	ldr	r2, [pc, #84]	@ (800a094 <HAL_RS485Ex_Init+0xdc>)
 800a03e:	4013      	ands	r3, r2
 800a040:	0019      	movs	r1, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	430a      	orrs	r2, r1
 800a04a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	055b      	lsls	r3, r3, #21
 800a050:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	041b      	lsls	r3, r3, #16
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	4313      	orrs	r3, r2
 800a05a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a0d      	ldr	r2, [pc, #52]	@ (800a098 <HAL_RS485Ex_Init+0xe0>)
 800a064:	4013      	ands	r3, r2
 800a066:	0019      	movs	r1, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	697a      	ldr	r2, [r7, #20]
 800a06e:	430a      	orrs	r2, r1
 800a070:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2101      	movs	r1, #1
 800a07e:	430a      	orrs	r2, r1
 800a080:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	0018      	movs	r0, r3
 800a086:	f7ff fb69 	bl	800975c <UART_CheckIdleState>
 800a08a:	0003      	movs	r3, r0
}
 800a08c:	0018      	movs	r0, r3
 800a08e:	46bd      	mov	sp, r7
 800a090:	b006      	add	sp, #24
 800a092:	bd80      	pop	{r7, pc}
 800a094:	ffff7fff 	.word	0xffff7fff
 800a098:	fc00ffff 	.word	0xfc00ffff

0800a09c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0a4:	46c0      	nop			@ (mov r8, r8)
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	b002      	add	sp, #8
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a0b4:	46c0      	nop			@ (mov r8, r8)
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	b002      	add	sp, #8
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a0c4:	46c0      	nop			@ (mov r8, r8)
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	b002      	add	sp, #8
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2284      	movs	r2, #132	@ 0x84
 800a0d8:	5c9b      	ldrb	r3, [r3, r2]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d101      	bne.n	800a0e2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a0de:	2302      	movs	r3, #2
 800a0e0:	e027      	b.n	800a132 <HAL_UARTEx_DisableFifoMode+0x66>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2284      	movs	r2, #132	@ 0x84
 800a0e6:	2101      	movs	r1, #1
 800a0e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2288      	movs	r2, #136	@ 0x88
 800a0ee:	2124      	movs	r1, #36	@ 0x24
 800a0f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2101      	movs	r1, #1
 800a106:	438a      	bics	r2, r1
 800a108:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	4a0b      	ldr	r2, [pc, #44]	@ (800a13c <HAL_UARTEx_DisableFifoMode+0x70>)
 800a10e:	4013      	ands	r3, r2
 800a110:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2288      	movs	r2, #136	@ 0x88
 800a124:	2120      	movs	r1, #32
 800a126:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2284      	movs	r2, #132	@ 0x84
 800a12c:	2100      	movs	r1, #0
 800a12e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	0018      	movs	r0, r3
 800a134:	46bd      	mov	sp, r7
 800a136:	b004      	add	sp, #16
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	46c0      	nop			@ (mov r8, r8)
 800a13c:	dfffffff 	.word	0xdfffffff

0800a140 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2284      	movs	r2, #132	@ 0x84
 800a14e:	5c9b      	ldrb	r3, [r3, r2]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d101      	bne.n	800a158 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a154:	2302      	movs	r3, #2
 800a156:	e02e      	b.n	800a1b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2284      	movs	r2, #132	@ 0x84
 800a15c:	2101      	movs	r1, #1
 800a15e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2288      	movs	r2, #136	@ 0x88
 800a164:	2124      	movs	r1, #36	@ 0x24
 800a166:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2101      	movs	r1, #1
 800a17c:	438a      	bics	r2, r1
 800a17e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	00db      	lsls	r3, r3, #3
 800a188:	08d9      	lsrs	r1, r3, #3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	430a      	orrs	r2, r1
 800a192:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	0018      	movs	r0, r3
 800a198:	f000 f8bc 	bl	800a314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2288      	movs	r2, #136	@ 0x88
 800a1a8:	2120      	movs	r1, #32
 800a1aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2284      	movs	r2, #132	@ 0x84
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	0018      	movs	r0, r3
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	b004      	add	sp, #16
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2284      	movs	r2, #132	@ 0x84
 800a1ce:	5c9b      	ldrb	r3, [r3, r2]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d101      	bne.n	800a1d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	e02f      	b.n	800a238 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2284      	movs	r2, #132	@ 0x84
 800a1dc:	2101      	movs	r1, #1
 800a1de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2288      	movs	r2, #136	@ 0x88
 800a1e4:	2124      	movs	r1, #36	@ 0x24
 800a1e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	438a      	bics	r2, r1
 800a1fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	4a0e      	ldr	r2, [pc, #56]	@ (800a240 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800a208:	4013      	ands	r3, r2
 800a20a:	0019      	movs	r1, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	683a      	ldr	r2, [r7, #0]
 800a212:	430a      	orrs	r2, r1
 800a214:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	0018      	movs	r0, r3
 800a21a:	f000 f87b 	bl	800a314 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2288      	movs	r2, #136	@ 0x88
 800a22a:	2120      	movs	r1, #32
 800a22c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2284      	movs	r2, #132	@ 0x84
 800a232:	2100      	movs	r1, #0
 800a234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	0018      	movs	r0, r3
 800a23a:	46bd      	mov	sp, r7
 800a23c:	b004      	add	sp, #16
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	f1ffffff 	.word	0xf1ffffff

0800a244 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a244:	b5b0      	push	{r4, r5, r7, lr}
 800a246:	b08a      	sub	sp, #40	@ 0x28
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	1dbb      	adds	r3, r7, #6
 800a250:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	228c      	movs	r2, #140	@ 0x8c
 800a256:	589b      	ldr	r3, [r3, r2]
 800a258:	2b20      	cmp	r3, #32
 800a25a:	d156      	bne.n	800a30a <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a262:	1dbb      	adds	r3, r7, #6
 800a264:	881b      	ldrh	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d101      	bne.n	800a26e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e04e      	b.n	800a30c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	689a      	ldr	r2, [r3, #8]
 800a272:	2380      	movs	r3, #128	@ 0x80
 800a274:	015b      	lsls	r3, r3, #5
 800a276:	429a      	cmp	r2, r3
 800a278:	d109      	bne.n	800a28e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d105      	bne.n	800a28e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	2201      	movs	r2, #1
 800a286:	4013      	ands	r3, r2
 800a288:	d001      	beq.n	800a28e <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e03e      	b.n	800a30c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2201      	movs	r2, #1
 800a292:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a29a:	2527      	movs	r5, #39	@ 0x27
 800a29c:	197c      	adds	r4, r7, r5
 800a29e:	1dbb      	adds	r3, r7, #6
 800a2a0:	881a      	ldrh	r2, [r3, #0]
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	0018      	movs	r0, r3
 800a2a8:	f7ff fb72 	bl	8009990 <UART_Start_Receive_DMA>
 800a2ac:	0003      	movs	r3, r0
 800a2ae:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a2b0:	197b      	adds	r3, r7, r5
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d124      	bne.n	800a302 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d11c      	bne.n	800a2fa <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2210      	movs	r2, #16
 800a2c6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a2c8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2cc:	617b      	str	r3, [r7, #20]
  return(result);
 800a2ce:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2d0:	623b      	str	r3, [r7, #32]
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	f383 8810 	msr	PRIMASK, r3
}
 800a2dc:	46c0      	nop			@ (mov r8, r8)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2110      	movs	r1, #16
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2f2:	69fb      	ldr	r3, [r7, #28]
 800a2f4:	f383 8810 	msr	PRIMASK, r3
}
 800a2f8:	e003      	b.n	800a302 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a2fa:	2327      	movs	r3, #39	@ 0x27
 800a2fc:	18fb      	adds	r3, r7, r3
 800a2fe:	2201      	movs	r2, #1
 800a300:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800a302:	2327      	movs	r3, #39	@ 0x27
 800a304:	18fb      	adds	r3, r7, r3
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	e000      	b.n	800a30c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800a30a:	2302      	movs	r3, #2
  }
}
 800a30c:	0018      	movs	r0, r3
 800a30e:	46bd      	mov	sp, r7
 800a310:	b00a      	add	sp, #40	@ 0x28
 800a312:	bdb0      	pop	{r4, r5, r7, pc}

0800a314 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a320:	2b00      	cmp	r3, #0
 800a322:	d108      	bne.n	800a336 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	226a      	movs	r2, #106	@ 0x6a
 800a328:	2101      	movs	r1, #1
 800a32a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2268      	movs	r2, #104	@ 0x68
 800a330:	2101      	movs	r1, #1
 800a332:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a334:	e043      	b.n	800a3be <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a336:	260f      	movs	r6, #15
 800a338:	19bb      	adds	r3, r7, r6
 800a33a:	2208      	movs	r2, #8
 800a33c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a33e:	200e      	movs	r0, #14
 800a340:	183b      	adds	r3, r7, r0
 800a342:	2208      	movs	r2, #8
 800a344:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	0e5b      	lsrs	r3, r3, #25
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	240d      	movs	r4, #13
 800a352:	193b      	adds	r3, r7, r4
 800a354:	2107      	movs	r1, #7
 800a356:	400a      	ands	r2, r1
 800a358:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	0f5b      	lsrs	r3, r3, #29
 800a362:	b2da      	uxtb	r2, r3
 800a364:	250c      	movs	r5, #12
 800a366:	197b      	adds	r3, r7, r5
 800a368:	2107      	movs	r1, #7
 800a36a:	400a      	ands	r2, r1
 800a36c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a36e:	183b      	adds	r3, r7, r0
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	197a      	adds	r2, r7, r5
 800a374:	7812      	ldrb	r2, [r2, #0]
 800a376:	4914      	ldr	r1, [pc, #80]	@ (800a3c8 <UARTEx_SetNbDataToProcess+0xb4>)
 800a378:	5c8a      	ldrb	r2, [r1, r2]
 800a37a:	435a      	muls	r2, r3
 800a37c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a37e:	197b      	adds	r3, r7, r5
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	4a12      	ldr	r2, [pc, #72]	@ (800a3cc <UARTEx_SetNbDataToProcess+0xb8>)
 800a384:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a386:	0019      	movs	r1, r3
 800a388:	f7f5 ff48 	bl	800021c <__divsi3>
 800a38c:	0003      	movs	r3, r0
 800a38e:	b299      	uxth	r1, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	226a      	movs	r2, #106	@ 0x6a
 800a394:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a396:	19bb      	adds	r3, r7, r6
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	193a      	adds	r2, r7, r4
 800a39c:	7812      	ldrb	r2, [r2, #0]
 800a39e:	490a      	ldr	r1, [pc, #40]	@ (800a3c8 <UARTEx_SetNbDataToProcess+0xb4>)
 800a3a0:	5c8a      	ldrb	r2, [r1, r2]
 800a3a2:	435a      	muls	r2, r3
 800a3a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a3a6:	193b      	adds	r3, r7, r4
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	4a08      	ldr	r2, [pc, #32]	@ (800a3cc <UARTEx_SetNbDataToProcess+0xb8>)
 800a3ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a3ae:	0019      	movs	r1, r3
 800a3b0:	f7f5 ff34 	bl	800021c <__divsi3>
 800a3b4:	0003      	movs	r3, r0
 800a3b6:	b299      	uxth	r1, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2268      	movs	r2, #104	@ 0x68
 800a3bc:	5299      	strh	r1, [r3, r2]
}
 800a3be:	46c0      	nop			@ (mov r8, r8)
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	b005      	add	sp, #20
 800a3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3c6:	46c0      	nop			@ (mov r8, r8)
 800a3c8:	0800a748 	.word	0x0800a748
 800a3cc:	0800a750 	.word	0x0800a750

0800a3d0 <memset>:
 800a3d0:	0003      	movs	r3, r0
 800a3d2:	1882      	adds	r2, r0, r2
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d100      	bne.n	800a3da <memset+0xa>
 800a3d8:	4770      	bx	lr
 800a3da:	7019      	strb	r1, [r3, #0]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	e7f9      	b.n	800a3d4 <memset+0x4>

0800a3e0 <__libc_init_array>:
 800a3e0:	b570      	push	{r4, r5, r6, lr}
 800a3e2:	2600      	movs	r6, #0
 800a3e4:	4c0c      	ldr	r4, [pc, #48]	@ (800a418 <__libc_init_array+0x38>)
 800a3e6:	4d0d      	ldr	r5, [pc, #52]	@ (800a41c <__libc_init_array+0x3c>)
 800a3e8:	1b64      	subs	r4, r4, r5
 800a3ea:	10a4      	asrs	r4, r4, #2
 800a3ec:	42a6      	cmp	r6, r4
 800a3ee:	d109      	bne.n	800a404 <__libc_init_array+0x24>
 800a3f0:	2600      	movs	r6, #0
 800a3f2:	f000 f823 	bl	800a43c <_init>
 800a3f6:	4c0a      	ldr	r4, [pc, #40]	@ (800a420 <__libc_init_array+0x40>)
 800a3f8:	4d0a      	ldr	r5, [pc, #40]	@ (800a424 <__libc_init_array+0x44>)
 800a3fa:	1b64      	subs	r4, r4, r5
 800a3fc:	10a4      	asrs	r4, r4, #2
 800a3fe:	42a6      	cmp	r6, r4
 800a400:	d105      	bne.n	800a40e <__libc_init_array+0x2e>
 800a402:	bd70      	pop	{r4, r5, r6, pc}
 800a404:	00b3      	lsls	r3, r6, #2
 800a406:	58eb      	ldr	r3, [r5, r3]
 800a408:	4798      	blx	r3
 800a40a:	3601      	adds	r6, #1
 800a40c:	e7ee      	b.n	800a3ec <__libc_init_array+0xc>
 800a40e:	00b3      	lsls	r3, r6, #2
 800a410:	58eb      	ldr	r3, [r5, r3]
 800a412:	4798      	blx	r3
 800a414:	3601      	adds	r6, #1
 800a416:	e7f2      	b.n	800a3fe <__libc_init_array+0x1e>
 800a418:	0800a758 	.word	0x0800a758
 800a41c:	0800a758 	.word	0x0800a758
 800a420:	0800a75c 	.word	0x0800a75c
 800a424:	0800a758 	.word	0x0800a758

0800a428 <memcpy>:
 800a428:	2300      	movs	r3, #0
 800a42a:	b510      	push	{r4, lr}
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d100      	bne.n	800a432 <memcpy+0xa>
 800a430:	bd10      	pop	{r4, pc}
 800a432:	5ccc      	ldrb	r4, [r1, r3]
 800a434:	54c4      	strb	r4, [r0, r3]
 800a436:	3301      	adds	r3, #1
 800a438:	e7f8      	b.n	800a42c <memcpy+0x4>
	...

0800a43c <_init>:
 800a43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43e:	46c0      	nop			@ (mov r8, r8)
 800a440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a442:	bc08      	pop	{r3}
 800a444:	469e      	mov	lr, r3
 800a446:	4770      	bx	lr

0800a448 <_fini>:
 800a448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a44a:	46c0      	nop			@ (mov r8, r8)
 800a44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44e:	bc08      	pop	{r3}
 800a450:	469e      	mov	lr, r3
 800a452:	4770      	bx	lr
