
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  080064b0  080064b0  000074b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800678c  0800678c  00008070  2**0
                  CONTENTS
  4 .ARM          00000000  0800678c  0800678c  00008070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800678c  0800678c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800678c  0800678c  0000778c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006790  08006790  00007790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006794  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000070  08006804  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  08006804  000085b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001743e  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d91  00000000  00000000  0001f4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  00022268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001129  00000000  00000000  00023810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ce8  00000000  00000000  00024939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3cb  00000000  00000000  00027621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098ac8  00000000  00000000  000419ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da4b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005068  00000000  00000000  000da4f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000df560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006498 	.word	0x08006498

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006498 	.word	0x08006498

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_ADC_ConvCpltCallback>:
{
	BNO_Ready = 1;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 9; i++)
 80003fc:	230f      	movs	r3, #15
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	e011      	b.n	800042a <HAL_ADC_ConvCpltCallback+0x36>
	{
		holding_register_database[i + 1] = (uint16_t)raw_data[i];
 8000406:	200f      	movs	r0, #15
 8000408:	183b      	adds	r3, r7, r0
 800040a:	781a      	ldrb	r2, [r3, #0]
 800040c:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <HAL_ADC_ConvCpltCallback+0x4c>)
 800040e:	0092      	lsls	r2, r2, #2
 8000410:	58d1      	ldr	r1, [r2, r3]
 8000412:	183b      	adds	r3, r7, r0
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	1c5a      	adds	r2, r3, #1
 8000418:	b289      	uxth	r1, r1
 800041a:	4b0a      	ldr	r3, [pc, #40]	@ (8000444 <HAL_ADC_ConvCpltCallback+0x50>)
 800041c:	0052      	lsls	r2, r2, #1
 800041e:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < 9; i++)
 8000420:	183b      	adds	r3, r7, r0
 8000422:	781a      	ldrb	r2, [r3, #0]
 8000424:	183b      	adds	r3, r7, r0
 8000426:	3201      	adds	r2, #1
 8000428:	701a      	strb	r2, [r3, #0]
 800042a:	230f      	movs	r3, #15
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b08      	cmp	r3, #8
 8000432:	d9e8      	bls.n	8000406 <HAL_ADC_ConvCpltCallback+0x12>
	}
}
 8000434:	46c0      	nop			@ (mov r8, r8)
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b004      	add	sp, #16
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	2000038c 	.word	0x2000038c
 8000444:	20000000 	.word	0x20000000

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044e:	f001 f994 	bl	800177a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000452:	f000 f84b 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000456:	f000 fb2d 	bl	8000ab4 <MX_GPIO_Init>
  MX_DMA_Init();
 800045a:	f000 fb05 	bl	8000a68 <MX_DMA_Init>
  MX_ADC1_Init();
 800045e:	f000 f889 	bl	8000574 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000462:	f000 f961 	bl	8000728 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000466:	f000 f99f 	bl	80007a8 <MX_SPI1_Init>
  MX_TIM1_Init();
 800046a:	f000 f9db 	bl	8000824 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800046e:	f000 faab 	bl	80009c8 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000472:	f000 fa83 	bl	800097c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  modbus_set_rx(255);
 8000476:	20ff      	movs	r0, #255	@ 0xff
 8000478:	f000 fdcc 	bl	8001014 <modbus_set_rx>
  HAL_ADC_Start_DMA(&hadc1, raw_data, 9);
 800047c:	4918      	ldr	r1, [pc, #96]	@ (80004e0 <main+0x98>)
 800047e:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <main+0x9c>)
 8000480:	2209      	movs	r2, #9
 8000482:	0018      	movs	r0, r3
 8000484:	f001 fce4 	bl	8001e50 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(modbus_rx())
 8000488:	f000 fdb0 	bl	8000fec <modbus_rx>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d0fb      	beq.n	8000488 <main+0x40>
	  {
		  int8_t status = 0;
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 8000496:	2000      	movs	r0, #0
 8000498:	f000 fbb0 	bl	8000bfc <get_rx_buffer>
 800049c:	0003      	movs	r3, r0
 800049e:	001a      	movs	r2, r3
 80004a0:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <main+0xa0>)
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d114      	bne.n	80004d2 <main+0x8a>
		  {
			  switch(get_rx_buffer(1))
 80004a8:	2001      	movs	r0, #1
 80004aa:	f000 fba7 	bl	8000bfc <get_rx_buffer>
 80004ae:	0003      	movs	r3, r0
 80004b0:	2b03      	cmp	r3, #3
 80004b2:	d002      	beq.n	80004ba <main+0x72>
 80004b4:	2b10      	cmp	r3, #16
 80004b6:	d006      	beq.n	80004c6 <main+0x7e>
 80004b8:	e00b      	b.n	80004d2 <main+0x8a>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 80004ba:	1dfc      	adds	r4, r7, #7
 80004bc:	f000 fbb4 	bl	8000c28 <return_holding_registers>
 80004c0:	0003      	movs	r3, r0
 80004c2:	7023      	strb	r3, [r4, #0]
					  break;
 80004c4:	e005      	b.n	80004d2 <main+0x8a>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 80004c6:	1dfc      	adds	r4, r7, #7
 80004c8:	f000 fc3e 	bl	8000d48 <edit_multiple_registers>
 80004cc:	0003      	movs	r3, r0
 80004ce:	7023      	strb	r3, [r4, #0]
					  break;
 80004d0:	46c0      	nop			@ (mov r8, r8)
			  if(status != 0)
			  {
				  // log error in a queue
			  }
		  }
		  status = modbus_set_rx(255); // may be able to set size to 12
 80004d2:	1dfc      	adds	r4, r7, #7
 80004d4:	20ff      	movs	r0, #255	@ 0xff
 80004d6:	f000 fd9d 	bl	8001014 <modbus_set_rx>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
	  if(modbus_rx())
 80004de:	e7d3      	b.n	8000488 <main+0x40>
 80004e0:	2000038c 	.word	0x2000038c
 80004e4:	2000008c 	.word	0x2000008c
 80004e8:	20000000 	.word	0x20000000

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b08f      	sub	sp, #60	@ 0x3c
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	2418      	movs	r4, #24
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	0018      	movs	r0, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f005 ff9f 	bl	8006440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	0018      	movs	r0, r3
 8000506:	2314      	movs	r3, #20
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f005 ff98 	bl	8006440 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000510:	193b      	adds	r3, r7, r4
 8000512:	2202      	movs	r2, #2
 8000514:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2280      	movs	r2, #128	@ 0x80
 800051a:	0052      	lsls	r2, r2, #1
 800051c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	0152      	lsls	r2, r2, #5
 8000524:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2240      	movs	r2, #64	@ 0x40
 800052a:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052c:	193b      	adds	r3, r7, r4
 800052e:	0018      	movs	r0, r3
 8000530:	f002 fe0e 	bl	8003150 <HAL_RCC_OscConfig>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000538:	f000 fb4c 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2207      	movs	r2, #7
 8000540:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2100      	movs	r1, #0
 800055e:	0018      	movs	r0, r3
 8000560:	f003 f81c 	bl	800359c <HAL_RCC_ClockConfig>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000568:	f000 fb34 	bl	8000bd4 <Error_Handler>
  }
}
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b00f      	add	sp, #60	@ 0x3c
 8000572:	bd90      	pop	{r4, r7, pc}

08000574 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	0018      	movs	r0, r3
 800057e:	230c      	movs	r3, #12
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f005 ff5c 	bl	8006440 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000588:	4b5d      	ldr	r3, [pc, #372]	@ (8000700 <MX_ADC1_Init+0x18c>)
 800058a:	4a5e      	ldr	r2, [pc, #376]	@ (8000704 <MX_ADC1_Init+0x190>)
 800058c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800058e:	4b5c      	ldr	r3, [pc, #368]	@ (8000700 <MX_ADC1_Init+0x18c>)
 8000590:	22c0      	movs	r2, #192	@ 0xc0
 8000592:	0612      	lsls	r2, r2, #24
 8000594:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000596:	4b5a      	ldr	r3, [pc, #360]	@ (8000700 <MX_ADC1_Init+0x18c>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800059c:	4b58      	ldr	r3, [pc, #352]	@ (8000700 <MX_ADC1_Init+0x18c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80005a2:	4b57      	ldr	r3, [pc, #348]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	0612      	lsls	r2, r2, #24
 80005a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005aa:	4b55      	ldr	r3, [pc, #340]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80005ac:	2204      	movs	r2, #4
 80005ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005b0:	4b53      	ldr	r3, [pc, #332]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80005b6:	4b52      	ldr	r3, [pc, #328]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005bc:	4b50      	ldr	r3, [pc, #320]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80005be:	2201      	movs	r2, #1
 80005c0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 80005c2:	4b4f      	ldr	r3, [pc, #316]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c8:	4b4d      	ldr	r3, [pc, #308]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ce:	4b4c      	ldr	r3, [pc, #304]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80005d6:	222c      	movs	r2, #44	@ 0x2c
 80005d8:	2101      	movs	r1, #1
 80005da:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005dc:	4b48      	ldr	r3, [pc, #288]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80005e2:	4b47      	ldr	r3, [pc, #284]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005e8:	4b45      	ldr	r3, [pc, #276]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80005ea:	223c      	movs	r2, #60	@ 0x3c
 80005ec:	2100      	movs	r1, #0
 80005ee:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005f0:	4b43      	ldr	r3, [pc, #268]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f6:	4b42      	ldr	r3, [pc, #264]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f001 fa83 	bl	8001b04 <HAL_ADC_Init>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000602:	f000 fae7 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2201      	movs	r2, #1
 8000610:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	1d3a      	adds	r2, r7, #4
 8000614:	4b3a      	ldr	r3, [pc, #232]	@ (8000700 <MX_ADC1_Init+0x18c>)
 8000616:	0011      	movs	r1, r2
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fcb7 	bl	8001f8c <HAL_ADC_ConfigChannel>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000622:	f000 fad7 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	4a37      	ldr	r2, [pc, #220]	@ (8000708 <MX_ADC1_Init+0x194>)
 800062a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062c:	1d3a      	adds	r2, r7, #4
 800062e:	4b34      	ldr	r3, [pc, #208]	@ (8000700 <MX_ADC1_Init+0x18c>)
 8000630:	0011      	movs	r1, r2
 8000632:	0018      	movs	r0, r3
 8000634:	f001 fcaa 	bl	8001f8c <HAL_ADC_ConfigChannel>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 800063c:	f000 faca 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	4a32      	ldr	r2, [pc, #200]	@ (800070c <MX_ADC1_Init+0x198>)
 8000644:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000646:	1d3a      	adds	r2, r7, #4
 8000648:	4b2d      	ldr	r3, [pc, #180]	@ (8000700 <MX_ADC1_Init+0x18c>)
 800064a:	0011      	movs	r1, r2
 800064c:	0018      	movs	r0, r3
 800064e:	f001 fc9d 	bl	8001f8c <HAL_ADC_ConfigChannel>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000656:	f000 fabd 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	4a2c      	ldr	r2, [pc, #176]	@ (8000710 <MX_ADC1_Init+0x19c>)
 800065e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000660:	1d3a      	adds	r2, r7, #4
 8000662:	4b27      	ldr	r3, [pc, #156]	@ (8000700 <MX_ADC1_Init+0x18c>)
 8000664:	0011      	movs	r1, r2
 8000666:	0018      	movs	r0, r3
 8000668:	f001 fc90 	bl	8001f8c <HAL_ADC_ConfigChannel>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000670:	f000 fab0 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4a27      	ldr	r2, [pc, #156]	@ (8000714 <MX_ADC1_Init+0x1a0>)
 8000678:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800067a:	1d3a      	adds	r2, r7, #4
 800067c:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <MX_ADC1_Init+0x18c>)
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f001 fc83 	bl	8001f8c <HAL_ADC_ConfigChannel>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800068a:	f000 faa3 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4a21      	ldr	r2, [pc, #132]	@ (8000718 <MX_ADC1_Init+0x1a4>)
 8000692:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000694:	1d3a      	adds	r2, r7, #4
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MX_ADC1_Init+0x18c>)
 8000698:	0011      	movs	r1, r2
 800069a:	0018      	movs	r0, r3
 800069c:	f001 fc76 	bl	8001f8c <HAL_ADC_ConfigChannel>
 80006a0:	1e03      	subs	r3, r0, #0
 80006a2:	d001      	beq.n	80006a8 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80006a4:	f000 fa96 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4a1c      	ldr	r2, [pc, #112]	@ (800071c <MX_ADC1_Init+0x1a8>)
 80006ac:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ae:	1d3a      	adds	r2, r7, #4
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80006b2:	0011      	movs	r1, r2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fc69 	bl	8001f8c <HAL_ADC_ConfigChannel>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80006be:	f000 fa89 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4a16      	ldr	r2, [pc, #88]	@ (8000720 <MX_ADC1_Init+0x1ac>)
 80006c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c8:	1d3a      	adds	r2, r7, #4
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 fc5c 	bl	8001f8c <HAL_ADC_ConfigChannel>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC1_Init+0x168>
  {
    Error_Handler();
 80006d8:	f000 fa7c 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4a11      	ldr	r2, [pc, #68]	@ (8000724 <MX_ADC1_Init+0x1b0>)
 80006e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e2:	1d3a      	adds	r2, r7, #4
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_ADC1_Init+0x18c>)
 80006e6:	0011      	movs	r1, r2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f001 fc4f 	bl	8001f8c <HAL_ADC_ConfigChannel>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 80006f2:	f000 fa6f 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b004      	add	sp, #16
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	2000008c 	.word	0x2000008c
 8000704:	40012400 	.word	0x40012400
 8000708:	04000002 	.word	0x04000002
 800070c:	08000004 	.word	0x08000004
 8000710:	0c000008 	.word	0x0c000008
 8000714:	10000010 	.word	0x10000010
 8000718:	14000020 	.word	0x14000020
 800071c:	18000040 	.word	0x18000040
 8000720:	1c000080 	.word	0x1c000080
 8000724:	20000100 	.word	0x20000100

08000728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800072c:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <MX_I2C1_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	@ (80007a0 <MX_I2C1_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100412;
 8000732:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <MX_I2C1_Init+0x74>)
 8000734:	4a1b      	ldr	r2, [pc, #108]	@ (80007a4 <MX_I2C1_Init+0x7c>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000738:	4b18      	ldr	r3, [pc, #96]	@ (800079c <MX_I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073e:	4b17      	ldr	r3, [pc, #92]	@ (800079c <MX_I2C1_Init+0x74>)
 8000740:	2201      	movs	r2, #1
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b15      	ldr	r3, [pc, #84]	@ (800079c <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800074a:	4b14      	ldr	r3, [pc, #80]	@ (800079c <MX_I2C1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <MX_I2C1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075c:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <MX_I2C1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000762:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <MX_I2C1_Init+0x74>)
 8000764:	0018      	movs	r0, r3
 8000766:	f002 fbb5 	bl	8002ed4 <HAL_I2C_Init>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800076e:	f000 fa31 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000772:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <MX_I2C1_Init+0x74>)
 8000774:	2100      	movs	r1, #0
 8000776:	0018      	movs	r0, r3
 8000778:	f002 fc52 	bl	8003020 <HAL_I2CEx_ConfigAnalogFilter>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000780:	f000 fa28 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000784:	4b05      	ldr	r3, [pc, #20]	@ (800079c <MX_I2C1_Init+0x74>)
 8000786:	2100      	movs	r1, #0
 8000788:	0018      	movs	r0, r3
 800078a:	f002 fc95 	bl	80030b8 <HAL_I2CEx_ConfigDigitalFilter>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000792:	f000 fa1f 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000014c 	.word	0x2000014c
 80007a0:	40005400 	.word	0x40005400
 80007a4:	00100412 	.word	0x00100412

080007a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <MX_SPI1_Init+0x74>)
 80007ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000820 <MX_SPI1_Init+0x78>)
 80007b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_SPI1_Init+0x74>)
 80007b4:	2282      	movs	r2, #130	@ 0x82
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ba:	4b18      	ldr	r3, [pc, #96]	@ (800081c <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c0:	4b16      	ldr	r3, [pc, #88]	@ (800081c <MX_SPI1_Init+0x74>)
 80007c2:	22e0      	movs	r2, #224	@ 0xe0
 80007c4:	00d2      	lsls	r2, r2, #3
 80007c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_SPI1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <MX_SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_SPI1_Init+0x74>)
 80007d6:	2280      	movs	r2, #128	@ 0x80
 80007d8:	0092      	lsls	r2, r2, #2
 80007da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <MX_SPI1_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_SPI1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <MX_SPI1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_SPI1_Init+0x74>)
 80007f6:	2207      	movs	r2, #7
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <MX_SPI1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_SPI1_Init+0x74>)
 8000802:	2208      	movs	r2, #8
 8000804:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000806:	4b05      	ldr	r3, [pc, #20]	@ (800081c <MX_SPI1_Init+0x74>)
 8000808:	0018      	movs	r0, r3
 800080a:	f003 f969 	bl	8003ae0 <HAL_SPI_Init>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 f9df 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200001fc 	.word	0x200001fc
 8000820:	40013000 	.word	0x40013000

08000824 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b098      	sub	sp, #96	@ 0x60
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082a:	2354      	movs	r3, #84	@ 0x54
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	0018      	movs	r0, r3
 8000830:	230c      	movs	r3, #12
 8000832:	001a      	movs	r2, r3
 8000834:	2100      	movs	r1, #0
 8000836:	f005 fe03 	bl	8006440 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083a:	2338      	movs	r3, #56	@ 0x38
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	0018      	movs	r0, r3
 8000840:	231c      	movs	r3, #28
 8000842:	001a      	movs	r2, r3
 8000844:	2100      	movs	r1, #0
 8000846:	f005 fdfb 	bl	8006440 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	0018      	movs	r0, r3
 800084e:	2334      	movs	r3, #52	@ 0x34
 8000850:	001a      	movs	r2, r3
 8000852:	2100      	movs	r1, #0
 8000854:	f005 fdf4 	bl	8006440 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000858:	4b45      	ldr	r3, [pc, #276]	@ (8000970 <MX_TIM1_Init+0x14c>)
 800085a:	4a46      	ldr	r2, [pc, #280]	@ (8000974 <MX_TIM1_Init+0x150>)
 800085c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800085e:	4b44      	ldr	r3, [pc, #272]	@ (8000970 <MX_TIM1_Init+0x14c>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000864:	4b42      	ldr	r3, [pc, #264]	@ (8000970 <MX_TIM1_Init+0x14c>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800086a:	4b41      	ldr	r3, [pc, #260]	@ (8000970 <MX_TIM1_Init+0x14c>)
 800086c:	4a42      	ldr	r2, [pc, #264]	@ (8000978 <MX_TIM1_Init+0x154>)
 800086e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b3f      	ldr	r3, [pc, #252]	@ (8000970 <MX_TIM1_Init+0x14c>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000876:	4b3e      	ldr	r3, [pc, #248]	@ (8000970 <MX_TIM1_Init+0x14c>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087c:	4b3c      	ldr	r3, [pc, #240]	@ (8000970 <MX_TIM1_Init+0x14c>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000882:	4b3b      	ldr	r3, [pc, #236]	@ (8000970 <MX_TIM1_Init+0x14c>)
 8000884:	0018      	movs	r0, r3
 8000886:	f003 fa3b 	bl	8003d00 <HAL_TIM_PWM_Init>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 f9a1 	bl	8000bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000892:	2154      	movs	r1, #84	@ 0x54
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a6:	187a      	adds	r2, r7, r1
 80008a8:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <MX_TIM1_Init+0x14c>)
 80008aa:	0011      	movs	r1, r2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f003 fe9f 	bl	80045f0 <HAL_TIMEx_MasterConfigSynchronization>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008b6:	f000 f98d 	bl	8000bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ba:	2138      	movs	r1, #56	@ 0x38
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2260      	movs	r2, #96	@ 0x60
 80008c0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e6:	1879      	adds	r1, r7, r1
 80008e8:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <MX_TIM1_Init+0x14c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	0018      	movs	r0, r3
 80008ee:	f003 fa5f 	bl	8003db0 <HAL_TIM_PWM_ConfigChannel>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80008f6:	f000 f96d 	bl	8000bd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	0192      	lsls	r2, r2, #6
 800091e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2280      	movs	r2, #128	@ 0x80
 8000936:	0492      	lsls	r2, r2, #18
 8000938:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2200      	movs	r2, #0
 8000944:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800094c:	1d3a      	adds	r2, r7, #4
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <MX_TIM1_Init+0x14c>)
 8000950:	0011      	movs	r1, r2
 8000952:	0018      	movs	r0, r3
 8000954:	f003 feb4 	bl	80046c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800095c:	f000 f93a 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000960:	4b03      	ldr	r3, [pc, #12]	@ (8000970 <MX_TIM1_Init+0x14c>)
 8000962:	0018      	movs	r0, r3
 8000964:	f000 fdb8 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b018      	add	sp, #96	@ 0x60
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000260 	.word	0x20000260
 8000974:	40012c00 	.word	0x40012c00
 8000978:	0000ffff 	.word	0x0000ffff

0800097c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000980:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_TIM14_Init+0x40>)
 8000982:	4a0f      	ldr	r2, [pc, #60]	@ (80009c0 <MX_TIM14_Init+0x44>)
 8000984:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <MX_TIM14_Init+0x40>)
 8000988:	220b      	movs	r2, #11
 800098a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <MX_TIM14_Init+0x40>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000992:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <MX_TIM14_Init+0x40>)
 8000994:	4a0b      	ldr	r2, [pc, #44]	@ (80009c4 <MX_TIM14_Init+0x48>)
 8000996:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <MX_TIM14_Init+0x40>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <MX_TIM14_Init+0x40>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <MX_TIM14_Init+0x40>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f003 f952 	bl	8003c50 <HAL_TIM_Base_Init>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80009b0:	f000 f910 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80009b4:	46c0      	nop			@ (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			@ (mov r8, r8)
 80009bc:	200002ac 	.word	0x200002ac
 80009c0:	40002000 	.word	0x40002000
 80009c4:	0000ffff 	.word	0x0000ffff

080009c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009cc:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 80009ce:	4a25      	ldr	r2, [pc, #148]	@ (8000a64 <MX_USART1_UART_Init+0x9c>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009d2:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 80009d4:	22e1      	movs	r2, #225	@ 0xe1
 80009d6:	0252      	lsls	r2, r2, #9
 80009d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a04:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a0a:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000a10:	4813      	ldr	r0, [pc, #76]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 8000a12:	2300      	movs	r3, #0
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	f005 fb22 	bl	8006060 <HAL_RS485Ex_Init>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000a20:	f000 f8d8 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a24:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 8000a26:	2100      	movs	r1, #0
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f005 fbc5 	bl	80061b8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000a32:	f000 f8cf 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f005 fbfc 	bl	8006238 <HAL_UARTEx_SetRxFifoThreshold>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000a44:	f000 f8c6 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <MX_USART1_UART_Init+0x98>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f005 fb7a 	bl	8006144 <HAL_UARTEx_DisableFifoMode>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000a54:	f000 f8be 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	200002f8 	.word	0x200002f8
 8000a64:	40013800 	.word	0x40013800

08000a68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <MX_DMA_Init+0x48>)
 8000a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a72:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <MX_DMA_Init+0x48>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	430a      	orrs	r2, r1
 8000a78:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab0 <MX_DMA_Init+0x48>)
 8000a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4013      	ands	r3, r2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2009      	movs	r0, #9
 8000a8c:	f001 fe0c 	bl	80026a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a90:	2009      	movs	r0, #9
 8000a92:	f001 fe1e 	bl	80026d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	200a      	movs	r0, #10
 8000a9c:	f001 fe04 	bl	80026a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f001 fe16 	bl	80026d2 <HAL_NVIC_EnableIRQ>

}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b002      	add	sp, #8
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b08b      	sub	sp, #44	@ 0x2c
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	2414      	movs	r4, #20
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	0018      	movs	r0, r3
 8000ac0:	2314      	movs	r3, #20
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f005 fcbb 	bl	8006440 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ace:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000ad0:	2104      	movs	r1, #4
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ada:	2204      	movs	r2, #4
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae2:	4b38      	ldr	r3, [pc, #224]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ae6:	4b37      	ldr	r3, [pc, #220]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000ae8:	2120      	movs	r1, #32
 8000aea:	430a      	orrs	r2, r1
 8000aec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aee:	4b35      	ldr	r3, [pc, #212]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af2:	2220      	movs	r2, #32
 8000af4:	4013      	ands	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b32      	ldr	r3, [pc, #200]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000afe:	4b31      	ldr	r3, [pc, #196]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000b00:	2101      	movs	r1, #1
 8000b02:	430a      	orrs	r2, r1
 8000b04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b06:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b16:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000b18:	2102      	movs	r1, #2
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b1e:	4b29      	ldr	r3, [pc, #164]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b22:	2202      	movs	r2, #2
 8000b24:	4013      	ands	r3, r2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2a:	4b26      	ldr	r3, [pc, #152]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b2e:	4b25      	ldr	r3, [pc, #148]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000b30:	2108      	movs	r1, #8
 8000b32:	430a      	orrs	r2, r1
 8000b34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b36:	4b23      	ldr	r3, [pc, #140]	@ (8000bc4 <MX_GPIO_Init+0x110>)
 8000b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_C_Pin|SS_A_Pin, GPIO_PIN_RESET);
 8000b42:	23a0      	movs	r3, #160	@ 0xa0
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4820      	ldr	r0, [pc, #128]	@ (8000bc8 <MX_GPIO_Init+0x114>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	f002 f9a4 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Encoder_Pulse_B_Pin Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin|Encoder_Pulse_A_Pin;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2206      	movs	r2, #6
 8000b54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	4a19      	ldr	r2, [pc, #100]	@ (8000bcc <MX_GPIO_Init+0x118>)
 8000b66:	0019      	movs	r1, r3
 8000b68:	0010      	movs	r0, r2
 8000b6a:	f002 f823 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_C_Pin SS_A_Pin */
  GPIO_InitStruct.Pin = SS_C_Pin|SS_A_Pin;
 8000b6e:	0021      	movs	r1, r4
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	22a0      	movs	r2, #160	@ 0xa0
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	000c      	movs	r4, r1
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bc8 <MX_GPIO_Init+0x114>)
 8000b90:	0019      	movs	r1, r3
 8000b92:	0010      	movs	r0, r2
 8000b94:	f002 f80e 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_B_Pin */
  GPIO_InitStruct.Pin = SS_B_Pin;
 8000b98:	0021      	movs	r1, r4
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2280      	movs	r2, #128	@ 0x80
 8000b9e:	0052      	lsls	r2, r2, #1
 8000ba0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <MX_GPIO_Init+0x11c>)
 8000ba6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SS_B_GPIO_Port, &GPIO_InitStruct);
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <MX_GPIO_Init+0x114>)
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	0010      	movs	r0, r2
 8000bb6:	f001 fffd 	bl	8002bb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b00b      	add	sp, #44	@ 0x2c
 8000bc0:	bd90      	pop	{r4, r7, pc}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	50000400 	.word	0x50000400
 8000bcc:	50000c00 	.word	0x50000c00
 8000bd0:	10110000 	.word	0x10110000

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	e7fd      	b.n	8000bdc <Error_Handler+0x8>

08000be0 <HAL_UART_RxCpltCallback>:
};


// Recieve Interrupt Handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	rx_int = 1;
 8000be8:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <HAL_UART_RxCpltCallback+0x18>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	200005b0 	.word	0x200005b0

08000bfc <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	0002      	movs	r2, r0
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2bff      	cmp	r3, #255	@ 0xff
 8000c0e:	d004      	beq.n	8000c1a <get_rx_buffer+0x1e>
	{
		return modbus_rx_buffer[index];
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4a03      	ldr	r2, [pc, #12]	@ (8000c24 <get_rx_buffer+0x28>)
 8000c16:	5cd3      	ldrb	r3, [r2, r3]
 8000c18:	e000      	b.n	8000c1c <get_rx_buffer+0x20>
	}
	return 0xFF;
 8000c1a:	23ff      	movs	r3, #255	@ 0xff
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b002      	add	sp, #8
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200003ac 	.word	0x200003ac

08000c28 <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (modbus_rx_buffer[2] << 8) | modbus_rx_buffer[3];
 8000c2e:	4b43      	ldr	r3, [pc, #268]	@ (8000d3c <return_holding_registers+0x114>)
 8000c30:	789b      	ldrb	r3, [r3, #2]
 8000c32:	021b      	lsls	r3, r3, #8
 8000c34:	b21a      	sxth	r2, r3
 8000c36:	4b41      	ldr	r3, [pc, #260]	@ (8000d3c <return_holding_registers+0x114>)
 8000c38:	78db      	ldrb	r3, [r3, #3]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	1dbb      	adds	r3, r7, #6
 8000c42:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5];
 8000c44:	4b3d      	ldr	r3, [pc, #244]	@ (8000d3c <return_holding_registers+0x114>)
 8000c46:	791b      	ldrb	r3, [r3, #4]
 8000c48:	021b      	lsls	r3, r3, #8
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d3c <return_holding_registers+0x114>)
 8000c4e:	795b      	ldrb	r3, [r3, #5]
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21a      	sxth	r2, r3
 8000c56:	1cbb      	adds	r3, r7, #2
 8000c58:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8000c5a:	1cbb      	adds	r3, r7, #2
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	2b7d      	cmp	r3, #125	@ 0x7d
 8000c60:	d803      	bhi.n	8000c6a <return_holding_registers+0x42>
 8000c62:	1cbb      	adds	r3, r7, #2
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d104      	bne.n	8000c74 <return_holding_registers+0x4c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000c6a:	2006      	movs	r0, #6
 8000c6c:	f000 f930 	bl	8000ed0 <modbus_exception>
 8000c70:	0003      	movs	r3, r0
 8000c72:	e05e      	b.n	8000d32 <return_holding_registers+0x10a>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000c74:	1cba      	adds	r2, r7, #2
 8000c76:	1dbb      	adds	r3, r7, #6
 8000c78:	8812      	ldrh	r2, [r2, #0]
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	003b      	movs	r3, r7
 8000c82:	3a01      	subs	r2, #1
 8000c84:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000c86:	003b      	movs	r3, r7
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	2b32      	cmp	r3, #50	@ 0x32
 8000c8c:	d904      	bls.n	8000c98 <return_holding_registers+0x70>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000c8e:	2005      	movs	r0, #5
 8000c90:	f000 f91e 	bl	8000ed0 <modbus_exception>
 8000c94:	0003      	movs	r3, r0
 8000c96:	e04c      	b.n	8000d32 <return_holding_registers+0x10a>
	}

	// Return register values

	modbus_tx_buffer[0] = modbus_rx_buffer[0]; // Append Slave id
 8000c98:	4b28      	ldr	r3, [pc, #160]	@ (8000d3c <return_holding_registers+0x114>)
 8000c9a:	781a      	ldrb	r2, [r3, #0]
 8000c9c:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <return_holding_registers+0x118>)
 8000c9e:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1]; // Append Function Code
 8000ca0:	4b26      	ldr	r3, [pc, #152]	@ (8000d3c <return_holding_registers+0x114>)
 8000ca2:	785a      	ldrb	r2, [r3, #1]
 8000ca4:	4b26      	ldr	r3, [pc, #152]	@ (8000d40 <return_holding_registers+0x118>)
 8000ca6:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8000ca8:	1cbb      	adds	r3, r7, #2
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	18db      	adds	r3, r3, r3
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4b23      	ldr	r3, [pc, #140]	@ (8000d40 <return_holding_registers+0x118>)
 8000cb4:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8000cb6:	1d7b      	adds	r3, r7, #5
 8000cb8:	2203      	movs	r2, #3
 8000cba:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	e027      	b.n	8000d14 <return_holding_registers+0xec>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address]);
 8000cc4:	1dbb      	adds	r3, r7, #6
 8000cc6:	881a      	ldrh	r2, [r3, #0]
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <return_holding_registers+0x11c>)
 8000cca:	0052      	lsls	r2, r2, #1
 8000ccc:	5ad3      	ldrh	r3, [r2, r3]
 8000cce:	0a1b      	lsrs	r3, r3, #8
 8000cd0:	b299      	uxth	r1, r3
 8000cd2:	1d7b      	adds	r3, r7, #5
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	1d7a      	adds	r2, r7, #5
 8000cd8:	1c58      	adds	r0, r3, #1
 8000cda:	7010      	strb	r0, [r2, #0]
 8000cdc:	001a      	movs	r2, r3
 8000cde:	b2c9      	uxtb	r1, r1
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <return_holding_registers+0x118>)
 8000ce2:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address]);
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	881a      	ldrh	r2, [r3, #0]
 8000ce8:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <return_holding_registers+0x11c>)
 8000cea:	0052      	lsls	r2, r2, #1
 8000cec:	5ad1      	ldrh	r1, [r2, r3]
 8000cee:	1d7b      	adds	r3, r7, #5
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	1d7a      	adds	r2, r7, #5
 8000cf4:	1c58      	adds	r0, r3, #1
 8000cf6:	7010      	strb	r0, [r2, #0]
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	b2c9      	uxtb	r1, r1
 8000cfc:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <return_holding_registers+0x118>)
 8000cfe:	5499      	strb	r1, [r3, r2]
		first_register_address++;
 8000d00:	1dbb      	adds	r3, r7, #6
 8000d02:	881a      	ldrh	r2, [r3, #0]
 8000d04:	1dbb      	adds	r3, r7, #6
 8000d06:	3201      	adds	r2, #1
 8000d08:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < num_registers; i++)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	3201      	adds	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	1cba      	adds	r2, r7, #2
 8000d1c:	8812      	ldrh	r2, [r2, #0]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d8d0      	bhi.n	8000cc4 <return_holding_registers+0x9c>
	}

	return modbus_send(modbus_tx_buffer, index);
 8000d22:	1d7b      	adds	r3, r7, #5
 8000d24:	781a      	ldrb	r2, [r3, #0]
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <return_holding_registers+0x118>)
 8000d28:	0011      	movs	r1, r2
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 f8f6 	bl	8000f1c <modbus_send>
 8000d30:	0003      	movs	r3, r0
}
 8000d32:	0018      	movs	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	200003ac 	.word	0x200003ac
 8000d40:	200004ac 	.word	0x200004ac
 8000d44:	20000000 	.word	0x20000000

08000d48 <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (modbus_rx_buffer[2] << 8) | modbus_rx_buffer[3];
 8000d4e:	4b5d      	ldr	r3, [pc, #372]	@ (8000ec4 <edit_multiple_registers+0x17c>)
 8000d50:	789b      	ldrb	r3, [r3, #2]
 8000d52:	021b      	lsls	r3, r3, #8
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	4b5b      	ldr	r3, [pc, #364]	@ (8000ec4 <edit_multiple_registers+0x17c>)
 8000d58:	78db      	ldrb	r3, [r3, #3]
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	1dbb      	adds	r3, r7, #6
 8000d62:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5];
 8000d64:	4b57      	ldr	r3, [pc, #348]	@ (8000ec4 <edit_multiple_registers+0x17c>)
 8000d66:	791b      	ldrb	r3, [r3, #4]
 8000d68:	021b      	lsls	r3, r3, #8
 8000d6a:	b21a      	sxth	r2, r3
 8000d6c:	4b55      	ldr	r3, [pc, #340]	@ (8000ec4 <edit_multiple_registers+0x17c>)
 8000d6e:	795b      	ldrb	r3, [r3, #5]
 8000d70:	b21b      	sxth	r3, r3
 8000d72:	4313      	orrs	r3, r2
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	1cbb      	adds	r3, r7, #2
 8000d78:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8000d7a:	1cbb      	adds	r3, r7, #2
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	2b7d      	cmp	r3, #125	@ 0x7d
 8000d80:	d803      	bhi.n	8000d8a <edit_multiple_registers+0x42>
 8000d82:	1cbb      	adds	r3, r7, #2
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d104      	bne.n	8000d94 <edit_multiple_registers+0x4c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000d8a:	2006      	movs	r0, #6
 8000d8c:	f000 f8a0 	bl	8000ed0 <modbus_exception>
 8000d90:	0003      	movs	r3, r0
 8000d92:	e092      	b.n	8000eba <edit_multiple_registers+0x172>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000d94:	1cba      	adds	r2, r7, #2
 8000d96:	1dbb      	adds	r3, r7, #6
 8000d98:	8812      	ldrh	r2, [r2, #0]
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	18d3      	adds	r3, r2, r3
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	003b      	movs	r3, r7
 8000da2:	3a01      	subs	r2, #1
 8000da4:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000da6:	003b      	movs	r3, r7
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	2b32      	cmp	r3, #50	@ 0x32
 8000dac:	d904      	bls.n	8000db8 <edit_multiple_registers+0x70>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000dae:	2005      	movs	r0, #5
 8000db0:	f000 f88e 	bl	8000ed0 <modbus_exception>
 8000db4:	0003      	movs	r3, r0
 8000db6:	e080      	b.n	8000eba <edit_multiple_registers+0x172>
	}

	if((last_register_address <= 10 && last_register_address >= 2) 		||
 8000db8:	003b      	movs	r3, r7
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	2b0a      	cmp	r3, #10
 8000dbe:	d803      	bhi.n	8000dc8 <edit_multiple_registers+0x80>
 8000dc0:	003b      	movs	r3, r7
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d80f      	bhi.n	8000de8 <edit_multiple_registers+0xa0>
 8000dc8:	1dbb      	adds	r3, r7, #6
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	2b0a      	cmp	r3, #10
 8000dce:	d803      	bhi.n	8000dd8 <edit_multiple_registers+0x90>
		(first_register_address <= 10 && first_register_address >= 2) 	||
 8000dd0:	1dbb      	adds	r3, r7, #6
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d807      	bhi.n	8000de8 <edit_multiple_registers+0xa0>
 8000dd8:	1dbb      	adds	r3, r7, #6
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d808      	bhi.n	8000df2 <edit_multiple_registers+0xaa>
		(first_register_address < 2 && last_register_address > 10))
 8000de0:	003b      	movs	r3, r7
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	2b0a      	cmp	r3, #10
 8000de6:	d904      	bls.n	8000df2 <edit_multiple_registers+0xaa>
	{
		// Ensure that ADC values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8000de8:	2004      	movs	r0, #4
 8000dea:	f000 f871 	bl	8000ed0 <modbus_exception>
 8000dee:	0003      	movs	r3, r0
 8000df0:	e063      	b.n	8000eba <edit_multiple_registers+0x172>
	}


	// Edit holding registers
	modbus_tx_buffer[0] = modbus_rx_buffer[0]; // Append Slave id
 8000df2:	4b34      	ldr	r3, [pc, #208]	@ (8000ec4 <edit_multiple_registers+0x17c>)
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	4b34      	ldr	r3, [pc, #208]	@ (8000ec8 <edit_multiple_registers+0x180>)
 8000df8:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1]; // Append Function Code
 8000dfa:	4b32      	ldr	r3, [pc, #200]	@ (8000ec4 <edit_multiple_registers+0x17c>)
 8000dfc:	785a      	ldrb	r2, [r3, #1]
 8000dfe:	4b32      	ldr	r3, [pc, #200]	@ (8000ec8 <edit_multiple_registers+0x180>)
 8000e00:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8000e02:	1cbb      	adds	r3, r7, #2
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	18db      	adds	r3, r3, r3
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec8 <edit_multiple_registers+0x180>)
 8000e0e:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8000e10:	1d7b      	adds	r3, r7, #5
 8000e12:	2203      	movs	r2, #3
 8000e14:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
 8000e1c:	e03e      	b.n	8000e9c <edit_multiple_registers+0x154>
	{
		holding_register_database[first_register_address] = (modbus_rx_buffer[2 * i + 6] << 8) | modbus_rx_buffer[2 * i + 7];
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	3303      	adds	r3, #3
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	4a27      	ldr	r2, [pc, #156]	@ (8000ec4 <edit_multiple_registers+0x17c>)
 8000e28:	5cd3      	ldrb	r3, [r2, r3]
 8000e2a:	021b      	lsls	r3, r3, #8
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	3307      	adds	r3, #7
 8000e36:	4923      	ldr	r1, [pc, #140]	@ (8000ec4 <edit_multiple_registers+0x17c>)
 8000e38:	5ccb      	ldrb	r3, [r1, r3]
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b219      	sxth	r1, r3
 8000e40:	1dbb      	adds	r3, r7, #6
 8000e42:	881a      	ldrh	r2, [r3, #0]
 8000e44:	b289      	uxth	r1, r1
 8000e46:	4b21      	ldr	r3, [pc, #132]	@ (8000ecc <edit_multiple_registers+0x184>)
 8000e48:	0052      	lsls	r2, r2, #1
 8000e4a:	52d1      	strh	r1, [r2, r3]
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address]);
 8000e4c:	1dbb      	adds	r3, r7, #6
 8000e4e:	881a      	ldrh	r2, [r3, #0]
 8000e50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ecc <edit_multiple_registers+0x184>)
 8000e52:	0052      	lsls	r2, r2, #1
 8000e54:	5ad3      	ldrh	r3, [r2, r3]
 8000e56:	0a1b      	lsrs	r3, r3, #8
 8000e58:	b299      	uxth	r1, r3
 8000e5a:	1d7b      	adds	r3, r7, #5
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	1d7a      	adds	r2, r7, #5
 8000e60:	1c58      	adds	r0, r3, #1
 8000e62:	7010      	strb	r0, [r2, #0]
 8000e64:	001a      	movs	r2, r3
 8000e66:	b2c9      	uxtb	r1, r1
 8000e68:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <edit_multiple_registers+0x180>)
 8000e6a:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address]);
 8000e6c:	1dbb      	adds	r3, r7, #6
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <edit_multiple_registers+0x184>)
 8000e72:	0052      	lsls	r2, r2, #1
 8000e74:	5ad1      	ldrh	r1, [r2, r3]
 8000e76:	1d7b      	adds	r3, r7, #5
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	1d7a      	adds	r2, r7, #5
 8000e7c:	1c58      	adds	r0, r3, #1
 8000e7e:	7010      	strb	r0, [r2, #0]
 8000e80:	001a      	movs	r2, r3
 8000e82:	b2c9      	uxtb	r1, r1
 8000e84:	4b10      	ldr	r3, [pc, #64]	@ (8000ec8 <edit_multiple_registers+0x180>)
 8000e86:	5499      	strb	r1, [r3, r2]
		first_register_address++;
 8000e88:	1dbb      	adds	r3, r7, #6
 8000e8a:	881a      	ldrh	r2, [r3, #0]
 8000e8c:	1dbb      	adds	r3, r7, #6
 8000e8e:	3201      	adds	r2, #1
 8000e90:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < num_registers; i++)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	3201      	adds	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	1cba      	adds	r2, r7, #2
 8000ea4:	8812      	ldrh	r2, [r2, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d8b9      	bhi.n	8000e1e <edit_multiple_registers+0xd6>
	}

	return modbus_send(modbus_tx_buffer, index);
 8000eaa:	1d7b      	adds	r3, r7, #5
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <edit_multiple_registers+0x180>)
 8000eb0:	0011      	movs	r1, r2
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f000 f832 	bl	8000f1c <modbus_send>
 8000eb8:	0003      	movs	r3, r0
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	200003ac 	.word	0x200003ac
 8000ec8:	200004ac 	.word	0x200004ac
 8000ecc:	20000000 	.word	0x20000000

08000ed0 <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = modbus_rx_buffer[0];
 8000edc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <modbus_exception+0x44>)
 8000ede:	781a      	ldrb	r2, [r3, #0]
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <modbus_exception+0x48>)
 8000ee2:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1] | 0x80;
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f14 <modbus_exception+0x44>)
 8000ee6:	785b      	ldrb	r3, [r3, #1]
 8000ee8:	2280      	movs	r2, #128	@ 0x80
 8000eea:	4252      	negs	r2, r2
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <modbus_exception+0x48>)
 8000ef2:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <modbus_exception+0x48>)
 8000efe:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <modbus_exception+0x48>)
 8000f02:	2103      	movs	r1, #3
 8000f04:	0018      	movs	r0, r3
 8000f06:	f000 f809 	bl	8000f1c <modbus_send>
 8000f0a:	0003      	movs	r3, r0
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b002      	add	sp, #8
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200003ac 	.word	0x200003ac
 8000f18:	200004ac 	.word	0x200004ac

08000f1c <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 8000f1c:	b5b0      	push	{r4, r5, r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	000a      	movs	r2, r1
 8000f26:	1cfb      	adds	r3, r7, #3
 8000f28:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(data, size);
 8000f2a:	250e      	movs	r5, #14
 8000f2c:	197c      	adds	r4, r7, r5
 8000f2e:	1cfb      	adds	r3, r7, #3
 8000f30:	781a      	ldrb	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	0011      	movs	r1, r2
 8000f36:	0018      	movs	r0, r3
 8000f38:	f000 f884 	bl	8001044 <crc_16>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	8023      	strh	r3, [r4, #0]
	data[size] = low_byte(crc);
 8000f40:	1cfb      	adds	r3, r7, #3
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	18d3      	adds	r3, r2, r3
 8000f48:	197a      	adds	r2, r7, r5
 8000f4a:	8812      	ldrh	r2, [r2, #0]
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	701a      	strb	r2, [r3, #0]
	data[size + 1] = high_byte(crc);
 8000f50:	197b      	adds	r3, r7, r5
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	b299      	uxth	r1, r3
 8000f58:	1cfb      	adds	r3, r7, #3
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	18d3      	adds	r3, r2, r3
 8000f62:	b2ca      	uxtb	r2, r1
 8000f64:	701a      	strb	r2, [r3, #0]

	int8_t status = HAL_OK;
 8000f66:	240d      	movs	r4, #13
 8000f68:	193b      	adds	r3, r7, r4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit_IT(&huart1, data, size + 2);
 8000f6e:	1cfb      	adds	r3, r7, #3
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	3302      	adds	r3, #2
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <modbus_send+0xc4>)
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f003 fc3b 	bl	80047f8 <HAL_UART_Transmit_IT>
 8000f82:	0003      	movs	r3, r0
 8000f84:	001a      	movs	r2, r3
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <modbus_send+0x80>
	{
		return status;
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b25b      	sxtb	r3, r3
 8000f9a:	e01d      	b.n	8000fd8 <modbus_send+0xbc>
	}
	time = HAL_GetTick();
 8000f9c:	f000 fc60 	bl	8001860 <HAL_GetTick>
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <modbus_send+0xc8>)
 8000fa4:	601a      	str	r2, [r3, #0]
	while(!tx_int && (HAL_GetTick()) - time < 100);
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <modbus_send+0xcc>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d107      	bne.n	8000fc2 <modbus_send+0xa6>
 8000fb2:	f000 fc55 	bl	8001860 <HAL_GetTick>
 8000fb6:	0002      	movs	r2, r0
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <modbus_send+0xc8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b63      	cmp	r3, #99	@ 0x63
 8000fc0:	d9f2      	bls.n	8000fa8 <modbus_send+0x8c>
	if(tx_int)
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <modbus_send+0xcc>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <modbus_send+0xba>
	{
		tx_int = 0;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <modbus_send+0xcc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <modbus_send+0xbc>
	}
	else
	{
		return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
	}
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b004      	add	sp, #16
 8000fde:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe0:	200002f8 	.word	0x200002f8
 8000fe4:	200005ac 	.word	0x200005ac
 8000fe8:	200005b1 	.word	0x200005b1

08000fec <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	if(rx_int)
 8000ff0:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <modbus_rx+0x24>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d004      	beq.n	8001004 <modbus_rx+0x18>
	{
		rx_int = 0;
 8000ffa:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <modbus_rx+0x24>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
		return 1;
 8001000:	2301      	movs	r3, #1
 8001002:	e002      	b.n	800100a <modbus_rx+0x1e>
	}
	return rx_int;
 8001004:	4b02      	ldr	r3, [pc, #8]	@ (8001010 <modbus_rx+0x24>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
}
 800100a:	0018      	movs	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200005b0 	.word	0x200005b0

08001014 <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx(uint8_t size)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	0002      	movs	r2, r0
 800101c:	1dfb      	adds	r3, r7, #7
 800101e:	701a      	strb	r2, [r3, #0]
	return HAL_UARTEx_ReceiveToIdle_IT(&huart1, modbus_rx_buffer, size);
 8001020:	1dfb      	adds	r3, r7, #7
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b29a      	uxth	r2, r3
 8001026:	4905      	ldr	r1, [pc, #20]	@ (800103c <modbus_set_rx+0x28>)
 8001028:	4b05      	ldr	r3, [pc, #20]	@ (8001040 <modbus_set_rx+0x2c>)
 800102a:	0018      	movs	r0, r3
 800102c:	f005 f946 	bl	80062bc <HAL_UARTEx_ReceiveToIdle_IT>
 8001030:	0003      	movs	r3, r0
 8001032:	b25b      	sxtb	r3, r3
	//return HAL_UART_Receive_IT(&huart1, modbus_rx_buffer, size);
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200003ac 	.word	0x200003ac
 8001040:	200002f8 	.word	0x200002f8

08001044 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	000a      	movs	r2, r1
 800104e:	1cfb      	adds	r3, r7, #3
 8001050:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8001052:	230f      	movs	r3, #15
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	22ff      	movs	r2, #255	@ 0xff
 8001058:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 800105a:	230e      	movs	r3, #14
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	22ff      	movs	r2, #255	@ 0xff
 8001060:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8001062:	e019      	b.n	8001098 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	200e      	movs	r0, #14
 800106e:	183b      	adds	r3, r7, r0
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4053      	eors	r3, r2
 8001074:	b2db      	uxtb	r3, r3
 8001076:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8001078:	4a13      	ldr	r2, [pc, #76]	@ (80010c8 <crc_16+0x84>)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	18d3      	adds	r3, r2, r3
 800107e:	7819      	ldrb	r1, [r3, #0]
 8001080:	183b      	adds	r3, r7, r0
 8001082:	200f      	movs	r0, #15
 8001084:	183a      	adds	r2, r7, r0
 8001086:	7812      	ldrb	r2, [r2, #0]
 8001088:	404a      	eors	r2, r1
 800108a:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 800108c:	183b      	adds	r3, r7, r0
 800108e:	490f      	ldr	r1, [pc, #60]	@ (80010cc <crc_16+0x88>)
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	188a      	adds	r2, r1, r2
 8001094:	7812      	ldrb	r2, [r2, #0]
 8001096:	701a      	strb	r2, [r3, #0]
	while (size--)
 8001098:	1cfb      	adds	r3, r7, #3
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	1cfa      	adds	r2, r7, #3
 800109e:	1e59      	subs	r1, r3, #1
 80010a0:	7011      	strb	r1, [r2, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1de      	bne.n	8001064 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 80010a6:	230f      	movs	r3, #15
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	230e      	movs	r3, #14
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	b29b      	uxth	r3, r3
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b004      	add	sp, #16
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	080064b0 	.word	0x080064b0
 80010cc:	080065b0 	.word	0x080065b0

080010d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <HAL_MspInit+0x44>)
 80010d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <HAL_MspInit+0x44>)
 80010dc:	2101      	movs	r1, #1
 80010de:	430a      	orrs	r2, r1
 80010e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <HAL_MspInit+0x44>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	2201      	movs	r2, #1
 80010e8:	4013      	ands	r3, r2
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <HAL_MspInit+0x44>)
 80010f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010f2:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <HAL_MspInit+0x44>)
 80010f4:	2180      	movs	r1, #128	@ 0x80
 80010f6:	0549      	lsls	r1, r1, #21
 80010f8:	430a      	orrs	r2, r1
 80010fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <HAL_MspInit+0x44>)
 80010fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001100:	2380      	movs	r3, #128	@ 0x80
 8001102:	055b      	lsls	r3, r3, #21
 8001104:	4013      	ands	r3, r2
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	40021000 	.word	0x40021000

08001118 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b093      	sub	sp, #76	@ 0x4c
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	2334      	movs	r3, #52	@ 0x34
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	0018      	movs	r0, r3
 8001126:	2314      	movs	r3, #20
 8001128:	001a      	movs	r2, r3
 800112a:	2100      	movs	r1, #0
 800112c:	f005 f988 	bl	8006440 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001130:	2414      	movs	r4, #20
 8001132:	193b      	adds	r3, r7, r4
 8001134:	0018      	movs	r0, r3
 8001136:	2320      	movs	r3, #32
 8001138:	001a      	movs	r2, r3
 800113a:	2100      	movs	r1, #0
 800113c:	f005 f980 	bl	8006440 <memset>
  if(hadc->Instance==ADC1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a35      	ldr	r2, [pc, #212]	@ (800121c <HAL_ADC_MspInit+0x104>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d163      	bne.n	8001212 <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800114a:	193b      	adds	r3, r7, r4
 800114c:	2220      	movs	r2, #32
 800114e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001150:	193b      	adds	r3, r7, r4
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001156:	193b      	adds	r3, r7, r4
 8001158:	0018      	movs	r0, r3
 800115a:	f002 fbc5 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
 800115e:	1e03      	subs	r3, r0, #0
 8001160:	d001      	beq.n	8001166 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 8001162:	f7ff fd37 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001166:	4b2e      	ldr	r3, [pc, #184]	@ (8001220 <HAL_ADC_MspInit+0x108>)
 8001168:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800116a:	4b2d      	ldr	r3, [pc, #180]	@ (8001220 <HAL_ADC_MspInit+0x108>)
 800116c:	2180      	movs	r1, #128	@ 0x80
 800116e:	0349      	lsls	r1, r1, #13
 8001170:	430a      	orrs	r2, r1
 8001172:	641a      	str	r2, [r3, #64]	@ 0x40
 8001174:	4b2a      	ldr	r3, [pc, #168]	@ (8001220 <HAL_ADC_MspInit+0x108>)
 8001176:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001178:	2380      	movs	r3, #128	@ 0x80
 800117a:	035b      	lsls	r3, r3, #13
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <HAL_ADC_MspInit+0x108>)
 8001184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <HAL_ADC_MspInit+0x108>)
 8001188:	2101      	movs	r1, #1
 800118a:	430a      	orrs	r2, r1
 800118c:	635a      	str	r2, [r3, #52]	@ 0x34
 800118e:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <HAL_ADC_MspInit+0x108>)
 8001190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001192:	2201      	movs	r2, #1
 8001194:	4013      	ands	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Thrust_Sensor_A_Pin|Thrust_Sensor_B_Pin|Thrust_Sensor_C_Pin|Motor_Temp_Pin
 800119a:	2134      	movs	r1, #52	@ 0x34
 800119c:	187b      	adds	r3, r7, r1
 800119e:	4a21      	ldr	r2, [pc, #132]	@ (8001224 <HAL_ADC_MspInit+0x10c>)
 80011a0:	601a      	str	r2, [r3, #0]
                          |Earth_Pressure_Pin|Flame_Sensor_Pin|Actuator_A_Pos_Pin|Actuator_B_Pos_Pin
                          |Actuator_C_Pos_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2203      	movs	r2, #3
 80011a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	187a      	adds	r2, r7, r1
 80011b0:	23a0      	movs	r3, #160	@ 0xa0
 80011b2:	05db      	lsls	r3, r3, #23
 80011b4:	0011      	movs	r1, r2
 80011b6:	0018      	movs	r0, r3
 80011b8:	f001 fcfc 	bl	8002bb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <HAL_ADC_MspInit+0x110>)
 80011be:	4a1b      	ldr	r2, [pc, #108]	@ (800122c <HAL_ADC_MspInit+0x114>)
 80011c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011c2:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <HAL_ADC_MspInit+0x110>)
 80011c4:	2205      	movs	r2, #5
 80011c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c8:	4b17      	ldr	r3, [pc, #92]	@ (8001228 <HAL_ADC_MspInit+0x110>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ce:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <HAL_ADC_MspInit+0x110>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011d4:	4b14      	ldr	r3, [pc, #80]	@ (8001228 <HAL_ADC_MspInit+0x110>)
 80011d6:	2280      	movs	r2, #128	@ 0x80
 80011d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011da:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <HAL_ADC_MspInit+0x110>)
 80011dc:	2280      	movs	r2, #128	@ 0x80
 80011de:	0052      	lsls	r2, r2, #1
 80011e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011e2:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <HAL_ADC_MspInit+0x110>)
 80011e4:	2280      	movs	r2, #128	@ 0x80
 80011e6:	00d2      	lsls	r2, r2, #3
 80011e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <HAL_ADC_MspInit+0x110>)
 80011ec:	2220      	movs	r2, #32
 80011ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <HAL_ADC_MspInit+0x110>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_ADC_MspInit+0x110>)
 80011f8:	0018      	movs	r0, r3
 80011fa:	f001 fa87 	bl	800270c <HAL_DMA_Init>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8001202:	f7ff fce7 	bl	8000bd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a07      	ldr	r2, [pc, #28]	@ (8001228 <HAL_ADC_MspInit+0x110>)
 800120a:	651a      	str	r2, [r3, #80]	@ 0x50
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_ADC_MspInit+0x110>)
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b013      	add	sp, #76	@ 0x4c
 8001218:	bd90      	pop	{r4, r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	40012400 	.word	0x40012400
 8001220:	40021000 	.word	0x40021000
 8001224:	000001ff 	.word	0x000001ff
 8001228:	200000f0 	.word	0x200000f0
 800122c:	40020008 	.word	0x40020008

08001230 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001230:	b590      	push	{r4, r7, lr}
 8001232:	b093      	sub	sp, #76	@ 0x4c
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	2334      	movs	r3, #52	@ 0x34
 800123a:	18fb      	adds	r3, r7, r3
 800123c:	0018      	movs	r0, r3
 800123e:	2314      	movs	r3, #20
 8001240:	001a      	movs	r2, r3
 8001242:	2100      	movs	r1, #0
 8001244:	f005 f8fc 	bl	8006440 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001248:	2414      	movs	r4, #20
 800124a:	193b      	adds	r3, r7, r4
 800124c:	0018      	movs	r0, r3
 800124e:	2320      	movs	r3, #32
 8001250:	001a      	movs	r2, r3
 8001252:	2100      	movs	r1, #0
 8001254:	f005 f8f4 	bl	8006440 <memset>
  if(hi2c->Instance==I2C1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a37      	ldr	r2, [pc, #220]	@ (800133c <HAL_I2C_MspInit+0x10c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d168      	bne.n	8001334 <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001262:	193b      	adds	r3, r7, r4
 8001264:	2202      	movs	r2, #2
 8001266:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001268:	193b      	adds	r3, r7, r4
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126e:	193b      	adds	r3, r7, r4
 8001270:	0018      	movs	r0, r3
 8001272:	f002 fb39 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
 8001276:	1e03      	subs	r3, r0, #0
 8001278:	d001      	beq.n	800127e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800127a:	f7ff fcab 	bl	8000bd4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	4b30      	ldr	r3, [pc, #192]	@ (8001340 <HAL_I2C_MspInit+0x110>)
 8001280:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001282:	4b2f      	ldr	r3, [pc, #188]	@ (8001340 <HAL_I2C_MspInit+0x110>)
 8001284:	2101      	movs	r1, #1
 8001286:	430a      	orrs	r2, r1
 8001288:	635a      	str	r2, [r3, #52]	@ 0x34
 800128a:	4b2d      	ldr	r3, [pc, #180]	@ (8001340 <HAL_I2C_MspInit+0x110>)
 800128c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800128e:	2201      	movs	r2, #1
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001296:	2134      	movs	r1, #52	@ 0x34
 8001298:	187b      	adds	r3, r7, r1
 800129a:	22c0      	movs	r2, #192	@ 0xc0
 800129c:	00d2      	lsls	r2, r2, #3
 800129e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2212      	movs	r2, #18
 80012a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	2206      	movs	r2, #6
 80012b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	187a      	adds	r2, r7, r1
 80012ba:	23a0      	movs	r3, #160	@ 0xa0
 80012bc:	05db      	lsls	r3, r3, #23
 80012be:	0011      	movs	r1, r2
 80012c0:	0018      	movs	r0, r3
 80012c2:	f001 fc77 	bl	8002bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <HAL_I2C_MspInit+0x110>)
 80012c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <HAL_I2C_MspInit+0x110>)
 80012cc:	2180      	movs	r1, #128	@ 0x80
 80012ce:	0389      	lsls	r1, r1, #14
 80012d0:	430a      	orrs	r2, r1
 80012d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <HAL_I2C_MspInit+0x110>)
 80012d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012d8:	2380      	movs	r3, #128	@ 0x80
 80012da:	039b      	lsls	r3, r3, #14
 80012dc:	4013      	ands	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <HAL_I2C_MspInit+0x114>)
 80012e4:	4a18      	ldr	r2, [pc, #96]	@ (8001348 <HAL_I2C_MspInit+0x118>)
 80012e6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80012e8:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <HAL_I2C_MspInit+0x114>)
 80012ea:	220a      	movs	r2, #10
 80012ec:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_I2C_MspInit+0x114>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f4:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <HAL_I2C_MspInit+0x114>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012fa:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <HAL_I2C_MspInit+0x114>)
 80012fc:	2280      	movs	r2, #128	@ 0x80
 80012fe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001300:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <HAL_I2C_MspInit+0x114>)
 8001302:	2200      	movs	r2, #0
 8001304:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001306:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <HAL_I2C_MspInit+0x114>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800130c:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <HAL_I2C_MspInit+0x114>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <HAL_I2C_MspInit+0x114>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <HAL_I2C_MspInit+0x114>)
 800131a:	0018      	movs	r0, r3
 800131c:	f001 f9f6 	bl	800270c <HAL_DMA_Init>
 8001320:	1e03      	subs	r3, r0, #0
 8001322:	d001      	beq.n	8001328 <HAL_I2C_MspInit+0xf8>
    {
      Error_Handler();
 8001324:	f7ff fc56 	bl	8000bd4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a06      	ldr	r2, [pc, #24]	@ (8001344 <HAL_I2C_MspInit+0x114>)
 800132c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800132e:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_I2C_MspInit+0x114>)
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001334:	46c0      	nop			@ (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b013      	add	sp, #76	@ 0x4c
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	40005400 	.word	0x40005400
 8001340:	40021000 	.word	0x40021000
 8001344:	200001a0 	.word	0x200001a0
 8001348:	4002001c 	.word	0x4002001c

0800134c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b093      	sub	sp, #76	@ 0x4c
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	2334      	movs	r3, #52	@ 0x34
 8001356:	18fb      	adds	r3, r7, r3
 8001358:	0018      	movs	r0, r3
 800135a:	2314      	movs	r3, #20
 800135c:	001a      	movs	r2, r3
 800135e:	2100      	movs	r1, #0
 8001360:	f005 f86e 	bl	8006440 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001364:	2414      	movs	r4, #20
 8001366:	193b      	adds	r3, r7, r4
 8001368:	0018      	movs	r0, r3
 800136a:	2320      	movs	r3, #32
 800136c:	001a      	movs	r2, r3
 800136e:	2100      	movs	r1, #0
 8001370:	f005 f866 	bl	8006440 <memset>
  if(hspi->Instance==SPI1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a34      	ldr	r2, [pc, #208]	@ (800144c <HAL_SPI_MspInit+0x100>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d162      	bne.n	8001444 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 800137e:	193b      	adds	r3, r7, r4
 8001380:	2204      	movs	r2, #4
 8001382:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8001384:	193b      	adds	r3, r7, r4
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138a:	193b      	adds	r3, r7, r4
 800138c:	0018      	movs	r0, r3
 800138e:	f002 faab 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d001      	beq.n	800139a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001396:	f7ff fc1d 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800139a:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <HAL_SPI_MspInit+0x104>)
 800139c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800139e:	4b2c      	ldr	r3, [pc, #176]	@ (8001450 <HAL_SPI_MspInit+0x104>)
 80013a0:	2180      	movs	r1, #128	@ 0x80
 80013a2:	0149      	lsls	r1, r1, #5
 80013a4:	430a      	orrs	r2, r1
 80013a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80013a8:	4b29      	ldr	r3, [pc, #164]	@ (8001450 <HAL_SPI_MspInit+0x104>)
 80013aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	015b      	lsls	r3, r3, #5
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	4b26      	ldr	r3, [pc, #152]	@ (8001450 <HAL_SPI_MspInit+0x104>)
 80013b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ba:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <HAL_SPI_MspInit+0x104>)
 80013bc:	2101      	movs	r1, #1
 80013be:	430a      	orrs	r2, r1
 80013c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013c2:	4b23      	ldr	r3, [pc, #140]	@ (8001450 <HAL_SPI_MspInit+0x104>)
 80013c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013c6:	2201      	movs	r2, #1
 80013c8:	4013      	ands	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <HAL_SPI_MspInit+0x104>)
 80013d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <HAL_SPI_MspInit+0x104>)
 80013d4:	2102      	movs	r1, #2
 80013d6:	430a      	orrs	r2, r1
 80013d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <HAL_SPI_MspInit+0x104>)
 80013dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013de:	2202      	movs	r2, #2
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013e6:	2134      	movs	r1, #52	@ 0x34
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	2280      	movs	r2, #128	@ 0x80
 80013ec:	0112      	lsls	r2, r2, #4
 80013ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	000c      	movs	r4, r1
 80013f2:	193b      	adds	r3, r7, r4
 80013f4:	2202      	movs	r2, #2
 80013f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	193b      	adds	r3, r7, r4
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	193b      	adds	r3, r7, r4
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001404:	193b      	adds	r3, r7, r4
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	193a      	adds	r2, r7, r4
 800140c:	23a0      	movs	r3, #160	@ 0xa0
 800140e:	05db      	lsls	r3, r3, #23
 8001410:	0011      	movs	r1, r2
 8001412:	0018      	movs	r0, r3
 8001414:	f001 fbce 	bl	8002bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001418:	0021      	movs	r1, r4
 800141a:	187b      	adds	r3, r7, r1
 800141c:	2228      	movs	r2, #40	@ 0x28
 800141e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	187b      	adds	r3, r7, r1
 8001422:	2202      	movs	r2, #2
 8001424:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	187b      	adds	r3, r7, r1
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001432:	187b      	adds	r3, r7, r1
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	187b      	adds	r3, r7, r1
 800143a:	4a06      	ldr	r2, [pc, #24]	@ (8001454 <HAL_SPI_MspInit+0x108>)
 800143c:	0019      	movs	r1, r3
 800143e:	0010      	movs	r0, r2
 8001440:	f001 fbb8 	bl	8002bb4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001444:	46c0      	nop			@ (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	b013      	add	sp, #76	@ 0x4c
 800144a:	bd90      	pop	{r4, r7, pc}
 800144c:	40013000 	.word	0x40013000
 8001450:	40021000 	.word	0x40021000
 8001454:	50000400 	.word	0x50000400

08001458 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <HAL_TIM_PWM_MspInit+0x38>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d10d      	bne.n	8001486 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <HAL_TIM_PWM_MspInit+0x3c>)
 800146c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <HAL_TIM_PWM_MspInit+0x3c>)
 8001470:	2180      	movs	r1, #128	@ 0x80
 8001472:	0109      	lsls	r1, r1, #4
 8001474:	430a      	orrs	r2, r1
 8001476:	641a      	str	r2, [r3, #64]	@ 0x40
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_TIM_PWM_MspInit+0x3c>)
 800147a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800147c:	2380      	movs	r3, #128	@ 0x80
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	46bd      	mov	sp, r7
 800148a:	b004      	add	sp, #16
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	40012c00 	.word	0x40012c00
 8001494:	40021000 	.word	0x40021000

08001498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <HAL_TIM_Base_MspInit+0x38>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d10d      	bne.n	80014c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_TIM_Base_MspInit+0x3c>)
 80014ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_TIM_Base_MspInit+0x3c>)
 80014b0:	2180      	movs	r1, #128	@ 0x80
 80014b2:	0209      	lsls	r1, r1, #8
 80014b4:	430a      	orrs	r2, r1
 80014b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_TIM_Base_MspInit+0x3c>)
 80014ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014bc:	2380      	movs	r3, #128	@ 0x80
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	4013      	ands	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b004      	add	sp, #16
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	40002000 	.word	0x40002000
 80014d4:	40021000 	.word	0x40021000

080014d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b089      	sub	sp, #36	@ 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	240c      	movs	r4, #12
 80014e2:	193b      	adds	r3, r7, r4
 80014e4:	0018      	movs	r0, r3
 80014e6:	2314      	movs	r3, #20
 80014e8:	001a      	movs	r2, r3
 80014ea:	2100      	movs	r1, #0
 80014ec:	f004 ffa8 	bl	8006440 <memset>
  if(htim->Instance==TIM1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a15      	ldr	r2, [pc, #84]	@ (800154c <HAL_TIM_MspPostInit+0x74>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d123      	bne.n	8001542 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_TIM_MspPostInit+0x78>)
 80014fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014fe:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <HAL_TIM_MspPostInit+0x78>)
 8001500:	2101      	movs	r1, #1
 8001502:	430a      	orrs	r2, r1
 8001504:	635a      	str	r2, [r3, #52]	@ 0x34
 8001506:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <HAL_TIM_MspPostInit+0x78>)
 8001508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800150a:	2201      	movs	r2, #1
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001512:	193b      	adds	r3, r7, r4
 8001514:	2280      	movs	r2, #128	@ 0x80
 8001516:	0212      	lsls	r2, r2, #8
 8001518:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	0021      	movs	r1, r4
 800151c:	187b      	adds	r3, r7, r1
 800151e:	2202      	movs	r2, #2
 8001520:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	187b      	adds	r3, r7, r1
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800152e:	187b      	adds	r3, r7, r1
 8001530:	2202      	movs	r2, #2
 8001532:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	187a      	adds	r2, r7, r1
 8001536:	23a0      	movs	r3, #160	@ 0xa0
 8001538:	05db      	lsls	r3, r3, #23
 800153a:	0011      	movs	r1, r2
 800153c:	0018      	movs	r0, r3
 800153e:	f001 fb39 	bl	8002bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	b009      	add	sp, #36	@ 0x24
 8001548:	bd90      	pop	{r4, r7, pc}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	40012c00 	.word	0x40012c00
 8001550:	40021000 	.word	0x40021000

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b095      	sub	sp, #84	@ 0x54
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	233c      	movs	r3, #60	@ 0x3c
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	0018      	movs	r0, r3
 8001562:	2314      	movs	r3, #20
 8001564:	001a      	movs	r2, r3
 8001566:	2100      	movs	r1, #0
 8001568:	f004 ff6a 	bl	8006440 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800156c:	241c      	movs	r4, #28
 800156e:	193b      	adds	r3, r7, r4
 8001570:	0018      	movs	r0, r3
 8001572:	2320      	movs	r3, #32
 8001574:	001a      	movs	r2, r3
 8001576:	2100      	movs	r1, #0
 8001578:	f004 ff62 	bl	8006440 <memset>
  if(huart->Instance==USART1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a46      	ldr	r2, [pc, #280]	@ (800169c <HAL_UART_MspInit+0x148>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d000      	beq.n	8001588 <HAL_UART_MspInit+0x34>
 8001586:	e084      	b.n	8001692 <HAL_UART_MspInit+0x13e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001588:	193b      	adds	r3, r7, r4
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800158e:	193b      	adds	r3, r7, r4
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001594:	193b      	adds	r3, r7, r4
 8001596:	0018      	movs	r0, r3
 8001598:	f002 f9a6 	bl	80038e8 <HAL_RCCEx_PeriphCLKConfig>
 800159c:	1e03      	subs	r3, r0, #0
 800159e:	d001      	beq.n	80015a4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80015a0:	f7ff fb18 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015a4:	4b3e      	ldr	r3, [pc, #248]	@ (80016a0 <HAL_UART_MspInit+0x14c>)
 80015a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015a8:	4b3d      	ldr	r3, [pc, #244]	@ (80016a0 <HAL_UART_MspInit+0x14c>)
 80015aa:	2180      	movs	r1, #128	@ 0x80
 80015ac:	01c9      	lsls	r1, r1, #7
 80015ae:	430a      	orrs	r2, r1
 80015b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80015b2:	4b3b      	ldr	r3, [pc, #236]	@ (80016a0 <HAL_UART_MspInit+0x14c>)
 80015b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015b6:	2380      	movs	r3, #128	@ 0x80
 80015b8:	01db      	lsls	r3, r3, #7
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
 80015be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c0:	4b37      	ldr	r3, [pc, #220]	@ (80016a0 <HAL_UART_MspInit+0x14c>)
 80015c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015c4:	4b36      	ldr	r3, [pc, #216]	@ (80016a0 <HAL_UART_MspInit+0x14c>)
 80015c6:	2104      	movs	r1, #4
 80015c8:	430a      	orrs	r2, r1
 80015ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80015cc:	4b34      	ldr	r3, [pc, #208]	@ (80016a0 <HAL_UART_MspInit+0x14c>)
 80015ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d0:	2204      	movs	r2, #4
 80015d2:	4013      	ands	r3, r2
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d8:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <HAL_UART_MspInit+0x14c>)
 80015da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015dc:	4b30      	ldr	r3, [pc, #192]	@ (80016a0 <HAL_UART_MspInit+0x14c>)
 80015de:	2102      	movs	r1, #2
 80015e0:	430a      	orrs	r2, r1
 80015e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80015e4:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <HAL_UART_MspInit+0x14c>)
 80015e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015e8:	2202      	movs	r2, #2
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <HAL_UART_MspInit+0x14c>)
 80015f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015f4:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <HAL_UART_MspInit+0x14c>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	430a      	orrs	r2, r1
 80015fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80015fc:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <HAL_UART_MspInit+0x14c>)
 80015fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001600:	2201      	movs	r2, #1
 8001602:	4013      	ands	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001608:	213c      	movs	r1, #60	@ 0x3c
 800160a:	187b      	adds	r3, r7, r1
 800160c:	2280      	movs	r2, #128	@ 0x80
 800160e:	01d2      	lsls	r2, r2, #7
 8001610:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	000c      	movs	r4, r1
 8001614:	193b      	adds	r3, r7, r4
 8001616:	2202      	movs	r2, #2
 8001618:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	193b      	adds	r3, r7, r4
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	193b      	adds	r3, r7, r4
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001626:	193b      	adds	r3, r7, r4
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	193b      	adds	r3, r7, r4
 800162e:	4a1d      	ldr	r2, [pc, #116]	@ (80016a4 <HAL_UART_MspInit+0x150>)
 8001630:	0019      	movs	r1, r3
 8001632:	0010      	movs	r0, r2
 8001634:	f001 fabe 	bl	8002bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001638:	193b      	adds	r3, r7, r4
 800163a:	2204      	movs	r2, #4
 800163c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	193b      	adds	r3, r7, r4
 8001640:	2202      	movs	r2, #2
 8001642:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	193b      	adds	r3, r7, r4
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	193b      	adds	r3, r7, r4
 800164c:	2200      	movs	r2, #0
 800164e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001650:	193b      	adds	r3, r7, r4
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001656:	193b      	adds	r3, r7, r4
 8001658:	4a13      	ldr	r2, [pc, #76]	@ (80016a8 <HAL_UART_MspInit+0x154>)
 800165a:	0019      	movs	r1, r3
 800165c:	0010      	movs	r0, r2
 800165e:	f001 faa9 	bl	8002bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001662:	0021      	movs	r1, r4
 8001664:	187b      	adds	r3, r7, r1
 8001666:	2280      	movs	r2, #128	@ 0x80
 8001668:	0152      	lsls	r2, r2, #5
 800166a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	187b      	adds	r3, r7, r1
 800166e:	2202      	movs	r2, #2
 8001670:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	187b      	adds	r3, r7, r1
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	187b      	adds	r3, r7, r1
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2201      	movs	r2, #1
 8001682:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001684:	187a      	adds	r2, r7, r1
 8001686:	23a0      	movs	r3, #160	@ 0xa0
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	0011      	movs	r1, r2
 800168c:	0018      	movs	r0, r3
 800168e:	f001 fa91 	bl	8002bb4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	46bd      	mov	sp, r7
 8001696:	b015      	add	sp, #84	@ 0x54
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	40013800 	.word	0x40013800
 80016a0:	40021000 	.word	0x40021000
 80016a4:	50000800 	.word	0x50000800
 80016a8:	50000400 	.word	0x50000400

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b0:	46c0      	nop			@ (mov r8, r8)
 80016b2:	e7fd      	b.n	80016b0 <NMI_Handler+0x4>

080016b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b8:	46c0      	nop			@ (mov r8, r8)
 80016ba:	e7fd      	b.n	80016b8 <HardFault_Handler+0x4>

080016bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c0:	46c0      	nop			@ (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ca:	46c0      	nop			@ (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d4:	f000 f8b2 	bl	800183c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	46c0      	nop			@ (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <DMA1_Channel1_IRQHandler+0x14>)
 80016e6:	0018      	movs	r0, r3
 80016e8:	f001 f922 	bl	8002930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016ec:	46c0      	nop			@ (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	200000f0 	.word	0x200000f0

080016f8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <DMA1_Channel2_3_IRQHandler+0x14>)
 80016fe:	0018      	movs	r0, r3
 8001700:	f001 f916 	bl	8002930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001704:	46c0      	nop			@ (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	200001a0 	.word	0x200001a0

08001710 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001714:	4b03      	ldr	r3, [pc, #12]	@ (8001724 <SystemInit+0x14>)
 8001716:	2280      	movs	r2, #128	@ 0x80
 8001718:	0512      	lsls	r2, r2, #20
 800171a:	609a      	str	r2, [r3, #8]
#endif
}
 800171c:	46c0      	nop			@ (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001728:	480d      	ldr	r0, [pc, #52]	@ (8001760 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800172a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800172c:	f7ff fff0 	bl	8001710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001730:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001732:	e003      	b.n	800173c <LoopCopyDataInit>

08001734 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001734:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001736:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001738:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800173a:	3104      	adds	r1, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800173c:	480a      	ldr	r0, [pc, #40]	@ (8001768 <LoopForever+0xa>)
  ldr r3, =_edata
 800173e:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <LoopForever+0xe>)
  adds r2, r0, r1
 8001740:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001742:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001744:	d3f6      	bcc.n	8001734 <CopyDataInit>
  ldr r2, =_sbss
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <LoopForever+0x12>)
  b LoopFillZerobss
 8001748:	e002      	b.n	8001750 <LoopFillZerobss>

0800174a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  str  r3, [r2]
 800174c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174e:	3204      	adds	r2, #4

08001750 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001750:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <LoopForever+0x16>)
  cmp r2, r3
 8001752:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001754:	d3f9      	bcc.n	800174a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001756:	f004 fe7b 	bl	8006450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800175a:	f7fe fe75 	bl	8000448 <main>

0800175e <LoopForever>:

LoopForever:
    b LoopForever
 800175e:	e7fe      	b.n	800175e <LoopForever>
  ldr   r0, =_estack
 8001760:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8001764:	08006794 	.word	0x08006794
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800176c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001770:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001774:	200005b8 	.word	0x200005b8

08001778 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC1_IRQHandler>

0800177a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001780:	1dfb      	adds	r3, r7, #7
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001786:	2003      	movs	r0, #3
 8001788:	f000 f80e 	bl	80017a8 <HAL_InitTick>
 800178c:	1e03      	subs	r3, r0, #0
 800178e:	d003      	beq.n	8001798 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001790:	1dfb      	adds	r3, r7, #7
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e001      	b.n	800179c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001798:	f7ff fc9a 	bl	80010d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800179c:	1dfb      	adds	r3, r7, #7
 800179e:	781b      	ldrb	r3, [r3, #0]
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017b0:	230f      	movs	r3, #15
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80017b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <HAL_InitTick+0x88>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d02b      	beq.n	8001818 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80017c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <HAL_InitTick+0x8c>)
 80017c2:	681c      	ldr	r4, [r3, #0]
 80017c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <HAL_InitTick+0x88>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	0019      	movs	r1, r3
 80017ca:	23fa      	movs	r3, #250	@ 0xfa
 80017cc:	0098      	lsls	r0, r3, #2
 80017ce:	f7fe fc9b 	bl	8000108 <__udivsi3>
 80017d2:	0003      	movs	r3, r0
 80017d4:	0019      	movs	r1, r3
 80017d6:	0020      	movs	r0, r4
 80017d8:	f7fe fc96 	bl	8000108 <__udivsi3>
 80017dc:	0003      	movs	r3, r0
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 ff87 	bl	80026f2 <HAL_SYSTICK_Config>
 80017e4:	1e03      	subs	r3, r0, #0
 80017e6:	d112      	bne.n	800180e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d80a      	bhi.n	8001804 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	2301      	movs	r3, #1
 80017f2:	425b      	negs	r3, r3
 80017f4:	2200      	movs	r2, #0
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 ff56 	bl	80026a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <HAL_InitTick+0x90>)
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e00d      	b.n	8001820 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001804:	230f      	movs	r3, #15
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e008      	b.n	8001820 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800180e:	230f      	movs	r3, #15
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
 8001816:	e003      	b.n	8001820 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001818:	230f      	movs	r3, #15
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001820:	230f      	movs	r3, #15
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	781b      	ldrb	r3, [r3, #0]
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b005      	add	sp, #20
 800182c:	bd90      	pop	{r4, r7, pc}
 800182e:	46c0      	nop			@ (mov r8, r8)
 8001830:	2000006c 	.word	0x2000006c
 8001834:	20000064 	.word	0x20000064
 8001838:	20000068 	.word	0x20000068

0800183c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001840:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <HAL_IncTick+0x1c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	001a      	movs	r2, r3
 8001846:	4b05      	ldr	r3, [pc, #20]	@ (800185c <HAL_IncTick+0x20>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	18d2      	adds	r2, r2, r3
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <HAL_IncTick+0x20>)
 800184e:	601a      	str	r2, [r3, #0]
}
 8001850:	46c0      	nop			@ (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	2000006c 	.word	0x2000006c
 800185c:	200005b4 	.word	0x200005b4

08001860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  return uwTick;
 8001864:	4b02      	ldr	r3, [pc, #8]	@ (8001870 <HAL_GetTick+0x10>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	200005b4 	.word	0x200005b4

08001874 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a05      	ldr	r2, [pc, #20]	@ (8001898 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001884:	401a      	ands	r2, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b002      	add	sp, #8
 8001894:	bd80      	pop	{r7, pc}
 8001896:	46c0      	nop			@ (mov r8, r8)
 8001898:	ff3fffff 	.word	0xff3fffff

0800189c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	23c0      	movs	r3, #192	@ 0xc0
 80018aa:	041b      	lsls	r3, r3, #16
 80018ac:	4013      	ands	r3, r2
}
 80018ae:	0018      	movs	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	2104      	movs	r1, #4
 80018ca:	400a      	ands	r2, r1
 80018cc:	2107      	movs	r1, #7
 80018ce:	4091      	lsls	r1, r2
 80018d0:	000a      	movs	r2, r1
 80018d2:	43d2      	mvns	r2, r2
 80018d4:	401a      	ands	r2, r3
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2104      	movs	r1, #4
 80018da:	400b      	ands	r3, r1
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4099      	lsls	r1, r3
 80018e0:	000b      	movs	r3, r1
 80018e2:	431a      	orrs	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80018e8:	46c0      	nop			@ (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b004      	add	sp, #16
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	2104      	movs	r1, #4
 8001902:	400a      	ands	r2, r1
 8001904:	2107      	movs	r1, #7
 8001906:	4091      	lsls	r1, r2
 8001908:	000a      	movs	r2, r1
 800190a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2104      	movs	r1, #4
 8001910:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001912:	40da      	lsrs	r2, r3
 8001914:	0013      	movs	r3, r2
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b002      	add	sp, #8
 800191c:	bd80      	pop	{r7, pc}

0800191e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	23c0      	movs	r3, #192	@ 0xc0
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	4013      	ands	r3, r2
 8001930:	d101      	bne.n	8001936 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001936:	2300      	movs	r3, #0
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}

08001940 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	211f      	movs	r1, #31
 8001954:	400a      	ands	r2, r1
 8001956:	210f      	movs	r1, #15
 8001958:	4091      	lsls	r1, r2
 800195a:	000a      	movs	r2, r1
 800195c:	43d2      	mvns	r2, r2
 800195e:	401a      	ands	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	0e9b      	lsrs	r3, r3, #26
 8001964:	210f      	movs	r1, #15
 8001966:	4019      	ands	r1, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	201f      	movs	r0, #31
 800196c:	4003      	ands	r3, r0
 800196e:	4099      	lsls	r1, r3
 8001970:	000b      	movs	r3, r1
 8001972:	431a      	orrs	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001978:	46c0      	nop			@ (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b004      	add	sp, #16
 800197e:	bd80      	pop	{r7, pc}

08001980 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	025b      	lsls	r3, r3, #9
 8001992:	0a5b      	lsrs	r3, r3, #9
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	b002      	add	sp, #8
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	0252      	lsls	r2, r2, #9
 80019b4:	0a52      	lsrs	r2, r2, #9
 80019b6:	43d2      	mvns	r2, r2
 80019b8:	401a      	ands	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	0212      	lsls	r2, r2, #8
 80019dc:	43d2      	mvns	r2, r2
 80019de:	401a      	ands	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	400b      	ands	r3, r1
 80019e8:	4904      	ldr	r1, [pc, #16]	@ (80019fc <LL_ADC_SetChannelSamplingTime+0x34>)
 80019ea:	400b      	ands	r3, r1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b004      	add	sp, #16
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	7fffff00 	.word	0x7fffff00

08001a00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4a05      	ldr	r2, [pc, #20]	@ (8001a24 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	2280      	movs	r2, #128	@ 0x80
 8001a12:	0552      	lsls	r2, r2, #21
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a1a:	46c0      	nop			@ (mov r8, r8)
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b002      	add	sp, #8
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	6fffffe8 	.word	0x6fffffe8

08001a28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	2380      	movs	r3, #128	@ 0x80
 8001a36:	055b      	lsls	r3, r3, #21
 8001a38:	401a      	ands	r2, r3
 8001a3a:	2380      	movs	r3, #128	@ 0x80
 8001a3c:	055b      	lsls	r3, r3, #21
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d101      	bne.n	8001a46 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b002      	add	sp, #8
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <LL_ADC_Enable+0x20>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2201      	movs	r2, #1
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a68:	46c0      	nop			@ (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b002      	add	sp, #8
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	7fffffe8 	.word	0x7fffffe8

08001a74 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <LL_ADC_Disable+0x20>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	2202      	movs	r2, #2
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a8c:	46c0      	nop			@ (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	b002      	add	sp, #8
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	7fffffe8 	.word	0x7fffffe8

08001a98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <LL_ADC_IsEnabled+0x18>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <LL_ADC_IsEnabled+0x1a>
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b002      	add	sp, #8
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <LL_ADC_REG_StartConversion+0x20>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	2204      	movs	r2, #4
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ad4:	46c0      	nop			@ (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	7fffffe8 	.word	0x7fffffe8

08001ae0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2204      	movs	r2, #4
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d101      	bne.n	8001af8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	0018      	movs	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b002      	add	sp, #8
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0c:	231f      	movs	r3, #31
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e17e      	b.n	8001e28 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10a      	bne.n	8001b48 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7ff faef 	bl	8001118 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2254      	movs	r2, #84	@ 0x54
 8001b44:	2100      	movs	r1, #0
 8001b46:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff ff6b 	bl	8001a28 <LL_ADC_IsInternalRegulatorEnabled>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d114      	bne.n	8001b80 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f7ff ff50 	bl	8001a00 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001b60:	4bb3      	ldr	r3, [pc, #716]	@ (8001e30 <HAL_ADC_Init+0x32c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	49b3      	ldr	r1, [pc, #716]	@ (8001e34 <HAL_ADC_Init+0x330>)
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7fe face 	bl	8000108 <__udivsi3>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b72:	e002      	b.n	8001b7a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f9      	bne.n	8001b74 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f7ff ff4f 	bl	8001a28 <LL_ADC_IsInternalRegulatorEnabled>
 8001b8a:	1e03      	subs	r3, r0, #0
 8001b8c:	d10f      	bne.n	8001bae <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b92:	2210      	movs	r2, #16
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ba6:	231f      	movs	r3, #31
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f7ff ff94 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d000      	beq.n	8001bc8 <HAL_ADC_Init+0xc4>
 8001bc6:	e122      	b.n	8001e0e <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d000      	beq.n	8001bd0 <HAL_ADC_Init+0xcc>
 8001bce:	e11e      	b.n	8001e0e <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd4:	4a98      	ldr	r2, [pc, #608]	@ (8001e38 <HAL_ADC_Init+0x334>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2202      	movs	r2, #2
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	0018      	movs	r0, r3
 8001be6:	f7ff ff57 	bl	8001a98 <LL_ADC_IsEnabled>
 8001bea:	1e03      	subs	r3, r0, #0
 8001bec:	d000      	beq.n	8001bf0 <HAL_ADC_Init+0xec>
 8001bee:	e0ad      	b.n	8001d4c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7e1b      	ldrb	r3, [r3, #24]
 8001bf8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001bfa:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7e5b      	ldrb	r3, [r3, #25]
 8001c00:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001c02:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7e9b      	ldrb	r3, [r3, #26]
 8001c08:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001c0a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_ADC_Init+0x116>
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	015b      	lsls	r3, r3, #5
 8001c18:	e000      	b.n	8001c1c <HAL_ADC_Init+0x118>
 8001c1a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c1c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c22:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da04      	bge.n	8001c36 <HAL_ADC_Init+0x132>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	085b      	lsrs	r3, r3, #1
 8001c34:	e001      	b.n	8001c3a <HAL_ADC_Init+0x136>
 8001c36:	2380      	movs	r3, #128	@ 0x80
 8001c38:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001c3a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	212c      	movs	r1, #44	@ 0x2c
 8001c40:	5c5b      	ldrb	r3, [r3, r1]
 8001c42:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c44:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	5c9b      	ldrb	r3, [r3, r2]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d115      	bne.n	8001c82 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7e9b      	ldrb	r3, [r3, #26]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2280      	movs	r2, #128	@ 0x80
 8001c62:	0252      	lsls	r2, r2, #9
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	e00b      	b.n	8001c82 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	2220      	movs	r2, #32
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00a      	beq.n	8001ca0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c8e:	23e0      	movs	r3, #224	@ 0xe0
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	4a65      	ldr	r2, [pc, #404]	@ (8001e3c <HAL_ADC_Init+0x338>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	0019      	movs	r1, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	0f9b      	lsrs	r3, r3, #30
 8001cbc:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	223c      	movs	r2, #60	@ 0x3c
 8001cce:	5c9b      	ldrb	r3, [r3, r2]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d111      	bne.n	8001cf8 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	0f9b      	lsrs	r3, r3, #30
 8001cda:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001ce0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001ce6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001cec:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	4a50      	ldr	r2, [pc, #320]	@ (8001e40 <HAL_ADC_Init+0x33c>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	23c0      	movs	r3, #192	@ 0xc0
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d018      	beq.n	8001d4c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	05db      	lsls	r3, r3, #23
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d012      	beq.n	8001d4c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d2a:	2380      	movs	r3, #128	@ 0x80
 8001d2c:	061b      	lsls	r3, r3, #24
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d00c      	beq.n	8001d4c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001d32:	4b44      	ldr	r3, [pc, #272]	@ (8001e44 <HAL_ADC_Init+0x340>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a44      	ldr	r2, [pc, #272]	@ (8001e48 <HAL_ADC_Init+0x344>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	23f0      	movs	r3, #240	@ 0xf0
 8001d42:	039b      	lsls	r3, r3, #14
 8001d44:	401a      	ands	r2, r3
 8001d46:	4b3f      	ldr	r3, [pc, #252]	@ (8001e44 <HAL_ADC_Init+0x340>)
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d54:	001a      	movs	r2, r3
 8001d56:	2100      	movs	r1, #0
 8001d58:	f7ff fdad 	bl	80018b6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d64:	4939      	ldr	r1, [pc, #228]	@ (8001e4c <HAL_ADC_Init+0x348>)
 8001d66:	001a      	movs	r2, r3
 8001d68:	f7ff fda5 	bl	80018b6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d109      	bne.n	8001d88 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2110      	movs	r1, #16
 8001d80:	4249      	negs	r1, r1
 8001d82:	430a      	orrs	r2, r1
 8001d84:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d86:	e018      	b.n	8001dba <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	2380      	movs	r3, #128	@ 0x80
 8001d8e:	039b      	lsls	r3, r3, #14
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d112      	bne.n	8001dba <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	221c      	movs	r2, #28
 8001da4:	4013      	ands	r3, r2
 8001da6:	2210      	movs	r2, #16
 8001da8:	4252      	negs	r2, r2
 8001daa:	409a      	lsls	r2, r3
 8001dac:	0011      	movs	r1, r2
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f7ff fd95 	bl	80018f0 <LL_ADC_GetSamplingTimeCommonChannels>
 8001dc6:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d10b      	bne.n	8001de8 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	2203      	movs	r2, #3
 8001ddc:	4393      	bics	r3, r2
 8001dde:	2201      	movs	r2, #1
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001de6:	e01c      	b.n	8001e22 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dec:	2212      	movs	r2, #18
 8001dee:	4393      	bics	r3, r2
 8001df0:	2210      	movs	r2, #16
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001e04:	231f      	movs	r3, #31
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e0c:	e009      	b.n	8001e22 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e12:	2210      	movs	r2, #16
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e1a:	231f      	movs	r3, #31
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e22:	231f      	movs	r3, #31
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	781b      	ldrb	r3, [r3, #0]
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b008      	add	sp, #32
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000064 	.word	0x20000064
 8001e34:	00030d40 	.word	0x00030d40
 8001e38:	fffffefd 	.word	0xfffffefd
 8001e3c:	ffde0201 	.word	0xffde0201
 8001e40:	1ffffc02 	.word	0x1ffffc02
 8001e44:	40012708 	.word	0x40012708
 8001e48:	ffc3ffff 	.word	0xffc3ffff
 8001e4c:	7fffff04 	.word	0x7fffff04

08001e50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7ff fe3d 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8001e66:	1e03      	subs	r3, r0, #0
 8001e68:	d16c      	bne.n	8001f44 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2254      	movs	r2, #84	@ 0x54
 8001e6e:	5c9b      	ldrb	r3, [r3, r2]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d101      	bne.n	8001e78 <HAL_ADC_Start_DMA+0x28>
 8001e74:	2302      	movs	r3, #2
 8001e76:	e06c      	b.n	8001f52 <HAL_ADC_Start_DMA+0x102>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2254      	movs	r2, #84	@ 0x54
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2201      	movs	r2, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d113      	bne.n	8001eb4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7ff fe01 	bl	8001a98 <LL_ADC_IsEnabled>
 8001e96:	1e03      	subs	r3, r0, #0
 8001e98:	d004      	beq.n	8001ea4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7ff fde8 	bl	8001a74 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2101      	movs	r1, #1
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001eb4:	2517      	movs	r5, #23
 8001eb6:	197c      	adds	r4, r7, r5
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f000 fa3c 	bl	8002338 <ADC_Enable>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ec4:	002c      	movs	r4, r5
 8001ec6:	193b      	adds	r3, r7, r4
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d13e      	bne.n	8001f4c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed2:	4a22      	ldr	r2, [pc, #136]	@ (8001f5c <HAL_ADC_Start_DMA+0x10c>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2280      	movs	r2, #128	@ 0x80
 8001ed8:	0052      	lsls	r2, r2, #1
 8001eda:	431a      	orrs	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eea:	4a1d      	ldr	r2, [pc, #116]	@ (8001f60 <HAL_ADC_Start_DMA+0x110>)
 8001eec:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f64 <HAL_ADC_Start_DMA+0x114>)
 8001ef4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001efa:	4a1b      	ldr	r2, [pc, #108]	@ (8001f68 <HAL_ADC_Start_DMA+0x118>)
 8001efc:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	221c      	movs	r2, #28
 8001f04:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2254      	movs	r2, #84	@ 0x54
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2110      	movs	r1, #16
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3340      	adds	r3, #64	@ 0x40
 8001f28:	0019      	movs	r1, r3
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	193c      	adds	r4, r7, r4
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f000 fc76 	bl	8002820 <HAL_DMA_Start_IT>
 8001f34:	0003      	movs	r3, r0
 8001f36:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff fdbd 	bl	8001abc <LL_ADC_REG_StartConversion>
 8001f42:	e003      	b.n	8001f4c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f44:	2317      	movs	r3, #23
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	2202      	movs	r2, #2
 8001f4a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f4c:	2317      	movs	r3, #23
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	781b      	ldrb	r3, [r3, #0]
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b006      	add	sp, #24
 8001f58:	bdb0      	pop	{r4, r5, r7, pc}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	fffff0fe 	.word	0xfffff0fe
 8001f60:	08002435 	.word	0x08002435
 8001f64:	080024fd 	.word	0x080024fd
 8001f68:	0800251b 	.word	0x0800251b

08001f6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f74:	46c0      	nop			@ (mov r8, r8)
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b002      	add	sp, #8
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f84:	46c0      	nop			@ (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b002      	add	sp, #8
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f96:	2317      	movs	r3, #23
 8001f98:	18fb      	adds	r3, r7, r3
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2254      	movs	r2, #84	@ 0x54
 8001fa6:	5c9b      	ldrb	r3, [r3, r2]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x24>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e1be      	b.n	800232e <HAL_ADC_ConfigChannel+0x3a2>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2254      	movs	r2, #84	@ 0x54
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7ff fd8f 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8001fc2:	1e03      	subs	r3, r0, #0
 8001fc4:	d000      	beq.n	8001fc8 <HAL_ADC_ConfigChannel+0x3c>
 8001fc6:	e1a1      	b.n	800230c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d100      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x46>
 8001fd0:	e152      	b.n	8002278 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691a      	ldr	r2, [r3, #16]
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d004      	beq.n	8001fe8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fe2:	4ac2      	ldr	r2, [pc, #776]	@ (80022ec <HAL_ADC_ConfigChannel+0x360>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d108      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	0010      	movs	r0, r2
 8001ff4:	f7ff fcc4 	bl	8001980 <LL_ADC_REG_SetSequencerChAdd>
 8001ff8:	e0ed      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	211f      	movs	r1, #31
 8002004:	400b      	ands	r3, r1
 8002006:	210f      	movs	r1, #15
 8002008:	4099      	lsls	r1, r3
 800200a:	000b      	movs	r3, r1
 800200c:	43db      	mvns	r3, r3
 800200e:	4013      	ands	r3, r2
 8002010:	0019      	movs	r1, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	025b      	lsls	r3, r3, #9
 8002018:	0a5b      	lsrs	r3, r3, #9
 800201a:	d105      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x9c>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0e9b      	lsrs	r3, r3, #26
 8002022:	221f      	movs	r2, #31
 8002024:	4013      	ands	r3, r2
 8002026:	e0bc      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2201      	movs	r2, #1
 800202e:	4013      	ands	r3, r2
 8002030:	d000      	beq.n	8002034 <HAL_ADC_ConfigChannel+0xa8>
 8002032:	e0b5      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x214>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2202      	movs	r2, #2
 800203a:	4013      	ands	r3, r2
 800203c:	d000      	beq.n	8002040 <HAL_ADC_ConfigChannel+0xb4>
 800203e:	e0ad      	b.n	800219c <HAL_ADC_ConfigChannel+0x210>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2204      	movs	r2, #4
 8002046:	4013      	ands	r3, r2
 8002048:	d000      	beq.n	800204c <HAL_ADC_ConfigChannel+0xc0>
 800204a:	e0a5      	b.n	8002198 <HAL_ADC_ConfigChannel+0x20c>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2208      	movs	r2, #8
 8002052:	4013      	ands	r3, r2
 8002054:	d000      	beq.n	8002058 <HAL_ADC_ConfigChannel+0xcc>
 8002056:	e09d      	b.n	8002194 <HAL_ADC_ConfigChannel+0x208>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2210      	movs	r2, #16
 800205e:	4013      	ands	r3, r2
 8002060:	d000      	beq.n	8002064 <HAL_ADC_ConfigChannel+0xd8>
 8002062:	e095      	b.n	8002190 <HAL_ADC_ConfigChannel+0x204>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2220      	movs	r2, #32
 800206a:	4013      	ands	r3, r2
 800206c:	d000      	beq.n	8002070 <HAL_ADC_ConfigChannel+0xe4>
 800206e:	e08d      	b.n	800218c <HAL_ADC_ConfigChannel+0x200>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2240      	movs	r2, #64	@ 0x40
 8002076:	4013      	ands	r3, r2
 8002078:	d000      	beq.n	800207c <HAL_ADC_ConfigChannel+0xf0>
 800207a:	e085      	b.n	8002188 <HAL_ADC_ConfigChannel+0x1fc>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2280      	movs	r2, #128	@ 0x80
 8002082:	4013      	ands	r3, r2
 8002084:	d000      	beq.n	8002088 <HAL_ADC_ConfigChannel+0xfc>
 8002086:	e07d      	b.n	8002184 <HAL_ADC_ConfigChannel+0x1f8>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2380      	movs	r3, #128	@ 0x80
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4013      	ands	r3, r2
 8002092:	d000      	beq.n	8002096 <HAL_ADC_ConfigChannel+0x10a>
 8002094:	e074      	b.n	8002180 <HAL_ADC_ConfigChannel+0x1f4>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	2380      	movs	r3, #128	@ 0x80
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4013      	ands	r3, r2
 80020a0:	d000      	beq.n	80020a4 <HAL_ADC_ConfigChannel+0x118>
 80020a2:	e06b      	b.n	800217c <HAL_ADC_ConfigChannel+0x1f0>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	2380      	movs	r3, #128	@ 0x80
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4013      	ands	r3, r2
 80020ae:	d000      	beq.n	80020b2 <HAL_ADC_ConfigChannel+0x126>
 80020b0:	e062      	b.n	8002178 <HAL_ADC_ConfigChannel+0x1ec>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	@ 0x80
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	4013      	ands	r3, r2
 80020bc:	d000      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x134>
 80020be:	e059      	b.n	8002174 <HAL_ADC_ConfigChannel+0x1e8>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	2380      	movs	r3, #128	@ 0x80
 80020c6:	015b      	lsls	r3, r3, #5
 80020c8:	4013      	ands	r3, r2
 80020ca:	d151      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x1e4>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	@ 0x80
 80020d2:	019b      	lsls	r3, r3, #6
 80020d4:	4013      	ands	r3, r2
 80020d6:	d149      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1e0>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	@ 0x80
 80020de:	01db      	lsls	r3, r3, #7
 80020e0:	4013      	ands	r3, r2
 80020e2:	d141      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x1dc>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2380      	movs	r3, #128	@ 0x80
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	4013      	ands	r3, r2
 80020ee:	d139      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x1d8>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	025b      	lsls	r3, r3, #9
 80020f8:	4013      	ands	r3, r2
 80020fa:	d131      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x1d4>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2380      	movs	r3, #128	@ 0x80
 8002102:	029b      	lsls	r3, r3, #10
 8002104:	4013      	ands	r3, r2
 8002106:	d129      	bne.n	800215c <HAL_ADC_ConfigChannel+0x1d0>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	@ 0x80
 800210e:	02db      	lsls	r3, r3, #11
 8002110:	4013      	ands	r3, r2
 8002112:	d121      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1cc>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	031b      	lsls	r3, r3, #12
 800211c:	4013      	ands	r3, r2
 800211e:	d119      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x1c8>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	@ 0x80
 8002126:	035b      	lsls	r3, r3, #13
 8002128:	4013      	ands	r3, r2
 800212a:	d111      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x1c4>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2380      	movs	r3, #128	@ 0x80
 8002132:	039b      	lsls	r3, r3, #14
 8002134:	4013      	ands	r3, r2
 8002136:	d109      	bne.n	800214c <HAL_ADC_ConfigChannel+0x1c0>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	@ 0x80
 800213e:	03db      	lsls	r3, r3, #15
 8002140:	4013      	ands	r3, r2
 8002142:	d001      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x1bc>
 8002144:	2316      	movs	r3, #22
 8002146:	e02c      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002148:	2300      	movs	r3, #0
 800214a:	e02a      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 800214c:	2315      	movs	r3, #21
 800214e:	e028      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002150:	2314      	movs	r3, #20
 8002152:	e026      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002154:	2313      	movs	r3, #19
 8002156:	e024      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002158:	2312      	movs	r3, #18
 800215a:	e022      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 800215c:	2311      	movs	r3, #17
 800215e:	e020      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002160:	2310      	movs	r3, #16
 8002162:	e01e      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002164:	230f      	movs	r3, #15
 8002166:	e01c      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002168:	230e      	movs	r3, #14
 800216a:	e01a      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 800216c:	230d      	movs	r3, #13
 800216e:	e018      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002170:	230c      	movs	r3, #12
 8002172:	e016      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002174:	230b      	movs	r3, #11
 8002176:	e014      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002178:	230a      	movs	r3, #10
 800217a:	e012      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 800217c:	2309      	movs	r3, #9
 800217e:	e010      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002180:	2308      	movs	r3, #8
 8002182:	e00e      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002184:	2307      	movs	r3, #7
 8002186:	e00c      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002188:	2306      	movs	r3, #6
 800218a:	e00a      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 800218c:	2305      	movs	r3, #5
 800218e:	e008      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002190:	2304      	movs	r3, #4
 8002192:	e006      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002194:	2303      	movs	r3, #3
 8002196:	e004      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 8002198:	2302      	movs	r3, #2
 800219a:	e002      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x216>
 80021a0:	2300      	movs	r3, #0
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	6852      	ldr	r2, [r2, #4]
 80021a6:	201f      	movs	r0, #31
 80021a8:	4002      	ands	r2, r0
 80021aa:	4093      	lsls	r3, r2
 80021ac:	000a      	movs	r2, r1
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d808      	bhi.n	80021d6 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	001a      	movs	r2, r3
 80021d2:	f7ff fbb5 	bl	8001940 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	6819      	ldr	r1, [r3, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	001a      	movs	r2, r3
 80021e4:	f7ff fbf0 	bl	80019c8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db00      	blt.n	80021f2 <HAL_ADC_ConfigChannel+0x266>
 80021f0:	e096      	b.n	8002320 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021f2:	4b3f      	ldr	r3, [pc, #252]	@ (80022f0 <HAL_ADC_ConfigChannel+0x364>)
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff fb51 	bl	800189c <LL_ADC_GetCommonPathInternalCh>
 80021fa:	0003      	movs	r3, r0
 80021fc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a3c      	ldr	r2, [pc, #240]	@ (80022f4 <HAL_ADC_ConfigChannel+0x368>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d123      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002210:	d11e      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2280      	movs	r2, #128	@ 0x80
 8002216:	0412      	lsls	r2, r2, #16
 8002218:	4313      	orrs	r3, r2
 800221a:	4a35      	ldr	r2, [pc, #212]	@ (80022f0 <HAL_ADC_ConfigChannel+0x364>)
 800221c:	0019      	movs	r1, r3
 800221e:	0010      	movs	r0, r2
 8002220:	f7ff fb28 	bl	8001874 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002224:	4b34      	ldr	r3, [pc, #208]	@ (80022f8 <HAL_ADC_ConfigChannel+0x36c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4934      	ldr	r1, [pc, #208]	@ (80022fc <HAL_ADC_ConfigChannel+0x370>)
 800222a:	0018      	movs	r0, r3
 800222c:	f7fd ff6c 	bl	8000108 <__udivsi3>
 8002230:	0003      	movs	r3, r0
 8002232:	001a      	movs	r2, r3
 8002234:	0013      	movs	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	189b      	adds	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	3301      	adds	r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002240:	e002      	b.n	8002248 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3b01      	subs	r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f9      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800224e:	e067      	b.n	8002320 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2a      	ldr	r2, [pc, #168]	@ (8002300 <HAL_ADC_ConfigChannel+0x374>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d162      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	03db      	lsls	r3, r3, #15
 8002260:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002262:	d15d      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2280      	movs	r2, #128	@ 0x80
 8002268:	03d2      	lsls	r2, r2, #15
 800226a:	4313      	orrs	r3, r2
 800226c:	4a20      	ldr	r2, [pc, #128]	@ (80022f0 <HAL_ADC_ConfigChannel+0x364>)
 800226e:	0019      	movs	r1, r3
 8002270:	0010      	movs	r0, r2
 8002272:	f7ff faff 	bl	8001874 <LL_ADC_SetCommonPathInternalCh>
 8002276:	e053      	b.n	8002320 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	2380      	movs	r3, #128	@ 0x80
 800227e:	061b      	lsls	r3, r3, #24
 8002280:	429a      	cmp	r2, r3
 8002282:	d004      	beq.n	800228e <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002288:	4a18      	ldr	r2, [pc, #96]	@ (80022ec <HAL_ADC_ConfigChannel+0x360>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d107      	bne.n	800229e <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0019      	movs	r1, r3
 8002298:	0010      	movs	r0, r2
 800229a:	f7ff fb82 	bl	80019a2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	da3c      	bge.n	8002320 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022a6:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <HAL_ADC_ConfigChannel+0x364>)
 80022a8:	0018      	movs	r0, r3
 80022aa:	f7ff faf7 	bl	800189c <LL_ADC_GetCommonPathInternalCh>
 80022ae:	0003      	movs	r3, r0
 80022b0:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a0f      	ldr	r2, [pc, #60]	@ (80022f4 <HAL_ADC_ConfigChannel+0x368>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d108      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4a11      	ldr	r2, [pc, #68]	@ (8002304 <HAL_ADC_ConfigChannel+0x378>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	4a0b      	ldr	r2, [pc, #44]	@ (80022f0 <HAL_ADC_ConfigChannel+0x364>)
 80022c4:	0019      	movs	r1, r3
 80022c6:	0010      	movs	r0, r2
 80022c8:	f7ff fad4 	bl	8001874 <LL_ADC_SetCommonPathInternalCh>
 80022cc:	e028      	b.n	8002320 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002300 <HAL_ADC_ConfigChannel+0x374>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d123      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4a0b      	ldr	r2, [pc, #44]	@ (8002308 <HAL_ADC_ConfigChannel+0x37c>)
 80022dc:	4013      	ands	r3, r2
 80022de:	4a04      	ldr	r2, [pc, #16]	@ (80022f0 <HAL_ADC_ConfigChannel+0x364>)
 80022e0:	0019      	movs	r1, r3
 80022e2:	0010      	movs	r0, r2
 80022e4:	f7ff fac6 	bl	8001874 <LL_ADC_SetCommonPathInternalCh>
 80022e8:	e01a      	b.n	8002320 <HAL_ADC_ConfigChannel+0x394>
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	80000004 	.word	0x80000004
 80022f0:	40012708 	.word	0x40012708
 80022f4:	a4000200 	.word	0xa4000200
 80022f8:	20000064 	.word	0x20000064
 80022fc:	00030d40 	.word	0x00030d40
 8002300:	a8000400 	.word	0xa8000400
 8002304:	ff7fffff 	.word	0xff7fffff
 8002308:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002310:	2220      	movs	r2, #32
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002318:	2317      	movs	r3, #23
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2254      	movs	r2, #84	@ 0x54
 8002324:	2100      	movs	r1, #0
 8002326:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002328:	2317      	movs	r3, #23
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	781b      	ldrb	r3, [r3, #0]
}
 800232e:	0018      	movs	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	b006      	add	sp, #24
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			@ (mov r8, r8)

08002338 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002340:	2300      	movs	r3, #0
 8002342:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	0018      	movs	r0, r3
 800234a:	f7ff fba5 	bl	8001a98 <LL_ADC_IsEnabled>
 800234e:	1e03      	subs	r3, r0, #0
 8002350:	d162      	bne.n	8002418 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a32      	ldr	r2, [pc, #200]	@ (8002424 <ADC_Enable+0xec>)
 800235a:	4013      	ands	r3, r2
 800235c:	d00d      	beq.n	800237a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002362:	2210      	movs	r2, #16
 8002364:	431a      	orrs	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236e:	2201      	movs	r2, #1
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e04f      	b.n	800241a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	0018      	movs	r0, r3
 8002380:	f7ff fb66 	bl	8001a50 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002384:	4b28      	ldr	r3, [pc, #160]	@ (8002428 <ADC_Enable+0xf0>)
 8002386:	0018      	movs	r0, r3
 8002388:	f7ff fa88 	bl	800189c <LL_ADC_GetCommonPathInternalCh>
 800238c:	0002      	movs	r2, r0
 800238e:	2380      	movs	r3, #128	@ 0x80
 8002390:	041b      	lsls	r3, r3, #16
 8002392:	4013      	ands	r3, r2
 8002394:	d00f      	beq.n	80023b6 <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002396:	4b25      	ldr	r3, [pc, #148]	@ (800242c <ADC_Enable+0xf4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4925      	ldr	r1, [pc, #148]	@ (8002430 <ADC_Enable+0xf8>)
 800239c:	0018      	movs	r0, r3
 800239e:	f7fd feb3 	bl	8000108 <__udivsi3>
 80023a2:	0003      	movs	r3, r0
 80023a4:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80023a6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023a8:	e002      	b.n	80023b0 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f9      	bne.n	80023aa <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7e5b      	ldrb	r3, [r3, #25]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d02c      	beq.n	8002418 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80023be:	f7ff fa4f 	bl	8001860 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023c6:	e020      	b.n	800240a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7ff fb63 	bl	8001a98 <LL_ADC_IsEnabled>
 80023d2:	1e03      	subs	r3, r0, #0
 80023d4:	d104      	bne.n	80023e0 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	0018      	movs	r0, r3
 80023dc:	f7ff fb38 	bl	8001a50 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023e0:	f7ff fa3e 	bl	8001860 <HAL_GetTick>
 80023e4:	0002      	movs	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d90d      	bls.n	800240a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f2:	2210      	movs	r2, #16
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fe:	2201      	movs	r2, #1
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e007      	b.n	800241a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	4013      	ands	r3, r2
 8002414:	2b01      	cmp	r3, #1
 8002416:	d1d7      	bne.n	80023c8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b004      	add	sp, #16
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	80000017 	.word	0x80000017
 8002428:	40012708 	.word	0x40012708
 800242c:	20000064 	.word	0x20000064
 8002430:	00030d40 	.word	0x00030d40

08002434 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002440:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002446:	2250      	movs	r2, #80	@ 0x50
 8002448:	4013      	ands	r3, r2
 800244a:	d141      	bne.n	80024d0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002450:	2280      	movs	r2, #128	@ 0x80
 8002452:	0092      	lsls	r2, r2, #2
 8002454:	431a      	orrs	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0018      	movs	r0, r3
 8002460:	f7ff fa5d 	bl	800191e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002464:	1e03      	subs	r3, r0, #0
 8002466:	d02e      	beq.n	80024c6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	7e9b      	ldrb	r3, [r3, #26]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d12a      	bne.n	80024c6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2208      	movs	r2, #8
 8002478:	4013      	ands	r3, r2
 800247a:	2b08      	cmp	r3, #8
 800247c:	d123      	bne.n	80024c6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	0018      	movs	r0, r3
 8002484:	f7ff fb2c 	bl	8001ae0 <LL_ADC_REG_IsConversionOngoing>
 8002488:	1e03      	subs	r3, r0, #0
 800248a:	d110      	bne.n	80024ae <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	210c      	movs	r1, #12
 8002498:	438a      	bics	r2, r1
 800249a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a0:	4a15      	ldr	r2, [pc, #84]	@ (80024f8 <ADC_DMAConvCplt+0xc4>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	2201      	movs	r2, #1
 80024a6:	431a      	orrs	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80024ac:	e00b      	b.n	80024c6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b2:	2220      	movs	r2, #32
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024be:	2201      	movs	r2, #1
 80024c0:	431a      	orrs	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7fd ff93 	bl	80003f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024ce:	e00f      	b.n	80024f0 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d4:	2210      	movs	r2, #16
 80024d6:	4013      	ands	r3, r2
 80024d8:	d004      	beq.n	80024e4 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	0018      	movs	r0, r3
 80024de:	f7ff fd4d 	bl	8001f7c <HAL_ADC_ErrorCallback>
}
 80024e2:	e005      	b.n	80024f0 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	0010      	movs	r0, r2
 80024ee:	4798      	blx	r3
}
 80024f0:	46c0      	nop			@ (mov r8, r8)
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b004      	add	sp, #16
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	fffffefe 	.word	0xfffffefe

080024fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002508:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	0018      	movs	r0, r3
 800250e:	f7ff fd2d 	bl	8001f6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002512:	46c0      	nop			@ (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b004      	add	sp, #16
 8002518:	bd80      	pop	{r7, pc}

0800251a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002526:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252c:	2240      	movs	r2, #64	@ 0x40
 800252e:	431a      	orrs	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002538:	2204      	movs	r2, #4
 800253a:	431a      	orrs	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	0018      	movs	r0, r3
 8002544:	f7ff fd1a 	bl	8001f7c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002548:	46c0      	nop			@ (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b004      	add	sp, #16
 800254e:	bd80      	pop	{r7, pc}

08002550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	0002      	movs	r2, r0
 8002558:	1dfb      	adds	r3, r7, #7
 800255a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800255c:	1dfb      	adds	r3, r7, #7
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b7f      	cmp	r3, #127	@ 0x7f
 8002562:	d809      	bhi.n	8002578 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002564:	1dfb      	adds	r3, r7, #7
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	001a      	movs	r2, r3
 800256a:	231f      	movs	r3, #31
 800256c:	401a      	ands	r2, r3
 800256e:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <__NVIC_EnableIRQ+0x30>)
 8002570:	2101      	movs	r1, #1
 8002572:	4091      	lsls	r1, r2
 8002574:	000a      	movs	r2, r1
 8002576:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002578:	46c0      	nop			@ (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}
 8002580:	e000e100 	.word	0xe000e100

08002584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002584:	b590      	push	{r4, r7, lr}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	0002      	movs	r2, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	1dfb      	adds	r3, r7, #7
 8002590:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002592:	1dfb      	adds	r3, r7, #7
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b7f      	cmp	r3, #127	@ 0x7f
 8002598:	d828      	bhi.n	80025ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800259a:	4a2f      	ldr	r2, [pc, #188]	@ (8002658 <__NVIC_SetPriority+0xd4>)
 800259c:	1dfb      	adds	r3, r7, #7
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	33c0      	adds	r3, #192	@ 0xc0
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	589b      	ldr	r3, [r3, r2]
 80025aa:	1dfa      	adds	r2, r7, #7
 80025ac:	7812      	ldrb	r2, [r2, #0]
 80025ae:	0011      	movs	r1, r2
 80025b0:	2203      	movs	r2, #3
 80025b2:	400a      	ands	r2, r1
 80025b4:	00d2      	lsls	r2, r2, #3
 80025b6:	21ff      	movs	r1, #255	@ 0xff
 80025b8:	4091      	lsls	r1, r2
 80025ba:	000a      	movs	r2, r1
 80025bc:	43d2      	mvns	r2, r2
 80025be:	401a      	ands	r2, r3
 80025c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	22ff      	movs	r2, #255	@ 0xff
 80025c8:	401a      	ands	r2, r3
 80025ca:	1dfb      	adds	r3, r7, #7
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	0018      	movs	r0, r3
 80025d0:	2303      	movs	r3, #3
 80025d2:	4003      	ands	r3, r0
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025d8:	481f      	ldr	r0, [pc, #124]	@ (8002658 <__NVIC_SetPriority+0xd4>)
 80025da:	1dfb      	adds	r3, r7, #7
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	430a      	orrs	r2, r1
 80025e4:	33c0      	adds	r3, #192	@ 0xc0
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80025ea:	e031      	b.n	8002650 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025ec:	4a1b      	ldr	r2, [pc, #108]	@ (800265c <__NVIC_SetPriority+0xd8>)
 80025ee:	1dfb      	adds	r3, r7, #7
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	0019      	movs	r1, r3
 80025f4:	230f      	movs	r3, #15
 80025f6:	400b      	ands	r3, r1
 80025f8:	3b08      	subs	r3, #8
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3306      	adds	r3, #6
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	18d3      	adds	r3, r2, r3
 8002602:	3304      	adds	r3, #4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	1dfa      	adds	r2, r7, #7
 8002608:	7812      	ldrb	r2, [r2, #0]
 800260a:	0011      	movs	r1, r2
 800260c:	2203      	movs	r2, #3
 800260e:	400a      	ands	r2, r1
 8002610:	00d2      	lsls	r2, r2, #3
 8002612:	21ff      	movs	r1, #255	@ 0xff
 8002614:	4091      	lsls	r1, r2
 8002616:	000a      	movs	r2, r1
 8002618:	43d2      	mvns	r2, r2
 800261a:	401a      	ands	r2, r3
 800261c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	019b      	lsls	r3, r3, #6
 8002622:	22ff      	movs	r2, #255	@ 0xff
 8002624:	401a      	ands	r2, r3
 8002626:	1dfb      	adds	r3, r7, #7
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	0018      	movs	r0, r3
 800262c:	2303      	movs	r3, #3
 800262e:	4003      	ands	r3, r0
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002634:	4809      	ldr	r0, [pc, #36]	@ (800265c <__NVIC_SetPriority+0xd8>)
 8002636:	1dfb      	adds	r3, r7, #7
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	001c      	movs	r4, r3
 800263c:	230f      	movs	r3, #15
 800263e:	4023      	ands	r3, r4
 8002640:	3b08      	subs	r3, #8
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	430a      	orrs	r2, r1
 8002646:	3306      	adds	r3, #6
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	18c3      	adds	r3, r0, r3
 800264c:	3304      	adds	r3, #4
 800264e:	601a      	str	r2, [r3, #0]
}
 8002650:	46c0      	nop			@ (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b003      	add	sp, #12
 8002656:	bd90      	pop	{r4, r7, pc}
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	1e5a      	subs	r2, r3, #1
 800266c:	2380      	movs	r3, #128	@ 0x80
 800266e:	045b      	lsls	r3, r3, #17
 8002670:	429a      	cmp	r2, r3
 8002672:	d301      	bcc.n	8002678 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002674:	2301      	movs	r3, #1
 8002676:	e010      	b.n	800269a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002678:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <SysTick_Config+0x44>)
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	3a01      	subs	r2, #1
 800267e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002680:	2301      	movs	r3, #1
 8002682:	425b      	negs	r3, r3
 8002684:	2103      	movs	r1, #3
 8002686:	0018      	movs	r0, r3
 8002688:	f7ff ff7c 	bl	8002584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <SysTick_Config+0x44>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <SysTick_Config+0x44>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b002      	add	sp, #8
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	210f      	movs	r1, #15
 80026b4:	187b      	adds	r3, r7, r1
 80026b6:	1c02      	adds	r2, r0, #0
 80026b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b25b      	sxtb	r3, r3
 80026c2:	0011      	movs	r1, r2
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7ff ff5d 	bl	8002584 <__NVIC_SetPriority>
}
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	0002      	movs	r2, r0
 80026da:	1dfb      	adds	r3, r7, #7
 80026dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026de:	1dfb      	adds	r3, r7, #7
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7ff ff33 	bl	8002550 <__NVIC_EnableIRQ>
}
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b002      	add	sp, #8
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7ff ffaf 	bl	8002660 <SysTick_Config>
 8002702:	0003      	movs	r3, r0
}
 8002704:	0018      	movs	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	b002      	add	sp, #8
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e077      	b.n	800280e <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a3d      	ldr	r2, [pc, #244]	@ (8002818 <HAL_DMA_Init+0x10c>)
 8002724:	4694      	mov	ip, r2
 8002726:	4463      	add	r3, ip
 8002728:	2114      	movs	r1, #20
 800272a:	0018      	movs	r0, r3
 800272c:	f7fd fcec 	bl	8000108 <__udivsi3>
 8002730:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002732:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2225      	movs	r2, #37	@ 0x25
 800273c:	2102      	movs	r1, #2
 800273e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4934      	ldr	r1, [pc, #208]	@ (800281c <HAL_DMA_Init+0x110>)
 800274c:	400a      	ands	r2, r1
 800274e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6819      	ldr	r1, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	0018      	movs	r0, r3
 800278a:	f000 f9c3 	bl	8002b14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	2380      	movs	r3, #128	@ 0x80
 8002794:	01db      	lsls	r3, r3, #7
 8002796:	429a      	cmp	r2, r3
 8002798:	d102      	bne.n	80027a0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a8:	21ff      	movs	r1, #255	@ 0xff
 80027aa:	400a      	ands	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80027b6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d011      	beq.n	80027e4 <HAL_DMA_Init+0xd8>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d80d      	bhi.n	80027e4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	0018      	movs	r0, r3
 80027cc:	f000 f9ce 	bl	8002b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	e008      	b.n	80027f6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2225      	movs	r2, #37	@ 0x25
 8002800:	2101      	movs	r1, #1
 8002802:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2224      	movs	r2, #36	@ 0x24
 8002808:	2100      	movs	r1, #0
 800280a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	0018      	movs	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	b002      	add	sp, #8
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	bffdfff8 	.word	0xbffdfff8
 800281c:	ffff800f 	.word	0xffff800f

08002820 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800282e:	2317      	movs	r3, #23
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2224      	movs	r2, #36	@ 0x24
 800283a:	5c9b      	ldrb	r3, [r3, r2]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_DMA_Start_IT+0x24>
 8002840:	2302      	movs	r3, #2
 8002842:	e070      	b.n	8002926 <HAL_DMA_Start_IT+0x106>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2224      	movs	r2, #36	@ 0x24
 8002848:	2101      	movs	r1, #1
 800284a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2225      	movs	r2, #37	@ 0x25
 8002850:	5c9b      	ldrb	r3, [r3, r2]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d157      	bne.n	8002908 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2225      	movs	r2, #37	@ 0x25
 800285c:	2102      	movs	r1, #2
 800285e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2101      	movs	r1, #1
 8002872:	438a      	bics	r2, r1
 8002874:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f909 	bl	8002a94 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	210e      	movs	r1, #14
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e00f      	b.n	80028bc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2104      	movs	r1, #4
 80028a8:	438a      	bics	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	210a      	movs	r1, #10
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	@ 0x80
 80028c4:	025b      	lsls	r3, r3, #9
 80028c6:	4013      	ands	r3, r2
 80028c8:	d008      	beq.n	80028dc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d4:	2180      	movs	r1, #128	@ 0x80
 80028d6:	0049      	lsls	r1, r1, #1
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ee:	2180      	movs	r1, #128	@ 0x80
 80028f0:	0049      	lsls	r1, r1, #1
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e007      	b.n	8002918 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2224      	movs	r2, #36	@ 0x24
 800290c:	2100      	movs	r1, #0
 800290e:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002910:	2317      	movs	r3, #23
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	2202      	movs	r2, #2
 8002916:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2224      	movs	r2, #36	@ 0x24
 800291c:	2100      	movs	r1, #0
 800291e:	5499      	strb	r1, [r3, r2]

  return status;
 8002920:	2317      	movs	r3, #23
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	781b      	ldrb	r3, [r3, #0]
}
 8002926:	0018      	movs	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	b006      	add	sp, #24
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8002938:	4b55      	ldr	r3, [pc, #340]	@ (8002a90 <HAL_DMA_IRQHandler+0x160>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	221c      	movs	r2, #28
 800294c:	4013      	ands	r3, r2
 800294e:	2204      	movs	r2, #4
 8002950:	409a      	lsls	r2, r3
 8002952:	0013      	movs	r3, r2
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4013      	ands	r3, r2
 8002958:	d027      	beq.n	80029aa <HAL_DMA_IRQHandler+0x7a>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2204      	movs	r2, #4
 800295e:	4013      	ands	r3, r2
 8002960:	d023      	beq.n	80029aa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2220      	movs	r2, #32
 800296a:	4013      	ands	r3, r2
 800296c:	d107      	bne.n	800297e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2104      	movs	r1, #4
 800297a:	438a      	bics	r2, r1
 800297c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800297e:	4b44      	ldr	r3, [pc, #272]	@ (8002a90 <HAL_DMA_IRQHandler+0x160>)
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	221c      	movs	r2, #28
 8002988:	4013      	ands	r3, r2
 800298a:	2204      	movs	r2, #4
 800298c:	409a      	lsls	r2, r3
 800298e:	4b40      	ldr	r3, [pc, #256]	@ (8002a90 <HAL_DMA_IRQHandler+0x160>)
 8002990:	430a      	orrs	r2, r1
 8002992:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002998:	2b00      	cmp	r3, #0
 800299a:	d100      	bne.n	800299e <HAL_DMA_IRQHandler+0x6e>
 800299c:	e073      	b.n	8002a86 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	0010      	movs	r0, r2
 80029a6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029a8:	e06d      	b.n	8002a86 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	221c      	movs	r2, #28
 80029b0:	4013      	ands	r3, r2
 80029b2:	2202      	movs	r2, #2
 80029b4:	409a      	lsls	r2, r3
 80029b6:	0013      	movs	r3, r2
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4013      	ands	r3, r2
 80029bc:	d02e      	beq.n	8002a1c <HAL_DMA_IRQHandler+0xec>
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2202      	movs	r2, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	d02a      	beq.n	8002a1c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2220      	movs	r2, #32
 80029ce:	4013      	ands	r3, r2
 80029d0:	d10b      	bne.n	80029ea <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	210a      	movs	r1, #10
 80029de:	438a      	bics	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2225      	movs	r2, #37	@ 0x25
 80029e6:	2101      	movs	r1, #1
 80029e8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 80029ea:	4b29      	ldr	r3, [pc, #164]	@ (8002a90 <HAL_DMA_IRQHandler+0x160>)
 80029ec:	6859      	ldr	r1, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	221c      	movs	r2, #28
 80029f4:	4013      	ands	r3, r2
 80029f6:	2202      	movs	r2, #2
 80029f8:	409a      	lsls	r2, r3
 80029fa:	4b25      	ldr	r3, [pc, #148]	@ (8002a90 <HAL_DMA_IRQHandler+0x160>)
 80029fc:	430a      	orrs	r2, r1
 80029fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2224      	movs	r2, #36	@ 0x24
 8002a04:	2100      	movs	r1, #0
 8002a06:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d03a      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	0010      	movs	r0, r2
 8002a18:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a1a:	e034      	b.n	8002a86 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	221c      	movs	r2, #28
 8002a22:	4013      	ands	r3, r2
 8002a24:	2208      	movs	r2, #8
 8002a26:	409a      	lsls	r2, r3
 8002a28:	0013      	movs	r3, r2
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d02b      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x158>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2208      	movs	r2, #8
 8002a34:	4013      	ands	r3, r2
 8002a36:	d027      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	210e      	movs	r1, #14
 8002a44:	438a      	bics	r2, r1
 8002a46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002a48:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <HAL_DMA_IRQHandler+0x160>)
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	221c      	movs	r2, #28
 8002a52:	4013      	ands	r3, r2
 8002a54:	2201      	movs	r2, #1
 8002a56:	409a      	lsls	r2, r3
 8002a58:	4b0d      	ldr	r3, [pc, #52]	@ (8002a90 <HAL_DMA_IRQHandler+0x160>)
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2225      	movs	r2, #37	@ 0x25
 8002a68:	2101      	movs	r1, #1
 8002a6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2224      	movs	r2, #36	@ 0x24
 8002a70:	2100      	movs	r1, #0
 8002a72:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	0010      	movs	r0, r2
 8002a84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a86:	46c0      	nop			@ (mov r8, r8)
 8002a88:	46c0      	nop			@ (mov r8, r8)
}
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b004      	add	sp, #16
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40020000 	.word	0x40020000

08002a94 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002aaa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d004      	beq.n	8002abe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002abc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002abe:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <DMA_SetConfig+0x7c>)
 8002ac0:	6859      	ldr	r1, [r3, #4]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	221c      	movs	r2, #28
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2201      	movs	r2, #1
 8002acc:	409a      	lsls	r2, r3
 8002ace:	4b10      	ldr	r3, [pc, #64]	@ (8002b10 <DMA_SetConfig+0x7c>)
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b10      	cmp	r3, #16
 8002ae2:	d108      	bne.n	8002af6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002af4:	e007      	b.n	8002b06 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	60da      	str	r2, [r3, #12]
}
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b004      	add	sp, #16
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	40020000 	.word	0x40020000

08002b14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	001a      	movs	r2, r3
 8002b22:	23ff      	movs	r3, #255	@ 0xff
 8002b24:	4013      	ands	r3, r2
 8002b26:	3b08      	subs	r3, #8
 8002b28:	2114      	movs	r1, #20
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f7fd faec 	bl	8000108 <__udivsi3>
 8002b30:	0003      	movs	r3, r0
 8002b32:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b38:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002b3c:	4694      	mov	ip, r2
 8002b3e:	4463      	add	r3, ip
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	001a      	movs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a07      	ldr	r2, [pc, #28]	@ (8002b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002b4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	221c      	movs	r2, #28
 8002b52:	4013      	ands	r3, r2
 8002b54:	2201      	movs	r2, #1
 8002b56:	409a      	lsls	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002b5c:	46c0      	nop			@ (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b004      	add	sp, #16
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	10008200 	.word	0x10008200
 8002b68:	40020880 	.word	0x40020880

08002b6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	22ff      	movs	r2, #255	@ 0xff
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a0a      	ldr	r2, [pc, #40]	@ (8002bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002b82:	4694      	mov	ip, r2
 8002b84:	4463      	add	r3, ip
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	001a      	movs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a07      	ldr	r2, [pc, #28]	@ (8002bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002b92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	2203      	movs	r2, #3
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002ba4:	46c0      	nop			@ (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b004      	add	sp, #16
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	1000823f 	.word	0x1000823f
 8002bb0:	40020940 	.word	0x40020940

08002bb4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002bc2:	e153      	b.n	8002e6c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4091      	lsls	r1, r2
 8002bce:	000a      	movs	r2, r1
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d100      	bne.n	8002bdc <HAL_GPIO_Init+0x28>
 8002bda:	e144      	b.n	8002e66 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x38>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b12      	cmp	r3, #18
 8002bea:	d125      	bne.n	8002c38 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	08da      	lsrs	r2, r3, #3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3208      	adds	r2, #8
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	58d3      	ldr	r3, [r2, r3]
 8002bf8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	2207      	movs	r2, #7
 8002bfe:	4013      	ands	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	220f      	movs	r2, #15
 8002c04:	409a      	lsls	r2, r3
 8002c06:	0013      	movs	r3, r2
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	220f      	movs	r2, #15
 8002c16:	401a      	ands	r2, r3
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2107      	movs	r1, #7
 8002c1c:	400b      	ands	r3, r1
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	409a      	lsls	r2, r3
 8002c22:	0013      	movs	r3, r2
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	08da      	lsrs	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3208      	adds	r2, #8
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	6979      	ldr	r1, [r7, #20]
 8002c36:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	409a      	lsls	r2, r3
 8002c46:	0013      	movs	r3, r2
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2203      	movs	r2, #3
 8002c56:	401a      	ands	r2, r3
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	409a      	lsls	r2, r3
 8002c5e:	0013      	movs	r3, r2
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d00b      	beq.n	8002c8c <HAL_GPIO_Init+0xd8>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d007      	beq.n	8002c8c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c80:	2b11      	cmp	r3, #17
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b12      	cmp	r3, #18
 8002c8a:	d130      	bne.n	8002cee <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	0013      	movs	r3, r2
 8002c9c:	43da      	mvns	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	409a      	lsls	r2, r3
 8002cae:	0013      	movs	r3, r2
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	0013      	movs	r3, r2
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	2201      	movs	r2, #1
 8002cda:	401a      	ands	r2, r3
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	0013      	movs	r3, r2
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d017      	beq.n	8002d26 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	2203      	movs	r2, #3
 8002d02:	409a      	lsls	r2, r3
 8002d04:	0013      	movs	r3, r2
 8002d06:	43da      	mvns	r2, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	409a      	lsls	r2, r3
 8002d18:	0013      	movs	r3, r2
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	2380      	movs	r3, #128	@ 0x80
 8002d2c:	055b      	lsls	r3, r3, #21
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d100      	bne.n	8002d34 <HAL_GPIO_Init+0x180>
 8002d32:	e098      	b.n	8002e66 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002d34:	4a53      	ldr	r2, [pc, #332]	@ (8002e84 <HAL_GPIO_Init+0x2d0>)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3318      	adds	r3, #24
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	589b      	ldr	r3, [r3, r2]
 8002d40:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2203      	movs	r2, #3
 8002d46:	4013      	ands	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	220f      	movs	r2, #15
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	0013      	movs	r3, r2
 8002d50:	43da      	mvns	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	4013      	ands	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	23a0      	movs	r3, #160	@ 0xa0
 8002d5c:	05db      	lsls	r3, r3, #23
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d019      	beq.n	8002d96 <HAL_GPIO_Init+0x1e2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a48      	ldr	r2, [pc, #288]	@ (8002e88 <HAL_GPIO_Init+0x2d4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <HAL_GPIO_Init+0x1de>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a47      	ldr	r2, [pc, #284]	@ (8002e8c <HAL_GPIO_Init+0x2d8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00d      	beq.n	8002d8e <HAL_GPIO_Init+0x1da>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a46      	ldr	r2, [pc, #280]	@ (8002e90 <HAL_GPIO_Init+0x2dc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d007      	beq.n	8002d8a <HAL_GPIO_Init+0x1d6>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a45      	ldr	r2, [pc, #276]	@ (8002e94 <HAL_GPIO_Init+0x2e0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <HAL_GPIO_Init+0x1d2>
 8002d82:	2305      	movs	r3, #5
 8002d84:	e008      	b.n	8002d98 <HAL_GPIO_Init+0x1e4>
 8002d86:	2306      	movs	r3, #6
 8002d88:	e006      	b.n	8002d98 <HAL_GPIO_Init+0x1e4>
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e004      	b.n	8002d98 <HAL_GPIO_Init+0x1e4>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e002      	b.n	8002d98 <HAL_GPIO_Init+0x1e4>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_GPIO_Init+0x1e4>
 8002d96:	2300      	movs	r3, #0
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	2103      	movs	r1, #3
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	00d2      	lsls	r2, r2, #3
 8002da0:	4093      	lsls	r3, r2
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002da8:	4936      	ldr	r1, [pc, #216]	@ (8002e84 <HAL_GPIO_Init+0x2d0>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	3318      	adds	r3, #24
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002db6:	4a33      	ldr	r2, [pc, #204]	@ (8002e84 <HAL_GPIO_Init+0x2d0>)
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	58d3      	ldr	r3, [r2, r3]
 8002dbc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	2380      	movs	r3, #128	@ 0x80
 8002dce:	025b      	lsls	r3, r3, #9
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d003      	beq.n	8002ddc <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002ddc:	4929      	ldr	r1, [pc, #164]	@ (8002e84 <HAL_GPIO_Init+0x2d0>)
 8002dde:	2280      	movs	r2, #128	@ 0x80
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002de4:	4a27      	ldr	r2, [pc, #156]	@ (8002e84 <HAL_GPIO_Init+0x2d0>)
 8002de6:	2384      	movs	r3, #132	@ 0x84
 8002de8:	58d3      	ldr	r3, [r2, r3]
 8002dea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	43da      	mvns	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	4013      	ands	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	2380      	movs	r3, #128	@ 0x80
 8002dfc:	029b      	lsls	r3, r3, #10
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002e0a:	491e      	ldr	r1, [pc, #120]	@ (8002e84 <HAL_GPIO_Init+0x2d0>)
 8002e0c:	2284      	movs	r2, #132	@ 0x84
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002e12:	4b1c      	ldr	r3, [pc, #112]	@ (8002e84 <HAL_GPIO_Init+0x2d0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	2380      	movs	r3, #128	@ 0x80
 8002e28:	035b      	lsls	r3, r3, #13
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002e36:	4b13      	ldr	r3, [pc, #76]	@ (8002e84 <HAL_GPIO_Init+0x2d0>)
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002e3c:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <HAL_GPIO_Init+0x2d0>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	43da      	mvns	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	2380      	movs	r3, #128	@ 0x80
 8002e52:	039b      	lsls	r3, r3, #14
 8002e54:	4013      	ands	r3, r2
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002e60:	4b08      	ldr	r3, [pc, #32]	@ (8002e84 <HAL_GPIO_Init+0x2d0>)
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	40da      	lsrs	r2, r3
 8002e74:	1e13      	subs	r3, r2, #0
 8002e76:	d000      	beq.n	8002e7a <HAL_GPIO_Init+0x2c6>
 8002e78:	e6a4      	b.n	8002bc4 <HAL_GPIO_Init+0x10>
  }
}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	46c0      	nop			@ (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b006      	add	sp, #24
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021800 	.word	0x40021800
 8002e88:	50000400 	.word	0x50000400
 8002e8c:	50000800 	.word	0x50000800
 8002e90:	50000c00 	.word	0x50000c00
 8002e94:	50001400 	.word	0x50001400

08002e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	0008      	movs	r0, r1
 8002ea2:	0011      	movs	r1, r2
 8002ea4:	1cbb      	adds	r3, r7, #2
 8002ea6:	1c02      	adds	r2, r0, #0
 8002ea8:	801a      	strh	r2, [r3, #0]
 8002eaa:	1c7b      	adds	r3, r7, #1
 8002eac:	1c0a      	adds	r2, r1, #0
 8002eae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002eb0:	1c7b      	adds	r3, r7, #1
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eb8:	1cbb      	adds	r3, r7, #2
 8002eba:	881a      	ldrh	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ec0:	e003      	b.n	8002eca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ec2:	1cbb      	adds	r3, r7, #2
 8002ec4:	881a      	ldrh	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b002      	add	sp, #8
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e08f      	b.n	8003006 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2241      	movs	r2, #65	@ 0x41
 8002eea:	5c9b      	ldrb	r3, [r3, r2]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d107      	bne.n	8002f02 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2240      	movs	r2, #64	@ 0x40
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f7fe f997 	bl	8001230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2241      	movs	r2, #65	@ 0x41
 8002f06:	2124      	movs	r1, #36	@ 0x24
 8002f08:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2101      	movs	r1, #1
 8002f16:	438a      	bics	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	493b      	ldr	r1, [pc, #236]	@ (8003010 <HAL_I2C_Init+0x13c>)
 8002f24:	400a      	ands	r2, r1
 8002f26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4938      	ldr	r1, [pc, #224]	@ (8003014 <HAL_I2C_Init+0x140>)
 8002f34:	400a      	ands	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d108      	bne.n	8002f52 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2180      	movs	r1, #128	@ 0x80
 8002f4a:	0209      	lsls	r1, r1, #8
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	e007      	b.n	8002f62 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2184      	movs	r1, #132	@ 0x84
 8002f5c:	0209      	lsls	r1, r1, #8
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d109      	bne.n	8002f7e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2180      	movs	r1, #128	@ 0x80
 8002f76:	0109      	lsls	r1, r1, #4
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	e007      	b.n	8002f8e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4923      	ldr	r1, [pc, #140]	@ (8003018 <HAL_I2C_Init+0x144>)
 8002f8a:	400a      	ands	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4920      	ldr	r1, [pc, #128]	@ (800301c <HAL_I2C_Init+0x148>)
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	491a      	ldr	r1, [pc, #104]	@ (8003014 <HAL_I2C_Init+0x140>)
 8002faa:	400a      	ands	r2, r1
 8002fac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69d9      	ldr	r1, [r3, #28]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1a      	ldr	r2, [r3, #32]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2241      	movs	r2, #65	@ 0x41
 8002ff2:	2120      	movs	r1, #32
 8002ff4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2242      	movs	r2, #66	@ 0x42
 8003000:	2100      	movs	r1, #0
 8003002:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	0018      	movs	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	b002      	add	sp, #8
 800300c:	bd80      	pop	{r7, pc}
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	f0ffffff 	.word	0xf0ffffff
 8003014:	ffff7fff 	.word	0xffff7fff
 8003018:	fffff7ff 	.word	0xfffff7ff
 800301c:	02008000 	.word	0x02008000

08003020 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2241      	movs	r2, #65	@ 0x41
 800302e:	5c9b      	ldrb	r3, [r3, r2]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b20      	cmp	r3, #32
 8003034:	d138      	bne.n	80030a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2240      	movs	r2, #64	@ 0x40
 800303a:	5c9b      	ldrb	r3, [r3, r2]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003040:	2302      	movs	r3, #2
 8003042:	e032      	b.n	80030aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2240      	movs	r2, #64	@ 0x40
 8003048:	2101      	movs	r1, #1
 800304a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2241      	movs	r2, #65	@ 0x41
 8003050:	2124      	movs	r1, #36	@ 0x24
 8003052:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2101      	movs	r1, #1
 8003060:	438a      	bics	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4911      	ldr	r1, [pc, #68]	@ (80030b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003070:	400a      	ands	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6819      	ldr	r1, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2101      	movs	r1, #1
 8003090:	430a      	orrs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2241      	movs	r2, #65	@ 0x41
 8003098:	2120      	movs	r1, #32
 800309a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2240      	movs	r2, #64	@ 0x40
 80030a0:	2100      	movs	r1, #0
 80030a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	0018      	movs	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b002      	add	sp, #8
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	46c0      	nop			@ (mov r8, r8)
 80030b4:	ffffefff 	.word	0xffffefff

080030b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2241      	movs	r2, #65	@ 0x41
 80030c6:	5c9b      	ldrb	r3, [r3, r2]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d139      	bne.n	8003142 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2240      	movs	r2, #64	@ 0x40
 80030d2:	5c9b      	ldrb	r3, [r3, r2]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d101      	bne.n	80030dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030d8:	2302      	movs	r3, #2
 80030da:	e033      	b.n	8003144 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2240      	movs	r2, #64	@ 0x40
 80030e0:	2101      	movs	r1, #1
 80030e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2241      	movs	r2, #65	@ 0x41
 80030e8:	2124      	movs	r1, #36	@ 0x24
 80030ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2101      	movs	r1, #1
 80030f8:	438a      	bics	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a11      	ldr	r2, [pc, #68]	@ (800314c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003108:	4013      	ands	r3, r2
 800310a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2101      	movs	r1, #1
 800312a:	430a      	orrs	r2, r1
 800312c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2241      	movs	r2, #65	@ 0x41
 8003132:	2120      	movs	r1, #32
 8003134:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2240      	movs	r2, #64	@ 0x40
 800313a:	2100      	movs	r1, #0
 800313c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	e000      	b.n	8003144 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003142:	2302      	movs	r3, #2
  }
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	b004      	add	sp, #16
 800314a:	bd80      	pop	{r7, pc}
 800314c:	fffff0ff 	.word	0xfffff0ff

08003150 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e20f      	b.n	8003582 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2201      	movs	r2, #1
 8003168:	4013      	ands	r3, r2
 800316a:	d100      	bne.n	800316e <HAL_RCC_OscConfig+0x1e>
 800316c:	e069      	b.n	8003242 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316e:	4bc8      	ldr	r3, [pc, #800]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2238      	movs	r2, #56	@ 0x38
 8003174:	4013      	ands	r3, r2
 8003176:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b08      	cmp	r3, #8
 800317c:	d105      	bne.n	800318a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d15d      	bne.n	8003242 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e1fb      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	025b      	lsls	r3, r3, #9
 8003192:	429a      	cmp	r2, r3
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_OscConfig+0x56>
 8003196:	4bbe      	ldr	r3, [pc, #760]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4bbd      	ldr	r3, [pc, #756]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 800319c:	2180      	movs	r1, #128	@ 0x80
 800319e:	0249      	lsls	r1, r1, #9
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	e020      	b.n	80031e8 <HAL_RCC_OscConfig+0x98>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	23a0      	movs	r3, #160	@ 0xa0
 80031ac:	02db      	lsls	r3, r3, #11
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d10e      	bne.n	80031d0 <HAL_RCC_OscConfig+0x80>
 80031b2:	4bb7      	ldr	r3, [pc, #732]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4bb6      	ldr	r3, [pc, #728]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80031b8:	2180      	movs	r1, #128	@ 0x80
 80031ba:	02c9      	lsls	r1, r1, #11
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	4bb3      	ldr	r3, [pc, #716]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4bb2      	ldr	r3, [pc, #712]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80031c6:	2180      	movs	r1, #128	@ 0x80
 80031c8:	0249      	lsls	r1, r1, #9
 80031ca:	430a      	orrs	r2, r1
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e00b      	b.n	80031e8 <HAL_RCC_OscConfig+0x98>
 80031d0:	4baf      	ldr	r3, [pc, #700]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4bae      	ldr	r3, [pc, #696]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80031d6:	49af      	ldr	r1, [pc, #700]	@ (8003494 <HAL_RCC_OscConfig+0x344>)
 80031d8:	400a      	ands	r2, r1
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	4bac      	ldr	r3, [pc, #688]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4bab      	ldr	r3, [pc, #684]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80031e2:	49ad      	ldr	r1, [pc, #692]	@ (8003498 <HAL_RCC_OscConfig+0x348>)
 80031e4:	400a      	ands	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d014      	beq.n	800321a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe fb36 	bl	8001860 <HAL_GetTick>
 80031f4:	0003      	movs	r3, r0
 80031f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80031fa:	f7fe fb31 	bl	8001860 <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b64      	cmp	r3, #100	@ 0x64
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e1ba      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320c:	4ba0      	ldr	r3, [pc, #640]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	029b      	lsls	r3, r3, #10
 8003214:	4013      	ands	r3, r2
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0xaa>
 8003218:	e013      	b.n	8003242 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fe fb21 	bl	8001860 <HAL_GetTick>
 800321e:	0003      	movs	r3, r0
 8003220:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003224:	f7fe fb1c 	bl	8001860 <HAL_GetTick>
 8003228:	0002      	movs	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b64      	cmp	r3, #100	@ 0x64
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e1a5      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003236:	4b96      	ldr	r3, [pc, #600]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	2380      	movs	r3, #128	@ 0x80
 800323c:	029b      	lsls	r3, r3, #10
 800323e:	4013      	ands	r3, r2
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2202      	movs	r2, #2
 8003248:	4013      	ands	r3, r2
 800324a:	d100      	bne.n	800324e <HAL_RCC_OscConfig+0xfe>
 800324c:	e086      	b.n	800335c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800324e:	4b90      	ldr	r3, [pc, #576]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2238      	movs	r2, #56	@ 0x38
 8003254:	4013      	ands	r3, r2
 8003256:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d12f      	bne.n	80032be <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e18b      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326a:	4b89      	ldr	r3, [pc, #548]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4a8b      	ldr	r2, [pc, #556]	@ (800349c <HAL_RCC_OscConfig+0x34c>)
 8003270:	4013      	ands	r3, r2
 8003272:	0019      	movs	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	021a      	lsls	r2, r3, #8
 800327a:	4b85      	ldr	r3, [pc, #532]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 800327c:	430a      	orrs	r2, r1
 800327e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d112      	bne.n	80032ac <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003286:	4b82      	ldr	r3, [pc, #520]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a85      	ldr	r2, [pc, #532]	@ (80034a0 <HAL_RCC_OscConfig+0x350>)
 800328c:	4013      	ands	r3, r2
 800328e:	0019      	movs	r1, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	4b7e      	ldr	r3, [pc, #504]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800329a:	4b7d      	ldr	r3, [pc, #500]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0adb      	lsrs	r3, r3, #11
 80032a0:	2207      	movs	r2, #7
 80032a2:	4013      	ands	r3, r2
 80032a4:	4a7f      	ldr	r2, [pc, #508]	@ (80034a4 <HAL_RCC_OscConfig+0x354>)
 80032a6:	40da      	lsrs	r2, r3
 80032a8:	4b7f      	ldr	r3, [pc, #508]	@ (80034a8 <HAL_RCC_OscConfig+0x358>)
 80032aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032ac:	4b7f      	ldr	r3, [pc, #508]	@ (80034ac <HAL_RCC_OscConfig+0x35c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7fe fa79 	bl	80017a8 <HAL_InitTick>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d050      	beq.n	800335c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e161      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d030      	beq.n	8003328 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032c6:	4b72      	ldr	r3, [pc, #456]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a75      	ldr	r2, [pc, #468]	@ (80034a0 <HAL_RCC_OscConfig+0x350>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	0019      	movs	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	4b6e      	ldr	r3, [pc, #440]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80032d6:	430a      	orrs	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80032da:	4b6d      	ldr	r3, [pc, #436]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b6c      	ldr	r3, [pc, #432]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80032e0:	2180      	movs	r1, #128	@ 0x80
 80032e2:	0049      	lsls	r1, r1, #1
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fe faba 	bl	8001860 <HAL_GetTick>
 80032ec:	0003      	movs	r3, r0
 80032ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80032f2:	f7fe fab5 	bl	8001860 <HAL_GetTick>
 80032f6:	0002      	movs	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e13e      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003304:	4b62      	ldr	r3, [pc, #392]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	2380      	movs	r3, #128	@ 0x80
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4013      	ands	r3, r2
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003310:	4b5f      	ldr	r3, [pc, #380]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4a61      	ldr	r2, [pc, #388]	@ (800349c <HAL_RCC_OscConfig+0x34c>)
 8003316:	4013      	ands	r3, r2
 8003318:	0019      	movs	r1, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	021a      	lsls	r2, r3, #8
 8003320:	4b5b      	ldr	r3, [pc, #364]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003322:	430a      	orrs	r2, r1
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	e019      	b.n	800335c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003328:	4b59      	ldr	r3, [pc, #356]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b58      	ldr	r3, [pc, #352]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 800332e:	4960      	ldr	r1, [pc, #384]	@ (80034b0 <HAL_RCC_OscConfig+0x360>)
 8003330:	400a      	ands	r2, r1
 8003332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fe fa94 	bl	8001860 <HAL_GetTick>
 8003338:	0003      	movs	r3, r0
 800333a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800333e:	f7fe fa8f 	bl	8001860 <HAL_GetTick>
 8003342:	0002      	movs	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e118      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003350:	4b4f      	ldr	r3, [pc, #316]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4013      	ands	r3, r2
 800335a:	d1f0      	bne.n	800333e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2208      	movs	r2, #8
 8003362:	4013      	ands	r3, r2
 8003364:	d042      	beq.n	80033ec <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003366:	4b4a      	ldr	r3, [pc, #296]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2238      	movs	r2, #56	@ 0x38
 800336c:	4013      	ands	r3, r2
 800336e:	2b18      	cmp	r3, #24
 8003370:	d105      	bne.n	800337e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d138      	bne.n	80033ec <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e101      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d019      	beq.n	80033ba <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003386:	4b42      	ldr	r3, [pc, #264]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003388:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800338a:	4b41      	ldr	r3, [pc, #260]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 800338c:	2101      	movs	r1, #1
 800338e:	430a      	orrs	r2, r1
 8003390:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003392:	f7fe fa65 	bl	8001860 <HAL_GetTick>
 8003396:	0003      	movs	r3, r0
 8003398:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800339c:	f7fe fa60 	bl	8001860 <HAL_GetTick>
 80033a0:	0002      	movs	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e0e9      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80033ae:	4b38      	ldr	r3, [pc, #224]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80033b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b2:	2202      	movs	r2, #2
 80033b4:	4013      	ands	r3, r2
 80033b6:	d0f1      	beq.n	800339c <HAL_RCC_OscConfig+0x24c>
 80033b8:	e018      	b.n	80033ec <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80033ba:	4b35      	ldr	r3, [pc, #212]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80033bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033be:	4b34      	ldr	r3, [pc, #208]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80033c0:	2101      	movs	r1, #1
 80033c2:	438a      	bics	r2, r1
 80033c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fe fa4b 	bl	8001860 <HAL_GetTick>
 80033ca:	0003      	movs	r3, r0
 80033cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80033d0:	f7fe fa46 	bl	8001860 <HAL_GetTick>
 80033d4:	0002      	movs	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0cf      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80033e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 80033e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e6:	2202      	movs	r2, #2
 80033e8:	4013      	ands	r3, r2
 80033ea:	d1f1      	bne.n	80033d0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2204      	movs	r2, #4
 80033f2:	4013      	ands	r3, r2
 80033f4:	d100      	bne.n	80033f8 <HAL_RCC_OscConfig+0x2a8>
 80033f6:	e084      	b.n	8003502 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f8:	230f      	movs	r3, #15
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003400:	4b23      	ldr	r3, [pc, #140]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2238      	movs	r2, #56	@ 0x38
 8003406:	4013      	ands	r3, r2
 8003408:	2b20      	cmp	r3, #32
 800340a:	d106      	bne.n	800341a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d000      	beq.n	8003416 <HAL_RCC_OscConfig+0x2c6>
 8003414:	e075      	b.n	8003502 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e0b3      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d106      	bne.n	8003430 <HAL_RCC_OscConfig+0x2e0>
 8003422:	4b1b      	ldr	r3, [pc, #108]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003424:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003426:	4b1a      	ldr	r3, [pc, #104]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003428:	2101      	movs	r1, #1
 800342a:	430a      	orrs	r2, r1
 800342c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800342e:	e01c      	b.n	800346a <HAL_RCC_OscConfig+0x31a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b05      	cmp	r3, #5
 8003436:	d10c      	bne.n	8003452 <HAL_RCC_OscConfig+0x302>
 8003438:	4b15      	ldr	r3, [pc, #84]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 800343a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800343c:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 800343e:	2104      	movs	r1, #4
 8003440:	430a      	orrs	r2, r1
 8003442:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003444:	4b12      	ldr	r3, [pc, #72]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003446:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003448:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 800344a:	2101      	movs	r1, #1
 800344c:	430a      	orrs	r2, r1
 800344e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003450:	e00b      	b.n	800346a <HAL_RCC_OscConfig+0x31a>
 8003452:	4b0f      	ldr	r3, [pc, #60]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003454:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003456:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003458:	2101      	movs	r1, #1
 800345a:	438a      	bics	r2, r1
 800345c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800345e:	4b0c      	ldr	r3, [pc, #48]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003460:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003462:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <HAL_RCC_OscConfig+0x340>)
 8003464:	2104      	movs	r1, #4
 8003466:	438a      	bics	r2, r1
 8003468:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d028      	beq.n	80034c4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fe f9f5 	bl	8001860 <HAL_GetTick>
 8003476:	0003      	movs	r3, r0
 8003478:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800347a:	e01d      	b.n	80034b8 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347c:	f7fe f9f0 	bl	8001860 <HAL_GetTick>
 8003480:	0002      	movs	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	4a0b      	ldr	r2, [pc, #44]	@ (80034b4 <HAL_RCC_OscConfig+0x364>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d915      	bls.n	80034b8 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e078      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
 8003490:	40021000 	.word	0x40021000
 8003494:	fffeffff 	.word	0xfffeffff
 8003498:	fffbffff 	.word	0xfffbffff
 800349c:	ffff80ff 	.word	0xffff80ff
 80034a0:	ffffc7ff 	.word	0xffffc7ff
 80034a4:	02dc6c00 	.word	0x02dc6c00
 80034a8:	20000064 	.word	0x20000064
 80034ac:	20000068 	.word	0x20000068
 80034b0:	fffffeff 	.word	0xfffffeff
 80034b4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80034b8:	4b34      	ldr	r3, [pc, #208]	@ (800358c <HAL_RCC_OscConfig+0x43c>)
 80034ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034bc:	2202      	movs	r2, #2
 80034be:	4013      	ands	r3, r2
 80034c0:	d0dc      	beq.n	800347c <HAL_RCC_OscConfig+0x32c>
 80034c2:	e013      	b.n	80034ec <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fe f9cc 	bl	8001860 <HAL_GetTick>
 80034c8:	0003      	movs	r3, r0
 80034ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80034cc:	e009      	b.n	80034e2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7fe f9c7 	bl	8001860 <HAL_GetTick>
 80034d2:	0002      	movs	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	4a2d      	ldr	r2, [pc, #180]	@ (8003590 <HAL_RCC_OscConfig+0x440>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e04f      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80034e2:	4b2a      	ldr	r3, [pc, #168]	@ (800358c <HAL_RCC_OscConfig+0x43c>)
 80034e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e6:	2202      	movs	r2, #2
 80034e8:	4013      	ands	r3, r2
 80034ea:	d1f0      	bne.n	80034ce <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80034ec:	230f      	movs	r3, #15
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d105      	bne.n	8003502 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80034f6:	4b25      	ldr	r3, [pc, #148]	@ (800358c <HAL_RCC_OscConfig+0x43c>)
 80034f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034fa:	4b24      	ldr	r3, [pc, #144]	@ (800358c <HAL_RCC_OscConfig+0x43c>)
 80034fc:	4925      	ldr	r1, [pc, #148]	@ (8003594 <HAL_RCC_OscConfig+0x444>)
 80034fe:	400a      	ands	r2, r1
 8003500:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2210      	movs	r2, #16
 8003508:	4013      	ands	r3, r2
 800350a:	d039      	beq.n	8003580 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d01b      	beq.n	800354c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003514:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <HAL_RCC_OscConfig+0x43c>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b1c      	ldr	r3, [pc, #112]	@ (800358c <HAL_RCC_OscConfig+0x43c>)
 800351a:	2180      	movs	r1, #128	@ 0x80
 800351c:	03c9      	lsls	r1, r1, #15
 800351e:	430a      	orrs	r2, r1
 8003520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fe f99d 	bl	8001860 <HAL_GetTick>
 8003526:	0003      	movs	r3, r0
 8003528:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800352c:	f7fe f998 	bl	8001860 <HAL_GetTick>
 8003530:	0002      	movs	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e021      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800353e:	4b13      	ldr	r3, [pc, #76]	@ (800358c <HAL_RCC_OscConfig+0x43c>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	2380      	movs	r3, #128	@ 0x80
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	4013      	ands	r3, r2
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x3dc>
 800354a:	e019      	b.n	8003580 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800354c:	4b0f      	ldr	r3, [pc, #60]	@ (800358c <HAL_RCC_OscConfig+0x43c>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <HAL_RCC_OscConfig+0x43c>)
 8003552:	4911      	ldr	r1, [pc, #68]	@ (8003598 <HAL_RCC_OscConfig+0x448>)
 8003554:	400a      	ands	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fe f982 	bl	8001860 <HAL_GetTick>
 800355c:	0003      	movs	r3, r0
 800355e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003562:	f7fe f97d 	bl	8001860 <HAL_GetTick>
 8003566:	0002      	movs	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e006      	b.n	8003582 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8003574:	4b05      	ldr	r3, [pc, #20]	@ (800358c <HAL_RCC_OscConfig+0x43c>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2380      	movs	r3, #128	@ 0x80
 800357a:	041b      	lsls	r3, r3, #16
 800357c:	4013      	ands	r3, r2
 800357e:	d1f0      	bne.n	8003562 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b006      	add	sp, #24
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	40021000 	.word	0x40021000
 8003590:	00001388 	.word	0x00001388
 8003594:	efffffff 	.word	0xefffffff
 8003598:	ffbfffff 	.word	0xffbfffff

0800359c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0f6      	b.n	800379e <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b0:	4b7d      	ldr	r3, [pc, #500]	@ (80037a8 <HAL_RCC_ClockConfig+0x20c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2207      	movs	r2, #7
 80035b6:	4013      	ands	r3, r2
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d91e      	bls.n	80035fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4b7a      	ldr	r3, [pc, #488]	@ (80037a8 <HAL_RCC_ClockConfig+0x20c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2207      	movs	r2, #7
 80035c4:	4393      	bics	r3, r2
 80035c6:	0019      	movs	r1, r3
 80035c8:	4b77      	ldr	r3, [pc, #476]	@ (80037a8 <HAL_RCC_ClockConfig+0x20c>)
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035d0:	f7fe f946 	bl	8001860 <HAL_GetTick>
 80035d4:	0003      	movs	r3, r0
 80035d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035d8:	e009      	b.n	80035ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80035da:	f7fe f941 	bl	8001860 <HAL_GetTick>
 80035de:	0002      	movs	r2, r0
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	4a71      	ldr	r2, [pc, #452]	@ (80037ac <HAL_RCC_ClockConfig+0x210>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e0d7      	b.n	800379e <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035ee:	4b6e      	ldr	r3, [pc, #440]	@ (80037a8 <HAL_RCC_ClockConfig+0x20c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2207      	movs	r2, #7
 80035f4:	4013      	ands	r3, r2
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1ee      	bne.n	80035da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2202      	movs	r2, #2
 8003602:	4013      	ands	r3, r2
 8003604:	d017      	beq.n	8003636 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2204      	movs	r2, #4
 800360c:	4013      	ands	r3, r2
 800360e:	d008      	beq.n	8003622 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003610:	4b67      	ldr	r3, [pc, #412]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a67      	ldr	r2, [pc, #412]	@ (80037b4 <HAL_RCC_ClockConfig+0x218>)
 8003616:	401a      	ands	r2, r3
 8003618:	4b65      	ldr	r3, [pc, #404]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 800361a:	21b0      	movs	r1, #176	@ 0xb0
 800361c:	0109      	lsls	r1, r1, #4
 800361e:	430a      	orrs	r2, r1
 8003620:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003622:	4b63      	ldr	r3, [pc, #396]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	4a64      	ldr	r2, [pc, #400]	@ (80037b8 <HAL_RCC_ClockConfig+0x21c>)
 8003628:	4013      	ands	r3, r2
 800362a:	0019      	movs	r1, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	4b5f      	ldr	r3, [pc, #380]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2201      	movs	r2, #1
 800363c:	4013      	ands	r3, r2
 800363e:	d100      	bne.n	8003642 <HAL_RCC_ClockConfig+0xa6>
 8003640:	e061      	b.n	8003706 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8003642:	4b5b      	ldr	r3, [pc, #364]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	221c      	movs	r2, #28
 8003648:	4393      	bics	r3, r2
 800364a:	0019      	movs	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	4b57      	ldr	r3, [pc, #348]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 8003652:	430a      	orrs	r2, r1
 8003654:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365e:	4b54      	ldr	r3, [pc, #336]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	2380      	movs	r3, #128	@ 0x80
 8003664:	029b      	lsls	r3, r3, #10
 8003666:	4013      	ands	r3, r2
 8003668:	d12b      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e097      	b.n	800379e <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d107      	bne.n	8003686 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003676:	4b4e      	ldr	r3, [pc, #312]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	2380      	movs	r3, #128	@ 0x80
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4013      	ands	r3, r2
 8003680:	d11f      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e08b      	b.n	800379e <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800368e:	4b48      	ldr	r3, [pc, #288]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	2380      	movs	r3, #128	@ 0x80
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	4013      	ands	r3, r2
 8003698:	d113      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e07f      	b.n	800379e <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d106      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80036a6:	4b42      	ldr	r3, [pc, #264]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 80036a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036aa:	2202      	movs	r2, #2
 80036ac:	4013      	ands	r3, r2
 80036ae:	d108      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e074      	b.n	800379e <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80036b4:	4b3e      	ldr	r3, [pc, #248]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 80036b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b8:	2202      	movs	r2, #2
 80036ba:	4013      	ands	r3, r2
 80036bc:	d101      	bne.n	80036c2 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e06d      	b.n	800379e <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036c2:	4b3b      	ldr	r3, [pc, #236]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2207      	movs	r2, #7
 80036c8:	4393      	bics	r3, r2
 80036ca:	0019      	movs	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	4b37      	ldr	r3, [pc, #220]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d6:	f7fe f8c3 	bl	8001860 <HAL_GetTick>
 80036da:	0003      	movs	r3, r0
 80036dc:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	e009      	b.n	80036f4 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80036e0:	f7fe f8be 	bl	8001860 <HAL_GetTick>
 80036e4:	0002      	movs	r2, r0
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	4a30      	ldr	r2, [pc, #192]	@ (80037ac <HAL_RCC_ClockConfig+0x210>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e054      	b.n	800379e <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f4:	4b2e      	ldr	r3, [pc, #184]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2238      	movs	r2, #56	@ 0x38
 80036fa:	401a      	ands	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	429a      	cmp	r2, r3
 8003704:	d1ec      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003706:	4b28      	ldr	r3, [pc, #160]	@ (80037a8 <HAL_RCC_ClockConfig+0x20c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2207      	movs	r2, #7
 800370c:	4013      	ands	r3, r2
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d21e      	bcs.n	8003752 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003714:	4b24      	ldr	r3, [pc, #144]	@ (80037a8 <HAL_RCC_ClockConfig+0x20c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2207      	movs	r2, #7
 800371a:	4393      	bics	r3, r2
 800371c:	0019      	movs	r1, r3
 800371e:	4b22      	ldr	r3, [pc, #136]	@ (80037a8 <HAL_RCC_ClockConfig+0x20c>)
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003726:	f7fe f89b 	bl	8001860 <HAL_GetTick>
 800372a:	0003      	movs	r3, r0
 800372c:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800372e:	e009      	b.n	8003744 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7fe f896 	bl	8001860 <HAL_GetTick>
 8003734:	0002      	movs	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	4a1c      	ldr	r2, [pc, #112]	@ (80037ac <HAL_RCC_ClockConfig+0x210>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e02c      	b.n	800379e <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003744:	4b18      	ldr	r3, [pc, #96]	@ (80037a8 <HAL_RCC_ClockConfig+0x20c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2207      	movs	r2, #7
 800374a:	4013      	ands	r3, r2
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d1ee      	bne.n	8003730 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2204      	movs	r2, #4
 8003758:	4013      	ands	r3, r2
 800375a:	d009      	beq.n	8003770 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800375c:	4b14      	ldr	r3, [pc, #80]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	4a16      	ldr	r2, [pc, #88]	@ (80037bc <HAL_RCC_ClockConfig+0x220>)
 8003762:	4013      	ands	r3, r2
 8003764:	0019      	movs	r1, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	4b11      	ldr	r3, [pc, #68]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 800376c:	430a      	orrs	r2, r1
 800376e:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003770:	f000 f82c 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8003774:	0001      	movs	r1, r0
 8003776:	4b0e      	ldr	r3, [pc, #56]	@ (80037b0 <HAL_RCC_ClockConfig+0x214>)
 8003778:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	220f      	movs	r2, #15
 800377e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003780:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <HAL_RCC_ClockConfig+0x224>)
 8003782:	0092      	lsls	r2, r2, #2
 8003784:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003786:	221f      	movs	r2, #31
 8003788:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800378a:	000a      	movs	r2, r1
 800378c:	40da      	lsrs	r2, r3
 800378e:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <HAL_RCC_ClockConfig+0x228>)
 8003790:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003792:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <HAL_RCC_ClockConfig+0x22c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	0018      	movs	r0, r3
 8003798:	f7fe f806 	bl	80017a8 <HAL_InitTick>
 800379c:	0003      	movs	r3, r0
}
 800379e:	0018      	movs	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b004      	add	sp, #16
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	40022000 	.word	0x40022000
 80037ac:	00001388 	.word	0x00001388
 80037b0:	40021000 	.word	0x40021000
 80037b4:	ffff84ff 	.word	0xffff84ff
 80037b8:	fffff0ff 	.word	0xfffff0ff
 80037bc:	ffff8fff 	.word	0xffff8fff
 80037c0:	080066b0 	.word	0x080066b0
 80037c4:	20000064 	.word	0x20000064
 80037c8:	20000068 	.word	0x20000068

080037cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 80037d2:	4b27      	ldr	r3, [pc, #156]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	089b      	lsrs	r3, r3, #2
 80037d8:	2207      	movs	r2, #7
 80037da:	4013      	ands	r3, r2
 80037dc:	3301      	adds	r3, #1
 80037de:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037e0:	4b23      	ldr	r3, [pc, #140]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2238      	movs	r2, #56	@ 0x38
 80037e6:	4013      	ands	r3, r2
 80037e8:	d10f      	bne.n	800380a <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80037ea:	4b21      	ldr	r3, [pc, #132]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xa4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	0adb      	lsrs	r3, r3, #11
 80037f0:	2207      	movs	r2, #7
 80037f2:	4013      	ands	r3, r2
 80037f4:	2201      	movs	r2, #1
 80037f6:	409a      	lsls	r2, r3
 80037f8:	0013      	movs	r3, r2
 80037fa:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	481d      	ldr	r0, [pc, #116]	@ (8003874 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003800:	f7fc fc82 	bl	8000108 <__udivsi3>
 8003804:	0003      	movs	r3, r0
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	e027      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800380a:	4b19      	ldr	r3, [pc, #100]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xa4>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2238      	movs	r2, #56	@ 0x38
 8003810:	4013      	ands	r3, r2
 8003812:	2b08      	cmp	r3, #8
 8003814:	d102      	bne.n	800381c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003816:	4b18      	ldr	r3, [pc, #96]	@ (8003878 <HAL_RCC_GetSysClockFreq+0xac>)
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	e01e      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800381c:	4b14      	ldr	r3, [pc, #80]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xa4>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2238      	movs	r2, #56	@ 0x38
 8003822:	4013      	ands	r3, r2
 8003824:	2b20      	cmp	r3, #32
 8003826:	d103      	bne.n	8003830 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003828:	2380      	movs	r3, #128	@ 0x80
 800382a:	021b      	lsls	r3, r3, #8
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e014      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003830:	4b0f      	ldr	r3, [pc, #60]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2238      	movs	r2, #56	@ 0x38
 8003836:	4013      	ands	r3, r2
 8003838:	2b18      	cmp	r3, #24
 800383a:	d103      	bne.n	8003844 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800383c:	23fa      	movs	r3, #250	@ 0xfa
 800383e:	01db      	lsls	r3, r3, #7
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	e00a      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8003844:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2238      	movs	r2, #56	@ 0x38
 800384a:	4013      	ands	r3, r2
 800384c:	2b10      	cmp	r3, #16
 800384e:	d102      	bne.n	8003856 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8003850:	4b08      	ldr	r3, [pc, #32]	@ (8003874 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	e001      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f7fc fc53 	bl	8000108 <__udivsi3>
 8003862:	0003      	movs	r3, r0
 8003864:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8003866:	68fb      	ldr	r3, [r7, #12]
}
 8003868:	0018      	movs	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	b004      	add	sp, #16
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000
 8003874:	02dc6c00 	.word	0x02dc6c00
 8003878:	007a1200 	.word	0x007a1200

0800387c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003880:	f7ff ffa4 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8003884:	0001      	movs	r1, r0
 8003886:	4b09      	ldr	r3, [pc, #36]	@ (80038ac <HAL_RCC_GetHCLKFreq+0x30>)
 8003888:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	220f      	movs	r2, #15
 800388e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003890:	4b07      	ldr	r3, [pc, #28]	@ (80038b0 <HAL_RCC_GetHCLKFreq+0x34>)
 8003892:	0092      	lsls	r2, r2, #2
 8003894:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003896:	221f      	movs	r2, #31
 8003898:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800389a:	000a      	movs	r2, r1
 800389c:	40da      	lsrs	r2, r3
 800389e:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <HAL_RCC_GetHCLKFreq+0x38>)
 80038a0:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80038a2:	4b04      	ldr	r3, [pc, #16]	@ (80038b4 <HAL_RCC_GetHCLKFreq+0x38>)
 80038a4:	681b      	ldr	r3, [r3, #0]
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	080066b0 	.word	0x080066b0
 80038b4:	20000064 	.word	0x20000064

080038b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80038bc:	f7ff ffde 	bl	800387c <HAL_RCC_GetHCLKFreq>
 80038c0:	0001      	movs	r1, r0
 80038c2:	4b07      	ldr	r3, [pc, #28]	@ (80038e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	0b1b      	lsrs	r3, r3, #12
 80038c8:	2207      	movs	r2, #7
 80038ca:	401a      	ands	r2, r3
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80038ce:	0092      	lsls	r2, r2, #2
 80038d0:	58d3      	ldr	r3, [r2, r3]
 80038d2:	221f      	movs	r2, #31
 80038d4:	4013      	ands	r3, r2
 80038d6:	40d9      	lsrs	r1, r3
 80038d8:	000b      	movs	r3, r1
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40021000 	.word	0x40021000
 80038e4:	080066f0 	.word	0x080066f0

080038e8 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80038f0:	2313      	movs	r3, #19
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038f8:	2312      	movs	r3, #18
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2240      	movs	r2, #64	@ 0x40
 8003906:	4013      	ands	r3, r2
 8003908:	d100      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x24>
 800390a:	e079      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390c:	2011      	movs	r0, #17
 800390e:	183b      	adds	r3, r7, r0
 8003910:	2200      	movs	r2, #0
 8003912:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003914:	4b6a      	ldr	r3, [pc, #424]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003916:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003918:	2380      	movs	r3, #128	@ 0x80
 800391a:	055b      	lsls	r3, r3, #21
 800391c:	4013      	ands	r3, r2
 800391e:	d110      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003920:	4b67      	ldr	r3, [pc, #412]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003922:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003924:	4b66      	ldr	r3, [pc, #408]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003926:	2180      	movs	r1, #128	@ 0x80
 8003928:	0549      	lsls	r1, r1, #21
 800392a:	430a      	orrs	r2, r1
 800392c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800392e:	4b64      	ldr	r3, [pc, #400]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003930:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003932:	2380      	movs	r3, #128	@ 0x80
 8003934:	055b      	lsls	r3, r3, #21
 8003936:	4013      	ands	r3, r2
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800393c:	183b      	adds	r3, r7, r0
 800393e:	2201      	movs	r2, #1
 8003940:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003942:	4b5f      	ldr	r3, [pc, #380]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003944:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003946:	23c0      	movs	r3, #192	@ 0xc0
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4013      	ands	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d019      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	429a      	cmp	r2, r3
 800395c:	d014      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800395e:	4b58      	ldr	r3, [pc, #352]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003962:	4a58      	ldr	r2, [pc, #352]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003964:	4013      	ands	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003968:	4b55      	ldr	r3, [pc, #340]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800396a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800396c:	4b54      	ldr	r3, [pc, #336]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800396e:	2180      	movs	r1, #128	@ 0x80
 8003970:	0249      	lsls	r1, r1, #9
 8003972:	430a      	orrs	r2, r1
 8003974:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003976:	4b52      	ldr	r3, [pc, #328]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003978:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800397a:	4b51      	ldr	r3, [pc, #324]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800397c:	4952      	ldr	r1, [pc, #328]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800397e:	400a      	ands	r2, r1
 8003980:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003982:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2201      	movs	r2, #1
 800398c:	4013      	ands	r3, r2
 800398e:	d016      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003990:	f7fd ff66 	bl	8001860 <HAL_GetTick>
 8003994:	0003      	movs	r3, r0
 8003996:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003998:	e00c      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399a:	f7fd ff61 	bl	8001860 <HAL_GetTick>
 800399e:	0002      	movs	r2, r0
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	4a49      	ldr	r2, [pc, #292]	@ (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d904      	bls.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80039aa:	2313      	movs	r3, #19
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	2203      	movs	r2, #3
 80039b0:	701a      	strb	r2, [r3, #0]
          break;
 80039b2:	e004      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80039b4:	4b42      	ldr	r3, [pc, #264]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b8:	2202      	movs	r2, #2
 80039ba:	4013      	ands	r3, r2
 80039bc:	d0ed      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80039be:	2313      	movs	r3, #19
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039c8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039cc:	4a3d      	ldr	r2, [pc, #244]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	0019      	movs	r1, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039d8:	430a      	orrs	r2, r1
 80039da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80039dc:	e005      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039de:	2312      	movs	r3, #18
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	2213      	movs	r2, #19
 80039e4:	18ba      	adds	r2, r7, r2
 80039e6:	7812      	ldrb	r2, [r2, #0]
 80039e8:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039ea:	2311      	movs	r3, #17
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d105      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f4:	4b32      	ldr	r3, [pc, #200]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039f8:	4b31      	ldr	r3, [pc, #196]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039fa:	4935      	ldr	r1, [pc, #212]	@ (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80039fc:	400a      	ands	r2, r1
 80039fe:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2201      	movs	r2, #1
 8003a06:	4013      	ands	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0e:	2203      	movs	r2, #3
 8003a10:	4393      	bics	r3, r2
 8003a12:	0019      	movs	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	4b29      	ldr	r3, [pc, #164]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2202      	movs	r2, #2
 8003a24:	4013      	ands	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a28:	4b25      	ldr	r3, [pc, #148]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2c:	4a29      	ldr	r2, [pc, #164]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	4b22      	ldr	r3, [pc, #136]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2220      	movs	r2, #32
 8003a42:	4013      	ands	r3, r2
 8003a44:	d008      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	0899      	lsrs	r1, r3, #2
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a54:	430a      	orrs	r2, r1
 8003a56:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2208      	movs	r2, #8
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d009      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a62:	4b17      	ldr	r3, [pc, #92]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a66:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	4b13      	ldr	r3, [pc, #76]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a72:	430a      	orrs	r2, r1
 8003a74:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d009      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003a80:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a84:	4a15      	ldr	r2, [pc, #84]	@ (8003adc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	0019      	movs	r1, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691a      	ldr	r2, [r3, #16]
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a90:	430a      	orrs	r2, r1
 8003a92:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2280      	movs	r2, #128	@ 0x80
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003a9e:	4b08      	ldr	r3, [pc, #32]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	22e0      	movs	r2, #224	@ 0xe0
 8003aa4:	4393      	bics	r3, r2
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	4b04      	ldr	r3, [pc, #16]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003ab2:	2312      	movs	r3, #18
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	781b      	ldrb	r3, [r3, #0]
}
 8003ab8:	0018      	movs	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b006      	add	sp, #24
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	fffffcff 	.word	0xfffffcff
 8003ac8:	fffeffff 	.word	0xfffeffff
 8003acc:	00001388 	.word	0x00001388
 8003ad0:	efffffff 	.word	0xefffffff
 8003ad4:	ffffcfff 	.word	0xffffcfff
 8003ad8:	ffffefff 	.word	0xffffefff
 8003adc:	ffff3fff 	.word	0xffff3fff

08003ae0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0a8      	b.n	8003c44 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	2382      	movs	r3, #130	@ 0x82
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d009      	beq.n	8003b1a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	61da      	str	r2, [r3, #28]
 8003b0c:	e005      	b.n	8003b1a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	225d      	movs	r2, #93	@ 0x5d
 8003b24:	5c9b      	ldrb	r3, [r3, r2]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d107      	bne.n	8003b3c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	225c      	movs	r2, #92	@ 0x5c
 8003b30:	2100      	movs	r1, #0
 8003b32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f7fd fc08 	bl	800134c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	225d      	movs	r2, #93	@ 0x5d
 8003b40:	2102      	movs	r1, #2
 8003b42:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2140      	movs	r1, #64	@ 0x40
 8003b50:	438a      	bics	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	23e0      	movs	r3, #224	@ 0xe0
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d902      	bls.n	8003b66 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	e002      	b.n	8003b6c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b66:	2380      	movs	r3, #128	@ 0x80
 8003b68:	015b      	lsls	r3, r3, #5
 8003b6a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	23f0      	movs	r3, #240	@ 0xf0
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d008      	beq.n	8003b8a <HAL_SPI_Init+0xaa>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	23e0      	movs	r3, #224	@ 0xe0
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d002      	beq.n	8003b8a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	2382      	movs	r3, #130	@ 0x82
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	401a      	ands	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6899      	ldr	r1, [r3, #8]
 8003b98:	2384      	movs	r3, #132	@ 0x84
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	400b      	ands	r3, r1
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2102      	movs	r1, #2
 8003ba6:	400b      	ands	r3, r1
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	2101      	movs	r1, #1
 8003bb0:	400b      	ands	r3, r1
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6999      	ldr	r1, [r3, #24]
 8003bb8:	2380      	movs	r3, #128	@ 0x80
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	400b      	ands	r3, r1
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	2138      	movs	r1, #56	@ 0x38
 8003bc6:	400b      	ands	r3, r1
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	2180      	movs	r1, #128	@ 0x80
 8003bd0:	400b      	ands	r3, r1
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	0011      	movs	r1, r2
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bda:	2380      	movs	r3, #128	@ 0x80
 8003bdc:	019b      	lsls	r3, r3, #6
 8003bde:	401a      	ands	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	0c1b      	lsrs	r3, r3, #16
 8003bee:	2204      	movs	r2, #4
 8003bf0:	401a      	ands	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	2110      	movs	r1, #16
 8003bf8:	400b      	ands	r3, r1
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c00:	2108      	movs	r1, #8
 8003c02:	400b      	ands	r3, r1
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68d9      	ldr	r1, [r3, #12]
 8003c0a:	23f0      	movs	r3, #240	@ 0xf0
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	400b      	ands	r3, r1
 8003c10:	431a      	orrs	r2, r3
 8003c12:	0011      	movs	r1, r2
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	2380      	movs	r3, #128	@ 0x80
 8003c18:	015b      	lsls	r3, r3, #5
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69da      	ldr	r2, [r3, #28]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4907      	ldr	r1, [pc, #28]	@ (8003c4c <HAL_SPI_Init+0x16c>)
 8003c30:	400a      	ands	r2, r1
 8003c32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	225d      	movs	r2, #93	@ 0x5d
 8003c3e:	2101      	movs	r1, #1
 8003c40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	0018      	movs	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b004      	add	sp, #16
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	fffff7ff 	.word	0xfffff7ff

08003c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e04a      	b.n	8003cf8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	223d      	movs	r2, #61	@ 0x3d
 8003c66:	5c9b      	ldrb	r3, [r3, r2]
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d107      	bne.n	8003c7e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	223c      	movs	r2, #60	@ 0x3c
 8003c72:	2100      	movs	r1, #0
 8003c74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7fd fc0d 	bl	8001498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	223d      	movs	r2, #61	@ 0x3d
 8003c82:	2102      	movs	r1, #2
 8003c84:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	0019      	movs	r1, r3
 8003c90:	0010      	movs	r0, r2
 8003c92:	f000 f98d 	bl	8003fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2248      	movs	r2, #72	@ 0x48
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	223e      	movs	r2, #62	@ 0x3e
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	5499      	strb	r1, [r3, r2]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	223f      	movs	r2, #63	@ 0x3f
 8003caa:	2101      	movs	r1, #1
 8003cac:	5499      	strb	r1, [r3, r2]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2240      	movs	r2, #64	@ 0x40
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	5499      	strb	r1, [r3, r2]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2241      	movs	r2, #65	@ 0x41
 8003cba:	2101      	movs	r1, #1
 8003cbc:	5499      	strb	r1, [r3, r2]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2242      	movs	r2, #66	@ 0x42
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	5499      	strb	r1, [r3, r2]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2243      	movs	r2, #67	@ 0x43
 8003cca:	2101      	movs	r1, #1
 8003ccc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2244      	movs	r2, #68	@ 0x44
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	5499      	strb	r1, [r3, r2]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2245      	movs	r2, #69	@ 0x45
 8003cda:	2101      	movs	r1, #1
 8003cdc:	5499      	strb	r1, [r3, r2]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2246      	movs	r2, #70	@ 0x46
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	5499      	strb	r1, [r3, r2]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2247      	movs	r2, #71	@ 0x47
 8003cea:	2101      	movs	r1, #1
 8003cec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	223d      	movs	r2, #61	@ 0x3d
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b002      	add	sp, #8
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e04a      	b.n	8003da8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	223d      	movs	r2, #61	@ 0x3d
 8003d16:	5c9b      	ldrb	r3, [r3, r2]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d107      	bne.n	8003d2e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	223c      	movs	r2, #60	@ 0x3c
 8003d22:	2100      	movs	r1, #0
 8003d24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7fd fb95 	bl	8001458 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	223d      	movs	r2, #61	@ 0x3d
 8003d32:	2102      	movs	r1, #2
 8003d34:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	0019      	movs	r1, r3
 8003d40:	0010      	movs	r0, r2
 8003d42:	f000 f935 	bl	8003fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2248      	movs	r2, #72	@ 0x48
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	223e      	movs	r2, #62	@ 0x3e
 8003d52:	2101      	movs	r1, #1
 8003d54:	5499      	strb	r1, [r3, r2]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	223f      	movs	r2, #63	@ 0x3f
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	5499      	strb	r1, [r3, r2]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2240      	movs	r2, #64	@ 0x40
 8003d62:	2101      	movs	r1, #1
 8003d64:	5499      	strb	r1, [r3, r2]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2241      	movs	r2, #65	@ 0x41
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	5499      	strb	r1, [r3, r2]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2242      	movs	r2, #66	@ 0x42
 8003d72:	2101      	movs	r1, #1
 8003d74:	5499      	strb	r1, [r3, r2]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2243      	movs	r2, #67	@ 0x43
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2244      	movs	r2, #68	@ 0x44
 8003d82:	2101      	movs	r1, #1
 8003d84:	5499      	strb	r1, [r3, r2]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2245      	movs	r2, #69	@ 0x45
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	5499      	strb	r1, [r3, r2]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2246      	movs	r2, #70	@ 0x46
 8003d92:	2101      	movs	r1, #1
 8003d94:	5499      	strb	r1, [r3, r2]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2247      	movs	r2, #71	@ 0x47
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	223d      	movs	r2, #61	@ 0x3d
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbc:	2317      	movs	r3, #23
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	223c      	movs	r2, #60	@ 0x3c
 8003dc8:	5c9b      	ldrb	r3, [r3, r2]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e0e5      	b.n	8003f9e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	223c      	movs	r2, #60	@ 0x3c
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b14      	cmp	r3, #20
 8003dde:	d900      	bls.n	8003de2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003de0:	e0d1      	b.n	8003f86 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	009a      	lsls	r2, r3, #2
 8003de6:	4b70      	ldr	r3, [pc, #448]	@ (8003fa8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003de8:	18d3      	adds	r3, r2, r3
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	0011      	movs	r1, r2
 8003df6:	0018      	movs	r0, r3
 8003df8:	f000 f95e 	bl	80040b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2108      	movs	r1, #8
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2104      	movs	r1, #4
 8003e18:	438a      	bics	r2, r1
 8003e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6999      	ldr	r1, [r3, #24]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	619a      	str	r2, [r3, #24]
      break;
 8003e2e:	e0af      	b.n	8003f90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	0011      	movs	r1, r2
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f000 f9bd 	bl	80041b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699a      	ldr	r2, [r3, #24]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2180      	movs	r1, #128	@ 0x80
 8003e4a:	0109      	lsls	r1, r1, #4
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4954      	ldr	r1, [pc, #336]	@ (8003fac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6999      	ldr	r1, [r3, #24]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	021a      	lsls	r2, r3, #8
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	619a      	str	r2, [r3, #24]
      break;
 8003e74:	e08c      	b.n	8003f90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	0011      	movs	r1, r2
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f000 fa18 	bl	80042b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69da      	ldr	r2, [r3, #28]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2108      	movs	r1, #8
 8003e90:	430a      	orrs	r2, r1
 8003e92:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2104      	movs	r1, #4
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69d9      	ldr	r1, [r3, #28]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	61da      	str	r2, [r3, #28]
      break;
 8003eb6:	e06b      	b.n	8003f90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	0011      	movs	r1, r2
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f000 fa79 	bl	80043b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2180      	movs	r1, #128	@ 0x80
 8003ed2:	0109      	lsls	r1, r1, #4
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4932      	ldr	r1, [pc, #200]	@ (8003fac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003ee4:	400a      	ands	r2, r1
 8003ee6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69d9      	ldr	r1, [r3, #28]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	021a      	lsls	r2, r3, #8
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	61da      	str	r2, [r3, #28]
      break;
 8003efc:	e048      	b.n	8003f90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	0011      	movs	r1, r2
 8003f06:	0018      	movs	r0, r3
 8003f08:	f000 faba 	bl	8004480 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2108      	movs	r1, #8
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2104      	movs	r1, #4
 8003f28:	438a      	bics	r2, r1
 8003f2a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f3e:	e027      	b.n	8003f90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	0011      	movs	r1, r2
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f000 faf3 	bl	8004534 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2180      	movs	r1, #128	@ 0x80
 8003f5a:	0109      	lsls	r1, r1, #4
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4910      	ldr	r1, [pc, #64]	@ (8003fac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003f6c:	400a      	ands	r2, r1
 8003f6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	021a      	lsls	r2, r3, #8
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003f84:	e004      	b.n	8003f90 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003f86:	2317      	movs	r3, #23
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	701a      	strb	r2, [r3, #0]
      break;
 8003f8e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	223c      	movs	r2, #60	@ 0x3c
 8003f94:	2100      	movs	r1, #0
 8003f96:	5499      	strb	r1, [r3, r2]

  return status;
 8003f98:	2317      	movs	r3, #23
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	781b      	ldrb	r3, [r3, #0]
}
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b006      	add	sp, #24
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	46c0      	nop			@ (mov r8, r8)
 8003fa8:	08006710 	.word	0x08006710
 8003fac:	fffffbff 	.word	0xfffffbff

08003fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a37      	ldr	r2, [pc, #220]	@ (80040a0 <TIM_Base_SetConfig+0xf0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d008      	beq.n	8003fda <TIM_Base_SetConfig+0x2a>
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	2380      	movs	r3, #128	@ 0x80
 8003fcc:	05db      	lsls	r3, r3, #23
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d003      	beq.n	8003fda <TIM_Base_SetConfig+0x2a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a33      	ldr	r2, [pc, #204]	@ (80040a4 <TIM_Base_SetConfig+0xf4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d108      	bne.n	8003fec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2270      	movs	r2, #112	@ 0x70
 8003fde:	4393      	bics	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a2c      	ldr	r2, [pc, #176]	@ (80040a0 <TIM_Base_SetConfig+0xf0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d014      	beq.n	800401e <TIM_Base_SetConfig+0x6e>
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	2380      	movs	r3, #128	@ 0x80
 8003ff8:	05db      	lsls	r3, r3, #23
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d00f      	beq.n	800401e <TIM_Base_SetConfig+0x6e>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a28      	ldr	r2, [pc, #160]	@ (80040a4 <TIM_Base_SetConfig+0xf4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00b      	beq.n	800401e <TIM_Base_SetConfig+0x6e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a27      	ldr	r2, [pc, #156]	@ (80040a8 <TIM_Base_SetConfig+0xf8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <TIM_Base_SetConfig+0x6e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a26      	ldr	r2, [pc, #152]	@ (80040ac <TIM_Base_SetConfig+0xfc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d003      	beq.n	800401e <TIM_Base_SetConfig+0x6e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a25      	ldr	r2, [pc, #148]	@ (80040b0 <TIM_Base_SetConfig+0x100>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d108      	bne.n	8004030 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4a24      	ldr	r2, [pc, #144]	@ (80040b4 <TIM_Base_SetConfig+0x104>)
 8004022:	4013      	ands	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2280      	movs	r2, #128	@ 0x80
 8004034:	4393      	bics	r3, r2
 8004036:	001a      	movs	r2, r3
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a11      	ldr	r2, [pc, #68]	@ (80040a0 <TIM_Base_SetConfig+0xf0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d007      	beq.n	800406e <TIM_Base_SetConfig+0xbe>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a12      	ldr	r2, [pc, #72]	@ (80040ac <TIM_Base_SetConfig+0xfc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d003      	beq.n	800406e <TIM_Base_SetConfig+0xbe>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a11      	ldr	r2, [pc, #68]	@ (80040b0 <TIM_Base_SetConfig+0x100>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d103      	bne.n	8004076 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2201      	movs	r2, #1
 8004082:	4013      	ands	r3, r2
 8004084:	2b01      	cmp	r3, #1
 8004086:	d106      	bne.n	8004096 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	2201      	movs	r2, #1
 800408e:	4393      	bics	r3, r2
 8004090:	001a      	movs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	611a      	str	r2, [r3, #16]
  }
}
 8004096:	46c0      	nop			@ (mov r8, r8)
 8004098:	46bd      	mov	sp, r7
 800409a:	b004      	add	sp, #16
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40002000 	.word	0x40002000
 80040ac:	40014400 	.word	0x40014400
 80040b0:	40014800 	.word	0x40014800
 80040b4:	fffffcff 	.word	0xfffffcff

080040b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	2201      	movs	r2, #1
 80040ce:	4393      	bics	r3, r2
 80040d0:	001a      	movs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4a2e      	ldr	r2, [pc, #184]	@ (80041a0 <TIM_OC1_SetConfig+0xe8>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2203      	movs	r2, #3
 80040ee:	4393      	bics	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2202      	movs	r2, #2
 8004100:	4393      	bics	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a24      	ldr	r2, [pc, #144]	@ (80041a4 <TIM_OC1_SetConfig+0xec>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d007      	beq.n	8004126 <TIM_OC1_SetConfig+0x6e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a23      	ldr	r2, [pc, #140]	@ (80041a8 <TIM_OC1_SetConfig+0xf0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d003      	beq.n	8004126 <TIM_OC1_SetConfig+0x6e>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a22      	ldr	r2, [pc, #136]	@ (80041ac <TIM_OC1_SetConfig+0xf4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d10c      	bne.n	8004140 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2208      	movs	r2, #8
 800412a:	4393      	bics	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2204      	movs	r2, #4
 800413c:	4393      	bics	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a18      	ldr	r2, [pc, #96]	@ (80041a4 <TIM_OC1_SetConfig+0xec>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d007      	beq.n	8004158 <TIM_OC1_SetConfig+0xa0>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a17      	ldr	r2, [pc, #92]	@ (80041a8 <TIM_OC1_SetConfig+0xf0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_OC1_SetConfig+0xa0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a16      	ldr	r2, [pc, #88]	@ (80041ac <TIM_OC1_SetConfig+0xf4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d111      	bne.n	800417c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4a15      	ldr	r2, [pc, #84]	@ (80041b0 <TIM_OC1_SetConfig+0xf8>)
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4a14      	ldr	r2, [pc, #80]	@ (80041b4 <TIM_OC1_SetConfig+0xfc>)
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	46c0      	nop			@ (mov r8, r8)
 8004198:	46bd      	mov	sp, r7
 800419a:	b006      	add	sp, #24
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	fffeff8f 	.word	0xfffeff8f
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40014400 	.word	0x40014400
 80041ac:	40014800 	.word	0x40014800
 80041b0:	fffffeff 	.word	0xfffffeff
 80041b4:	fffffdff 	.word	0xfffffdff

080041b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	2210      	movs	r2, #16
 80041ce:	4393      	bics	r3, r2
 80041d0:	001a      	movs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004298 <TIM_OC2_SetConfig+0xe0>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4a2b      	ldr	r2, [pc, #172]	@ (800429c <TIM_OC2_SetConfig+0xe4>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2220      	movs	r2, #32
 8004202:	4393      	bics	r3, r2
 8004204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a22      	ldr	r2, [pc, #136]	@ (80042a0 <TIM_OC2_SetConfig+0xe8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10d      	bne.n	8004236 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2280      	movs	r2, #128	@ 0x80
 800421e:	4393      	bics	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2240      	movs	r2, #64	@ 0x40
 8004232:	4393      	bics	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a19      	ldr	r2, [pc, #100]	@ (80042a0 <TIM_OC2_SetConfig+0xe8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <TIM_OC2_SetConfig+0x96>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a18      	ldr	r2, [pc, #96]	@ (80042a4 <TIM_OC2_SetConfig+0xec>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_OC2_SetConfig+0x96>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a17      	ldr	r2, [pc, #92]	@ (80042a8 <TIM_OC2_SetConfig+0xf0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d113      	bne.n	8004276 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	4a16      	ldr	r2, [pc, #88]	@ (80042ac <TIM_OC2_SetConfig+0xf4>)
 8004252:	4013      	ands	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	4a15      	ldr	r2, [pc, #84]	@ (80042b0 <TIM_OC2_SetConfig+0xf8>)
 800425a:	4013      	ands	r3, r2
 800425c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	621a      	str	r2, [r3, #32]
}
 8004290:	46c0      	nop			@ (mov r8, r8)
 8004292:	46bd      	mov	sp, r7
 8004294:	b006      	add	sp, #24
 8004296:	bd80      	pop	{r7, pc}
 8004298:	feff8fff 	.word	0xfeff8fff
 800429c:	fffffcff 	.word	0xfffffcff
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40014400 	.word	0x40014400
 80042a8:	40014800 	.word	0x40014800
 80042ac:	fffffbff 	.word	0xfffffbff
 80042b0:	fffff7ff 	.word	0xfffff7ff

080042b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	4a31      	ldr	r2, [pc, #196]	@ (8004390 <TIM_OC3_SetConfig+0xdc>)
 80042ca:	401a      	ands	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4a2d      	ldr	r2, [pc, #180]	@ (8004394 <TIM_OC3_SetConfig+0xe0>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2203      	movs	r2, #3
 80042e8:	4393      	bics	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	4a27      	ldr	r2, [pc, #156]	@ (8004398 <TIM_OC3_SetConfig+0xe4>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a23      	ldr	r2, [pc, #140]	@ (800439c <TIM_OC3_SetConfig+0xe8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10d      	bne.n	800432e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	4a22      	ldr	r2, [pc, #136]	@ (80043a0 <TIM_OC3_SetConfig+0xec>)
 8004316:	4013      	ands	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	4a1e      	ldr	r2, [pc, #120]	@ (80043a4 <TIM_OC3_SetConfig+0xf0>)
 800432a:	4013      	ands	r3, r2
 800432c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a1a      	ldr	r2, [pc, #104]	@ (800439c <TIM_OC3_SetConfig+0xe8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d007      	beq.n	8004346 <TIM_OC3_SetConfig+0x92>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a1b      	ldr	r2, [pc, #108]	@ (80043a8 <TIM_OC3_SetConfig+0xf4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d003      	beq.n	8004346 <TIM_OC3_SetConfig+0x92>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1a      	ldr	r2, [pc, #104]	@ (80043ac <TIM_OC3_SetConfig+0xf8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d113      	bne.n	800436e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4a19      	ldr	r2, [pc, #100]	@ (80043b0 <TIM_OC3_SetConfig+0xfc>)
 800434a:	4013      	ands	r3, r2
 800434c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4a18      	ldr	r2, [pc, #96]	@ (80043b4 <TIM_OC3_SetConfig+0x100>)
 8004352:	4013      	ands	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	621a      	str	r2, [r3, #32]
}
 8004388:	46c0      	nop			@ (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	b006      	add	sp, #24
 800438e:	bd80      	pop	{r7, pc}
 8004390:	fffffeff 	.word	0xfffffeff
 8004394:	fffeff8f 	.word	0xfffeff8f
 8004398:	fffffdff 	.word	0xfffffdff
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	fffff7ff 	.word	0xfffff7ff
 80043a4:	fffffbff 	.word	0xfffffbff
 80043a8:	40014400 	.word	0x40014400
 80043ac:	40014800 	.word	0x40014800
 80043b0:	ffffefff 	.word	0xffffefff
 80043b4:	ffffdfff 	.word	0xffffdfff

080043b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	4a24      	ldr	r2, [pc, #144]	@ (8004460 <TIM_OC4_SetConfig+0xa8>)
 80043ce:	401a      	ands	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4a20      	ldr	r2, [pc, #128]	@ (8004464 <TIM_OC4_SetConfig+0xac>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a1f      	ldr	r2, [pc, #124]	@ (8004468 <TIM_OC4_SetConfig+0xb0>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	4a1b      	ldr	r2, [pc, #108]	@ (800446c <TIM_OC4_SetConfig+0xb4>)
 8004400:	4013      	ands	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	031b      	lsls	r3, r3, #12
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a17      	ldr	r2, [pc, #92]	@ (8004470 <TIM_OC4_SetConfig+0xb8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d007      	beq.n	8004428 <TIM_OC4_SetConfig+0x70>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a16      	ldr	r2, [pc, #88]	@ (8004474 <TIM_OC4_SetConfig+0xbc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_OC4_SetConfig+0x70>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a15      	ldr	r2, [pc, #84]	@ (8004478 <TIM_OC4_SetConfig+0xc0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d109      	bne.n	800443c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	4a14      	ldr	r2, [pc, #80]	@ (800447c <TIM_OC4_SetConfig+0xc4>)
 800442c:	4013      	ands	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	019b      	lsls	r3, r3, #6
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4313      	orrs	r3, r2
 800443a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	46c0      	nop			@ (mov r8, r8)
 8004458:	46bd      	mov	sp, r7
 800445a:	b006      	add	sp, #24
 800445c:	bd80      	pop	{r7, pc}
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	ffffefff 	.word	0xffffefff
 8004464:	feff8fff 	.word	0xfeff8fff
 8004468:	fffffcff 	.word	0xfffffcff
 800446c:	ffffdfff 	.word	0xffffdfff
 8004470:	40012c00 	.word	0x40012c00
 8004474:	40014400 	.word	0x40014400
 8004478:	40014800 	.word	0x40014800
 800447c:	ffffbfff 	.word	0xffffbfff

08004480 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	4a21      	ldr	r2, [pc, #132]	@ (800451c <TIM_OC5_SetConfig+0x9c>)
 8004496:	401a      	ands	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004520 <TIM_OC5_SetConfig+0xa0>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4a19      	ldr	r2, [pc, #100]	@ (8004524 <TIM_OC5_SetConfig+0xa4>)
 80044be:	4013      	ands	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	041b      	lsls	r3, r3, #16
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a15      	ldr	r2, [pc, #84]	@ (8004528 <TIM_OC5_SetConfig+0xa8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d007      	beq.n	80044e6 <TIM_OC5_SetConfig+0x66>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a14      	ldr	r2, [pc, #80]	@ (800452c <TIM_OC5_SetConfig+0xac>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d003      	beq.n	80044e6 <TIM_OC5_SetConfig+0x66>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a13      	ldr	r2, [pc, #76]	@ (8004530 <TIM_OC5_SetConfig+0xb0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d109      	bne.n	80044fa <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	4a0c      	ldr	r2, [pc, #48]	@ (800451c <TIM_OC5_SetConfig+0x9c>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	621a      	str	r2, [r3, #32]
}
 8004514:	46c0      	nop			@ (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	b006      	add	sp, #24
 800451a:	bd80      	pop	{r7, pc}
 800451c:	fffeffff 	.word	0xfffeffff
 8004520:	fffeff8f 	.word	0xfffeff8f
 8004524:	fffdffff 	.word	0xfffdffff
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40014400 	.word	0x40014400
 8004530:	40014800 	.word	0x40014800

08004534 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	4a22      	ldr	r2, [pc, #136]	@ (80045d4 <TIM_OC6_SetConfig+0xa0>)
 800454a:	401a      	ands	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a1e      	ldr	r2, [pc, #120]	@ (80045d8 <TIM_OC6_SetConfig+0xa4>)
 8004560:	4013      	ands	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	4a1a      	ldr	r2, [pc, #104]	@ (80045dc <TIM_OC6_SetConfig+0xa8>)
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	051b      	lsls	r3, r3, #20
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a16      	ldr	r2, [pc, #88]	@ (80045e0 <TIM_OC6_SetConfig+0xac>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d007      	beq.n	800459c <TIM_OC6_SetConfig+0x68>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a15      	ldr	r2, [pc, #84]	@ (80045e4 <TIM_OC6_SetConfig+0xb0>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d003      	beq.n	800459c <TIM_OC6_SetConfig+0x68>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a14      	ldr	r2, [pc, #80]	@ (80045e8 <TIM_OC6_SetConfig+0xb4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d109      	bne.n	80045b0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4a13      	ldr	r2, [pc, #76]	@ (80045ec <TIM_OC6_SetConfig+0xb8>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	029b      	lsls	r3, r3, #10
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	621a      	str	r2, [r3, #32]
}
 80045ca:	46c0      	nop			@ (mov r8, r8)
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b006      	add	sp, #24
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	46c0      	nop			@ (mov r8, r8)
 80045d4:	ffefffff 	.word	0xffefffff
 80045d8:	feff8fff 	.word	0xfeff8fff
 80045dc:	ffdfffff 	.word	0xffdfffff
 80045e0:	40012c00 	.word	0x40012c00
 80045e4:	40014400 	.word	0x40014400
 80045e8:	40014800 	.word	0x40014800
 80045ec:	fffbffff 	.word	0xfffbffff

080045f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	223c      	movs	r2, #60	@ 0x3c
 80045fe:	5c9b      	ldrb	r3, [r3, r2]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004604:	2302      	movs	r3, #2
 8004606:	e050      	b.n	80046aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	223c      	movs	r2, #60	@ 0x3c
 800460c:	2101      	movs	r1, #1
 800460e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	223d      	movs	r2, #61	@ 0x3d
 8004614:	2102      	movs	r1, #2
 8004616:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a21      	ldr	r2, [pc, #132]	@ (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d108      	bne.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a20      	ldr	r2, [pc, #128]	@ (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004636:	4013      	ands	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2270      	movs	r2, #112	@ 0x70
 8004648:	4393      	bics	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a14      	ldr	r2, [pc, #80]	@ (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00a      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	2380      	movs	r3, #128	@ 0x80
 800466e:	05db      	lsls	r3, r3, #23
 8004670:	429a      	cmp	r2, r3
 8004672:	d004      	beq.n	800467e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a10      	ldr	r2, [pc, #64]	@ (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d10c      	bne.n	8004698 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2280      	movs	r2, #128	@ 0x80
 8004682:	4393      	bics	r3, r2
 8004684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	4313      	orrs	r3, r2
 800468e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	223d      	movs	r2, #61	@ 0x3d
 800469c:	2101      	movs	r1, #1
 800469e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	223c      	movs	r2, #60	@ 0x3c
 80046a4:	2100      	movs	r1, #0
 80046a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	0018      	movs	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b004      	add	sp, #16
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	40012c00 	.word	0x40012c00
 80046b8:	ff0fffff 	.word	0xff0fffff
 80046bc:	40000400 	.word	0x40000400

080046c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	223c      	movs	r2, #60	@ 0x3c
 80046d2:	5c9b      	ldrb	r3, [r3, r2]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80046d8:	2302      	movs	r3, #2
 80046da:	e06f      	b.n	80047bc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	223c      	movs	r2, #60	@ 0x3c
 80046e0:	2101      	movs	r1, #1
 80046e2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	22ff      	movs	r2, #255	@ 0xff
 80046e8:	4393      	bics	r3, r2
 80046ea:	001a      	movs	r2, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4a33      	ldr	r2, [pc, #204]	@ (80047c4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80046f8:	401a      	ands	r2, r3
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a30      	ldr	r2, [pc, #192]	@ (80047c8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004706:	401a      	ands	r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4313      	orrs	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4a2e      	ldr	r2, [pc, #184]	@ (80047cc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004714:	401a      	ands	r2, r3
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a2b      	ldr	r2, [pc, #172]	@ (80047d0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004722:	401a      	ands	r2, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4a29      	ldr	r2, [pc, #164]	@ (80047d4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004730:	401a      	ands	r2, r3
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4a26      	ldr	r2, [pc, #152]	@ (80047d8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800473e:	401a      	ands	r2, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4a24      	ldr	r2, [pc, #144]	@ (80047dc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800474c:	401a      	ands	r2, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	041b      	lsls	r3, r3, #16
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a21      	ldr	r2, [pc, #132]	@ (80047e0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800475c:	401a      	ands	r2, r3
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1e      	ldr	r2, [pc, #120]	@ (80047e4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d11c      	bne.n	80047aa <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a1d      	ldr	r2, [pc, #116]	@ (80047e8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004774:	401a      	ands	r2, r3
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477a:	051b      	lsls	r3, r3, #20
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a1a      	ldr	r2, [pc, #104]	@ (80047ec <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004784:	401a      	ands	r2, r3
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a17      	ldr	r2, [pc, #92]	@ (80047f0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004792:	401a      	ands	r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a15      	ldr	r2, [pc, #84]	@ (80047f4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80047a0:	401a      	ands	r2, r3
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	223c      	movs	r2, #60	@ 0x3c
 80047b6:	2100      	movs	r1, #0
 80047b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	0018      	movs	r0, r3
 80047be:	46bd      	mov	sp, r7
 80047c0:	b004      	add	sp, #16
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	fffffcff 	.word	0xfffffcff
 80047c8:	fffffbff 	.word	0xfffffbff
 80047cc:	fffff7ff 	.word	0xfffff7ff
 80047d0:	ffffefff 	.word	0xffffefff
 80047d4:	ffffdfff 	.word	0xffffdfff
 80047d8:	ffffbfff 	.word	0xffffbfff
 80047dc:	fff0ffff 	.word	0xfff0ffff
 80047e0:	efffffff 	.word	0xefffffff
 80047e4:	40012c00 	.word	0x40012c00
 80047e8:	ff0fffff 	.word	0xff0fffff
 80047ec:	feffffff 	.word	0xfeffffff
 80047f0:	fdffffff 	.word	0xfdffffff
 80047f4:	dfffffff 	.word	0xdfffffff

080047f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08c      	sub	sp, #48	@ 0x30
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	1dbb      	adds	r3, r7, #6
 8004804:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2288      	movs	r2, #136	@ 0x88
 800480a:	589b      	ldr	r3, [r3, r2]
 800480c:	2b20      	cmp	r3, #32
 800480e:	d000      	beq.n	8004812 <HAL_UART_Transmit_IT+0x1a>
 8004810:	e08d      	b.n	800492e <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <HAL_UART_Transmit_IT+0x28>
 8004818:	1dbb      	adds	r3, r7, #6
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e085      	b.n	8004930 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689a      	ldr	r2, [r3, #8]
 8004828:	2380      	movs	r3, #128	@ 0x80
 800482a:	015b      	lsls	r3, r3, #5
 800482c:	429a      	cmp	r2, r3
 800482e:	d109      	bne.n	8004844 <HAL_UART_Transmit_IT+0x4c>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2201      	movs	r2, #1
 800483c:	4013      	ands	r3, r2
 800483e:	d001      	beq.n	8004844 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e075      	b.n	8004930 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1dba      	adds	r2, r7, #6
 800484e:	2154      	movs	r1, #84	@ 0x54
 8004850:	8812      	ldrh	r2, [r2, #0]
 8004852:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	1dba      	adds	r2, r7, #6
 8004858:	2156      	movs	r1, #86	@ 0x56
 800485a:	8812      	ldrh	r2, [r2, #0]
 800485c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2290      	movs	r2, #144	@ 0x90
 8004868:	2100      	movs	r1, #0
 800486a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2288      	movs	r2, #136	@ 0x88
 8004870:	2121      	movs	r1, #33	@ 0x21
 8004872:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004878:	2380      	movs	r3, #128	@ 0x80
 800487a:	059b      	lsls	r3, r3, #22
 800487c:	429a      	cmp	r2, r3
 800487e:	d12a      	bne.n	80048d6 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	2380      	movs	r3, #128	@ 0x80
 8004886:	015b      	lsls	r3, r3, #5
 8004888:	429a      	cmp	r2, r3
 800488a:	d107      	bne.n	800489c <HAL_UART_Transmit_IT+0xa4>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d103      	bne.n	800489c <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4a28      	ldr	r2, [pc, #160]	@ (8004938 <HAL_UART_Transmit_IT+0x140>)
 8004898:	679a      	str	r2, [r3, #120]	@ 0x78
 800489a:	e002      	b.n	80048a2 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4a27      	ldr	r2, [pc, #156]	@ (800493c <HAL_UART_Transmit_IT+0x144>)
 80048a0:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80048a2:	f3ef 8310 	mrs	r3, PRIMASK
 80048a6:	61fb      	str	r3, [r7, #28]
  return(result);
 80048a8:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80048aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048ac:	2301      	movs	r3, #1
 80048ae:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	f383 8810 	msr	PRIMASK, r3
}
 80048b6:	46c0      	nop			@ (mov r8, r8)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2180      	movs	r1, #128	@ 0x80
 80048c4:	0409      	lsls	r1, r1, #16
 80048c6:	430a      	orrs	r2, r1
 80048c8:	609a      	str	r2, [r3, #8]
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	f383 8810 	msr	PRIMASK, r3
}
 80048d4:	e029      	b.n	800492a <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	2380      	movs	r3, #128	@ 0x80
 80048dc:	015b      	lsls	r3, r3, #5
 80048de:	429a      	cmp	r2, r3
 80048e0:	d107      	bne.n	80048f2 <HAL_UART_Transmit_IT+0xfa>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d103      	bne.n	80048f2 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4a14      	ldr	r2, [pc, #80]	@ (8004940 <HAL_UART_Transmit_IT+0x148>)
 80048ee:	679a      	str	r2, [r3, #120]	@ 0x78
 80048f0:	e002      	b.n	80048f8 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a13      	ldr	r2, [pc, #76]	@ (8004944 <HAL_UART_Transmit_IT+0x14c>)
 80048f6:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80048f8:	f3ef 8310 	mrs	r3, PRIMASK
 80048fc:	613b      	str	r3, [r7, #16]
  return(result);
 80048fe:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004902:	2301      	movs	r3, #1
 8004904:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f383 8810 	msr	PRIMASK, r3
}
 800490c:	46c0      	nop			@ (mov r8, r8)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2180      	movs	r1, #128	@ 0x80
 800491a:	430a      	orrs	r2, r1
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004920:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	f383 8810 	msr	PRIMASK, r3
}
 8004928:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 800492a:	2300      	movs	r3, #0
 800492c:	e000      	b.n	8004930 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800492e:	2302      	movs	r3, #2
  }
}
 8004930:	0018      	movs	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	b00c      	add	sp, #48	@ 0x30
 8004936:	bd80      	pop	{r7, pc}
 8004938:	0800557d 	.word	0x0800557d
 800493c:	08005491 	.word	0x08005491
 8004940:	080053d1 	.word	0x080053d1
 8004944:	0800531d 	.word	0x0800531d

08004948 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004950:	46c0      	nop			@ (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b002      	add	sp, #8
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	000a      	movs	r2, r1
 8004962:	1cbb      	adds	r3, r7, #2
 8004964:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004966:	46c0      	nop			@ (mov r8, r8)
 8004968:	46bd      	mov	sp, r7
 800496a:	b002      	add	sp, #8
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004978:	231e      	movs	r3, #30
 800497a:	18fb      	adds	r3, r7, r3
 800497c:	2200      	movs	r2, #0
 800497e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4aab      	ldr	r2, [pc, #684]	@ (8004c4c <UART_SetConfig+0x2dc>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	4aa6      	ldr	r2, [pc, #664]	@ (8004c50 <UART_SetConfig+0x2e0>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	0019      	movs	r1, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	4a9d      	ldr	r2, [pc, #628]	@ (8004c54 <UART_SetConfig+0x2e4>)
 80049de:	4013      	ands	r3, r2
 80049e0:	0019      	movs	r1, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	220f      	movs	r2, #15
 80049f4:	4393      	bics	r3, r2
 80049f6:	0019      	movs	r1, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a93      	ldr	r2, [pc, #588]	@ (8004c58 <UART_SetConfig+0x2e8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d127      	bne.n	8004a5e <UART_SetConfig+0xee>
 8004a0e:	4b93      	ldr	r3, [pc, #588]	@ (8004c5c <UART_SetConfig+0x2ec>)
 8004a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a12:	2203      	movs	r2, #3
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d017      	beq.n	8004a4a <UART_SetConfig+0xda>
 8004a1a:	d81b      	bhi.n	8004a54 <UART_SetConfig+0xe4>
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d00a      	beq.n	8004a36 <UART_SetConfig+0xc6>
 8004a20:	d818      	bhi.n	8004a54 <UART_SetConfig+0xe4>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <UART_SetConfig+0xbc>
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d00a      	beq.n	8004a40 <UART_SetConfig+0xd0>
 8004a2a:	e013      	b.n	8004a54 <UART_SetConfig+0xe4>
 8004a2c:	231f      	movs	r3, #31
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e021      	b.n	8004a7a <UART_SetConfig+0x10a>
 8004a36:	231f      	movs	r3, #31
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	e01c      	b.n	8004a7a <UART_SetConfig+0x10a>
 8004a40:	231f      	movs	r3, #31
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	2204      	movs	r2, #4
 8004a46:	701a      	strb	r2, [r3, #0]
 8004a48:	e017      	b.n	8004a7a <UART_SetConfig+0x10a>
 8004a4a:	231f      	movs	r3, #31
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	2208      	movs	r2, #8
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	e012      	b.n	8004a7a <UART_SetConfig+0x10a>
 8004a54:	231f      	movs	r3, #31
 8004a56:	18fb      	adds	r3, r7, r3
 8004a58:	2210      	movs	r2, #16
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	e00d      	b.n	8004a7a <UART_SetConfig+0x10a>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a7f      	ldr	r2, [pc, #508]	@ (8004c60 <UART_SetConfig+0x2f0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d104      	bne.n	8004a72 <UART_SetConfig+0x102>
 8004a68:	231f      	movs	r3, #31
 8004a6a:	18fb      	adds	r3, r7, r3
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	e003      	b.n	8004a7a <UART_SetConfig+0x10a>
 8004a72:	231f      	movs	r3, #31
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	2210      	movs	r2, #16
 8004a78:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69da      	ldr	r2, [r3, #28]
 8004a7e:	2380      	movs	r3, #128	@ 0x80
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d000      	beq.n	8004a88 <UART_SetConfig+0x118>
 8004a86:	e06f      	b.n	8004b68 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004a88:	231f      	movs	r3, #31
 8004a8a:	18fb      	adds	r3, r7, r3
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d01f      	beq.n	8004ad2 <UART_SetConfig+0x162>
 8004a92:	dc22      	bgt.n	8004ada <UART_SetConfig+0x16a>
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d017      	beq.n	8004ac8 <UART_SetConfig+0x158>
 8004a98:	dc1f      	bgt.n	8004ada <UART_SetConfig+0x16a>
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d002      	beq.n	8004aa4 <UART_SetConfig+0x134>
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d005      	beq.n	8004aae <UART_SetConfig+0x13e>
 8004aa2:	e01a      	b.n	8004ada <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aa4:	f7fe ff08 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	61bb      	str	r3, [r7, #24]
        break;
 8004aac:	e01c      	b.n	8004ae8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004aae:	4b6b      	ldr	r3, [pc, #428]	@ (8004c5c <UART_SetConfig+0x2ec>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	2207      	movs	r2, #7
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	3301      	adds	r3, #1
 8004aba:	0019      	movs	r1, r3
 8004abc:	4869      	ldr	r0, [pc, #420]	@ (8004c64 <UART_SetConfig+0x2f4>)
 8004abe:	f7fb fb23 	bl	8000108 <__udivsi3>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	61bb      	str	r3, [r7, #24]
        break;
 8004ac6:	e00f      	b.n	8004ae8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ac8:	f7fe fe80 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8004acc:	0003      	movs	r3, r0
 8004ace:	61bb      	str	r3, [r7, #24]
        break;
 8004ad0:	e00a      	b.n	8004ae8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ad2:	2380      	movs	r3, #128	@ 0x80
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	61bb      	str	r3, [r7, #24]
        break;
 8004ad8:	e006      	b.n	8004ae8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ade:	231e      	movs	r3, #30
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]
        break;
 8004ae6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d100      	bne.n	8004af0 <UART_SetConfig+0x180>
 8004aee:	e097      	b.n	8004c20 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004af4:	4b5c      	ldr	r3, [pc, #368]	@ (8004c68 <UART_SetConfig+0x2f8>)
 8004af6:	0052      	lsls	r2, r2, #1
 8004af8:	5ad3      	ldrh	r3, [r2, r3]
 8004afa:	0019      	movs	r1, r3
 8004afc:	69b8      	ldr	r0, [r7, #24]
 8004afe:	f7fb fb03 	bl	8000108 <__udivsi3>
 8004b02:	0003      	movs	r3, r0
 8004b04:	005a      	lsls	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	085b      	lsrs	r3, r3, #1
 8004b0c:	18d2      	adds	r2, r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	0019      	movs	r1, r3
 8004b14:	0010      	movs	r0, r2
 8004b16:	f7fb faf7 	bl	8000108 <__udivsi3>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	2b0f      	cmp	r3, #15
 8004b22:	d91c      	bls.n	8004b5e <UART_SetConfig+0x1ee>
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	2380      	movs	r3, #128	@ 0x80
 8004b28:	025b      	lsls	r3, r3, #9
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d217      	bcs.n	8004b5e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	200e      	movs	r0, #14
 8004b34:	183b      	adds	r3, r7, r0
 8004b36:	210f      	movs	r1, #15
 8004b38:	438a      	bics	r2, r1
 8004b3a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	085b      	lsrs	r3, r3, #1
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2207      	movs	r2, #7
 8004b44:	4013      	ands	r3, r2
 8004b46:	b299      	uxth	r1, r3
 8004b48:	183b      	adds	r3, r7, r0
 8004b4a:	183a      	adds	r2, r7, r0
 8004b4c:	8812      	ldrh	r2, [r2, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	183a      	adds	r2, r7, r0
 8004b58:	8812      	ldrh	r2, [r2, #0]
 8004b5a:	60da      	str	r2, [r3, #12]
 8004b5c:	e060      	b.n	8004c20 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b5e:	231e      	movs	r3, #30
 8004b60:	18fb      	adds	r3, r7, r3
 8004b62:	2201      	movs	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	e05b      	b.n	8004c20 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b68:	231f      	movs	r3, #31
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d01f      	beq.n	8004bb2 <UART_SetConfig+0x242>
 8004b72:	dc22      	bgt.n	8004bba <UART_SetConfig+0x24a>
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d017      	beq.n	8004ba8 <UART_SetConfig+0x238>
 8004b78:	dc1f      	bgt.n	8004bba <UART_SetConfig+0x24a>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <UART_SetConfig+0x214>
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d005      	beq.n	8004b8e <UART_SetConfig+0x21e>
 8004b82:	e01a      	b.n	8004bba <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b84:	f7fe fe98 	bl	80038b8 <HAL_RCC_GetPCLK1Freq>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	61bb      	str	r3, [r7, #24]
        break;
 8004b8c:	e01c      	b.n	8004bc8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004b8e:	4b33      	ldr	r3, [pc, #204]	@ (8004c5c <UART_SetConfig+0x2ec>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	2207      	movs	r2, #7
 8004b96:	4013      	ands	r3, r2
 8004b98:	3301      	adds	r3, #1
 8004b9a:	0019      	movs	r1, r3
 8004b9c:	4831      	ldr	r0, [pc, #196]	@ (8004c64 <UART_SetConfig+0x2f4>)
 8004b9e:	f7fb fab3 	bl	8000108 <__udivsi3>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	61bb      	str	r3, [r7, #24]
        break;
 8004ba6:	e00f      	b.n	8004bc8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ba8:	f7fe fe10 	bl	80037cc <HAL_RCC_GetSysClockFreq>
 8004bac:	0003      	movs	r3, r0
 8004bae:	61bb      	str	r3, [r7, #24]
        break;
 8004bb0:	e00a      	b.n	8004bc8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bb2:	2380      	movs	r3, #128	@ 0x80
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	61bb      	str	r3, [r7, #24]
        break;
 8004bb8:	e006      	b.n	8004bc8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bbe:	231e      	movs	r3, #30
 8004bc0:	18fb      	adds	r3, r7, r3
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
        break;
 8004bc6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d028      	beq.n	8004c20 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bd2:	4b25      	ldr	r3, [pc, #148]	@ (8004c68 <UART_SetConfig+0x2f8>)
 8004bd4:	0052      	lsls	r2, r2, #1
 8004bd6:	5ad3      	ldrh	r3, [r2, r3]
 8004bd8:	0019      	movs	r1, r3
 8004bda:	69b8      	ldr	r0, [r7, #24]
 8004bdc:	f7fb fa94 	bl	8000108 <__udivsi3>
 8004be0:	0003      	movs	r3, r0
 8004be2:	001a      	movs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	085b      	lsrs	r3, r3, #1
 8004bea:	18d2      	adds	r2, r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	0010      	movs	r0, r2
 8004bf4:	f7fb fa88 	bl	8000108 <__udivsi3>
 8004bf8:	0003      	movs	r3, r0
 8004bfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b0f      	cmp	r3, #15
 8004c00:	d90a      	bls.n	8004c18 <UART_SetConfig+0x2a8>
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	2380      	movs	r3, #128	@ 0x80
 8004c06:	025b      	lsls	r3, r3, #9
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d205      	bcs.n	8004c18 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60da      	str	r2, [r3, #12]
 8004c16:	e003      	b.n	8004c20 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004c18:	231e      	movs	r3, #30
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	226a      	movs	r2, #106	@ 0x6a
 8004c24:	2101      	movs	r1, #1
 8004c26:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2268      	movs	r2, #104	@ 0x68
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c3c:	231e      	movs	r3, #30
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	781b      	ldrb	r3, [r3, #0]
}
 8004c42:	0018      	movs	r0, r3
 8004c44:	46bd      	mov	sp, r7
 8004c46:	b008      	add	sp, #32
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	46c0      	nop			@ (mov r8, r8)
 8004c4c:	cfff69f3 	.word	0xcfff69f3
 8004c50:	ffffcfff 	.word	0xffffcfff
 8004c54:	11fff4ff 	.word	0x11fff4ff
 8004c58:	40013800 	.word	0x40013800
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40004400 	.word	0x40004400
 8004c64:	02dc6c00 	.word	0x02dc6c00
 8004c68:	08006764 	.word	0x08006764

08004c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c78:	2208      	movs	r2, #8
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d00b      	beq.n	8004c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4a4a      	ldr	r2, [pc, #296]	@ (8004db0 <UART_AdvFeatureConfig+0x144>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	0019      	movs	r1, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d00b      	beq.n	8004cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	4a43      	ldr	r2, [pc, #268]	@ (8004db4 <UART_AdvFeatureConfig+0x148>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	0019      	movs	r1, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a3b      	ldr	r2, [pc, #236]	@ (8004db8 <UART_AdvFeatureConfig+0x14c>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	0019      	movs	r1, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cde:	2204      	movs	r2, #4
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d00b      	beq.n	8004cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4a34      	ldr	r2, [pc, #208]	@ (8004dbc <UART_AdvFeatureConfig+0x150>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	0019      	movs	r1, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d00:	2210      	movs	r2, #16
 8004d02:	4013      	ands	r3, r2
 8004d04:	d00b      	beq.n	8004d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8004dc0 <UART_AdvFeatureConfig+0x154>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d22:	2220      	movs	r2, #32
 8004d24:	4013      	ands	r3, r2
 8004d26:	d00b      	beq.n	8004d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	4a25      	ldr	r2, [pc, #148]	@ (8004dc4 <UART_AdvFeatureConfig+0x158>)
 8004d30:	4013      	ands	r3, r2
 8004d32:	0019      	movs	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d44:	2240      	movs	r2, #64	@ 0x40
 8004d46:	4013      	ands	r3, r2
 8004d48:	d01d      	beq.n	8004d86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc8 <UART_AdvFeatureConfig+0x15c>)
 8004d52:	4013      	ands	r3, r2
 8004d54:	0019      	movs	r1, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d66:	2380      	movs	r3, #128	@ 0x80
 8004d68:	035b      	lsls	r3, r3, #13
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d10b      	bne.n	8004d86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4a15      	ldr	r2, [pc, #84]	@ (8004dcc <UART_AdvFeatureConfig+0x160>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	0019      	movs	r1, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	2280      	movs	r2, #128	@ 0x80
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d00b      	beq.n	8004da8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd0 <UART_AdvFeatureConfig+0x164>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }
}
 8004da8:	46c0      	nop			@ (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b002      	add	sp, #8
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	ffff7fff 	.word	0xffff7fff
 8004db4:	fffdffff 	.word	0xfffdffff
 8004db8:	fffeffff 	.word	0xfffeffff
 8004dbc:	fffbffff 	.word	0xfffbffff
 8004dc0:	ffffefff 	.word	0xffffefff
 8004dc4:	ffffdfff 	.word	0xffffdfff
 8004dc8:	ffefffff 	.word	0xffefffff
 8004dcc:	ff9fffff 	.word	0xff9fffff
 8004dd0:	fff7ffff 	.word	0xfff7ffff

08004dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b092      	sub	sp, #72	@ 0x48
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2290      	movs	r2, #144	@ 0x90
 8004de0:	2100      	movs	r1, #0
 8004de2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004de4:	f7fc fd3c 	bl	8001860 <HAL_GetTick>
 8004de8:	0003      	movs	r3, r0
 8004dea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2208      	movs	r2, #8
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d12d      	bne.n	8004e56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dfc:	2280      	movs	r2, #128	@ 0x80
 8004dfe:	0391      	lsls	r1, r2, #14
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	4a47      	ldr	r2, [pc, #284]	@ (8004f20 <UART_CheckIdleState+0x14c>)
 8004e04:	9200      	str	r2, [sp, #0]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f000 f88e 	bl	8004f28 <UART_WaitOnFlagUntilTimeout>
 8004e0c:	1e03      	subs	r3, r0, #0
 8004e0e:	d022      	beq.n	8004e56 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e10:	f3ef 8310 	mrs	r3, PRIMASK
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e20:	f383 8810 	msr	PRIMASK, r3
}
 8004e24:	46c0      	nop			@ (mov r8, r8)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2180      	movs	r1, #128	@ 0x80
 8004e32:	438a      	bics	r2, r1
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e3c:	f383 8810 	msr	PRIMASK, r3
}
 8004e40:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2288      	movs	r2, #136	@ 0x88
 8004e46:	2120      	movs	r1, #32
 8004e48:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2284      	movs	r2, #132	@ 0x84
 8004e4e:	2100      	movs	r1, #0
 8004e50:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e060      	b.n	8004f18 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2204      	movs	r2, #4
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d146      	bne.n	8004ef2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e66:	2280      	movs	r2, #128	@ 0x80
 8004e68:	03d1      	lsls	r1, r2, #15
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8004f20 <UART_CheckIdleState+0x14c>)
 8004e6e:	9200      	str	r2, [sp, #0]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f000 f859 	bl	8004f28 <UART_WaitOnFlagUntilTimeout>
 8004e76:	1e03      	subs	r3, r0, #0
 8004e78:	d03b      	beq.n	8004ef2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e80:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e84:	2301      	movs	r3, #1
 8004e86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f383 8810 	msr	PRIMASK, r3
}
 8004e8e:	46c0      	nop			@ (mov r8, r8)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4922      	ldr	r1, [pc, #136]	@ (8004f24 <UART_CheckIdleState+0x150>)
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f383 8810 	msr	PRIMASK, r3
}
 8004eaa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004eac:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8004eb2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f383 8810 	msr	PRIMASK, r3
}
 8004ec0:	46c0      	nop			@ (mov r8, r8)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2101      	movs	r1, #1
 8004ece:	438a      	bics	r2, r1
 8004ed0:	609a      	str	r2, [r3, #8]
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	f383 8810 	msr	PRIMASK, r3
}
 8004edc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	228c      	movs	r2, #140	@ 0x8c
 8004ee2:	2120      	movs	r1, #32
 8004ee4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2284      	movs	r2, #132	@ 0x84
 8004eea:	2100      	movs	r1, #0
 8004eec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e012      	b.n	8004f18 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2288      	movs	r2, #136	@ 0x88
 8004ef6:	2120      	movs	r1, #32
 8004ef8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	228c      	movs	r2, #140	@ 0x8c
 8004efe:	2120      	movs	r1, #32
 8004f00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2284      	movs	r2, #132	@ 0x84
 8004f12:	2100      	movs	r1, #0
 8004f14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	0018      	movs	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b010      	add	sp, #64	@ 0x40
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	01ffffff 	.word	0x01ffffff
 8004f24:	fffffedf 	.word	0xfffffedf

08004f28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	1dfb      	adds	r3, r7, #7
 8004f36:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f38:	e051      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	d04e      	beq.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f40:	f7fc fc8e 	bl	8001860 <HAL_GetTick>
 8004f44:	0002      	movs	r2, r0
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d302      	bcc.n	8004f56 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e051      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2204      	movs	r2, #4
 8004f62:	4013      	ands	r3, r2
 8004f64:	d03b      	beq.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b80      	cmp	r3, #128	@ 0x80
 8004f6a:	d038      	beq.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b40      	cmp	r3, #64	@ 0x40
 8004f70:	d035      	beq.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	2208      	movs	r2, #8
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d111      	bne.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2208      	movs	r2, #8
 8004f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f000 f960 	bl	8005250 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2290      	movs	r2, #144	@ 0x90
 8004f94:	2108      	movs	r1, #8
 8004f96:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2284      	movs	r2, #132	@ 0x84
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e02c      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69da      	ldr	r2, [r3, #28]
 8004faa:	2380      	movs	r3, #128	@ 0x80
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	401a      	ands	r2, r3
 8004fb0:	2380      	movs	r3, #128	@ 0x80
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d112      	bne.n	8004fde <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2280      	movs	r2, #128	@ 0x80
 8004fbe:	0112      	lsls	r2, r2, #4
 8004fc0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f000 f943 	bl	8005250 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2290      	movs	r2, #144	@ 0x90
 8004fce:	2120      	movs	r1, #32
 8004fd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2284      	movs	r2, #132	@ 0x84
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e00f      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	425a      	negs	r2, r3
 8004fee:	4153      	adcs	r3, r2
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	001a      	movs	r2, r3
 8004ff4:	1dfb      	adds	r3, r7, #7
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d09e      	beq.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	0018      	movs	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	b004      	add	sp, #16
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b098      	sub	sp, #96	@ 0x60
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	1dbb      	adds	r3, r7, #6
 8005014:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	1dba      	adds	r2, r7, #6
 8005020:	215c      	movs	r1, #92	@ 0x5c
 8005022:	8812      	ldrh	r2, [r2, #0]
 8005024:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1dba      	adds	r2, r7, #6
 800502a:	215e      	movs	r1, #94	@ 0x5e
 800502c:	8812      	ldrh	r2, [r2, #0]
 800502e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	2380      	movs	r3, #128	@ 0x80
 800503c:	015b      	lsls	r3, r3, #5
 800503e:	429a      	cmp	r2, r3
 8005040:	d10d      	bne.n	800505e <UART_Start_Receive_IT+0x56>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d104      	bne.n	8005054 <UART_Start_Receive_IT+0x4c>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2260      	movs	r2, #96	@ 0x60
 800504e:	497b      	ldr	r1, [pc, #492]	@ (800523c <UART_Start_Receive_IT+0x234>)
 8005050:	5299      	strh	r1, [r3, r2]
 8005052:	e02e      	b.n	80050b2 <UART_Start_Receive_IT+0xaa>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2260      	movs	r2, #96	@ 0x60
 8005058:	21ff      	movs	r1, #255	@ 0xff
 800505a:	5299      	strh	r1, [r3, r2]
 800505c:	e029      	b.n	80050b2 <UART_Start_Receive_IT+0xaa>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10d      	bne.n	8005082 <UART_Start_Receive_IT+0x7a>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d104      	bne.n	8005078 <UART_Start_Receive_IT+0x70>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2260      	movs	r2, #96	@ 0x60
 8005072:	21ff      	movs	r1, #255	@ 0xff
 8005074:	5299      	strh	r1, [r3, r2]
 8005076:	e01c      	b.n	80050b2 <UART_Start_Receive_IT+0xaa>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2260      	movs	r2, #96	@ 0x60
 800507c:	217f      	movs	r1, #127	@ 0x7f
 800507e:	5299      	strh	r1, [r3, r2]
 8005080:	e017      	b.n	80050b2 <UART_Start_Receive_IT+0xaa>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	2380      	movs	r3, #128	@ 0x80
 8005088:	055b      	lsls	r3, r3, #21
 800508a:	429a      	cmp	r2, r3
 800508c:	d10d      	bne.n	80050aa <UART_Start_Receive_IT+0xa2>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d104      	bne.n	80050a0 <UART_Start_Receive_IT+0x98>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2260      	movs	r2, #96	@ 0x60
 800509a:	217f      	movs	r1, #127	@ 0x7f
 800509c:	5299      	strh	r1, [r3, r2]
 800509e:	e008      	b.n	80050b2 <UART_Start_Receive_IT+0xaa>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2260      	movs	r2, #96	@ 0x60
 80050a4:	213f      	movs	r1, #63	@ 0x3f
 80050a6:	5299      	strh	r1, [r3, r2]
 80050a8:	e003      	b.n	80050b2 <UART_Start_Receive_IT+0xaa>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2260      	movs	r2, #96	@ 0x60
 80050ae:	2100      	movs	r1, #0
 80050b0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2290      	movs	r2, #144	@ 0x90
 80050b6:	2100      	movs	r1, #0
 80050b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	228c      	movs	r2, #140	@ 0x8c
 80050be:	2122      	movs	r1, #34	@ 0x22
 80050c0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050c2:	f3ef 8310 	mrs	r3, PRIMASK
 80050c6:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80050c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050cc:	2301      	movs	r3, #1
 80050ce:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050d2:	f383 8810 	msr	PRIMASK, r3
}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2101      	movs	r1, #1
 80050e4:	430a      	orrs	r2, r1
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050ee:	f383 8810 	msr	PRIMASK, r3
}
 80050f2:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80050f8:	2380      	movs	r3, #128	@ 0x80
 80050fa:	059b      	lsls	r3, r3, #22
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d150      	bne.n	80051a2 <UART_Start_Receive_IT+0x19a>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2268      	movs	r2, #104	@ 0x68
 8005104:	5a9b      	ldrh	r3, [r3, r2]
 8005106:	1dba      	adds	r2, r7, #6
 8005108:	8812      	ldrh	r2, [r2, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d349      	bcc.n	80051a2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	2380      	movs	r3, #128	@ 0x80
 8005114:	015b      	lsls	r3, r3, #5
 8005116:	429a      	cmp	r2, r3
 8005118:	d107      	bne.n	800512a <UART_Start_Receive_IT+0x122>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d103      	bne.n	800512a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4a46      	ldr	r2, [pc, #280]	@ (8005240 <UART_Start_Receive_IT+0x238>)
 8005126:	675a      	str	r2, [r3, #116]	@ 0x74
 8005128:	e002      	b.n	8005130 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4a45      	ldr	r2, [pc, #276]	@ (8005244 <UART_Start_Receive_IT+0x23c>)
 800512e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d019      	beq.n	800516c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005138:	f3ef 8310 	mrs	r3, PRIMASK
 800513c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800513e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005140:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005142:	2301      	movs	r3, #1
 8005144:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005148:	f383 8810 	msr	PRIMASK, r3
}
 800514c:	46c0      	nop			@ (mov r8, r8)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2180      	movs	r1, #128	@ 0x80
 800515a:	0049      	lsls	r1, r1, #1
 800515c:	430a      	orrs	r2, r1
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005166:	f383 8810 	msr	PRIMASK, r3
}
 800516a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800516c:	f3ef 8310 	mrs	r3, PRIMASK
 8005170:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005174:	657b      	str	r3, [r7, #84]	@ 0x54
 8005176:	2301      	movs	r3, #1
 8005178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800517c:	f383 8810 	msr	PRIMASK, r3
}
 8005180:	46c0      	nop			@ (mov r8, r8)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2180      	movs	r1, #128	@ 0x80
 800518e:	0549      	lsls	r1, r1, #21
 8005190:	430a      	orrs	r2, r1
 8005192:	609a      	str	r2, [r3, #8]
 8005194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005196:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519a:	f383 8810 	msr	PRIMASK, r3
}
 800519e:	46c0      	nop			@ (mov r8, r8)
 80051a0:	e047      	b.n	8005232 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	2380      	movs	r3, #128	@ 0x80
 80051a8:	015b      	lsls	r3, r3, #5
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d107      	bne.n	80051be <UART_Start_Receive_IT+0x1b6>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d103      	bne.n	80051be <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4a23      	ldr	r2, [pc, #140]	@ (8005248 <UART_Start_Receive_IT+0x240>)
 80051ba:	675a      	str	r2, [r3, #116]	@ 0x74
 80051bc:	e002      	b.n	80051c4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4a22      	ldr	r2, [pc, #136]	@ (800524c <UART_Start_Receive_IT+0x244>)
 80051c2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d019      	beq.n	8005200 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80051cc:	f3ef 8310 	mrs	r3, PRIMASK
 80051d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80051d2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80051d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051d6:	2301      	movs	r3, #1
 80051d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	f383 8810 	msr	PRIMASK, r3
}
 80051e0:	46c0      	nop			@ (mov r8, r8)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2190      	movs	r1, #144	@ 0x90
 80051ee:	0049      	lsls	r1, r1, #1
 80051f0:	430a      	orrs	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	f383 8810 	msr	PRIMASK, r3
}
 80051fe:	e018      	b.n	8005232 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005200:	f3ef 8310 	mrs	r3, PRIMASK
 8005204:	613b      	str	r3, [r7, #16]
  return(result);
 8005206:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005208:	653b      	str	r3, [r7, #80]	@ 0x50
 800520a:	2301      	movs	r3, #1
 800520c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f383 8810 	msr	PRIMASK, r3
}
 8005214:	46c0      	nop			@ (mov r8, r8)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2120      	movs	r1, #32
 8005222:	430a      	orrs	r2, r1
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005228:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	f383 8810 	msr	PRIMASK, r3
}
 8005230:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	0018      	movs	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	b018      	add	sp, #96	@ 0x60
 800523a:	bd80      	pop	{r7, pc}
 800523c:	000001ff 	.word	0x000001ff
 8005240:	08005d15 	.word	0x08005d15
 8005244:	080059e1 	.word	0x080059e1
 8005248:	08005829 	.word	0x08005829
 800524c:	08005671 	.word	0x08005671

08005250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08e      	sub	sp, #56	@ 0x38
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005258:	f3ef 8310 	mrs	r3, PRIMASK
 800525c:	617b      	str	r3, [r7, #20]
  return(result);
 800525e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
 8005262:	2301      	movs	r3, #1
 8005264:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	f383 8810 	msr	PRIMASK, r3
}
 800526c:	46c0      	nop			@ (mov r8, r8)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4926      	ldr	r1, [pc, #152]	@ (8005314 <UART_EndRxTransfer+0xc4>)
 800527a:	400a      	ands	r2, r1
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005280:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	f383 8810 	msr	PRIMASK, r3
}
 8005288:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800528a:	f3ef 8310 	mrs	r3, PRIMASK
 800528e:	623b      	str	r3, [r7, #32]
  return(result);
 8005290:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005292:	633b      	str	r3, [r7, #48]	@ 0x30
 8005294:	2301      	movs	r3, #1
 8005296:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529a:	f383 8810 	msr	PRIMASK, r3
}
 800529e:	46c0      	nop			@ (mov r8, r8)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	491b      	ldr	r1, [pc, #108]	@ (8005318 <UART_EndRxTransfer+0xc8>)
 80052ac:	400a      	ands	r2, r1
 80052ae:	609a      	str	r2, [r3, #8]
 80052b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b6:	f383 8810 	msr	PRIMASK, r3
}
 80052ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d118      	bne.n	80052f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052c4:	f3ef 8310 	mrs	r3, PRIMASK
 80052c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80052ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ce:	2301      	movs	r3, #1
 80052d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f383 8810 	msr	PRIMASK, r3
}
 80052d8:	46c0      	nop			@ (mov r8, r8)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2110      	movs	r1, #16
 80052e6:	438a      	bics	r2, r1
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f383 8810 	msr	PRIMASK, r3
}
 80052f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	228c      	movs	r2, #140	@ 0x8c
 80052fa:	2120      	movs	r1, #32
 80052fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800530a:	46c0      	nop			@ (mov r8, r8)
 800530c:	46bd      	mov	sp, r7
 800530e:	b00e      	add	sp, #56	@ 0x38
 8005310:	bd80      	pop	{r7, pc}
 8005312:	46c0      	nop			@ (mov r8, r8)
 8005314:	fffffedf 	.word	0xfffffedf
 8005318:	effffffe 	.word	0xeffffffe

0800531c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	@ 0x28
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2288      	movs	r2, #136	@ 0x88
 8005328:	589b      	ldr	r3, [r3, r2]
 800532a:	2b21      	cmp	r3, #33	@ 0x21
 800532c:	d14c      	bne.n	80053c8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2256      	movs	r2, #86	@ 0x56
 8005332:	5a9b      	ldrh	r3, [r3, r2]
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d132      	bne.n	80053a0 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800533a:	f3ef 8310 	mrs	r3, PRIMASK
 800533e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005340:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005342:	627b      	str	r3, [r7, #36]	@ 0x24
 8005344:	2301      	movs	r3, #1
 8005346:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f383 8810 	msr	PRIMASK, r3
}
 800534e:	46c0      	nop			@ (mov r8, r8)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2180      	movs	r1, #128	@ 0x80
 800535c:	438a      	bics	r2, r1
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f383 8810 	msr	PRIMASK, r3
}
 800536a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800536c:	f3ef 8310 	mrs	r3, PRIMASK
 8005370:	617b      	str	r3, [r7, #20]
  return(result);
 8005372:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005374:	623b      	str	r3, [r7, #32]
 8005376:	2301      	movs	r3, #1
 8005378:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	f383 8810 	msr	PRIMASK, r3
}
 8005380:	46c0      	nop			@ (mov r8, r8)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2140      	movs	r1, #64	@ 0x40
 800538e:	430a      	orrs	r2, r1
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f383 8810 	msr	PRIMASK, r3
}
 800539c:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800539e:	e013      	b.n	80053c8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2256      	movs	r2, #86	@ 0x56
 80053ba:	5a9b      	ldrh	r3, [r3, r2]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b299      	uxth	r1, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2256      	movs	r2, #86	@ 0x56
 80053c6:	5299      	strh	r1, [r3, r2]
}
 80053c8:	46c0      	nop			@ (mov r8, r8)
 80053ca:	46bd      	mov	sp, r7
 80053cc:	b00a      	add	sp, #40	@ 0x28
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08c      	sub	sp, #48	@ 0x30
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2288      	movs	r2, #136	@ 0x88
 80053dc:	589b      	ldr	r3, [r3, r2]
 80053de:	2b21      	cmp	r3, #33	@ 0x21
 80053e0:	d151      	bne.n	8005486 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2256      	movs	r2, #86	@ 0x56
 80053e6:	5a9b      	ldrh	r3, [r3, r2]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d132      	bne.n	8005454 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80053ee:	f3ef 8310 	mrs	r3, PRIMASK
 80053f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80053f4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80053f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053f8:	2301      	movs	r3, #1
 80053fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f383 8810 	msr	PRIMASK, r3
}
 8005402:	46c0      	nop			@ (mov r8, r8)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2180      	movs	r1, #128	@ 0x80
 8005410:	438a      	bics	r2, r1
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f383 8810 	msr	PRIMASK, r3
}
 800541e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005420:	f3ef 8310 	mrs	r3, PRIMASK
 8005424:	61bb      	str	r3, [r7, #24]
  return(result);
 8005426:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005428:	627b      	str	r3, [r7, #36]	@ 0x24
 800542a:	2301      	movs	r3, #1
 800542c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	f383 8810 	msr	PRIMASK, r3
}
 8005434:	46c0      	nop			@ (mov r8, r8)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2140      	movs	r1, #64	@ 0x40
 8005442:	430a      	orrs	r2, r1
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	f383 8810 	msr	PRIMASK, r3
}
 8005450:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005452:	e018      	b.n	8005486 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005458:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800545a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	001a      	movs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	05d2      	lsls	r2, r2, #23
 8005466:	0dd2      	lsrs	r2, r2, #23
 8005468:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800546e:	1c9a      	adds	r2, r3, #2
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2256      	movs	r2, #86	@ 0x56
 8005478:	5a9b      	ldrh	r3, [r3, r2]
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b299      	uxth	r1, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2256      	movs	r2, #86	@ 0x56
 8005484:	5299      	strh	r1, [r3, r2]
}
 8005486:	46c0      	nop			@ (mov r8, r8)
 8005488:	46bd      	mov	sp, r7
 800548a:	b00c      	add	sp, #48	@ 0x30
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08c      	sub	sp, #48	@ 0x30
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2288      	movs	r2, #136	@ 0x88
 800549c:	589b      	ldr	r3, [r3, r2]
 800549e:	2b21      	cmp	r3, #33	@ 0x21
 80054a0:	d165      	bne.n	800556e <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80054a2:	232e      	movs	r3, #46	@ 0x2e
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	216a      	movs	r1, #106	@ 0x6a
 80054aa:	5a52      	ldrh	r2, [r2, r1]
 80054ac:	801a      	strh	r2, [r3, #0]
 80054ae:	e059      	b.n	8005564 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2256      	movs	r2, #86	@ 0x56
 80054b4:	5a9b      	ldrh	r3, [r3, r2]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d133      	bne.n	8005524 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80054bc:	f3ef 8310 	mrs	r3, PRIMASK
 80054c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80054c2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80054c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054c6:	2301      	movs	r3, #1
 80054c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f383 8810 	msr	PRIMASK, r3
}
 80054d0:	46c0      	nop			@ (mov r8, r8)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4926      	ldr	r1, [pc, #152]	@ (8005578 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80054de:	400a      	ands	r2, r1
 80054e0:	609a      	str	r2, [r3, #8]
 80054e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f383 8810 	msr	PRIMASK, r3
}
 80054ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80054ee:	f3ef 8310 	mrs	r3, PRIMASK
 80054f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80054f4:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f8:	2301      	movs	r3, #1
 80054fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f383 8810 	msr	PRIMASK, r3
}
 8005502:	46c0      	nop			@ (mov r8, r8)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2140      	movs	r1, #64	@ 0x40
 8005510:	430a      	orrs	r2, r1
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	f383 8810 	msr	PRIMASK, r3
}
 800551e:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8005520:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8005522:	e024      	b.n	800556e <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	2280      	movs	r2, #128	@ 0x80
 800552c:	4013      	ands	r3, r2
 800552e:	d013      	beq.n	8005558 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005534:	781a      	ldrb	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2256      	movs	r2, #86	@ 0x56
 800554a:	5a9b      	ldrh	r3, [r3, r2]
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b299      	uxth	r1, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2256      	movs	r2, #86	@ 0x56
 8005556:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005558:	212e      	movs	r1, #46	@ 0x2e
 800555a:	187b      	adds	r3, r7, r1
 800555c:	881a      	ldrh	r2, [r3, #0]
 800555e:	187b      	adds	r3, r7, r1
 8005560:	3a01      	subs	r2, #1
 8005562:	801a      	strh	r2, [r3, #0]
 8005564:	232e      	movs	r3, #46	@ 0x2e
 8005566:	18fb      	adds	r3, r7, r3
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1a0      	bne.n	80054b0 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800556e:	46c0      	nop			@ (mov r8, r8)
 8005570:	46bd      	mov	sp, r7
 8005572:	b00c      	add	sp, #48	@ 0x30
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			@ (mov r8, r8)
 8005578:	ff7fffff 	.word	0xff7fffff

0800557c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08c      	sub	sp, #48	@ 0x30
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2288      	movs	r2, #136	@ 0x88
 8005588:	589b      	ldr	r3, [r3, r2]
 800558a:	2b21      	cmp	r3, #33	@ 0x21
 800558c:	d16a      	bne.n	8005664 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800558e:	232e      	movs	r3, #46	@ 0x2e
 8005590:	18fb      	adds	r3, r7, r3
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	216a      	movs	r1, #106	@ 0x6a
 8005596:	5a52      	ldrh	r2, [r2, r1]
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	e05e      	b.n	800565a <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2256      	movs	r2, #86	@ 0x56
 80055a0:	5a9b      	ldrh	r3, [r3, r2]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d133      	bne.n	8005610 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055a8:	f3ef 8310 	mrs	r3, PRIMASK
 80055ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80055ae:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80055b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055b2:	2301      	movs	r3, #1
 80055b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f383 8810 	msr	PRIMASK, r3
}
 80055bc:	46c0      	nop			@ (mov r8, r8)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4928      	ldr	r1, [pc, #160]	@ (800566c <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80055ca:	400a      	ands	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f383 8810 	msr	PRIMASK, r3
}
 80055d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055da:	f3ef 8310 	mrs	r3, PRIMASK
 80055de:	617b      	str	r3, [r7, #20]
  return(result);
 80055e0:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055e2:	623b      	str	r3, [r7, #32]
 80055e4:	2301      	movs	r3, #1
 80055e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f383 8810 	msr	PRIMASK, r3
}
 80055ee:	46c0      	nop			@ (mov r8, r8)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2140      	movs	r1, #64	@ 0x40
 80055fc:	430a      	orrs	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f383 8810 	msr	PRIMASK, r3
}
 800560a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800560c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800560e:	e029      	b.n	8005664 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	2280      	movs	r2, #128	@ 0x80
 8005618:	4013      	ands	r3, r2
 800561a:	d018      	beq.n	800564e <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005620:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	001a      	movs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	05d2      	lsls	r2, r2, #23
 800562e:	0dd2      	lsrs	r2, r2, #23
 8005630:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2256      	movs	r2, #86	@ 0x56
 8005640:	5a9b      	ldrh	r3, [r3, r2]
 8005642:	b29b      	uxth	r3, r3
 8005644:	3b01      	subs	r3, #1
 8005646:	b299      	uxth	r1, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2256      	movs	r2, #86	@ 0x56
 800564c:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800564e:	212e      	movs	r1, #46	@ 0x2e
 8005650:	187b      	adds	r3, r7, r1
 8005652:	881a      	ldrh	r2, [r3, #0]
 8005654:	187b      	adds	r3, r7, r1
 8005656:	3a01      	subs	r2, #1
 8005658:	801a      	strh	r2, [r3, #0]
 800565a:	232e      	movs	r3, #46	@ 0x2e
 800565c:	18fb      	adds	r3, r7, r3
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d19b      	bne.n	800559c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8005664:	46c0      	nop			@ (mov r8, r8)
 8005666:	46bd      	mov	sp, r7
 8005668:	b00c      	add	sp, #48	@ 0x30
 800566a:	bd80      	pop	{r7, pc}
 800566c:	ff7fffff 	.word	0xff7fffff

08005670 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b094      	sub	sp, #80	@ 0x50
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005678:	204e      	movs	r0, #78	@ 0x4e
 800567a:	183b      	adds	r3, r7, r0
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	2160      	movs	r1, #96	@ 0x60
 8005680:	5a52      	ldrh	r2, [r2, r1]
 8005682:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	228c      	movs	r2, #140	@ 0x8c
 8005688:	589b      	ldr	r3, [r3, r2]
 800568a:	2b22      	cmp	r3, #34	@ 0x22
 800568c:	d000      	beq.n	8005690 <UART_RxISR_8BIT+0x20>
 800568e:	e0ba      	b.n	8005806 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005696:	214c      	movs	r1, #76	@ 0x4c
 8005698:	187b      	adds	r3, r7, r1
 800569a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800569c:	187b      	adds	r3, r7, r1
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	183b      	adds	r3, r7, r0
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b2d9      	uxtb	r1, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ac:	400a      	ands	r2, r1
 80056ae:	b2d2      	uxtb	r2, r2
 80056b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b6:	1c5a      	adds	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	225e      	movs	r2, #94	@ 0x5e
 80056c0:	5a9b      	ldrh	r3, [r3, r2]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	b299      	uxth	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	225e      	movs	r2, #94	@ 0x5e
 80056cc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	225e      	movs	r2, #94	@ 0x5e
 80056d2:	5a9b      	ldrh	r3, [r3, r2]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d000      	beq.n	80056dc <UART_RxISR_8BIT+0x6c>
 80056da:	e09c      	b.n	8005816 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80056dc:	f3ef 8310 	mrs	r3, PRIMASK
 80056e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056e6:	2301      	movs	r3, #1
 80056e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ec:	f383 8810 	msr	PRIMASK, r3
}
 80056f0:	46c0      	nop			@ (mov r8, r8)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4948      	ldr	r1, [pc, #288]	@ (8005820 <UART_RxISR_8BIT+0x1b0>)
 80056fe:	400a      	ands	r2, r1
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005704:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005708:	f383 8810 	msr	PRIMASK, r3
}
 800570c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800570e:	f3ef 8310 	mrs	r3, PRIMASK
 8005712:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005716:	647b      	str	r3, [r7, #68]	@ 0x44
 8005718:	2301      	movs	r3, #1
 800571a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800571c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800571e:	f383 8810 	msr	PRIMASK, r3
}
 8005722:	46c0      	nop			@ (mov r8, r8)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2101      	movs	r1, #1
 8005730:	438a      	bics	r2, r1
 8005732:	609a      	str	r2, [r3, #8]
 8005734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005736:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573a:	f383 8810 	msr	PRIMASK, r3
}
 800573e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	228c      	movs	r2, #140	@ 0x8c
 8005744:	2120      	movs	r1, #32
 8005746:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	2380      	movs	r3, #128	@ 0x80
 800575c:	041b      	lsls	r3, r3, #16
 800575e:	4013      	ands	r3, r2
 8005760:	d018      	beq.n	8005794 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005762:	f3ef 8310 	mrs	r3, PRIMASK
 8005766:	61bb      	str	r3, [r7, #24]
  return(result);
 8005768:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800576a:	643b      	str	r3, [r7, #64]	@ 0x40
 800576c:	2301      	movs	r3, #1
 800576e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f383 8810 	msr	PRIMASK, r3
}
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4928      	ldr	r1, [pc, #160]	@ (8005824 <UART_RxISR_8BIT+0x1b4>)
 8005784:	400a      	ands	r2, r1
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800578a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	f383 8810 	msr	PRIMASK, r3
}
 8005792:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d12f      	bne.n	80057fc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057a2:	f3ef 8310 	mrs	r3, PRIMASK
 80057a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80057a8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ac:	2301      	movs	r3, #1
 80057ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f383 8810 	msr	PRIMASK, r3
}
 80057b6:	46c0      	nop			@ (mov r8, r8)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2110      	movs	r1, #16
 80057c4:	438a      	bics	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f383 8810 	msr	PRIMASK, r3
}
 80057d2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	2210      	movs	r2, #16
 80057dc:	4013      	ands	r3, r2
 80057de:	2b10      	cmp	r3, #16
 80057e0:	d103      	bne.n	80057ea <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2210      	movs	r2, #16
 80057e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	225c      	movs	r2, #92	@ 0x5c
 80057ee:	5a9a      	ldrh	r2, [r3, r2]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	0011      	movs	r1, r2
 80057f4:	0018      	movs	r0, r3
 80057f6:	f7ff f8af 	bl	8004958 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057fa:	e00c      	b.n	8005816 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	0018      	movs	r0, r3
 8005800:	f7fb f9ee 	bl	8000be0 <HAL_UART_RxCpltCallback>
}
 8005804:	e007      	b.n	8005816 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699a      	ldr	r2, [r3, #24]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2108      	movs	r1, #8
 8005812:	430a      	orrs	r2, r1
 8005814:	619a      	str	r2, [r3, #24]
}
 8005816:	46c0      	nop			@ (mov r8, r8)
 8005818:	46bd      	mov	sp, r7
 800581a:	b014      	add	sp, #80	@ 0x50
 800581c:	bd80      	pop	{r7, pc}
 800581e:	46c0      	nop			@ (mov r8, r8)
 8005820:	fffffedf 	.word	0xfffffedf
 8005824:	fbffffff 	.word	0xfbffffff

08005828 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b094      	sub	sp, #80	@ 0x50
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005830:	204e      	movs	r0, #78	@ 0x4e
 8005832:	183b      	adds	r3, r7, r0
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	2160      	movs	r1, #96	@ 0x60
 8005838:	5a52      	ldrh	r2, [r2, r1]
 800583a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	228c      	movs	r2, #140	@ 0x8c
 8005840:	589b      	ldr	r3, [r3, r2]
 8005842:	2b22      	cmp	r3, #34	@ 0x22
 8005844:	d000      	beq.n	8005848 <UART_RxISR_16BIT+0x20>
 8005846:	e0ba      	b.n	80059be <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800584e:	214c      	movs	r1, #76	@ 0x4c
 8005850:	187b      	adds	r3, r7, r1
 8005852:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005858:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800585a:	187b      	adds	r3, r7, r1
 800585c:	183a      	adds	r2, r7, r0
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	8812      	ldrh	r2, [r2, #0]
 8005862:	4013      	ands	r3, r2
 8005864:	b29a      	uxth	r2, r3
 8005866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005868:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800586e:	1c9a      	adds	r2, r3, #2
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	225e      	movs	r2, #94	@ 0x5e
 8005878:	5a9b      	ldrh	r3, [r3, r2]
 800587a:	b29b      	uxth	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	b299      	uxth	r1, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	225e      	movs	r2, #94	@ 0x5e
 8005884:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	225e      	movs	r2, #94	@ 0x5e
 800588a:	5a9b      	ldrh	r3, [r3, r2]
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d000      	beq.n	8005894 <UART_RxISR_16BIT+0x6c>
 8005892:	e09c      	b.n	80059ce <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005894:	f3ef 8310 	mrs	r3, PRIMASK
 8005898:	623b      	str	r3, [r7, #32]
  return(result);
 800589a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800589c:	647b      	str	r3, [r7, #68]	@ 0x44
 800589e:	2301      	movs	r3, #1
 80058a0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	f383 8810 	msr	PRIMASK, r3
}
 80058a8:	46c0      	nop			@ (mov r8, r8)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4948      	ldr	r1, [pc, #288]	@ (80059d8 <UART_RxISR_16BIT+0x1b0>)
 80058b6:	400a      	ands	r2, r1
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c0:	f383 8810 	msr	PRIMASK, r3
}
 80058c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80058c6:	f3ef 8310 	mrs	r3, PRIMASK
 80058ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80058cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80058d0:	2301      	movs	r3, #1
 80058d2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d6:	f383 8810 	msr	PRIMASK, r3
}
 80058da:	46c0      	nop			@ (mov r8, r8)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2101      	movs	r1, #1
 80058e8:	438a      	bics	r2, r1
 80058ea:	609a      	str	r2, [r3, #8]
 80058ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058ee:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f2:	f383 8810 	msr	PRIMASK, r3
}
 80058f6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	228c      	movs	r2, #140	@ 0x8c
 80058fc:	2120      	movs	r1, #32
 80058fe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	2380      	movs	r3, #128	@ 0x80
 8005914:	041b      	lsls	r3, r3, #16
 8005916:	4013      	ands	r3, r2
 8005918:	d018      	beq.n	800594c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800591a:	f3ef 8310 	mrs	r3, PRIMASK
 800591e:	617b      	str	r3, [r7, #20]
  return(result);
 8005920:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005924:	2301      	movs	r3, #1
 8005926:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f383 8810 	msr	PRIMASK, r3
}
 800592e:	46c0      	nop			@ (mov r8, r8)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4928      	ldr	r1, [pc, #160]	@ (80059dc <UART_RxISR_16BIT+0x1b4>)
 800593c:	400a      	ands	r2, r1
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005942:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f383 8810 	msr	PRIMASK, r3
}
 800594a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005950:	2b01      	cmp	r3, #1
 8005952:	d12f      	bne.n	80059b4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800595a:	f3ef 8310 	mrs	r3, PRIMASK
 800595e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005960:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005962:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005964:	2301      	movs	r3, #1
 8005966:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f383 8810 	msr	PRIMASK, r3
}
 800596e:	46c0      	nop			@ (mov r8, r8)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2110      	movs	r1, #16
 800597c:	438a      	bics	r2, r1
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005982:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f383 8810 	msr	PRIMASK, r3
}
 800598a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	2210      	movs	r2, #16
 8005994:	4013      	ands	r3, r2
 8005996:	2b10      	cmp	r3, #16
 8005998:	d103      	bne.n	80059a2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2210      	movs	r2, #16
 80059a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	225c      	movs	r2, #92	@ 0x5c
 80059a6:	5a9a      	ldrh	r2, [r3, r2]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	0011      	movs	r1, r2
 80059ac:	0018      	movs	r0, r3
 80059ae:	f7fe ffd3 	bl	8004958 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059b2:	e00c      	b.n	80059ce <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	0018      	movs	r0, r3
 80059b8:	f7fb f912 	bl	8000be0 <HAL_UART_RxCpltCallback>
}
 80059bc:	e007      	b.n	80059ce <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2108      	movs	r1, #8
 80059ca:	430a      	orrs	r2, r1
 80059cc:	619a      	str	r2, [r3, #24]
}
 80059ce:	46c0      	nop			@ (mov r8, r8)
 80059d0:	46bd      	mov	sp, r7
 80059d2:	b014      	add	sp, #80	@ 0x50
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	46c0      	nop			@ (mov r8, r8)
 80059d8:	fffffedf 	.word	0xfffffedf
 80059dc:	fbffffff 	.word	0xfbffffff

080059e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b0a0      	sub	sp, #128	@ 0x80
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80059e8:	237a      	movs	r3, #122	@ 0x7a
 80059ea:	18fb      	adds	r3, r7, r3
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	2160      	movs	r1, #96	@ 0x60
 80059f0:	5a52      	ldrh	r2, [r2, r1]
 80059f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	228c      	movs	r2, #140	@ 0x8c
 8005a10:	589b      	ldr	r3, [r3, r2]
 8005a12:	2b22      	cmp	r3, #34	@ 0x22
 8005a14:	d000      	beq.n	8005a18 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005a16:	e166      	b.n	8005ce6 <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005a18:	236e      	movs	r3, #110	@ 0x6e
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	2168      	movs	r1, #104	@ 0x68
 8005a20:	5a52      	ldrh	r2, [r2, r1]
 8005a22:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a24:	e10d      	b.n	8005c42 <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a2c:	216c      	movs	r1, #108	@ 0x6c
 8005a2e:	187b      	adds	r3, r7, r1
 8005a30:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a32:	187b      	adds	r3, r7, r1
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	237a      	movs	r3, #122	@ 0x7a
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	b2d9      	uxtb	r1, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a44:	400a      	ands	r2, r1
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	225e      	movs	r2, #94	@ 0x5e
 8005a58:	5a9b      	ldrh	r3, [r3, r2]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b299      	uxth	r1, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	225e      	movs	r2, #94	@ 0x5e
 8005a64:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005a6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a70:	2207      	movs	r2, #7
 8005a72:	4013      	ands	r3, r2
 8005a74:	d049      	beq.n	8005b0a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a78:	2201      	movs	r2, #1
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d010      	beq.n	8005aa0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005a7e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005a80:	2380      	movs	r3, #128	@ 0x80
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	4013      	ands	r3, r2
 8005a86:	d00b      	beq.n	8005aa0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2290      	movs	r2, #144	@ 0x90
 8005a94:	589b      	ldr	r3, [r3, r2]
 8005a96:	2201      	movs	r2, #1
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2190      	movs	r1, #144	@ 0x90
 8005a9e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aa0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d00f      	beq.n	8005ac8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005aa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005aaa:	2201      	movs	r2, #1
 8005aac:	4013      	ands	r3, r2
 8005aae:	d00b      	beq.n	8005ac8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2290      	movs	r2, #144	@ 0x90
 8005abc:	589b      	ldr	r3, [r3, r2]
 8005abe:	2204      	movs	r2, #4
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2190      	movs	r1, #144	@ 0x90
 8005ac6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ac8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005aca:	2204      	movs	r2, #4
 8005acc:	4013      	ands	r3, r2
 8005ace:	d00f      	beq.n	8005af0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005ad0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	d00b      	beq.n	8005af0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2204      	movs	r2, #4
 8005ade:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2290      	movs	r2, #144	@ 0x90
 8005ae4:	589b      	ldr	r3, [r3, r2]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2190      	movs	r1, #144	@ 0x90
 8005aee:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2290      	movs	r2, #144	@ 0x90
 8005af4:	589b      	ldr	r3, [r3, r2]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d007      	beq.n	8005b0a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	0018      	movs	r0, r3
 8005afe:	f7fe ff23 	bl	8004948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2290      	movs	r2, #144	@ 0x90
 8005b06:	2100      	movs	r1, #0
 8005b08:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	225e      	movs	r2, #94	@ 0x5e
 8005b0e:	5a9b      	ldrh	r3, [r3, r2]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d000      	beq.n	8005b18 <UART_RxISR_8BIT_FIFOEN+0x138>
 8005b16:	e094      	b.n	8005c42 <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b18:	f3ef 8310 	mrs	r3, PRIMASK
 8005b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b22:	2301      	movs	r3, #1
 8005b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b28:	f383 8810 	msr	PRIMASK, r3
}
 8005b2c:	46c0      	nop			@ (mov r8, r8)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4971      	ldr	r1, [pc, #452]	@ (8005d00 <UART_RxISR_8BIT_FIFOEN+0x320>)
 8005b3a:	400a      	ands	r2, r1
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b40:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b44:	f383 8810 	msr	PRIMASK, r3
}
 8005b48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b4e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005b50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b52:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b54:	2301      	movs	r3, #1
 8005b56:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b5a:	f383 8810 	msr	PRIMASK, r3
}
 8005b5e:	46c0      	nop			@ (mov r8, r8)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4966      	ldr	r1, [pc, #408]	@ (8005d04 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8005b6c:	400a      	ands	r2, r1
 8005b6e:	609a      	str	r2, [r3, #8]
 8005b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b76:	f383 8810 	msr	PRIMASK, r3
}
 8005b7a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	228c      	movs	r2, #140	@ 0x8c
 8005b80:	2120      	movs	r1, #32
 8005b82:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	2380      	movs	r3, #128	@ 0x80
 8005b98:	041b      	lsls	r3, r3, #16
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	d018      	beq.n	8005bd0 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ba6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ba8:	2301      	movs	r3, #1
 8005baa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	f383 8810 	msr	PRIMASK, r3
}
 8005bb2:	46c0      	nop			@ (mov r8, r8)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4952      	ldr	r1, [pc, #328]	@ (8005d08 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8005bc0:	400a      	ands	r2, r1
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bc6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bca:	f383 8810 	msr	PRIMASK, r3
}
 8005bce:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d12f      	bne.n	8005c38 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005bde:	f3ef 8310 	mrs	r3, PRIMASK
 8005be2:	623b      	str	r3, [r7, #32]
  return(result);
 8005be4:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005be8:	2301      	movs	r3, #1
 8005bea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	f383 8810 	msr	PRIMASK, r3
}
 8005bf2:	46c0      	nop			@ (mov r8, r8)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2110      	movs	r1, #16
 8005c00:	438a      	bics	r2, r1
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0a:	f383 8810 	msr	PRIMASK, r3
}
 8005c0e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	2210      	movs	r2, #16
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b10      	cmp	r3, #16
 8005c1c:	d103      	bne.n	8005c26 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2210      	movs	r2, #16
 8005c24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	225c      	movs	r2, #92	@ 0x5c
 8005c2a:	5a9a      	ldrh	r2, [r3, r2]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	0011      	movs	r1, r2
 8005c30:	0018      	movs	r0, r3
 8005c32:	f7fe fe91 	bl	8004958 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005c36:	e00e      	b.n	8005c56 <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f7fa ffd0 	bl	8000be0 <HAL_UART_RxCpltCallback>
        break;
 8005c40:	e009      	b.n	8005c56 <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c42:	236e      	movs	r3, #110	@ 0x6e
 8005c44:	18fb      	adds	r3, r7, r3
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d004      	beq.n	8005c56 <UART_RxISR_8BIT_FIFOEN+0x276>
 8005c4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c4e:	2220      	movs	r2, #32
 8005c50:	4013      	ands	r3, r2
 8005c52:	d000      	beq.n	8005c56 <UART_RxISR_8BIT_FIFOEN+0x276>
 8005c54:	e6e7      	b.n	8005a26 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c56:	205a      	movs	r0, #90	@ 0x5a
 8005c58:	183b      	adds	r3, r7, r0
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	215e      	movs	r1, #94	@ 0x5e
 8005c5e:	5a52      	ldrh	r2, [r2, r1]
 8005c60:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c62:	0001      	movs	r1, r0
 8005c64:	187b      	adds	r3, r7, r1
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d044      	beq.n	8005cf6 <UART_RxISR_8BIT_FIFOEN+0x316>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2268      	movs	r2, #104	@ 0x68
 8005c70:	5a9b      	ldrh	r3, [r3, r2]
 8005c72:	187a      	adds	r2, r7, r1
 8005c74:	8812      	ldrh	r2, [r2, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d23d      	bcs.n	8005cf6 <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c80:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c82:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c84:	2301      	movs	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f383 8810 	msr	PRIMASK, r3
}
 8005c8e:	46c0      	nop			@ (mov r8, r8)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	491c      	ldr	r1, [pc, #112]	@ (8005d0c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005c9c:	400a      	ands	r2, r1
 8005c9e:	609a      	str	r2, [r3, #8]
 8005ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f383 8810 	msr	PRIMASK, r3
}
 8005caa:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a18      	ldr	r2, [pc, #96]	@ (8005d10 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8005cb0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb6:	617b      	str	r3, [r7, #20]
  return(result);
 8005cb8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005cba:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f383 8810 	msr	PRIMASK, r3
}
 8005cc6:	46c0      	nop			@ (mov r8, r8)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2120      	movs	r1, #32
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f383 8810 	msr	PRIMASK, r3
}
 8005ce2:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ce4:	e007      	b.n	8005cf6 <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2108      	movs	r1, #8
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	619a      	str	r2, [r3, #24]
}
 8005cf6:	46c0      	nop			@ (mov r8, r8)
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	b020      	add	sp, #128	@ 0x80
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	46c0      	nop			@ (mov r8, r8)
 8005d00:	fffffeff 	.word	0xfffffeff
 8005d04:	effffffe 	.word	0xeffffffe
 8005d08:	fbffffff 	.word	0xfbffffff
 8005d0c:	efffffff 	.word	0xefffffff
 8005d10:	08005671 	.word	0x08005671

08005d14 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b0a2      	sub	sp, #136	@ 0x88
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005d1c:	2382      	movs	r3, #130	@ 0x82
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	2160      	movs	r1, #96	@ 0x60
 8005d24:	5a52      	ldrh	r2, [r2, r1]
 8005d26:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	2284      	movs	r2, #132	@ 0x84
 8005d30:	18ba      	adds	r2, r7, r2
 8005d32:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	228c      	movs	r2, #140	@ 0x8c
 8005d48:	589b      	ldr	r3, [r3, r2]
 8005d4a:	2b22      	cmp	r3, #34	@ 0x22
 8005d4c:	d000      	beq.n	8005d50 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005d4e:	e170      	b.n	8006032 <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d50:	2376      	movs	r3, #118	@ 0x76
 8005d52:	18fb      	adds	r3, r7, r3
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	2168      	movs	r1, #104	@ 0x68
 8005d58:	5a52      	ldrh	r2, [r2, r1]
 8005d5a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d5c:	e115      	b.n	8005f8a <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d64:	2174      	movs	r1, #116	@ 0x74
 8005d66:	187b      	adds	r3, r7, r1
 8005d68:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6e:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005d70:	187b      	adds	r3, r7, r1
 8005d72:	2282      	movs	r2, #130	@ 0x82
 8005d74:	18ba      	adds	r2, r7, r2
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	8812      	ldrh	r2, [r2, #0]
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d86:	1c9a      	adds	r2, r3, #2
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	225e      	movs	r2, #94	@ 0x5e
 8005d90:	5a9b      	ldrh	r3, [r3, r2]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b299      	uxth	r1, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	225e      	movs	r2, #94	@ 0x5e
 8005d9c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	2184      	movs	r1, #132	@ 0x84
 8005da6:	187a      	adds	r2, r7, r1
 8005da8:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005daa:	187b      	adds	r3, r7, r1
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2207      	movs	r2, #7
 8005db0:	4013      	ands	r3, r2
 8005db2:	d04e      	beq.n	8005e52 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005db4:	187b      	adds	r3, r7, r1
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2201      	movs	r2, #1
 8005dba:	4013      	ands	r3, r2
 8005dbc:	d010      	beq.n	8005de0 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005dbe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005dc0:	2380      	movs	r3, #128	@ 0x80
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	d00b      	beq.n	8005de0 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2290      	movs	r2, #144	@ 0x90
 8005dd4:	589b      	ldr	r3, [r3, r2]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2190      	movs	r1, #144	@ 0x90
 8005dde:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005de0:	2384      	movs	r3, #132	@ 0x84
 8005de2:	18fb      	adds	r3, r7, r3
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2202      	movs	r2, #2
 8005de8:	4013      	ands	r3, r2
 8005dea:	d00f      	beq.n	8005e0c <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dee:	2201      	movs	r2, #1
 8005df0:	4013      	ands	r3, r2
 8005df2:	d00b      	beq.n	8005e0c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2290      	movs	r2, #144	@ 0x90
 8005e00:	589b      	ldr	r3, [r3, r2]
 8005e02:	2204      	movs	r2, #4
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2190      	movs	r1, #144	@ 0x90
 8005e0a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e0c:	2384      	movs	r3, #132	@ 0x84
 8005e0e:	18fb      	adds	r3, r7, r3
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2204      	movs	r2, #4
 8005e14:	4013      	ands	r3, r2
 8005e16:	d00f      	beq.n	8005e38 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005e18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2204      	movs	r2, #4
 8005e26:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2290      	movs	r2, #144	@ 0x90
 8005e2c:	589b      	ldr	r3, [r3, r2]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2190      	movs	r1, #144	@ 0x90
 8005e36:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2290      	movs	r2, #144	@ 0x90
 8005e3c:	589b      	ldr	r3, [r3, r2]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d007      	beq.n	8005e52 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	0018      	movs	r0, r3
 8005e46:	f7fe fd7f 	bl	8004948 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2290      	movs	r2, #144	@ 0x90
 8005e4e:	2100      	movs	r1, #0
 8005e50:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	225e      	movs	r2, #94	@ 0x5e
 8005e56:	5a9b      	ldrh	r3, [r3, r2]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d000      	beq.n	8005e60 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005e5e:	e094      	b.n	8005f8a <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005e60:	f3ef 8310 	mrs	r3, PRIMASK
 8005e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e70:	f383 8810 	msr	PRIMASK, r3
}
 8005e74:	46c0      	nop			@ (mov r8, r8)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4972      	ldr	r1, [pc, #456]	@ (800604c <UART_RxISR_16BIT_FIFOEN+0x338>)
 8005e82:	400a      	ands	r2, r1
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e88:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e8c:	f383 8810 	msr	PRIMASK, r3
}
 8005e90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005e92:	f3ef 8310 	mrs	r3, PRIMASK
 8005e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ea2:	f383 8810 	msr	PRIMASK, r3
}
 8005ea6:	46c0      	nop			@ (mov r8, r8)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4967      	ldr	r1, [pc, #412]	@ (8006050 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8005eb4:	400a      	ands	r2, r1
 8005eb6:	609a      	str	r2, [r3, #8]
 8005eb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005eba:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ebe:	f383 8810 	msr	PRIMASK, r3
}
 8005ec2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	228c      	movs	r2, #140	@ 0x8c
 8005ec8:	2120      	movs	r1, #32
 8005eca:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	2380      	movs	r3, #128	@ 0x80
 8005ee0:	041b      	lsls	r3, r3, #16
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	d018      	beq.n	8005f18 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8005eea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005eee:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef6:	f383 8810 	msr	PRIMASK, r3
}
 8005efa:	46c0      	nop			@ (mov r8, r8)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4953      	ldr	r1, [pc, #332]	@ (8006054 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005f08:	400a      	ands	r2, r1
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f12:	f383 8810 	msr	PRIMASK, r3
}
 8005f16:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d12f      	bne.n	8005f80 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f26:	f3ef 8310 	mrs	r3, PRIMASK
 8005f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f30:	2301      	movs	r3, #1
 8005f32:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f36:	f383 8810 	msr	PRIMASK, r3
}
 8005f3a:	46c0      	nop			@ (mov r8, r8)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2110      	movs	r1, #16
 8005f48:	438a      	bics	r2, r1
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f52:	f383 8810 	msr	PRIMASK, r3
}
 8005f56:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	2210      	movs	r2, #16
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b10      	cmp	r3, #16
 8005f64:	d103      	bne.n	8005f6e <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2210      	movs	r2, #16
 8005f6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	225c      	movs	r2, #92	@ 0x5c
 8005f72:	5a9a      	ldrh	r2, [r3, r2]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	0011      	movs	r1, r2
 8005f78:	0018      	movs	r0, r3
 8005f7a:	f7fe fced 	bl	8004958 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005f7e:	e010      	b.n	8005fa2 <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	0018      	movs	r0, r3
 8005f84:	f7fa fe2c 	bl	8000be0 <HAL_UART_RxCpltCallback>
        break;
 8005f88:	e00b      	b.n	8005fa2 <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f8a:	2376      	movs	r3, #118	@ 0x76
 8005f8c:	18fb      	adds	r3, r7, r3
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d006      	beq.n	8005fa2 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8005f94:	2384      	movs	r3, #132	@ 0x84
 8005f96:	18fb      	adds	r3, r7, r3
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	d000      	beq.n	8005fa2 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8005fa0:	e6dd      	b.n	8005d5e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005fa2:	205e      	movs	r0, #94	@ 0x5e
 8005fa4:	183b      	adds	r3, r7, r0
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	215e      	movs	r1, #94	@ 0x5e
 8005faa:	5a52      	ldrh	r2, [r2, r1]
 8005fac:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005fae:	0001      	movs	r1, r0
 8005fb0:	187b      	adds	r3, r7, r1
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d044      	beq.n	8006042 <UART_RxISR_16BIT_FIFOEN+0x32e>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2268      	movs	r2, #104	@ 0x68
 8005fbc:	5a9b      	ldrh	r3, [r3, r2]
 8005fbe:	187a      	adds	r2, r7, r1
 8005fc0:	8812      	ldrh	r2, [r2, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d23d      	bcs.n	8006042 <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005fca:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005fce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f383 8810 	msr	PRIMASK, r3
}
 8005fda:	46c0      	nop			@ (mov r8, r8)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	491c      	ldr	r1, [pc, #112]	@ (8006058 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005fe8:	400a      	ands	r2, r1
 8005fea:	609a      	str	r2, [r3, #8]
 8005fec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f383 8810 	msr	PRIMASK, r3
}
 8005ff6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a18      	ldr	r2, [pc, #96]	@ (800605c <UART_RxISR_16BIT_FIFOEN+0x348>)
 8005ffc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8006002:	61bb      	str	r3, [r7, #24]
  return(result);
 8006004:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006006:	657b      	str	r3, [r7, #84]	@ 0x54
 8006008:	2301      	movs	r3, #1
 800600a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f383 8810 	msr	PRIMASK, r3
}
 8006012:	46c0      	nop			@ (mov r8, r8)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2120      	movs	r1, #32
 8006020:	430a      	orrs	r2, r1
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006026:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	f383 8810 	msr	PRIMASK, r3
}
 800602e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006030:	e007      	b.n	8006042 <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699a      	ldr	r2, [r3, #24]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2108      	movs	r1, #8
 800603e:	430a      	orrs	r2, r1
 8006040:	619a      	str	r2, [r3, #24]
}
 8006042:	46c0      	nop			@ (mov r8, r8)
 8006044:	46bd      	mov	sp, r7
 8006046:	b022      	add	sp, #136	@ 0x88
 8006048:	bd80      	pop	{r7, pc}
 800604a:	46c0      	nop			@ (mov r8, r8)
 800604c:	fffffeff 	.word	0xfffffeff
 8006050:	effffffe 	.word	0xeffffffe
 8006054:	fbffffff 	.word	0xfbffffff
 8006058:	efffffff 	.word	0xefffffff
 800605c:	08005829 	.word	0x08005829

08006060 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
 800606c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e05d      	b.n	8006134 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2288      	movs	r2, #136	@ 0x88
 800607c:	589b      	ldr	r3, [r3, r2]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d107      	bne.n	8006092 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2284      	movs	r2, #132	@ 0x84
 8006086:	2100      	movs	r1, #0
 8006088:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	0018      	movs	r0, r3
 800608e:	f7fb fa61 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2288      	movs	r2, #136	@ 0x88
 8006096:	2124      	movs	r1, #36	@ 0x24
 8006098:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2101      	movs	r1, #1
 80060a6:	438a      	bics	r2, r1
 80060a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	0018      	movs	r0, r3
 80060b6:	f7fe fdd9 	bl	8004c6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	0018      	movs	r0, r3
 80060be:	f7fe fc57 	bl	8004970 <UART_SetConfig>
 80060c2:	0003      	movs	r3, r0
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e033      	b.n	8006134 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2180      	movs	r1, #128	@ 0x80
 80060d8:	01c9      	lsls	r1, r1, #7
 80060da:	430a      	orrs	r2, r1
 80060dc:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	4a15      	ldr	r2, [pc, #84]	@ (800613c <HAL_RS485Ex_Init+0xdc>)
 80060e6:	4013      	ands	r3, r2
 80060e8:	0019      	movs	r1, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	055b      	lsls	r3, r3, #21
 80060f8:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	041b      	lsls	r3, r3, #16
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a0d      	ldr	r2, [pc, #52]	@ (8006140 <HAL_RS485Ex_Init+0xe0>)
 800610c:	4013      	ands	r3, r2
 800610e:	0019      	movs	r1, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	430a      	orrs	r2, r1
 8006118:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2101      	movs	r1, #1
 8006126:	430a      	orrs	r2, r1
 8006128:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	0018      	movs	r0, r3
 800612e:	f7fe fe51 	bl	8004dd4 <UART_CheckIdleState>
 8006132:	0003      	movs	r3, r0
}
 8006134:	0018      	movs	r0, r3
 8006136:	46bd      	mov	sp, r7
 8006138:	b006      	add	sp, #24
 800613a:	bd80      	pop	{r7, pc}
 800613c:	ffff7fff 	.word	0xffff7fff
 8006140:	fc00ffff 	.word	0xfc00ffff

08006144 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2284      	movs	r2, #132	@ 0x84
 8006150:	5c9b      	ldrb	r3, [r3, r2]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_UARTEx_DisableFifoMode+0x16>
 8006156:	2302      	movs	r3, #2
 8006158:	e027      	b.n	80061aa <HAL_UARTEx_DisableFifoMode+0x66>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2284      	movs	r2, #132	@ 0x84
 800615e:	2101      	movs	r1, #1
 8006160:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2288      	movs	r2, #136	@ 0x88
 8006166:	2124      	movs	r1, #36	@ 0x24
 8006168:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2101      	movs	r1, #1
 800617e:	438a      	bics	r2, r1
 8006180:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a0b      	ldr	r2, [pc, #44]	@ (80061b4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006186:	4013      	ands	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2288      	movs	r2, #136	@ 0x88
 800619c:	2120      	movs	r1, #32
 800619e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2284      	movs	r2, #132	@ 0x84
 80061a4:	2100      	movs	r1, #0
 80061a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	0018      	movs	r0, r3
 80061ac:	46bd      	mov	sp, r7
 80061ae:	b004      	add	sp, #16
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	46c0      	nop			@ (mov r8, r8)
 80061b4:	dfffffff 	.word	0xdfffffff

080061b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2284      	movs	r2, #132	@ 0x84
 80061c6:	5c9b      	ldrb	r3, [r3, r2]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d101      	bne.n	80061d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061cc:	2302      	movs	r3, #2
 80061ce:	e02e      	b.n	800622e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2284      	movs	r2, #132	@ 0x84
 80061d4:	2101      	movs	r1, #1
 80061d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2288      	movs	r2, #136	@ 0x88
 80061dc:	2124      	movs	r1, #36	@ 0x24
 80061de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2101      	movs	r1, #1
 80061f4:	438a      	bics	r2, r1
 80061f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	08d9      	lsrs	r1, r3, #3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	430a      	orrs	r2, r1
 800620a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	0018      	movs	r0, r3
 8006210:	f000 f8b8 	bl	8006384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2288      	movs	r2, #136	@ 0x88
 8006220:	2120      	movs	r1, #32
 8006222:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2284      	movs	r2, #132	@ 0x84
 8006228:	2100      	movs	r1, #0
 800622a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	0018      	movs	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	b004      	add	sp, #16
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2284      	movs	r2, #132	@ 0x84
 8006246:	5c9b      	ldrb	r3, [r3, r2]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800624c:	2302      	movs	r3, #2
 800624e:	e02f      	b.n	80062b0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2284      	movs	r2, #132	@ 0x84
 8006254:	2101      	movs	r1, #1
 8006256:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2288      	movs	r2, #136	@ 0x88
 800625c:	2124      	movs	r1, #36	@ 0x24
 800625e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2101      	movs	r1, #1
 8006274:	438a      	bics	r2, r1
 8006276:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	4a0e      	ldr	r2, [pc, #56]	@ (80062b8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006280:	4013      	ands	r3, r2
 8006282:	0019      	movs	r1, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	683a      	ldr	r2, [r7, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	0018      	movs	r0, r3
 8006292:	f000 f877 	bl	8006384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2288      	movs	r2, #136	@ 0x88
 80062a2:	2120      	movs	r1, #32
 80062a4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2284      	movs	r2, #132	@ 0x84
 80062aa:	2100      	movs	r1, #0
 80062ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	0018      	movs	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b004      	add	sp, #16
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	f1ffffff 	.word	0xf1ffffff

080062bc <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08a      	sub	sp, #40	@ 0x28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	1dbb      	adds	r3, r7, #6
 80062c8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ca:	2327      	movs	r3, #39	@ 0x27
 80062cc:	18fb      	adds	r3, r7, r3
 80062ce:	2200      	movs	r2, #0
 80062d0:	701a      	strb	r2, [r3, #0]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	228c      	movs	r2, #140	@ 0x8c
 80062d6:	589b      	ldr	r3, [r3, r2]
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d14e      	bne.n	800637a <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
 80062e2:	1dbb      	adds	r3, r7, #6
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UARTEx_ReceiveToIdle_IT+0x32>
    {
      return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e046      	b.n	800637c <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	2380      	movs	r3, #128	@ 0x80
 80062f4:	015b      	lsls	r3, r3, #5
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d109      	bne.n	800630e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d105      	bne.n	800630e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2201      	movs	r2, #1
 8006306:	4013      	ands	r3, r2
 8006308:	d001      	beq.n	800630e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
      {
        return  HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e036      	b.n	800637c <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800631a:	1dbb      	adds	r3, r7, #6
 800631c:	881a      	ldrh	r2, [r3, #0]
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	0018      	movs	r0, r3
 8006324:	f7fe fe70 	bl	8005008 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800632c:	2b01      	cmp	r3, #1
 800632e:	d11c      	bne.n	800636a <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2210      	movs	r2, #16
 8006336:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006338:	f3ef 8310 	mrs	r3, PRIMASK
 800633c:	617b      	str	r3, [r7, #20]
  return(result);
 800633e:	697b      	ldr	r3, [r7, #20]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006340:	623b      	str	r3, [r7, #32]
 8006342:	2301      	movs	r3, #1
 8006344:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	f383 8810 	msr	PRIMASK, r3
}
 800634c:	46c0      	nop			@ (mov r8, r8)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2110      	movs	r1, #16
 800635a:	430a      	orrs	r2, r1
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f383 8810 	msr	PRIMASK, r3
}
 8006368:	e003      	b.n	8006372 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800636a:	2327      	movs	r3, #39	@ 0x27
 800636c:	18fb      	adds	r3, r7, r3
 800636e:	2201      	movs	r2, #1
 8006370:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8006372:	2327      	movs	r3, #39	@ 0x27
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	e000      	b.n	800637c <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 800637a:	2302      	movs	r3, #2
  }
}
 800637c:	0018      	movs	r0, r3
 800637e:	46bd      	mov	sp, r7
 8006380:	b00a      	add	sp, #40	@ 0x28
 8006382:	bd80      	pop	{r7, pc}

08006384 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006390:	2b00      	cmp	r3, #0
 8006392:	d108      	bne.n	80063a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	226a      	movs	r2, #106	@ 0x6a
 8006398:	2101      	movs	r1, #1
 800639a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2268      	movs	r2, #104	@ 0x68
 80063a0:	2101      	movs	r1, #1
 80063a2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063a4:	e043      	b.n	800642e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063a6:	260f      	movs	r6, #15
 80063a8:	19bb      	adds	r3, r7, r6
 80063aa:	2208      	movs	r2, #8
 80063ac:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063ae:	200e      	movs	r0, #14
 80063b0:	183b      	adds	r3, r7, r0
 80063b2:	2208      	movs	r2, #8
 80063b4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	0e5b      	lsrs	r3, r3, #25
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	240d      	movs	r4, #13
 80063c2:	193b      	adds	r3, r7, r4
 80063c4:	2107      	movs	r1, #7
 80063c6:	400a      	ands	r2, r1
 80063c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	0f5b      	lsrs	r3, r3, #29
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	250c      	movs	r5, #12
 80063d6:	197b      	adds	r3, r7, r5
 80063d8:	2107      	movs	r1, #7
 80063da:	400a      	ands	r2, r1
 80063dc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063de:	183b      	adds	r3, r7, r0
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	197a      	adds	r2, r7, r5
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	4914      	ldr	r1, [pc, #80]	@ (8006438 <UARTEx_SetNbDataToProcess+0xb4>)
 80063e8:	5c8a      	ldrb	r2, [r1, r2]
 80063ea:	435a      	muls	r2, r3
 80063ec:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80063ee:	197b      	adds	r3, r7, r5
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	4a12      	ldr	r2, [pc, #72]	@ (800643c <UARTEx_SetNbDataToProcess+0xb8>)
 80063f4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063f6:	0019      	movs	r1, r3
 80063f8:	f7f9 ff10 	bl	800021c <__divsi3>
 80063fc:	0003      	movs	r3, r0
 80063fe:	b299      	uxth	r1, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	226a      	movs	r2, #106	@ 0x6a
 8006404:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006406:	19bb      	adds	r3, r7, r6
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	193a      	adds	r2, r7, r4
 800640c:	7812      	ldrb	r2, [r2, #0]
 800640e:	490a      	ldr	r1, [pc, #40]	@ (8006438 <UARTEx_SetNbDataToProcess+0xb4>)
 8006410:	5c8a      	ldrb	r2, [r1, r2]
 8006412:	435a      	muls	r2, r3
 8006414:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006416:	193b      	adds	r3, r7, r4
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	4a08      	ldr	r2, [pc, #32]	@ (800643c <UARTEx_SetNbDataToProcess+0xb8>)
 800641c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800641e:	0019      	movs	r1, r3
 8006420:	f7f9 fefc 	bl	800021c <__divsi3>
 8006424:	0003      	movs	r3, r0
 8006426:	b299      	uxth	r1, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2268      	movs	r2, #104	@ 0x68
 800642c:	5299      	strh	r1, [r3, r2]
}
 800642e:	46c0      	nop			@ (mov r8, r8)
 8006430:	46bd      	mov	sp, r7
 8006432:	b005      	add	sp, #20
 8006434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006436:	46c0      	nop			@ (mov r8, r8)
 8006438:	0800677c 	.word	0x0800677c
 800643c:	08006784 	.word	0x08006784

08006440 <memset>:
 8006440:	0003      	movs	r3, r0
 8006442:	1882      	adds	r2, r0, r2
 8006444:	4293      	cmp	r3, r2
 8006446:	d100      	bne.n	800644a <memset+0xa>
 8006448:	4770      	bx	lr
 800644a:	7019      	strb	r1, [r3, #0]
 800644c:	3301      	adds	r3, #1
 800644e:	e7f9      	b.n	8006444 <memset+0x4>

08006450 <__libc_init_array>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	2600      	movs	r6, #0
 8006454:	4c0c      	ldr	r4, [pc, #48]	@ (8006488 <__libc_init_array+0x38>)
 8006456:	4d0d      	ldr	r5, [pc, #52]	@ (800648c <__libc_init_array+0x3c>)
 8006458:	1b64      	subs	r4, r4, r5
 800645a:	10a4      	asrs	r4, r4, #2
 800645c:	42a6      	cmp	r6, r4
 800645e:	d109      	bne.n	8006474 <__libc_init_array+0x24>
 8006460:	2600      	movs	r6, #0
 8006462:	f000 f819 	bl	8006498 <_init>
 8006466:	4c0a      	ldr	r4, [pc, #40]	@ (8006490 <__libc_init_array+0x40>)
 8006468:	4d0a      	ldr	r5, [pc, #40]	@ (8006494 <__libc_init_array+0x44>)
 800646a:	1b64      	subs	r4, r4, r5
 800646c:	10a4      	asrs	r4, r4, #2
 800646e:	42a6      	cmp	r6, r4
 8006470:	d105      	bne.n	800647e <__libc_init_array+0x2e>
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	00b3      	lsls	r3, r6, #2
 8006476:	58eb      	ldr	r3, [r5, r3]
 8006478:	4798      	blx	r3
 800647a:	3601      	adds	r6, #1
 800647c:	e7ee      	b.n	800645c <__libc_init_array+0xc>
 800647e:	00b3      	lsls	r3, r6, #2
 8006480:	58eb      	ldr	r3, [r5, r3]
 8006482:	4798      	blx	r3
 8006484:	3601      	adds	r6, #1
 8006486:	e7f2      	b.n	800646e <__libc_init_array+0x1e>
 8006488:	0800678c 	.word	0x0800678c
 800648c:	0800678c 	.word	0x0800678c
 8006490:	08006790 	.word	0x08006790
 8006494:	0800678c 	.word	0x0800678c

08006498 <_init>:
 8006498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649a:	46c0      	nop			@ (mov r8, r8)
 800649c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800649e:	bc08      	pop	{r3}
 80064a0:	469e      	mov	lr, r3
 80064a2:	4770      	bx	lr

080064a4 <_fini>:
 80064a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a6:	46c0      	nop			@ (mov r8, r8)
 80064a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064aa:	bc08      	pop	{r3}
 80064ac:	469e      	mov	lr, r3
 80064ae:	4770      	bx	lr
