
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061f4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  080062b4  080062b4  000072b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006590  08006590  00008070  2**0
                  CONTENTS
  4 .ARM          00000000  08006590  08006590  00008070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006590  08006590  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006590  08006590  00007590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006594  08006594  00007594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006598  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000070  08006608  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08006608  00008510  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017332  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d8a  00000000  00000000  0001f3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  00022158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000110b  00000000  00000000  000236d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017731  00000000  00000000  000247e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2d7  00000000  00000000  0003bf14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097495  00000000  00000000  000561eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed680  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd0  00000000  00000000  000ed6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f2694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800629c 	.word	0x0800629c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800629c 	.word	0x0800629c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 8; i++)
 80003fc:	230f      	movs	r3, #15
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	e011      	b.n	800042a <HAL_ADC_ConvCpltCallback+0x36>
	{
		holding_register_database[i + 1] = (uint16_t)raw_data[i];
 8000406:	200f      	movs	r0, #15
 8000408:	183b      	adds	r3, r7, r0
 800040a:	781a      	ldrb	r2, [r3, #0]
 800040c:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <HAL_ADC_ConvCpltCallback+0x4c>)
 800040e:	0092      	lsls	r2, r2, #2
 8000410:	58d1      	ldr	r1, [r2, r3]
 8000412:	183b      	adds	r3, r7, r0
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	1c5a      	adds	r2, r3, #1
 8000418:	b289      	uxth	r1, r1
 800041a:	4b0a      	ldr	r3, [pc, #40]	@ (8000444 <HAL_ADC_ConvCpltCallback+0x50>)
 800041c:	0052      	lsls	r2, r2, #1
 800041e:	52d1      	strh	r1, [r2, r3]
	for(uint8_t i = 0; i < 8; i++)
 8000420:	183b      	adds	r3, r7, r0
 8000422:	781a      	ldrb	r2, [r3, #0]
 8000424:	183b      	adds	r3, r7, r0
 8000426:	3201      	adds	r2, #1
 8000428:	701a      	strb	r2, [r3, #0]
 800042a:	230f      	movs	r3, #15
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b07      	cmp	r3, #7
 8000432:	d9e8      	bls.n	8000406 <HAL_ADC_ConvCpltCallback+0x12>
	}
}
 8000434:	46c0      	nop			@ (mov r8, r8)
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b004      	add	sp, #16
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	200002e4 	.word	0x200002e4
 8000444:	20000000 	.word	0x20000000

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044e:	f001 f8ee 	bl	800162e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000452:	f000 f849 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000456:	f000 fafd 	bl	8000a54 <MX_GPIO_Init>
  MX_DMA_Init();
 800045a:	f000 fadd 	bl	8000a18 <MX_DMA_Init>
  MX_ADC1_Init();
 800045e:	f000 f887 	bl	8000570 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000462:	f000 f95f 	bl	8000724 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000466:	f000 f99d 	bl	80007a4 <MX_SPI1_Init>
  MX_TIM1_Init();
 800046a:	f000 f9d9 	bl	8000820 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800046e:	f000 fa83 	bl	8000978 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  modbus_set_rx(255);
 8000472:	20ff      	movs	r0, #255	@ 0xff
 8000474:	f000 fd80 	bl	8000f78 <modbus_set_rx>
  HAL_ADC_Start_DMA(&hadc1, raw_data, 8);
 8000478:	4918      	ldr	r1, [pc, #96]	@ (80004dc <main+0x94>)
 800047a:	4b19      	ldr	r3, [pc, #100]	@ (80004e0 <main+0x98>)
 800047c:	2208      	movs	r2, #8
 800047e:	0018      	movs	r0, r3
 8000480:	f001 fc40 	bl	8001d04 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(modbus_rx())
 8000484:	f000 fd64 	bl	8000f50 <modbus_rx>
 8000488:	1e03      	subs	r3, r0, #0
 800048a:	d0fb      	beq.n	8000484 <main+0x3c>
	  {
		  int8_t status = 0;
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	2200      	movs	r2, #0
 8000490:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 8000492:	2000      	movs	r0, #0
 8000494:	f000 fb82 	bl	8000b9c <get_rx_buffer>
 8000498:	0003      	movs	r3, r0
 800049a:	001a      	movs	r2, r3
 800049c:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <main+0x9c>)
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d114      	bne.n	80004ce <main+0x86>
		  {
			  switch(get_rx_buffer(1))
 80004a4:	2001      	movs	r0, #1
 80004a6:	f000 fb79 	bl	8000b9c <get_rx_buffer>
 80004aa:	0003      	movs	r3, r0
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d002      	beq.n	80004b6 <main+0x6e>
 80004b0:	2b10      	cmp	r3, #16
 80004b2:	d006      	beq.n	80004c2 <main+0x7a>
 80004b4:	e00b      	b.n	80004ce <main+0x86>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 80004b6:	1dfc      	adds	r4, r7, #7
 80004b8:	f000 fb86 	bl	8000bc8 <return_holding_registers>
 80004bc:	0003      	movs	r3, r0
 80004be:	7023      	strb	r3, [r4, #0]
					  break;
 80004c0:	e005      	b.n	80004ce <main+0x86>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 80004c2:	1dfc      	adds	r4, r7, #7
 80004c4:	f000 fc10 	bl	8000ce8 <edit_multiple_registers>
 80004c8:	0003      	movs	r3, r0
 80004ca:	7023      	strb	r3, [r4, #0]
					  break;
 80004cc:	46c0      	nop			@ (mov r8, r8)
			  if(status != 0)
			  {
				  // log error in a queue
			  }
		  }
		  status = modbus_set_rx(255); // may be able to set size to 12
 80004ce:	1dfc      	adds	r4, r7, #7
 80004d0:	20ff      	movs	r0, #255	@ 0xff
 80004d2:	f000 fd51 	bl	8000f78 <modbus_set_rx>
 80004d6:	0003      	movs	r3, r0
 80004d8:	7023      	strb	r3, [r4, #0]
	  if(modbus_rx())
 80004da:	e7d3      	b.n	8000484 <main+0x3c>
 80004dc:	200002e4 	.word	0x200002e4
 80004e0:	2000008c 	.word	0x2000008c
 80004e4:	20000000 	.word	0x20000000

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b08f      	sub	sp, #60	@ 0x3c
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	2418      	movs	r4, #24
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	0018      	movs	r0, r3
 80004f4:	2320      	movs	r3, #32
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f005 fea3 	bl	8006244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	0018      	movs	r0, r3
 8000502:	2314      	movs	r3, #20
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f005 fe9c 	bl	8006244 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2202      	movs	r2, #2
 8000510:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2280      	movs	r2, #128	@ 0x80
 8000516:	0052      	lsls	r2, r2, #1
 8000518:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2280      	movs	r2, #128	@ 0x80
 800051e:	0152      	lsls	r2, r2, #5
 8000520:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000522:	193b      	adds	r3, r7, r4
 8000524:	2240      	movs	r2, #64	@ 0x40
 8000526:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000528:	193b      	adds	r3, r7, r4
 800052a:	0018      	movs	r0, r3
 800052c:	f002 fd6a 	bl	8003004 <HAL_RCC_OscConfig>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000534:	f000 fb1e 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2207      	movs	r2, #7
 800053c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2100      	movs	r1, #0
 800055a:	0018      	movs	r0, r3
 800055c:	f002 ff78 	bl	8003450 <HAL_RCC_ClockConfig>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000564:	f000 fb06 	bl	8000b74 <Error_Handler>
  }
}
 8000568:	46c0      	nop			@ (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	b00f      	add	sp, #60	@ 0x3c
 800056e:	bd90      	pop	{r4, r7, pc}

08000570 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	0018      	movs	r0, r3
 800057a:	230c      	movs	r3, #12
 800057c:	001a      	movs	r2, r3
 800057e:	2100      	movs	r1, #0
 8000580:	f005 fe60 	bl	8006244 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000584:	4b5d      	ldr	r3, [pc, #372]	@ (80006fc <MX_ADC1_Init+0x18c>)
 8000586:	4a5e      	ldr	r2, [pc, #376]	@ (8000700 <MX_ADC1_Init+0x190>)
 8000588:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800058a:	4b5c      	ldr	r3, [pc, #368]	@ (80006fc <MX_ADC1_Init+0x18c>)
 800058c:	22c0      	movs	r2, #192	@ 0xc0
 800058e:	0612      	lsls	r2, r2, #24
 8000590:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000592:	4b5a      	ldr	r3, [pc, #360]	@ (80006fc <MX_ADC1_Init+0x18c>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000598:	4b58      	ldr	r3, [pc, #352]	@ (80006fc <MX_ADC1_Init+0x18c>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 800059e:	4b57      	ldr	r3, [pc, #348]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005a0:	2280      	movs	r2, #128	@ 0x80
 80005a2:	0612      	lsls	r2, r2, #24
 80005a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a6:	4b55      	ldr	r3, [pc, #340]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005a8:	2204      	movs	r2, #4
 80005aa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005ac:	4b53      	ldr	r3, [pc, #332]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80005b2:	4b52      	ldr	r3, [pc, #328]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005b8:	4b50      	ldr	r3, [pc, #320]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 80005be:	4b4f      	ldr	r3, [pc, #316]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c4:	4b4d      	ldr	r3, [pc, #308]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005ca:	4b4c      	ldr	r3, [pc, #304]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005d0:	4b4a      	ldr	r3, [pc, #296]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005d2:	222c      	movs	r2, #44	@ 0x2c
 80005d4:	2101      	movs	r1, #1
 80005d6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d8:	4b48      	ldr	r3, [pc, #288]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80005de:	4b47      	ldr	r3, [pc, #284]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005e4:	4b45      	ldr	r3, [pc, #276]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005e6:	223c      	movs	r2, #60	@ 0x3c
 80005e8:	2100      	movs	r1, #0
 80005ea:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005ec:	4b43      	ldr	r3, [pc, #268]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f2:	4b42      	ldr	r3, [pc, #264]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 f9df 	bl	80019b8 <HAL_ADC_Init>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80005fe:	f000 fab9 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2201      	movs	r2, #1
 8000606:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2201      	movs	r2, #1
 800060c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	4b3a      	ldr	r3, [pc, #232]	@ (80006fc <MX_ADC1_Init+0x18c>)
 8000612:	0011      	movs	r1, r2
 8000614:	0018      	movs	r0, r3
 8000616:	f001 fc13 	bl	8001e40 <HAL_ADC_ConfigChannel>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800061e:	f000 faa9 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4a37      	ldr	r2, [pc, #220]	@ (8000704 <MX_ADC1_Init+0x194>)
 8000626:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	4b34      	ldr	r3, [pc, #208]	@ (80006fc <MX_ADC1_Init+0x18c>)
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f001 fc06 	bl	8001e40 <HAL_ADC_ConfigChannel>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000638:	f000 fa9c 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4a32      	ldr	r2, [pc, #200]	@ (8000708 <MX_ADC1_Init+0x198>)
 8000640:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000642:	1d3a      	adds	r2, r7, #4
 8000644:	4b2d      	ldr	r3, [pc, #180]	@ (80006fc <MX_ADC1_Init+0x18c>)
 8000646:	0011      	movs	r1, r2
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fbf9 	bl	8001e40 <HAL_ADC_ConfigChannel>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000652:	f000 fa8f 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4a2c      	ldr	r2, [pc, #176]	@ (800070c <MX_ADC1_Init+0x19c>)
 800065a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800065c:	1d3a      	adds	r2, r7, #4
 800065e:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <MX_ADC1_Init+0x18c>)
 8000660:	0011      	movs	r1, r2
 8000662:	0018      	movs	r0, r3
 8000664:	f001 fbec 	bl	8001e40 <HAL_ADC_ConfigChannel>
 8000668:	1e03      	subs	r3, r0, #0
 800066a:	d001      	beq.n	8000670 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800066c:	f000 fa82 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4a27      	ldr	r2, [pc, #156]	@ (8000710 <MX_ADC1_Init+0x1a0>)
 8000674:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000676:	1d3a      	adds	r2, r7, #4
 8000678:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <MX_ADC1_Init+0x18c>)
 800067a:	0011      	movs	r1, r2
 800067c:	0018      	movs	r0, r3
 800067e:	f001 fbdf 	bl	8001e40 <HAL_ADC_ConfigChannel>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000686:	f000 fa75 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4a21      	ldr	r2, [pc, #132]	@ (8000714 <MX_ADC1_Init+0x1a4>)
 800068e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000690:	1d3a      	adds	r2, r7, #4
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <MX_ADC1_Init+0x18c>)
 8000694:	0011      	movs	r1, r2
 8000696:	0018      	movs	r0, r3
 8000698:	f001 fbd2 	bl	8001e40 <HAL_ADC_ConfigChannel>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80006a0:	f000 fa68 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000718 <MX_ADC1_Init+0x1a8>)
 80006a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	1d3a      	adds	r2, r7, #4
 80006ac:	4b13      	ldr	r3, [pc, #76]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80006ae:	0011      	movs	r1, r2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 fbc5 	bl	8001e40 <HAL_ADC_ConfigChannel>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80006ba:	f000 fa5b 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4a16      	ldr	r2, [pc, #88]	@ (800071c <MX_ADC1_Init+0x1ac>)
 80006c2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c4:	1d3a      	adds	r2, r7, #4
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80006c8:	0011      	movs	r1, r2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 fbb8 	bl	8001e40 <HAL_ADC_ConfigChannel>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0x168>
  {
    Error_Handler();
 80006d4:	f000 fa4e 	bl	8000b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4a11      	ldr	r2, [pc, #68]	@ (8000720 <MX_ADC1_Init+0x1b0>)
 80006dc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006de:	1d3a      	adds	r2, r7, #4
 80006e0:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_ADC1_Init+0x18c>)
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 fbab 	bl	8001e40 <HAL_ADC_ConfigChannel>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 80006ee:	f000 fa41 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b004      	add	sp, #16
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	2000008c 	.word	0x2000008c
 8000700:	40012400 	.word	0x40012400
 8000704:	04000002 	.word	0x04000002
 8000708:	08000004 	.word	0x08000004
 800070c:	0c000008 	.word	0x0c000008
 8000710:	10000010 	.word	0x10000010
 8000714:	14000020 	.word	0x14000020
 8000718:	18000040 	.word	0x18000040
 800071c:	1c000080 	.word	0x1c000080
 8000720:	20000100 	.word	0x20000100

08000724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b1b      	ldr	r3, [pc, #108]	@ (8000798 <MX_I2C1_Init+0x74>)
 800072a:	4a1c      	ldr	r2, [pc, #112]	@ (800079c <MX_I2C1_Init+0x78>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00402D41;
 800072e:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000730:	4a1b      	ldr	r2, [pc, #108]	@ (80007a0 <MX_I2C1_Init+0x7c>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073a:	4b17      	ldr	r3, [pc, #92]	@ (8000798 <MX_I2C1_Init+0x74>)
 800073c:	2201      	movs	r2, #1
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000760:	0018      	movs	r0, r3
 8000762:	f002 fb11 	bl	8002d88 <HAL_I2C_Init>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800076a:	f000 fa03 	bl	8000b74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076e:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000770:	2100      	movs	r1, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f002 fbae 	bl	8002ed4 <HAL_I2CEx_ConfigAnalogFilter>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800077c:	f000 f9fa 	bl	8000b74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <MX_I2C1_Init+0x74>)
 8000782:	2100      	movs	r1, #0
 8000784:	0018      	movs	r0, r3
 8000786:	f002 fbf1 	bl	8002f6c <HAL_I2CEx_ConfigDigitalFilter>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800078e:	f000 f9f1 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000014c 	.word	0x2000014c
 800079c:	40005400 	.word	0x40005400
 80007a0:	00402d41 	.word	0x00402d41

080007a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007aa:	4a1c      	ldr	r2, [pc, #112]	@ (800081c <MX_SPI1_Init+0x78>)
 80007ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007b0:	2282      	movs	r2, #130	@ 0x82
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b6:	4b18      	ldr	r3, [pc, #96]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007bc:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007be:	22e0      	movs	r2, #224	@ 0xe0
 80007c0:	00d2      	lsls	r2, r2, #3
 80007c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ca:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007d2:	2280      	movs	r2, #128	@ 0x80
 80007d4:	0092      	lsls	r2, r2, #2
 80007d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007f2:	2207      	movs	r2, #7
 80007f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_SPI1_Init+0x74>)
 80007fe:	2208      	movs	r2, #8
 8000800:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000802:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <MX_SPI1_Init+0x74>)
 8000804:	0018      	movs	r0, r3
 8000806:	f003 f8c5 	bl	8003994 <HAL_SPI_Init>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800080e:	f000 f9b1 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200001a0 	.word	0x200001a0
 800081c:	40013000 	.word	0x40013000

08000820 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b098      	sub	sp, #96	@ 0x60
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000826:	2354      	movs	r3, #84	@ 0x54
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	0018      	movs	r0, r3
 800082c:	230c      	movs	r3, #12
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f005 fd07 	bl	8006244 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000836:	2338      	movs	r3, #56	@ 0x38
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0018      	movs	r0, r3
 800083c:	231c      	movs	r3, #28
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f005 fcff 	bl	8006244 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	0018      	movs	r0, r3
 800084a:	2334      	movs	r3, #52	@ 0x34
 800084c:	001a      	movs	r2, r3
 800084e:	2100      	movs	r1, #0
 8000850:	f005 fcf8 	bl	8006244 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000854:	4b45      	ldr	r3, [pc, #276]	@ (800096c <MX_TIM1_Init+0x14c>)
 8000856:	4a46      	ldr	r2, [pc, #280]	@ (8000970 <MX_TIM1_Init+0x150>)
 8000858:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800085a:	4b44      	ldr	r3, [pc, #272]	@ (800096c <MX_TIM1_Init+0x14c>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b42      	ldr	r3, [pc, #264]	@ (800096c <MX_TIM1_Init+0x14c>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000866:	4b41      	ldr	r3, [pc, #260]	@ (800096c <MX_TIM1_Init+0x14c>)
 8000868:	4a42      	ldr	r2, [pc, #264]	@ (8000974 <MX_TIM1_Init+0x154>)
 800086a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086c:	4b3f      	ldr	r3, [pc, #252]	@ (800096c <MX_TIM1_Init+0x14c>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000872:	4b3e      	ldr	r3, [pc, #248]	@ (800096c <MX_TIM1_Init+0x14c>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000878:	4b3c      	ldr	r3, [pc, #240]	@ (800096c <MX_TIM1_Init+0x14c>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800087e:	4b3b      	ldr	r3, [pc, #236]	@ (800096c <MX_TIM1_Init+0x14c>)
 8000880:	0018      	movs	r0, r3
 8000882:	f003 f93f 	bl	8003b04 <HAL_TIM_PWM_Init>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 f973 	bl	8000b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088e:	2154      	movs	r1, #84	@ 0x54
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a2:	187a      	adds	r2, r7, r1
 80008a4:	4b31      	ldr	r3, [pc, #196]	@ (800096c <MX_TIM1_Init+0x14c>)
 80008a6:	0011      	movs	r1, r2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f003 fda3 	bl	80043f4 <HAL_TIMEx_MasterConfigSynchronization>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008b2:	f000 f95f 	bl	8000b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b6:	2138      	movs	r1, #56	@ 0x38
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2260      	movs	r2, #96	@ 0x60
 80008bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e2:	1879      	adds	r1, r7, r1
 80008e4:	4b21      	ldr	r3, [pc, #132]	@ (800096c <MX_TIM1_Init+0x14c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	0018      	movs	r0, r3
 80008ea:	f003 f963 	bl	8003bb4 <HAL_TIM_PWM_ConfigChannel>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80008f2:	f000 f93f 	bl	8000b74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	0192      	lsls	r2, r2, #6
 800091a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2280      	movs	r2, #128	@ 0x80
 8000932:	0492      	lsls	r2, r2, #18
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000948:	1d3a      	adds	r2, r7, #4
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <MX_TIM1_Init+0x14c>)
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f003 fdb8 	bl	80044c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000958:	f000 f90c 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800095c:	4b03      	ldr	r3, [pc, #12]	@ (800096c <MX_TIM1_Init+0x14c>)
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fd20 	bl	80013a4 <HAL_TIM_MspPostInit>

}
 8000964:	46c0      	nop			@ (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b018      	add	sp, #96	@ 0x60
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000204 	.word	0x20000204
 8000970:	40012c00 	.word	0x40012c00
 8000974:	0000ffff 	.word	0x0000ffff

08000978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800097c:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 800097e:	4a25      	ldr	r2, [pc, #148]	@ (8000a14 <MX_USART1_UART_Init+0x9c>)
 8000980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000982:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 8000984:	22e1      	movs	r2, #225	@ 0xe1
 8000986:	0252      	lsls	r2, r2, #9
 8000988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b21      	ldr	r3, [pc, #132]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80009c0:	4813      	ldr	r0, [pc, #76]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009c2:	2300      	movs	r3, #0
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	f005 fa4c 	bl	8005e64 <HAL_RS485Ex_Init>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 80009d0:	f000 f8d0 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009d6:	2100      	movs	r1, #0
 80009d8:	0018      	movs	r0, r3
 80009da:	f005 faef 	bl	8005fbc <HAL_UARTEx_SetTxFifoThreshold>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 f8c7 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009e8:	2100      	movs	r1, #0
 80009ea:	0018      	movs	r0, r3
 80009ec:	f005 fb26 	bl	800603c <HAL_UARTEx_SetRxFifoThreshold>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 80009f4:	f000 f8be 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <MX_USART1_UART_Init+0x98>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f005 faa4 	bl	8005f48 <HAL_UARTEx_DisableFifoMode>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000a04:	f000 f8b6 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	20000250 	.word	0x20000250
 8000a14:	40013800 	.word	0x40013800

08000a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_DMA_Init+0x38>)
 8000a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <MX_DMA_Init+0x38>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	430a      	orrs	r2, r1
 8000a28:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_DMA_Init+0x38>)
 8000a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4013      	ands	r3, r2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2009      	movs	r0, #9
 8000a3c:	f001 fd8e 	bl	800255c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a40:	2009      	movs	r0, #9
 8000a42:	f001 fda0 	bl	8002586 <HAL_NVIC_EnableIRQ>

}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b002      	add	sp, #8
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	40021000 	.word	0x40021000

08000a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b08b      	sub	sp, #44	@ 0x2c
 8000a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	2414      	movs	r4, #20
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	0018      	movs	r0, r3
 8000a60:	2314      	movs	r3, #20
 8000a62:	001a      	movs	r2, r3
 8000a64:	2100      	movs	r1, #0
 8000a66:	f005 fbed 	bl	8006244 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000a70:	2104      	movs	r1, #4
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a76:	4b3b      	ldr	r3, [pc, #236]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a82:	4b38      	ldr	r3, [pc, #224]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a86:	4b37      	ldr	r3, [pc, #220]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000a88:	2120      	movs	r1, #32
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a8e:	4b35      	ldr	r3, [pc, #212]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a92:	2220      	movs	r2, #32
 8000a94:	4013      	ands	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b32      	ldr	r3, [pc, #200]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a9e:	4b31      	ldr	r3, [pc, #196]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000ab8:	2102      	movs	r1, #2
 8000aba:	430a      	orrs	r2, r1
 8000abc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000abe:	4b29      	ldr	r3, [pc, #164]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b26      	ldr	r3, [pc, #152]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ace:	4b25      	ldr	r3, [pc, #148]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000ad0:	2108      	movs	r1, #8
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ad6:	4b23      	ldr	r3, [pc, #140]	@ (8000b64 <MX_GPIO_Init+0x110>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ada:	2208      	movs	r2, #8
 8000adc:	4013      	ands	r3, r2
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS_C_Pin|SS_A_Pin, GPIO_PIN_RESET);
 8000ae2:	23a0      	movs	r3, #160	@ 0xa0
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4820      	ldr	r0, [pc, #128]	@ (8000b68 <MX_GPIO_Init+0x114>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	0019      	movs	r1, r3
 8000aec:	f002 f92e 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Encoder_Pulse_B_Pin Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin|Encoder_Pulse_A_Pin;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2206      	movs	r2, #6
 8000af4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	4a19      	ldr	r2, [pc, #100]	@ (8000b6c <MX_GPIO_Init+0x118>)
 8000b06:	0019      	movs	r1, r3
 8000b08:	0010      	movs	r0, r2
 8000b0a:	f001 ffad 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_C_Pin SS_A_Pin */
  GPIO_InitStruct.Pin = SS_C_Pin|SS_A_Pin;
 8000b0e:	0021      	movs	r1, r4
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	22a0      	movs	r2, #160	@ 0xa0
 8000b14:	0092      	lsls	r2, r2, #2
 8000b16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	000c      	movs	r4, r1
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b68 <MX_GPIO_Init+0x114>)
 8000b30:	0019      	movs	r1, r3
 8000b32:	0010      	movs	r0, r2
 8000b34:	f001 ff98 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_B_Pin */
  GPIO_InitStruct.Pin = SS_B_Pin;
 8000b38:	0021      	movs	r1, r4
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2280      	movs	r2, #128	@ 0x80
 8000b3e:	0052      	lsls	r2, r2, #1
 8000b40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <MX_GPIO_Init+0x11c>)
 8000b46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SS_B_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <MX_GPIO_Init+0x114>)
 8000b52:	0019      	movs	r1, r3
 8000b54:	0010      	movs	r0, r2
 8000b56:	f001 ff87 	bl	8002a68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b00b      	add	sp, #44	@ 0x2c
 8000b60:	bd90      	pop	{r4, r7, pc}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	40021000 	.word	0x40021000
 8000b68:	50000400 	.word	0x50000400
 8000b6c:	50000c00 	.word	0x50000c00
 8000b70:	10110000 	.word	0x10110000

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	46c0      	nop			@ (mov r8, r8)
 8000b7e:	e7fd      	b.n	8000b7c <Error_Handler+0x8>

08000b80 <HAL_UART_RxCpltCallback>:
};


// Recieve Interrupt Handler
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	rx_int = 1;
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <HAL_UART_RxCpltCallback+0x18>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	20000508 	.word	0x20000508

08000b9c <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8000ba8:	1dfb      	adds	r3, r7, #7
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2bff      	cmp	r3, #255	@ 0xff
 8000bae:	d004      	beq.n	8000bba <get_rx_buffer+0x1e>
	{
		return modbus_rx_buffer[index];
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4a03      	ldr	r2, [pc, #12]	@ (8000bc4 <get_rx_buffer+0x28>)
 8000bb6:	5cd3      	ldrb	r3, [r2, r3]
 8000bb8:	e000      	b.n	8000bbc <get_rx_buffer+0x20>
	}
	return 0xFF;
 8000bba:	23ff      	movs	r3, #255	@ 0xff
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000304 	.word	0x20000304

08000bc8 <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (modbus_rx_buffer[2] << 8) | modbus_rx_buffer[3];
 8000bce:	4b43      	ldr	r3, [pc, #268]	@ (8000cdc <return_holding_registers+0x114>)
 8000bd0:	789b      	ldrb	r3, [r3, #2]
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	b21a      	sxth	r2, r3
 8000bd6:	4b41      	ldr	r3, [pc, #260]	@ (8000cdc <return_holding_registers+0x114>)
 8000bd8:	78db      	ldrb	r3, [r3, #3]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	1dbb      	adds	r3, r7, #6
 8000be2:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5];
 8000be4:	4b3d      	ldr	r3, [pc, #244]	@ (8000cdc <return_holding_registers+0x114>)
 8000be6:	791b      	ldrb	r3, [r3, #4]
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	4b3b      	ldr	r3, [pc, #236]	@ (8000cdc <return_holding_registers+0x114>)
 8000bee:	795b      	ldrb	r3, [r3, #5]
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b21a      	sxth	r2, r3
 8000bf6:	1cbb      	adds	r3, r7, #2
 8000bf8:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8000bfa:	1cbb      	adds	r3, r7, #2
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	2b7d      	cmp	r3, #125	@ 0x7d
 8000c00:	d803      	bhi.n	8000c0a <return_holding_registers+0x42>
 8000c02:	1cbb      	adds	r3, r7, #2
 8000c04:	881b      	ldrh	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d104      	bne.n	8000c14 <return_holding_registers+0x4c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000c0a:	2006      	movs	r0, #6
 8000c0c:	f000 f912 	bl	8000e34 <modbus_exception>
 8000c10:	0003      	movs	r3, r0
 8000c12:	e05e      	b.n	8000cd2 <return_holding_registers+0x10a>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000c14:	1cba      	adds	r2, r7, #2
 8000c16:	1dbb      	adds	r3, r7, #6
 8000c18:	8812      	ldrh	r2, [r2, #0]
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	003b      	movs	r3, r7
 8000c22:	3a01      	subs	r2, #1
 8000c24:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000c26:	003b      	movs	r3, r7
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	2b32      	cmp	r3, #50	@ 0x32
 8000c2c:	d904      	bls.n	8000c38 <return_holding_registers+0x70>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000c2e:	2005      	movs	r0, #5
 8000c30:	f000 f900 	bl	8000e34 <modbus_exception>
 8000c34:	0003      	movs	r3, r0
 8000c36:	e04c      	b.n	8000cd2 <return_holding_registers+0x10a>
	}

	// Return register values

	modbus_tx_buffer[0] = modbus_rx_buffer[0]; // Append Slave id
 8000c38:	4b28      	ldr	r3, [pc, #160]	@ (8000cdc <return_holding_registers+0x114>)
 8000c3a:	781a      	ldrb	r2, [r3, #0]
 8000c3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <return_holding_registers+0x118>)
 8000c3e:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1]; // Append Function Code
 8000c40:	4b26      	ldr	r3, [pc, #152]	@ (8000cdc <return_holding_registers+0x114>)
 8000c42:	785a      	ldrb	r2, [r3, #1]
 8000c44:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <return_holding_registers+0x118>)
 8000c46:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8000c48:	1cbb      	adds	r3, r7, #2
 8000c4a:	881b      	ldrh	r3, [r3, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	18db      	adds	r3, r3, r3
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b23      	ldr	r3, [pc, #140]	@ (8000ce0 <return_holding_registers+0x118>)
 8000c54:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8000c56:	1d7b      	adds	r3, r7, #5
 8000c58:	2203      	movs	r2, #3
 8000c5a:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e027      	b.n	8000cb4 <return_holding_registers+0xec>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address]);
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	881a      	ldrh	r2, [r3, #0]
 8000c68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <return_holding_registers+0x11c>)
 8000c6a:	0052      	lsls	r2, r2, #1
 8000c6c:	5ad3      	ldrh	r3, [r2, r3]
 8000c6e:	0a1b      	lsrs	r3, r3, #8
 8000c70:	b299      	uxth	r1, r3
 8000c72:	1d7b      	adds	r3, r7, #5
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	1d7a      	adds	r2, r7, #5
 8000c78:	1c58      	adds	r0, r3, #1
 8000c7a:	7010      	strb	r0, [r2, #0]
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	b2c9      	uxtb	r1, r1
 8000c80:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <return_holding_registers+0x118>)
 8000c82:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address]);
 8000c84:	1dbb      	adds	r3, r7, #6
 8000c86:	881a      	ldrh	r2, [r3, #0]
 8000c88:	4b16      	ldr	r3, [pc, #88]	@ (8000ce4 <return_holding_registers+0x11c>)
 8000c8a:	0052      	lsls	r2, r2, #1
 8000c8c:	5ad1      	ldrh	r1, [r2, r3]
 8000c8e:	1d7b      	adds	r3, r7, #5
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	1d7a      	adds	r2, r7, #5
 8000c94:	1c58      	adds	r0, r3, #1
 8000c96:	7010      	strb	r0, [r2, #0]
 8000c98:	001a      	movs	r2, r3
 8000c9a:	b2c9      	uxtb	r1, r1
 8000c9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <return_holding_registers+0x118>)
 8000c9e:	5499      	strb	r1, [r3, r2]
		first_register_address++;
 8000ca0:	1dbb      	adds	r3, r7, #6
 8000ca2:	881a      	ldrh	r2, [r3, #0]
 8000ca4:	1dbb      	adds	r3, r7, #6
 8000ca6:	3201      	adds	r2, #1
 8000ca8:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < num_registers; i++)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	3201      	adds	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	1cba      	adds	r2, r7, #2
 8000cbc:	8812      	ldrh	r2, [r2, #0]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d8d0      	bhi.n	8000c64 <return_holding_registers+0x9c>
	}

	return modbus_send(modbus_tx_buffer, index);
 8000cc2:	1d7b      	adds	r3, r7, #5
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <return_holding_registers+0x118>)
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 f8d8 	bl	8000e80 <modbus_send>
 8000cd0:	0003      	movs	r3, r0
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	20000304 	.word	0x20000304
 8000ce0:	20000404 	.word	0x20000404
 8000ce4:	20000000 	.word	0x20000000

08000ce8 <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (modbus_rx_buffer[2] << 8) | modbus_rx_buffer[3];
 8000cee:	4b4e      	ldr	r3, [pc, #312]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000cf0:	789b      	ldrb	r3, [r3, #2]
 8000cf2:	021b      	lsls	r3, r3, #8
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000cf8:	78db      	ldrb	r3, [r3, #3]
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	1dbb      	adds	r3, r7, #6
 8000d02:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (modbus_rx_buffer[4] << 8) | modbus_rx_buffer[5];
 8000d04:	4b48      	ldr	r3, [pc, #288]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000d06:	791b      	ldrb	r3, [r3, #4]
 8000d08:	021b      	lsls	r3, r3, #8
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	4b46      	ldr	r3, [pc, #280]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000d0e:	795b      	ldrb	r3, [r3, #5]
 8000d10:	b21b      	sxth	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	1cbb      	adds	r3, r7, #2
 8000d18:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8000d1a:	1cbb      	adds	r3, r7, #2
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	2b7d      	cmp	r3, #125	@ 0x7d
 8000d20:	d803      	bhi.n	8000d2a <edit_multiple_registers+0x42>
 8000d22:	1cbb      	adds	r3, r7, #2
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d104      	bne.n	8000d34 <edit_multiple_registers+0x4c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000d2a:	2006      	movs	r0, #6
 8000d2c:	f000 f882 	bl	8000e34 <modbus_exception>
 8000d30:	0003      	movs	r3, r0
 8000d32:	e075      	b.n	8000e20 <edit_multiple_registers+0x138>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000d34:	1cba      	adds	r2, r7, #2
 8000d36:	1dbb      	adds	r3, r7, #6
 8000d38:	8812      	ldrh	r2, [r2, #0]
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	18d3      	adds	r3, r2, r3
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	003b      	movs	r3, r7
 8000d42:	3a01      	subs	r2, #1
 8000d44:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000d46:	003b      	movs	r3, r7
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	2b32      	cmp	r3, #50	@ 0x32
 8000d4c:	d904      	bls.n	8000d58 <edit_multiple_registers+0x70>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000d4e:	2005      	movs	r0, #5
 8000d50:	f000 f870 	bl	8000e34 <modbus_exception>
 8000d54:	0003      	movs	r3, r0
 8000d56:	e063      	b.n	8000e20 <edit_multiple_registers+0x138>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = modbus_rx_buffer[0]; // Append Slave id
 8000d58:	4b33      	ldr	r3, [pc, #204]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	4b33      	ldr	r3, [pc, #204]	@ (8000e2c <edit_multiple_registers+0x144>)
 8000d5e:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1]; // Append Function Code
 8000d60:	4b31      	ldr	r3, [pc, #196]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000d62:	785a      	ldrb	r2, [r3, #1]
 8000d64:	4b31      	ldr	r3, [pc, #196]	@ (8000e2c <edit_multiple_registers+0x144>)
 8000d66:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8000d68:	1cbb      	adds	r3, r7, #2
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	18db      	adds	r3, r3, r3
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b2e      	ldr	r3, [pc, #184]	@ (8000e2c <edit_multiple_registers+0x144>)
 8000d74:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8000d76:	1d7b      	adds	r3, r7, #5
 8000d78:	2203      	movs	r2, #3
 8000d7a:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	e03e      	b.n	8000e02 <edit_multiple_registers+0x11a>
	{
		holding_register_database[first_register_address] = (modbus_rx_buffer[2 * i + 6] << 8) | modbus_rx_buffer[2 * i + 7];
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	3303      	adds	r3, #3
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	3307      	adds	r3, #7
 8000d9c:	4922      	ldr	r1, [pc, #136]	@ (8000e28 <edit_multiple_registers+0x140>)
 8000d9e:	5ccb      	ldrb	r3, [r1, r3]
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b219      	sxth	r1, r3
 8000da6:	1dbb      	adds	r3, r7, #6
 8000da8:	881a      	ldrh	r2, [r3, #0]
 8000daa:	b289      	uxth	r1, r1
 8000dac:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <edit_multiple_registers+0x148>)
 8000dae:	0052      	lsls	r2, r2, #1
 8000db0:	52d1      	strh	r1, [r2, r3]
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address]);
 8000db2:	1dbb      	adds	r3, r7, #6
 8000db4:	881a      	ldrh	r2, [r3, #0]
 8000db6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <edit_multiple_registers+0x148>)
 8000db8:	0052      	lsls	r2, r2, #1
 8000dba:	5ad3      	ldrh	r3, [r2, r3]
 8000dbc:	0a1b      	lsrs	r3, r3, #8
 8000dbe:	b299      	uxth	r1, r3
 8000dc0:	1d7b      	adds	r3, r7, #5
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	1d7a      	adds	r2, r7, #5
 8000dc6:	1c58      	adds	r0, r3, #1
 8000dc8:	7010      	strb	r0, [r2, #0]
 8000dca:	001a      	movs	r2, r3
 8000dcc:	b2c9      	uxtb	r1, r1
 8000dce:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <edit_multiple_registers+0x144>)
 8000dd0:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address]);
 8000dd2:	1dbb      	adds	r3, r7, #6
 8000dd4:	881a      	ldrh	r2, [r3, #0]
 8000dd6:	4b16      	ldr	r3, [pc, #88]	@ (8000e30 <edit_multiple_registers+0x148>)
 8000dd8:	0052      	lsls	r2, r2, #1
 8000dda:	5ad1      	ldrh	r1, [r2, r3]
 8000ddc:	1d7b      	adds	r3, r7, #5
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	1d7a      	adds	r2, r7, #5
 8000de2:	1c58      	adds	r0, r3, #1
 8000de4:	7010      	strb	r0, [r2, #0]
 8000de6:	001a      	movs	r2, r3
 8000de8:	b2c9      	uxtb	r1, r1
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <edit_multiple_registers+0x144>)
 8000dec:	5499      	strb	r1, [r3, r2]
		first_register_address++;
 8000dee:	1dbb      	adds	r3, r7, #6
 8000df0:	881a      	ldrh	r2, [r3, #0]
 8000df2:	1dbb      	adds	r3, r7, #6
 8000df4:	3201      	adds	r2, #1
 8000df6:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < num_registers; i++)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	3201      	adds	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	1cba      	adds	r2, r7, #2
 8000e0a:	8812      	ldrh	r2, [r2, #0]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8b9      	bhi.n	8000d84 <edit_multiple_registers+0x9c>
	}

	return modbus_send(modbus_tx_buffer, index);
 8000e10:	1d7b      	adds	r3, r7, #5
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <edit_multiple_registers+0x144>)
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f000 f831 	bl	8000e80 <modbus_send>
 8000e1e:	0003      	movs	r3, r0
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b002      	add	sp, #8
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000304 	.word	0x20000304
 8000e2c:	20000404 	.word	0x20000404
 8000e30:	20000000 	.word	0x20000000

08000e34 <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = modbus_rx_buffer[0];
 8000e40:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <modbus_exception+0x44>)
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <modbus_exception+0x48>)
 8000e46:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = modbus_rx_buffer[1] | 0x80;
 8000e48:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <modbus_exception+0x44>)
 8000e4a:	785b      	ldrb	r3, [r3, #1]
 8000e4c:	2280      	movs	r2, #128	@ 0x80
 8000e4e:	4252      	negs	r2, r2
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <modbus_exception+0x48>)
 8000e56:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <modbus_exception+0x48>)
 8000e62:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <modbus_exception+0x48>)
 8000e66:	2103      	movs	r1, #3
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f000 f809 	bl	8000e80 <modbus_send>
 8000e6e:	0003      	movs	r3, r0
}
 8000e70:	0018      	movs	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b002      	add	sp, #8
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000304 	.word	0x20000304
 8000e7c:	20000404 	.word	0x20000404

08000e80 <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 8000e80:	b5b0      	push	{r4, r5, r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	000a      	movs	r2, r1
 8000e8a:	1cfb      	adds	r3, r7, #3
 8000e8c:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(data, size);
 8000e8e:	250e      	movs	r5, #14
 8000e90:	197c      	adds	r4, r7, r5
 8000e92:	1cfb      	adds	r3, r7, #3
 8000e94:	781a      	ldrb	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	0011      	movs	r1, r2
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 f884 	bl	8000fa8 <crc_16>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	8023      	strh	r3, [r4, #0]
	data[size] = low_byte(crc);
 8000ea4:	1cfb      	adds	r3, r7, #3
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	18d3      	adds	r3, r2, r3
 8000eac:	197a      	adds	r2, r7, r5
 8000eae:	8812      	ldrh	r2, [r2, #0]
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	701a      	strb	r2, [r3, #0]
	data[size + 1] = high_byte(crc);
 8000eb4:	197b      	adds	r3, r7, r5
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	b299      	uxth	r1, r3
 8000ebc:	1cfb      	adds	r3, r7, #3
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	18d3      	adds	r3, r2, r3
 8000ec6:	b2ca      	uxtb	r2, r1
 8000ec8:	701a      	strb	r2, [r3, #0]

	int8_t status = HAL_OK;
 8000eca:	240d      	movs	r4, #13
 8000ecc:	193b      	adds	r3, r7, r4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit_IT(&huart1, data, size + 2);
 8000ed2:	1cfb      	adds	r3, r7, #3
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	3302      	adds	r3, #2
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	6879      	ldr	r1, [r7, #4]
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <modbus_send+0xc4>)
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f003 fb8b 	bl	80045fc <HAL_UART_Transmit_IT>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	001a      	movs	r2, r3
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <modbus_send+0x80>
	{
		return status;
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	e01d      	b.n	8000f3c <modbus_send+0xbc>
	}
	time = HAL_GetTick();
 8000f00:	f000 fc08 	bl	8001714 <HAL_GetTick>
 8000f04:	0002      	movs	r2, r0
 8000f06:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <modbus_send+0xc8>)
 8000f08:	601a      	str	r2, [r3, #0]
	while(!tx_int && (HAL_GetTick()) - time < 100);
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <modbus_send+0xcc>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d107      	bne.n	8000f26 <modbus_send+0xa6>
 8000f16:	f000 fbfd 	bl	8001714 <HAL_GetTick>
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <modbus_send+0xc8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b63      	cmp	r3, #99	@ 0x63
 8000f24:	d9f2      	bls.n	8000f0c <modbus_send+0x8c>
	if(tx_int)
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <modbus_send+0xcc>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <modbus_send+0xba>
	{
		tx_int = 0;
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <modbus_send+0xcc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <modbus_send+0xbc>
	}
	else
	{
		return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
	}
}
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b004      	add	sp, #16
 8000f42:	bdb0      	pop	{r4, r5, r7, pc}
 8000f44:	20000250 	.word	0x20000250
 8000f48:	20000504 	.word	0x20000504
 8000f4c:	20000509 	.word	0x20000509

08000f50 <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	if(rx_int)
 8000f54:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <modbus_rx+0x24>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d004      	beq.n	8000f68 <modbus_rx+0x18>
	{
		rx_int = 0;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <modbus_rx+0x24>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
		return 1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e002      	b.n	8000f6e <modbus_rx+0x1e>
	}
	return rx_int;
 8000f68:	4b02      	ldr	r3, [pc, #8]	@ (8000f74 <modbus_rx+0x24>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
}
 8000f6e:	0018      	movs	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000508 	.word	0x20000508

08000f78 <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx(uint8_t size)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	0002      	movs	r2, r0
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	701a      	strb	r2, [r3, #0]
	return HAL_UARTEx_ReceiveToIdle_IT(&huart1, modbus_rx_buffer, size);
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	4905      	ldr	r1, [pc, #20]	@ (8000fa0 <modbus_set_rx+0x28>)
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <modbus_set_rx+0x2c>)
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f005 f896 	bl	80060c0 <HAL_UARTEx_ReceiveToIdle_IT>
 8000f94:	0003      	movs	r3, r0
 8000f96:	b25b      	sxtb	r3, r3
	//return HAL_UART_Receive_IT(&huart1, modbus_rx_buffer, size);
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000304 	.word	0x20000304
 8000fa4:	20000250 	.word	0x20000250

08000fa8 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	000a      	movs	r2, r1
 8000fb2:	1cfb      	adds	r3, r7, #3
 8000fb4:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	22ff      	movs	r2, #255	@ 0xff
 8000fbc:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8000fbe:	230e      	movs	r3, #14
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	22ff      	movs	r2, #255	@ 0xff
 8000fc4:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8000fc6:	e019      	b.n	8000ffc <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	781a      	ldrb	r2, [r3, #0]
 8000fd0:	200e      	movs	r0, #14
 8000fd2:	183b      	adds	r3, r7, r0
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	4053      	eors	r3, r2
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8000fdc:	4a13      	ldr	r2, [pc, #76]	@ (800102c <crc_16+0x84>)
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	18d3      	adds	r3, r2, r3
 8000fe2:	7819      	ldrb	r1, [r3, #0]
 8000fe4:	183b      	adds	r3, r7, r0
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	183a      	adds	r2, r7, r0
 8000fea:	7812      	ldrb	r2, [r2, #0]
 8000fec:	404a      	eors	r2, r1
 8000fee:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8000ff0:	183b      	adds	r3, r7, r0
 8000ff2:	490f      	ldr	r1, [pc, #60]	@ (8001030 <crc_16+0x88>)
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	188a      	adds	r2, r1, r2
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	701a      	strb	r2, [r3, #0]
	while (size--)
 8000ffc:	1cfb      	adds	r3, r7, #3
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	1cfa      	adds	r2, r7, #3
 8001002:	1e59      	subs	r1, r3, #1
 8001004:	7011      	strb	r1, [r2, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1de      	bne.n	8000fc8 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 800100a:	230f      	movs	r3, #15
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	b21a      	sxth	r2, r3
 8001014:	230e      	movs	r3, #14
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b21b      	sxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	b21b      	sxth	r3, r3
 8001020:	b29b      	uxth	r3, r3
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b004      	add	sp, #16
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	080062b4 	.word	0x080062b4
 8001030:	080063b4 	.word	0x080063b4

08001034 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <HAL_MspInit+0x44>)
 800103c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <HAL_MspInit+0x44>)
 8001040:	2101      	movs	r1, #1
 8001042:	430a      	orrs	r2, r1
 8001044:	641a      	str	r2, [r3, #64]	@ 0x40
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <HAL_MspInit+0x44>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104a:	2201      	movs	r2, #1
 800104c:	4013      	ands	r3, r2
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <HAL_MspInit+0x44>)
 8001054:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001056:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <HAL_MspInit+0x44>)
 8001058:	2180      	movs	r1, #128	@ 0x80
 800105a:	0549      	lsls	r1, r1, #21
 800105c:	430a      	orrs	r2, r1
 800105e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <HAL_MspInit+0x44>)
 8001062:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	055b      	lsls	r3, r3, #21
 8001068:	4013      	ands	r3, r2
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	40021000 	.word	0x40021000

0800107c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b093      	sub	sp, #76	@ 0x4c
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	2334      	movs	r3, #52	@ 0x34
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	0018      	movs	r0, r3
 800108a:	2314      	movs	r3, #20
 800108c:	001a      	movs	r2, r3
 800108e:	2100      	movs	r1, #0
 8001090:	f005 f8d8 	bl	8006244 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001094:	2414      	movs	r4, #20
 8001096:	193b      	adds	r3, r7, r4
 8001098:	0018      	movs	r0, r3
 800109a:	2320      	movs	r3, #32
 800109c:	001a      	movs	r2, r3
 800109e:	2100      	movs	r1, #0
 80010a0:	f005 f8d0 	bl	8006244 <memset>
  if(hadc->Instance==ADC1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a35      	ldr	r2, [pc, #212]	@ (8001180 <HAL_ADC_MspInit+0x104>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d163      	bne.n	8001176 <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ae:	193b      	adds	r3, r7, r4
 80010b0:	2220      	movs	r2, #32
 80010b2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	0018      	movs	r0, r3
 80010be:	f002 fb6d 	bl	800379c <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d001      	beq.n	80010ca <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80010c6:	f7ff fd55 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001184 <HAL_ADC_MspInit+0x108>)
 80010cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001184 <HAL_ADC_MspInit+0x108>)
 80010d0:	2180      	movs	r1, #128	@ 0x80
 80010d2:	0349      	lsls	r1, r1, #13
 80010d4:	430a      	orrs	r2, r1
 80010d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80010d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001184 <HAL_ADC_MspInit+0x108>)
 80010da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010dc:	2380      	movs	r3, #128	@ 0x80
 80010de:	035b      	lsls	r3, r3, #13
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <HAL_ADC_MspInit+0x108>)
 80010e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010ea:	4b26      	ldr	r3, [pc, #152]	@ (8001184 <HAL_ADC_MspInit+0x108>)
 80010ec:	2101      	movs	r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <HAL_ADC_MspInit+0x108>)
 80010f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f6:	2201      	movs	r2, #1
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Thrust_Sensor_A_Pin|Thrust_Sensor_B_Pin|Thrust_Sensor_C_Pin|Motor_Temp_Pin
 80010fe:	2134      	movs	r1, #52	@ 0x34
 8001100:	187b      	adds	r3, r7, r1
 8001102:	4a21      	ldr	r2, [pc, #132]	@ (8001188 <HAL_ADC_MspInit+0x10c>)
 8001104:	601a      	str	r2, [r3, #0]
                          |Earth_Pressure_Pin|Flame_Sensor_Pin|Actuator_A_Pos_Pin|Actuator_B_Pos_Pin
                          |Actuator_C_Pos_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2203      	movs	r2, #3
 800110a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	187a      	adds	r2, r7, r1
 8001114:	23a0      	movs	r3, #160	@ 0xa0
 8001116:	05db      	lsls	r3, r3, #23
 8001118:	0011      	movs	r1, r2
 800111a:	0018      	movs	r0, r3
 800111c:	f001 fca4 	bl	8002a68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001120:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <HAL_ADC_MspInit+0x110>)
 8001122:	4a1b      	ldr	r2, [pc, #108]	@ (8001190 <HAL_ADC_MspInit+0x114>)
 8001124:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001126:	4b19      	ldr	r3, [pc, #100]	@ (800118c <HAL_ADC_MspInit+0x110>)
 8001128:	2205      	movs	r2, #5
 800112a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112c:	4b17      	ldr	r3, [pc, #92]	@ (800118c <HAL_ADC_MspInit+0x110>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001132:	4b16      	ldr	r3, [pc, #88]	@ (800118c <HAL_ADC_MspInit+0x110>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <HAL_ADC_MspInit+0x110>)
 800113a:	2280      	movs	r2, #128	@ 0x80
 800113c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <HAL_ADC_MspInit+0x110>)
 8001140:	2280      	movs	r2, #128	@ 0x80
 8001142:	0052      	lsls	r2, r2, #1
 8001144:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <HAL_ADC_MspInit+0x110>)
 8001148:	2280      	movs	r2, #128	@ 0x80
 800114a:	00d2      	lsls	r2, r2, #3
 800114c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_ADC_MspInit+0x110>)
 8001150:	2220      	movs	r2, #32
 8001152:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001154:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <HAL_ADC_MspInit+0x110>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800115a:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <HAL_ADC_MspInit+0x110>)
 800115c:	0018      	movs	r0, r3
 800115e:	f001 fa2f 	bl	80025c0 <HAL_DMA_Init>
 8001162:	1e03      	subs	r3, r0, #0
 8001164:	d001      	beq.n	800116a <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8001166:	f7ff fd05 	bl	8000b74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a07      	ldr	r2, [pc, #28]	@ (800118c <HAL_ADC_MspInit+0x110>)
 800116e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_ADC_MspInit+0x110>)
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b013      	add	sp, #76	@ 0x4c
 800117c:	bd90      	pop	{r4, r7, pc}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	40012400 	.word	0x40012400
 8001184:	40021000 	.word	0x40021000
 8001188:	000001ff 	.word	0x000001ff
 800118c:	200000f0 	.word	0x200000f0
 8001190:	40020008 	.word	0x40020008

08001194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b093      	sub	sp, #76	@ 0x4c
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	2334      	movs	r3, #52	@ 0x34
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	0018      	movs	r0, r3
 80011a2:	2314      	movs	r3, #20
 80011a4:	001a      	movs	r2, r3
 80011a6:	2100      	movs	r1, #0
 80011a8:	f005 f84c 	bl	8006244 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ac:	2414      	movs	r4, #20
 80011ae:	193b      	adds	r3, r7, r4
 80011b0:	0018      	movs	r0, r3
 80011b2:	2320      	movs	r3, #32
 80011b4:	001a      	movs	r2, r3
 80011b6:	2100      	movs	r1, #0
 80011b8:	f005 f844 	bl	8006244 <memset>
  if(hi2c->Instance==I2C1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a23      	ldr	r2, [pc, #140]	@ (8001250 <HAL_I2C_MspInit+0xbc>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d13f      	bne.n	8001246 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011c6:	193b      	adds	r3, r7, r4
 80011c8:	2202      	movs	r2, #2
 80011ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011cc:	193b      	adds	r3, r7, r4
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d2:	193b      	adds	r3, r7, r4
 80011d4:	0018      	movs	r0, r3
 80011d6:	f002 fae1 	bl	800379c <HAL_RCCEx_PeriphCLKConfig>
 80011da:	1e03      	subs	r3, r0, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011de:	f7ff fcc9 	bl	8000b74 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <HAL_I2C_MspInit+0xc0>)
 80011e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001254 <HAL_I2C_MspInit+0xc0>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	430a      	orrs	r2, r1
 80011ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80011ee:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <HAL_I2C_MspInit+0xc0>)
 80011f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011f2:	2201      	movs	r2, #1
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80011fa:	2134      	movs	r1, #52	@ 0x34
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	22c0      	movs	r2, #192	@ 0xc0
 8001200:	00d2      	lsls	r2, r2, #3
 8001202:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001204:	187b      	adds	r3, r7, r1
 8001206:	2212      	movs	r2, #18
 8001208:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	187b      	adds	r3, r7, r1
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	187b      	adds	r3, r7, r1
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2206      	movs	r2, #6
 800121a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	187a      	adds	r2, r7, r1
 800121e:	23a0      	movs	r3, #160	@ 0xa0
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	0011      	movs	r1, r2
 8001224:	0018      	movs	r0, r3
 8001226:	f001 fc1f 	bl	8002a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <HAL_I2C_MspInit+0xc0>)
 800122c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <HAL_I2C_MspInit+0xc0>)
 8001230:	2180      	movs	r1, #128	@ 0x80
 8001232:	0389      	lsls	r1, r1, #14
 8001234:	430a      	orrs	r2, r1
 8001236:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_I2C_MspInit+0xc0>)
 800123a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800123c:	2380      	movs	r3, #128	@ 0x80
 800123e:	039b      	lsls	r3, r3, #14
 8001240:	4013      	ands	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b013      	add	sp, #76	@ 0x4c
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	40005400 	.word	0x40005400
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b093      	sub	sp, #76	@ 0x4c
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	2334      	movs	r3, #52	@ 0x34
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	0018      	movs	r0, r3
 8001266:	2314      	movs	r3, #20
 8001268:	001a      	movs	r2, r3
 800126a:	2100      	movs	r1, #0
 800126c:	f004 ffea 	bl	8006244 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	2414      	movs	r4, #20
 8001272:	193b      	adds	r3, r7, r4
 8001274:	0018      	movs	r0, r3
 8001276:	2320      	movs	r3, #32
 8001278:	001a      	movs	r2, r3
 800127a:	2100      	movs	r1, #0
 800127c:	f004 ffe2 	bl	8006244 <memset>
  if(hspi->Instance==SPI1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a34      	ldr	r2, [pc, #208]	@ (8001358 <HAL_SPI_MspInit+0x100>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d162      	bne.n	8001350 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2204      	movs	r2, #4
 800128e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8001290:	193b      	adds	r3, r7, r4
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001296:	193b      	adds	r3, r7, r4
 8001298:	0018      	movs	r0, r3
 800129a:	f002 fa7f 	bl	800379c <HAL_RCCEx_PeriphCLKConfig>
 800129e:	1e03      	subs	r3, r0, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80012a2:	f7ff fc67 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012a6:	4b2d      	ldr	r3, [pc, #180]	@ (800135c <HAL_SPI_MspInit+0x104>)
 80012a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012aa:	4b2c      	ldr	r3, [pc, #176]	@ (800135c <HAL_SPI_MspInit+0x104>)
 80012ac:	2180      	movs	r1, #128	@ 0x80
 80012ae:	0149      	lsls	r1, r1, #5
 80012b0:	430a      	orrs	r2, r1
 80012b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80012b4:	4b29      	ldr	r3, [pc, #164]	@ (800135c <HAL_SPI_MspInit+0x104>)
 80012b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012b8:	2380      	movs	r3, #128	@ 0x80
 80012ba:	015b      	lsls	r3, r3, #5
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b26      	ldr	r3, [pc, #152]	@ (800135c <HAL_SPI_MspInit+0x104>)
 80012c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012c6:	4b25      	ldr	r3, [pc, #148]	@ (800135c <HAL_SPI_MspInit+0x104>)
 80012c8:	2101      	movs	r1, #1
 80012ca:	430a      	orrs	r2, r1
 80012cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ce:	4b23      	ldr	r3, [pc, #140]	@ (800135c <HAL_SPI_MspInit+0x104>)
 80012d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012d2:	2201      	movs	r2, #1
 80012d4:	4013      	ands	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	4b20      	ldr	r3, [pc, #128]	@ (800135c <HAL_SPI_MspInit+0x104>)
 80012dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012de:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <HAL_SPI_MspInit+0x104>)
 80012e0:	2102      	movs	r1, #2
 80012e2:	430a      	orrs	r2, r1
 80012e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80012e6:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <HAL_SPI_MspInit+0x104>)
 80012e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ea:	2202      	movs	r2, #2
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012f2:	2134      	movs	r1, #52	@ 0x34
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	2280      	movs	r2, #128	@ 0x80
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	000c      	movs	r4, r1
 80012fe:	193b      	adds	r3, r7, r4
 8001300:	2202      	movs	r2, #2
 8001302:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	193b      	adds	r3, r7, r4
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	193b      	adds	r3, r7, r4
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001310:	193b      	adds	r3, r7, r4
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	193a      	adds	r2, r7, r4
 8001318:	23a0      	movs	r3, #160	@ 0xa0
 800131a:	05db      	lsls	r3, r3, #23
 800131c:	0011      	movs	r1, r2
 800131e:	0018      	movs	r0, r3
 8001320:	f001 fba2 	bl	8002a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001324:	0021      	movs	r1, r4
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2228      	movs	r2, #40	@ 0x28
 800132a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	187b      	adds	r3, r7, r1
 800132e:	2202      	movs	r2, #2
 8001330:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	187b      	adds	r3, r7, r1
 8001346:	4a06      	ldr	r2, [pc, #24]	@ (8001360 <HAL_SPI_MspInit+0x108>)
 8001348:	0019      	movs	r1, r3
 800134a:	0010      	movs	r0, r2
 800134c:	f001 fb8c 	bl	8002a68 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001350:	46c0      	nop			@ (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b013      	add	sp, #76	@ 0x4c
 8001356:	bd90      	pop	{r4, r7, pc}
 8001358:	40013000 	.word	0x40013000
 800135c:	40021000 	.word	0x40021000
 8001360:	50000400 	.word	0x50000400

08001364 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <HAL_TIM_PWM_MspInit+0x38>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d10d      	bne.n	8001392 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001378:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <HAL_TIM_PWM_MspInit+0x3c>)
 800137c:	2180      	movs	r1, #128	@ 0x80
 800137e:	0109      	lsls	r1, r1, #4
 8001380:	430a      	orrs	r2, r1
 8001382:	641a      	str	r2, [r3, #64]	@ 0x40
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001386:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b004      	add	sp, #16
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	40012c00 	.word	0x40012c00
 80013a0:	40021000 	.word	0x40021000

080013a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b089      	sub	sp, #36	@ 0x24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	240c      	movs	r4, #12
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	0018      	movs	r0, r3
 80013b2:	2314      	movs	r3, #20
 80013b4:	001a      	movs	r2, r3
 80013b6:	2100      	movs	r1, #0
 80013b8:	f004 ff44 	bl	8006244 <memset>
  if(htim->Instance==TIM1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a15      	ldr	r2, [pc, #84]	@ (8001418 <HAL_TIM_MspPostInit+0x74>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d123      	bne.n	800140e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_TIM_MspPostInit+0x78>)
 80013c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ca:	4b14      	ldr	r3, [pc, #80]	@ (800141c <HAL_TIM_MspPostInit+0x78>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	430a      	orrs	r2, r1
 80013d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_TIM_MspPostInit+0x78>)
 80013d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d6:	2201      	movs	r2, #1
 80013d8:	4013      	ands	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013de:	193b      	adds	r3, r7, r4
 80013e0:	2280      	movs	r2, #128	@ 0x80
 80013e2:	0212      	lsls	r2, r2, #8
 80013e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	0021      	movs	r1, r4
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	2202      	movs	r2, #2
 80013ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2202      	movs	r2, #2
 80013fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	187a      	adds	r2, r7, r1
 8001402:	23a0      	movs	r3, #160	@ 0xa0
 8001404:	05db      	lsls	r3, r3, #23
 8001406:	0011      	movs	r1, r2
 8001408:	0018      	movs	r0, r3
 800140a:	f001 fb2d 	bl	8002a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b009      	add	sp, #36	@ 0x24
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	40012c00 	.word	0x40012c00
 800141c:	40021000 	.word	0x40021000

08001420 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001420:	b590      	push	{r4, r7, lr}
 8001422:	b095      	sub	sp, #84	@ 0x54
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	233c      	movs	r3, #60	@ 0x3c
 800142a:	18fb      	adds	r3, r7, r3
 800142c:	0018      	movs	r0, r3
 800142e:	2314      	movs	r3, #20
 8001430:	001a      	movs	r2, r3
 8001432:	2100      	movs	r1, #0
 8001434:	f004 ff06 	bl	8006244 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001438:	241c      	movs	r4, #28
 800143a:	193b      	adds	r3, r7, r4
 800143c:	0018      	movs	r0, r3
 800143e:	2320      	movs	r3, #32
 8001440:	001a      	movs	r2, r3
 8001442:	2100      	movs	r1, #0
 8001444:	f004 fefe 	bl	8006244 <memset>
  if(huart->Instance==USART1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a46      	ldr	r2, [pc, #280]	@ (8001568 <HAL_UART_MspInit+0x148>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d000      	beq.n	8001454 <HAL_UART_MspInit+0x34>
 8001452:	e084      	b.n	800155e <HAL_UART_MspInit+0x13e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001454:	193b      	adds	r3, r7, r4
 8001456:	2201      	movs	r2, #1
 8001458:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800145a:	193b      	adds	r3, r7, r4
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001460:	193b      	adds	r3, r7, r4
 8001462:	0018      	movs	r0, r3
 8001464:	f002 f99a 	bl	800379c <HAL_RCCEx_PeriphCLKConfig>
 8001468:	1e03      	subs	r3, r0, #0
 800146a:	d001      	beq.n	8001470 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800146c:	f7ff fb82 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001470:	4b3e      	ldr	r3, [pc, #248]	@ (800156c <HAL_UART_MspInit+0x14c>)
 8001472:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001474:	4b3d      	ldr	r3, [pc, #244]	@ (800156c <HAL_UART_MspInit+0x14c>)
 8001476:	2180      	movs	r1, #128	@ 0x80
 8001478:	01c9      	lsls	r1, r1, #7
 800147a:	430a      	orrs	r2, r1
 800147c:	641a      	str	r2, [r3, #64]	@ 0x40
 800147e:	4b3b      	ldr	r3, [pc, #236]	@ (800156c <HAL_UART_MspInit+0x14c>)
 8001480:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001482:	2380      	movs	r3, #128	@ 0x80
 8001484:	01db      	lsls	r3, r3, #7
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148c:	4b37      	ldr	r3, [pc, #220]	@ (800156c <HAL_UART_MspInit+0x14c>)
 800148e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001490:	4b36      	ldr	r3, [pc, #216]	@ (800156c <HAL_UART_MspInit+0x14c>)
 8001492:	2104      	movs	r1, #4
 8001494:	430a      	orrs	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	@ 0x34
 8001498:	4b34      	ldr	r3, [pc, #208]	@ (800156c <HAL_UART_MspInit+0x14c>)
 800149a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800149c:	2204      	movs	r2, #4
 800149e:	4013      	ands	r3, r2
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	4b31      	ldr	r3, [pc, #196]	@ (800156c <HAL_UART_MspInit+0x14c>)
 80014a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014a8:	4b30      	ldr	r3, [pc, #192]	@ (800156c <HAL_UART_MspInit+0x14c>)
 80014aa:	2102      	movs	r1, #2
 80014ac:	430a      	orrs	r2, r1
 80014ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b0:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <HAL_UART_MspInit+0x14c>)
 80014b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b4:	2202      	movs	r2, #2
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b2b      	ldr	r3, [pc, #172]	@ (800156c <HAL_UART_MspInit+0x14c>)
 80014be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014c0:	4b2a      	ldr	r3, [pc, #168]	@ (800156c <HAL_UART_MspInit+0x14c>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	430a      	orrs	r2, r1
 80014c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80014c8:	4b28      	ldr	r3, [pc, #160]	@ (800156c <HAL_UART_MspInit+0x14c>)
 80014ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014cc:	2201      	movs	r2, #1
 80014ce:	4013      	ands	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014d4:	213c      	movs	r1, #60	@ 0x3c
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	2280      	movs	r2, #128	@ 0x80
 80014da:	01d2      	lsls	r2, r2, #7
 80014dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	000c      	movs	r4, r1
 80014e0:	193b      	adds	r3, r7, r4
 80014e2:	2202      	movs	r2, #2
 80014e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	193b      	adds	r3, r7, r4
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	193b      	adds	r3, r7, r4
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f8:	193b      	adds	r3, r7, r4
 80014fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001570 <HAL_UART_MspInit+0x150>)
 80014fc:	0019      	movs	r1, r3
 80014fe:	0010      	movs	r0, r2
 8001500:	f001 fab2 	bl	8002a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001504:	193b      	adds	r3, r7, r4
 8001506:	2204      	movs	r2, #4
 8001508:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2202      	movs	r2, #2
 800150e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	193b      	adds	r3, r7, r4
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	193b      	adds	r3, r7, r4
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800151c:	193b      	adds	r3, r7, r4
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	193b      	adds	r3, r7, r4
 8001524:	4a13      	ldr	r2, [pc, #76]	@ (8001574 <HAL_UART_MspInit+0x154>)
 8001526:	0019      	movs	r1, r3
 8001528:	0010      	movs	r0, r2
 800152a:	f001 fa9d 	bl	8002a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800152e:	0021      	movs	r1, r4
 8001530:	187b      	adds	r3, r7, r1
 8001532:	2280      	movs	r2, #128	@ 0x80
 8001534:	0152      	lsls	r2, r2, #5
 8001536:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2202      	movs	r2, #2
 800153c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2201      	movs	r2, #1
 800154e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	187a      	adds	r2, r7, r1
 8001552:	23a0      	movs	r3, #160	@ 0xa0
 8001554:	05db      	lsls	r3, r3, #23
 8001556:	0011      	movs	r1, r2
 8001558:	0018      	movs	r0, r3
 800155a:	f001 fa85 	bl	8002a68 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	b015      	add	sp, #84	@ 0x54
 8001564:	bd90      	pop	{r4, r7, pc}
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	40013800 	.word	0x40013800
 800156c:	40021000 	.word	0x40021000
 8001570:	50000800 	.word	0x50000800
 8001574:	50000400 	.word	0x50000400

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800157c:	46c0      	nop			@ (mov r8, r8)
 800157e:	e7fd      	b.n	800157c <NMI_Handler+0x4>

08001580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001584:	46c0      	nop			@ (mov r8, r8)
 8001586:	e7fd      	b.n	8001584 <HardFault_Handler+0x4>

08001588 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158c:	46c0      	nop			@ (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001596:	46c0      	nop			@ (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a0:	f000 f8a6 	bl	80016f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a4:	46c0      	nop			@ (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015b0:	4b03      	ldr	r3, [pc, #12]	@ (80015c0 <DMA1_Channel1_IRQHandler+0x14>)
 80015b2:	0018      	movs	r0, r3
 80015b4:	f001 f916 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015b8:	46c0      	nop			@ (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			@ (mov r8, r8)
 80015c0:	200000f0 	.word	0x200000f0

080015c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015c8:	4b03      	ldr	r3, [pc, #12]	@ (80015d8 <SystemInit+0x14>)
 80015ca:	2280      	movs	r2, #128	@ 0x80
 80015cc:	0512      	lsls	r2, r2, #20
 80015ce:	609a      	str	r2, [r3, #8]
#endif
}
 80015d0:	46c0      	nop			@ (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015dc:	480d      	ldr	r0, [pc, #52]	@ (8001614 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015e0:	f7ff fff0 	bl	80015c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015e6:	e003      	b.n	80015f0 <LoopCopyDataInit>

080015e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80015ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015ee:	3104      	adds	r1, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015f0:	480a      	ldr	r0, [pc, #40]	@ (800161c <LoopForever+0xa>)
  ldr r3, =_edata
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <LoopForever+0xe>)
  adds r2, r0, r1
 80015f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015f8:	d3f6      	bcc.n	80015e8 <CopyDataInit>
  ldr r2, =_sbss
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <LoopForever+0x12>)
  b LoopFillZerobss
 80015fc:	e002      	b.n	8001604 <LoopFillZerobss>

080015fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  str  r3, [r2]
 8001600:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001602:	3204      	adds	r2, #4

08001604 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <LoopForever+0x16>)
  cmp r2, r3
 8001606:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001608:	d3f9      	bcc.n	80015fe <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800160a:	f004 fe23 	bl	8006254 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160e:	f7fe ff1b 	bl	8000448 <main>

08001612 <LoopForever>:

LoopForever:
    b LoopForever
 8001612:	e7fe      	b.n	8001612 <LoopForever>
  ldr   r0, =_estack
 8001614:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8001618:	08006598 	.word	0x08006598
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001620:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001624:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001628:	20000510 	.word	0x20000510

0800162c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800162c:	e7fe      	b.n	800162c <ADC1_IRQHandler>

0800162e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001634:	1dfb      	adds	r3, r7, #7
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800163a:	2003      	movs	r0, #3
 800163c:	f000 f80e 	bl	800165c <HAL_InitTick>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d003      	beq.n	800164c <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	e001      	b.n	8001650 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800164c:	f7ff fcf2 	bl	8001034 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001650:	1dfb      	adds	r3, r7, #7
 8001652:	781b      	ldrb	r3, [r3, #0]
}
 8001654:	0018      	movs	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	b002      	add	sp, #8
 800165a:	bd80      	pop	{r7, pc}

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001664:	230f      	movs	r3, #15
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 800166c:	4b1d      	ldr	r3, [pc, #116]	@ (80016e4 <HAL_InitTick+0x88>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d02b      	beq.n	80016cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001674:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <HAL_InitTick+0x8c>)
 8001676:	681c      	ldr	r4, [r3, #0]
 8001678:	4b1a      	ldr	r3, [pc, #104]	@ (80016e4 <HAL_InitTick+0x88>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	0019      	movs	r1, r3
 800167e:	23fa      	movs	r3, #250	@ 0xfa
 8001680:	0098      	lsls	r0, r3, #2
 8001682:	f7fe fd41 	bl	8000108 <__udivsi3>
 8001686:	0003      	movs	r3, r0
 8001688:	0019      	movs	r1, r3
 800168a:	0020      	movs	r0, r4
 800168c:	f7fe fd3c 	bl	8000108 <__udivsi3>
 8001690:	0003      	movs	r3, r0
 8001692:	0018      	movs	r0, r3
 8001694:	f000 ff87 	bl	80025a6 <HAL_SYSTICK_Config>
 8001698:	1e03      	subs	r3, r0, #0
 800169a:	d112      	bne.n	80016c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d80a      	bhi.n	80016b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	2301      	movs	r3, #1
 80016a6:	425b      	negs	r3, r3
 80016a8:	2200      	movs	r2, #0
 80016aa:	0018      	movs	r0, r3
 80016ac:	f000 ff56 	bl	800255c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <HAL_InitTick+0x90>)
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e00d      	b.n	80016d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80016b8:	230f      	movs	r3, #15
 80016ba:	18fb      	adds	r3, r7, r3
 80016bc:	2201      	movs	r2, #1
 80016be:	701a      	strb	r2, [r3, #0]
 80016c0:	e008      	b.n	80016d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016c2:	230f      	movs	r3, #15
 80016c4:	18fb      	adds	r3, r7, r3
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	e003      	b.n	80016d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016cc:	230f      	movs	r3, #15
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	2201      	movs	r2, #1
 80016d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80016d4:	230f      	movs	r3, #15
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	781b      	ldrb	r3, [r3, #0]
}
 80016da:	0018      	movs	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	b005      	add	sp, #20
 80016e0:	bd90      	pop	{r4, r7, pc}
 80016e2:	46c0      	nop			@ (mov r8, r8)
 80016e4:	2000006c 	.word	0x2000006c
 80016e8:	20000064 	.word	0x20000064
 80016ec:	20000068 	.word	0x20000068

080016f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016f4:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_IncTick+0x1c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	001a      	movs	r2, r3
 80016fa:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <HAL_IncTick+0x20>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	18d2      	adds	r2, r2, r3
 8001700:	4b03      	ldr	r3, [pc, #12]	@ (8001710 <HAL_IncTick+0x20>)
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	46c0      	nop			@ (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	2000006c 	.word	0x2000006c
 8001710:	2000050c 	.word	0x2000050c

08001714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b02      	ldr	r3, [pc, #8]	@ (8001724 <HAL_GetTick+0x10>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	0018      	movs	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	2000050c 	.word	0x2000050c

08001728 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a05      	ldr	r2, [pc, #20]	@ (800174c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001738:	401a      	ands	r2, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	601a      	str	r2, [r3, #0]
}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	ff3fffff 	.word	0xff3fffff

08001750 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	23c0      	movs	r3, #192	@ 0xc0
 800175e:	041b      	lsls	r3, r3, #16
 8001760:	4013      	ands	r3, r2
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	b002      	add	sp, #8
 8001768:	bd80      	pop	{r7, pc}

0800176a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	2104      	movs	r1, #4
 800177e:	400a      	ands	r2, r1
 8001780:	2107      	movs	r1, #7
 8001782:	4091      	lsls	r1, r2
 8001784:	000a      	movs	r2, r1
 8001786:	43d2      	mvns	r2, r2
 8001788:	401a      	ands	r2, r3
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2104      	movs	r1, #4
 800178e:	400b      	ands	r3, r1
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4099      	lsls	r1, r3
 8001794:	000b      	movs	r3, r1
 8001796:	431a      	orrs	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800179c:	46c0      	nop			@ (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b004      	add	sp, #16
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	2104      	movs	r1, #4
 80017b6:	400a      	ands	r2, r1
 80017b8:	2107      	movs	r1, #7
 80017ba:	4091      	lsls	r1, r2
 80017bc:	000a      	movs	r2, r1
 80017be:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2104      	movs	r1, #4
 80017c4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017c6:	40da      	lsrs	r2, r3
 80017c8:	0013      	movs	r3, r2
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b002      	add	sp, #8
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	23c0      	movs	r3, #192	@ 0xc0
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	4013      	ands	r3, r2
 80017e4:	d101      	bne.n	80017ea <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b002      	add	sp, #8
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	211f      	movs	r1, #31
 8001808:	400a      	ands	r2, r1
 800180a:	210f      	movs	r1, #15
 800180c:	4091      	lsls	r1, r2
 800180e:	000a      	movs	r2, r1
 8001810:	43d2      	mvns	r2, r2
 8001812:	401a      	ands	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	0e9b      	lsrs	r3, r3, #26
 8001818:	210f      	movs	r1, #15
 800181a:	4019      	ands	r1, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	201f      	movs	r0, #31
 8001820:	4003      	ands	r3, r0
 8001822:	4099      	lsls	r1, r3
 8001824:	000b      	movs	r3, r1
 8001826:	431a      	orrs	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800182c:	46c0      	nop			@ (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	b004      	add	sp, #16
 8001832:	bd80      	pop	{r7, pc}

08001834 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	025b      	lsls	r3, r3, #9
 8001846:	0a5b      	lsrs	r3, r3, #9
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	46bd      	mov	sp, r7
 8001852:	b002      	add	sp, #8
 8001854:	bd80      	pop	{r7, pc}

08001856 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	0252      	lsls	r2, r2, #9
 8001868:	0a52      	lsrs	r2, r2, #9
 800186a:	43d2      	mvns	r2, r2
 800186c:	401a      	ands	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001872:	46c0      	nop			@ (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b002      	add	sp, #8
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	0212      	lsls	r2, r2, #8
 8001890:	43d2      	mvns	r2, r2
 8001892:	401a      	ands	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	400b      	ands	r3, r1
 800189c:	4904      	ldr	r1, [pc, #16]	@ (80018b0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800189e:	400b      	ands	r3, r1
 80018a0:	431a      	orrs	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b004      	add	sp, #16
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			@ (mov r8, r8)
 80018b0:	7fffff00 	.word	0x7fffff00

080018b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a05      	ldr	r2, [pc, #20]	@ (80018d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	2280      	movs	r2, #128	@ 0x80
 80018c6:	0552      	lsls	r2, r2, #21
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018ce:	46c0      	nop			@ (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b002      	add	sp, #8
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			@ (mov r8, r8)
 80018d8:	6fffffe8 	.word	0x6fffffe8

080018dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	2380      	movs	r3, #128	@ 0x80
 80018ea:	055b      	lsls	r3, r3, #21
 80018ec:	401a      	ands	r2, r3
 80018ee:	2380      	movs	r3, #128	@ 0x80
 80018f0:	055b      	lsls	r3, r3, #21
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d101      	bne.n	80018fa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	b002      	add	sp, #8
 8001902:	bd80      	pop	{r7, pc}

08001904 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <LL_ADC_Enable+0x20>)
 8001912:	4013      	ands	r3, r2
 8001914:	2201      	movs	r2, #1
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800191c:	46c0      	nop			@ (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}
 8001924:	7fffffe8 	.word	0x7fffffe8

08001928 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	@ (8001948 <LL_ADC_Disable+0x20>)
 8001936:	4013      	ands	r3, r2
 8001938:	2202      	movs	r2, #2
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001940:	46c0      	nop			@ (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	b002      	add	sp, #8
 8001946:	bd80      	pop	{r7, pc}
 8001948:	7fffffe8 	.word	0x7fffffe8

0800194c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2201      	movs	r2, #1
 800195a:	4013      	ands	r3, r2
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <LL_ADC_IsEnabled+0x18>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <LL_ADC_IsEnabled+0x1a>
 8001964:	2300      	movs	r3, #0
}
 8001966:	0018      	movs	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	b002      	add	sp, #8
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <LL_ADC_REG_StartConversion+0x20>)
 800197e:	4013      	ands	r3, r2
 8001980:	2204      	movs	r2, #4
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001988:	46c0      	nop			@ (mov r8, r8)
 800198a:	46bd      	mov	sp, r7
 800198c:	b002      	add	sp, #8
 800198e:	bd80      	pop	{r7, pc}
 8001990:	7fffffe8 	.word	0x7fffffe8

08001994 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2204      	movs	r2, #4
 80019a2:	4013      	ands	r3, r2
 80019a4:	2b04      	cmp	r3, #4
 80019a6:	d101      	bne.n	80019ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b002      	add	sp, #8
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c0:	231f      	movs	r3, #31
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e17e      	b.n	8001cdc <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10a      	bne.n	80019fc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff fb47 	bl	800107c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2254      	movs	r2, #84	@ 0x54
 80019f8:	2100      	movs	r1, #0
 80019fa:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff ff6b 	bl	80018dc <LL_ADC_IsInternalRegulatorEnabled>
 8001a06:	1e03      	subs	r3, r0, #0
 8001a08:	d114      	bne.n	8001a34 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f7ff ff50 	bl	80018b4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001a14:	4bb3      	ldr	r3, [pc, #716]	@ (8001ce4 <HAL_ADC_Init+0x32c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	49b3      	ldr	r1, [pc, #716]	@ (8001ce8 <HAL_ADC_Init+0x330>)
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f7fe fb74 	bl	8000108 <__udivsi3>
 8001a20:	0003      	movs	r3, r0
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a26:	e002      	b.n	8001a2e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f9      	bne.n	8001a28 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f7ff ff4f 	bl	80018dc <LL_ADC_IsInternalRegulatorEnabled>
 8001a3e:	1e03      	subs	r3, r0, #0
 8001a40:	d10f      	bne.n	8001a62 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a46:	2210      	movs	r2, #16
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	2201      	movs	r2, #1
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a5a:	231f      	movs	r3, #31
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	2201      	movs	r2, #1
 8001a60:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0018      	movs	r0, r3
 8001a68:	f7ff ff94 	bl	8001994 <LL_ADC_REG_IsConversionOngoing>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a74:	2210      	movs	r2, #16
 8001a76:	4013      	ands	r3, r2
 8001a78:	d000      	beq.n	8001a7c <HAL_ADC_Init+0xc4>
 8001a7a:	e122      	b.n	8001cc2 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d000      	beq.n	8001a84 <HAL_ADC_Init+0xcc>
 8001a82:	e11e      	b.n	8001cc2 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a88:	4a98      	ldr	r2, [pc, #608]	@ (8001cec <HAL_ADC_Init+0x334>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff ff57 	bl	800194c <LL_ADC_IsEnabled>
 8001a9e:	1e03      	subs	r3, r0, #0
 8001aa0:	d000      	beq.n	8001aa4 <HAL_ADC_Init+0xec>
 8001aa2:	e0ad      	b.n	8001c00 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7e1b      	ldrb	r3, [r3, #24]
 8001aac:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001aae:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7e5b      	ldrb	r3, [r3, #25]
 8001ab4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ab6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	7e9b      	ldrb	r3, [r3, #26]
 8001abc:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001abe:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <HAL_ADC_Init+0x116>
 8001ac8:	2380      	movs	r3, #128	@ 0x80
 8001aca:	015b      	lsls	r3, r3, #5
 8001acc:	e000      	b.n	8001ad0 <HAL_ADC_Init+0x118>
 8001ace:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001ad0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001ad6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	da04      	bge.n	8001aea <HAL_ADC_Init+0x132>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	085b      	lsrs	r3, r3, #1
 8001ae8:	e001      	b.n	8001aee <HAL_ADC_Init+0x136>
 8001aea:	2380      	movs	r3, #128	@ 0x80
 8001aec:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001aee:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	212c      	movs	r1, #44	@ 0x2c
 8001af4:	5c5b      	ldrb	r3, [r3, r1]
 8001af6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001af8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	5c9b      	ldrb	r3, [r3, r2]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d115      	bne.n	8001b36 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7e9b      	ldrb	r3, [r3, #26]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d105      	bne.n	8001b1e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	2280      	movs	r2, #128	@ 0x80
 8001b16:	0252      	lsls	r2, r2, #9
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
 8001b1c:	e00b      	b.n	8001b36 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b22:	2220      	movs	r2, #32
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b2e:	2201      	movs	r2, #1
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00a      	beq.n	8001b54 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b42:	23e0      	movs	r3, #224	@ 0xe0
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	4a65      	ldr	r2, [pc, #404]	@ (8001cf0 <HAL_ADC_Init+0x338>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	0f9b      	lsrs	r3, r3, #30
 8001b70:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b76:	4313      	orrs	r3, r2
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	223c      	movs	r2, #60	@ 0x3c
 8001b82:	5c9b      	ldrb	r3, [r3, r2]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d111      	bne.n	8001bac <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	0f9b      	lsrs	r3, r3, #30
 8001b8e:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b94:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001b9a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001ba0:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	4a50      	ldr	r2, [pc, #320]	@ (8001cf4 <HAL_ADC_Init+0x33c>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	23c0      	movs	r3, #192	@ 0xc0
 8001bc8:	061b      	lsls	r3, r3, #24
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d018      	beq.n	8001c00 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001bd2:	2380      	movs	r3, #128	@ 0x80
 8001bd4:	05db      	lsls	r3, r3, #23
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d012      	beq.n	8001c00 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001bde:	2380      	movs	r3, #128	@ 0x80
 8001be0:	061b      	lsls	r3, r3, #24
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d00c      	beq.n	8001c00 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001be6:	4b44      	ldr	r3, [pc, #272]	@ (8001cf8 <HAL_ADC_Init+0x340>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a44      	ldr	r2, [pc, #272]	@ (8001cfc <HAL_ADC_Init+0x344>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	23f0      	movs	r3, #240	@ 0xf0
 8001bf6:	039b      	lsls	r3, r3, #14
 8001bf8:	401a      	ands	r2, r3
 8001bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8001cf8 <HAL_ADC_Init+0x340>)
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c08:	001a      	movs	r2, r3
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	f7ff fdad 	bl	800176a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c18:	4939      	ldr	r1, [pc, #228]	@ (8001d00 <HAL_ADC_Init+0x348>)
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	f7ff fda5 	bl	800176a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2110      	movs	r1, #16
 8001c34:	4249      	negs	r1, r1
 8001c36:	430a      	orrs	r2, r1
 8001c38:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c3a:	e018      	b.n	8001c6e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	039b      	lsls	r3, r3, #14
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d112      	bne.n	8001c6e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	221c      	movs	r2, #28
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	4252      	negs	r2, r2
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0011      	movs	r1, r2
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2100      	movs	r1, #0
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7ff fd95 	bl	80017a4 <LL_ADC_GetSamplingTimeCommonChannels>
 8001c7a:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d10b      	bne.n	8001c9c <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8e:	2203      	movs	r2, #3
 8001c90:	4393      	bics	r3, r2
 8001c92:	2201      	movs	r2, #1
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c9a:	e01c      	b.n	8001cd6 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca0:	2212      	movs	r2, #18
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001cb8:	231f      	movs	r3, #31
 8001cba:	18fb      	adds	r3, r7, r3
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cc0:	e009      	b.n	8001cd6 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001cce:	231f      	movs	r3, #31
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001cd6:	231f      	movs	r3, #31
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	781b      	ldrb	r3, [r3, #0]
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b008      	add	sp, #32
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000064 	.word	0x20000064
 8001ce8:	00030d40 	.word	0x00030d40
 8001cec:	fffffefd 	.word	0xfffffefd
 8001cf0:	ffde0201 	.word	0xffde0201
 8001cf4:	1ffffc02 	.word	0x1ffffc02
 8001cf8:	40012708 	.word	0x40012708
 8001cfc:	ffc3ffff 	.word	0xffc3ffff
 8001d00:	7fffff04 	.word	0x7fffff04

08001d04 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d04:	b5b0      	push	{r4, r5, r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	0018      	movs	r0, r3
 8001d16:	f7ff fe3d 	bl	8001994 <LL_ADC_REG_IsConversionOngoing>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d16c      	bne.n	8001df8 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2254      	movs	r2, #84	@ 0x54
 8001d22:	5c9b      	ldrb	r3, [r3, r2]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_Start_DMA+0x28>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e06c      	b.n	8001e06 <HAL_ADC_Start_DMA+0x102>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2254      	movs	r2, #84	@ 0x54
 8001d30:	2101      	movs	r1, #1
 8001d32:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d113      	bne.n	8001d68 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff fe01 	bl	800194c <LL_ADC_IsEnabled>
 8001d4a:	1e03      	subs	r3, r0, #0
 8001d4c:	d004      	beq.n	8001d58 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff fde8 	bl	8001928 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2101      	movs	r1, #1
 8001d64:	430a      	orrs	r2, r1
 8001d66:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d68:	2517      	movs	r5, #23
 8001d6a:	197c      	adds	r4, r7, r5
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 fa3c 	bl	80021ec <ADC_Enable>
 8001d74:	0003      	movs	r3, r0
 8001d76:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d78:	002c      	movs	r4, r5
 8001d7a:	193b      	adds	r3, r7, r4
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d13e      	bne.n	8001e00 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d86:	4a22      	ldr	r2, [pc, #136]	@ (8001e10 <HAL_ADC_Start_DMA+0x10c>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2280      	movs	r2, #128	@ 0x80
 8001d8c:	0052      	lsls	r2, r2, #1
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001e14 <HAL_ADC_Start_DMA+0x110>)
 8001da0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001da6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e18 <HAL_ADC_Start_DMA+0x114>)
 8001da8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dae:	4a1b      	ldr	r2, [pc, #108]	@ (8001e1c <HAL_ADC_Start_DMA+0x118>)
 8001db0:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	221c      	movs	r2, #28
 8001db8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2254      	movs	r2, #84	@ 0x54
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2110      	movs	r1, #16
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3340      	adds	r3, #64	@ 0x40
 8001ddc:	0019      	movs	r1, r3
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	193c      	adds	r4, r7, r4
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f000 fc76 	bl	80026d4 <HAL_DMA_Start_IT>
 8001de8:	0003      	movs	r3, r0
 8001dea:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff fdbd 	bl	8001970 <LL_ADC_REG_StartConversion>
 8001df6:	e003      	b.n	8001e00 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001df8:	2317      	movs	r3, #23
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e00:	2317      	movs	r3, #23
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	781b      	ldrb	r3, [r3, #0]
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b006      	add	sp, #24
 8001e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	fffff0fe 	.word	0xfffff0fe
 8001e14:	080022e9 	.word	0x080022e9
 8001e18:	080023b1 	.word	0x080023b1
 8001e1c:	080023cf 	.word	0x080023cf

08001e20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e28:	46c0      	nop			@ (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b002      	add	sp, #8
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e38:	46c0      	nop			@ (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e4a:	2317      	movs	r3, #23
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2254      	movs	r2, #84	@ 0x54
 8001e5a:	5c9b      	ldrb	r3, [r3, r2]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x24>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e1be      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x3a2>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2254      	movs	r2, #84	@ 0x54
 8001e68:	2101      	movs	r1, #1
 8001e6a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f7ff fd8f 	bl	8001994 <LL_ADC_REG_IsConversionOngoing>
 8001e76:	1e03      	subs	r3, r0, #0
 8001e78:	d000      	beq.n	8001e7c <HAL_ADC_ConfigChannel+0x3c>
 8001e7a:	e1a1      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d100      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x46>
 8001e84:	e152      	b.n	800212c <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	2380      	movs	r3, #128	@ 0x80
 8001e8c:	061b      	lsls	r3, r3, #24
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d004      	beq.n	8001e9c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e96:	4ac2      	ldr	r2, [pc, #776]	@ (80021a0 <HAL_ADC_ConfigChannel+0x360>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d108      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	0010      	movs	r0, r2
 8001ea8:	f7ff fcc4 	bl	8001834 <LL_ADC_REG_SetSequencerChAdd>
 8001eac:	e0ed      	b.n	800208a <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	211f      	movs	r1, #31
 8001eb8:	400b      	ands	r3, r1
 8001eba:	210f      	movs	r1, #15
 8001ebc:	4099      	lsls	r1, r3
 8001ebe:	000b      	movs	r3, r1
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	025b      	lsls	r3, r3, #9
 8001ecc:	0a5b      	lsrs	r3, r3, #9
 8001ece:	d105      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x9c>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0e9b      	lsrs	r3, r3, #26
 8001ed6:	221f      	movs	r2, #31
 8001ed8:	4013      	ands	r3, r2
 8001eda:	e0bc      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d000      	beq.n	8001ee8 <HAL_ADC_ConfigChannel+0xa8>
 8001ee6:	e0b5      	b.n	8002054 <HAL_ADC_ConfigChannel+0x214>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2202      	movs	r2, #2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d000      	beq.n	8001ef4 <HAL_ADC_ConfigChannel+0xb4>
 8001ef2:	e0ad      	b.n	8002050 <HAL_ADC_ConfigChannel+0x210>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2204      	movs	r2, #4
 8001efa:	4013      	ands	r3, r2
 8001efc:	d000      	beq.n	8001f00 <HAL_ADC_ConfigChannel+0xc0>
 8001efe:	e0a5      	b.n	800204c <HAL_ADC_ConfigChannel+0x20c>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2208      	movs	r2, #8
 8001f06:	4013      	ands	r3, r2
 8001f08:	d000      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0xcc>
 8001f0a:	e09d      	b.n	8002048 <HAL_ADC_ConfigChannel+0x208>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2210      	movs	r2, #16
 8001f12:	4013      	ands	r3, r2
 8001f14:	d000      	beq.n	8001f18 <HAL_ADC_ConfigChannel+0xd8>
 8001f16:	e095      	b.n	8002044 <HAL_ADC_ConfigChannel+0x204>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d000      	beq.n	8001f24 <HAL_ADC_ConfigChannel+0xe4>
 8001f22:	e08d      	b.n	8002040 <HAL_ADC_ConfigChannel+0x200>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2240      	movs	r2, #64	@ 0x40
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d000      	beq.n	8001f30 <HAL_ADC_ConfigChannel+0xf0>
 8001f2e:	e085      	b.n	800203c <HAL_ADC_ConfigChannel+0x1fc>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2280      	movs	r2, #128	@ 0x80
 8001f36:	4013      	ands	r3, r2
 8001f38:	d000      	beq.n	8001f3c <HAL_ADC_ConfigChannel+0xfc>
 8001f3a:	e07d      	b.n	8002038 <HAL_ADC_ConfigChannel+0x1f8>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4013      	ands	r3, r2
 8001f46:	d000      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x10a>
 8001f48:	e074      	b.n	8002034 <HAL_ADC_ConfigChannel+0x1f4>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	2380      	movs	r3, #128	@ 0x80
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4013      	ands	r3, r2
 8001f54:	d000      	beq.n	8001f58 <HAL_ADC_ConfigChannel+0x118>
 8001f56:	e06b      	b.n	8002030 <HAL_ADC_ConfigChannel+0x1f0>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4013      	ands	r3, r2
 8001f62:	d000      	beq.n	8001f66 <HAL_ADC_ConfigChannel+0x126>
 8001f64:	e062      	b.n	800202c <HAL_ADC_ConfigChannel+0x1ec>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d000      	beq.n	8001f74 <HAL_ADC_ConfigChannel+0x134>
 8001f72:	e059      	b.n	8002028 <HAL_ADC_ConfigChannel+0x1e8>
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	@ 0x80
 8001f7a:	015b      	lsls	r3, r3, #5
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d151      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x1e4>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	2380      	movs	r3, #128	@ 0x80
 8001f86:	019b      	lsls	r3, r3, #6
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d149      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1e0>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	@ 0x80
 8001f92:	01db      	lsls	r3, r3, #7
 8001f94:	4013      	ands	r3, r2
 8001f96:	d141      	bne.n	800201c <HAL_ADC_ConfigChannel+0x1dc>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2380      	movs	r3, #128	@ 0x80
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d139      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x1d8>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	@ 0x80
 8001faa:	025b      	lsls	r3, r3, #9
 8001fac:	4013      	ands	r3, r2
 8001fae:	d131      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x1d4>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	029b      	lsls	r3, r3, #10
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d129      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x1d0>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	02db      	lsls	r3, r3, #11
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d121      	bne.n	800200c <HAL_ADC_ConfigChannel+0x1cc>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	@ 0x80
 8001fce:	031b      	lsls	r3, r3, #12
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d119      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1c8>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	@ 0x80
 8001fda:	035b      	lsls	r3, r3, #13
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d111      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1c4>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	@ 0x80
 8001fe6:	039b      	lsls	r3, r3, #14
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d109      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1c0>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	@ 0x80
 8001ff2:	03db      	lsls	r3, r3, #15
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d001      	beq.n	8001ffc <HAL_ADC_ConfigChannel+0x1bc>
 8001ff8:	2316      	movs	r3, #22
 8001ffa:	e02c      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e02a      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002000:	2315      	movs	r3, #21
 8002002:	e028      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002004:	2314      	movs	r3, #20
 8002006:	e026      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002008:	2313      	movs	r3, #19
 800200a:	e024      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 800200c:	2312      	movs	r3, #18
 800200e:	e022      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002010:	2311      	movs	r3, #17
 8002012:	e020      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002014:	2310      	movs	r3, #16
 8002016:	e01e      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002018:	230f      	movs	r3, #15
 800201a:	e01c      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 800201c:	230e      	movs	r3, #14
 800201e:	e01a      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002020:	230d      	movs	r3, #13
 8002022:	e018      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002024:	230c      	movs	r3, #12
 8002026:	e016      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002028:	230b      	movs	r3, #11
 800202a:	e014      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 800202c:	230a      	movs	r3, #10
 800202e:	e012      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002030:	2309      	movs	r3, #9
 8002032:	e010      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002034:	2308      	movs	r3, #8
 8002036:	e00e      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002038:	2307      	movs	r3, #7
 800203a:	e00c      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 800203c:	2306      	movs	r3, #6
 800203e:	e00a      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002040:	2305      	movs	r3, #5
 8002042:	e008      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002044:	2304      	movs	r3, #4
 8002046:	e006      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002048:	2303      	movs	r3, #3
 800204a:	e004      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 800204c:	2302      	movs	r3, #2
 800204e:	e002      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_ADC_ConfigChannel+0x216>
 8002054:	2300      	movs	r3, #0
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	6852      	ldr	r2, [r2, #4]
 800205a:	201f      	movs	r0, #31
 800205c:	4002      	ands	r2, r0
 800205e:	4093      	lsls	r3, r2
 8002060:	000a      	movs	r2, r1
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	429a      	cmp	r2, r3
 8002076:	d808      	bhi.n	800208a <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	001a      	movs	r2, r3
 8002086:	f7ff fbb5 	bl	80017f4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	6819      	ldr	r1, [r3, #0]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	001a      	movs	r2, r3
 8002098:	f7ff fbf0 	bl	800187c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db00      	blt.n	80020a6 <HAL_ADC_ConfigChannel+0x266>
 80020a4:	e096      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020a6:	4b3f      	ldr	r3, [pc, #252]	@ (80021a4 <HAL_ADC_ConfigChannel+0x364>)
 80020a8:	0018      	movs	r0, r3
 80020aa:	f7ff fb51 	bl	8001750 <LL_ADC_GetCommonPathInternalCh>
 80020ae:	0003      	movs	r3, r0
 80020b0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a3c      	ldr	r2, [pc, #240]	@ (80021a8 <HAL_ADC_ConfigChannel+0x368>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d123      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	2380      	movs	r3, #128	@ 0x80
 80020c0:	041b      	lsls	r3, r3, #16
 80020c2:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020c4:	d11e      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2280      	movs	r2, #128	@ 0x80
 80020ca:	0412      	lsls	r2, r2, #16
 80020cc:	4313      	orrs	r3, r2
 80020ce:	4a35      	ldr	r2, [pc, #212]	@ (80021a4 <HAL_ADC_ConfigChannel+0x364>)
 80020d0:	0019      	movs	r1, r3
 80020d2:	0010      	movs	r0, r2
 80020d4:	f7ff fb28 	bl	8001728 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80020d8:	4b34      	ldr	r3, [pc, #208]	@ (80021ac <HAL_ADC_ConfigChannel+0x36c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4934      	ldr	r1, [pc, #208]	@ (80021b0 <HAL_ADC_ConfigChannel+0x370>)
 80020de:	0018      	movs	r0, r3
 80020e0:	f7fe f812 	bl	8000108 <__udivsi3>
 80020e4:	0003      	movs	r3, r0
 80020e6:	001a      	movs	r2, r3
 80020e8:	0013      	movs	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	189b      	adds	r3, r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	3301      	adds	r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020f4:	e002      	b.n	80020fc <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	3b01      	subs	r3, #1
 80020fa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f9      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002102:	e067      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a2a      	ldr	r2, [pc, #168]	@ (80021b4 <HAL_ADC_ConfigChannel+0x374>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d162      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	03db      	lsls	r3, r3, #15
 8002114:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002116:	d15d      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2280      	movs	r2, #128	@ 0x80
 800211c:	03d2      	lsls	r2, r2, #15
 800211e:	4313      	orrs	r3, r2
 8002120:	4a20      	ldr	r2, [pc, #128]	@ (80021a4 <HAL_ADC_ConfigChannel+0x364>)
 8002122:	0019      	movs	r1, r3
 8002124:	0010      	movs	r0, r2
 8002126:	f7ff faff 	bl	8001728 <LL_ADC_SetCommonPathInternalCh>
 800212a:	e053      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	2380      	movs	r3, #128	@ 0x80
 8002132:	061b      	lsls	r3, r3, #24
 8002134:	429a      	cmp	r2, r3
 8002136:	d004      	beq.n	8002142 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800213c:	4a18      	ldr	r2, [pc, #96]	@ (80021a0 <HAL_ADC_ConfigChannel+0x360>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d107      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	0019      	movs	r1, r3
 800214c:	0010      	movs	r0, r2
 800214e:	f7ff fb82 	bl	8001856 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	da3c      	bge.n	80021d4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800215a:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <HAL_ADC_ConfigChannel+0x364>)
 800215c:	0018      	movs	r0, r3
 800215e:	f7ff faf7 	bl	8001750 <LL_ADC_GetCommonPathInternalCh>
 8002162:	0003      	movs	r3, r0
 8002164:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a0f      	ldr	r2, [pc, #60]	@ (80021a8 <HAL_ADC_ConfigChannel+0x368>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d108      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4a11      	ldr	r2, [pc, #68]	@ (80021b8 <HAL_ADC_ConfigChannel+0x378>)
 8002174:	4013      	ands	r3, r2
 8002176:	4a0b      	ldr	r2, [pc, #44]	@ (80021a4 <HAL_ADC_ConfigChannel+0x364>)
 8002178:	0019      	movs	r1, r3
 800217a:	0010      	movs	r0, r2
 800217c:	f7ff fad4 	bl	8001728 <LL_ADC_SetCommonPathInternalCh>
 8002180:	e028      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a0b      	ldr	r2, [pc, #44]	@ (80021b4 <HAL_ADC_ConfigChannel+0x374>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d123      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4a0b      	ldr	r2, [pc, #44]	@ (80021bc <HAL_ADC_ConfigChannel+0x37c>)
 8002190:	4013      	ands	r3, r2
 8002192:	4a04      	ldr	r2, [pc, #16]	@ (80021a4 <HAL_ADC_ConfigChannel+0x364>)
 8002194:	0019      	movs	r1, r3
 8002196:	0010      	movs	r0, r2
 8002198:	f7ff fac6 	bl	8001728 <LL_ADC_SetCommonPathInternalCh>
 800219c:	e01a      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x394>
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	80000004 	.word	0x80000004
 80021a4:	40012708 	.word	0x40012708
 80021a8:	a4000200 	.word	0xa4000200
 80021ac:	20000064 	.word	0x20000064
 80021b0:	00030d40 	.word	0x00030d40
 80021b4:	a8000400 	.word	0xa8000400
 80021b8:	ff7fffff 	.word	0xff7fffff
 80021bc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c4:	2220      	movs	r2, #32
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021cc:	2317      	movs	r3, #23
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	2201      	movs	r2, #1
 80021d2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2254      	movs	r2, #84	@ 0x54
 80021d8:	2100      	movs	r1, #0
 80021da:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80021dc:	2317      	movs	r3, #23
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	781b      	ldrb	r3, [r3, #0]
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b006      	add	sp, #24
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			@ (mov r8, r8)

080021ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7ff fba5 	bl	800194c <LL_ADC_IsEnabled>
 8002202:	1e03      	subs	r3, r0, #0
 8002204:	d162      	bne.n	80022cc <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4a32      	ldr	r2, [pc, #200]	@ (80022d8 <ADC_Enable+0xec>)
 800220e:	4013      	ands	r3, r2
 8002210:	d00d      	beq.n	800222e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	2210      	movs	r2, #16
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002222:	2201      	movs	r2, #1
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e04f      	b.n	80022ce <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	0018      	movs	r0, r3
 8002234:	f7ff fb66 	bl	8001904 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002238:	4b28      	ldr	r3, [pc, #160]	@ (80022dc <ADC_Enable+0xf0>)
 800223a:	0018      	movs	r0, r3
 800223c:	f7ff fa88 	bl	8001750 <LL_ADC_GetCommonPathInternalCh>
 8002240:	0002      	movs	r2, r0
 8002242:	2380      	movs	r3, #128	@ 0x80
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	4013      	ands	r3, r2
 8002248:	d00f      	beq.n	800226a <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800224a:	4b25      	ldr	r3, [pc, #148]	@ (80022e0 <ADC_Enable+0xf4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4925      	ldr	r1, [pc, #148]	@ (80022e4 <ADC_Enable+0xf8>)
 8002250:	0018      	movs	r0, r3
 8002252:	f7fd ff59 	bl	8000108 <__udivsi3>
 8002256:	0003      	movs	r3, r0
 8002258:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800225a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800225c:	e002      	b.n	8002264 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	3b01      	subs	r3, #1
 8002262:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f9      	bne.n	800225e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7e5b      	ldrb	r3, [r3, #25]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d02c      	beq.n	80022cc <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002272:	f7ff fa4f 	bl	8001714 <HAL_GetTick>
 8002276:	0003      	movs	r3, r0
 8002278:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800227a:	e020      	b.n	80022be <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff fb63 	bl	800194c <LL_ADC_IsEnabled>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d104      	bne.n	8002294 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0018      	movs	r0, r3
 8002290:	f7ff fb38 	bl	8001904 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002294:	f7ff fa3e 	bl	8001714 <HAL_GetTick>
 8002298:	0002      	movs	r2, r0
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d90d      	bls.n	80022be <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a6:	2210      	movs	r2, #16
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b2:	2201      	movs	r2, #1
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e007      	b.n	80022ce <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2201      	movs	r2, #1
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d1d7      	bne.n	800227c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b004      	add	sp, #16
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			@ (mov r8, r8)
 80022d8:	80000017 	.word	0x80000017
 80022dc:	40012708 	.word	0x40012708
 80022e0:	20000064 	.word	0x20000064
 80022e4:	00030d40 	.word	0x00030d40

080022e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fa:	2250      	movs	r2, #80	@ 0x50
 80022fc:	4013      	ands	r3, r2
 80022fe:	d141      	bne.n	8002384 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002304:	2280      	movs	r2, #128	@ 0x80
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	431a      	orrs	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0018      	movs	r0, r3
 8002314:	f7ff fa5d 	bl	80017d2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002318:	1e03      	subs	r3, r0, #0
 800231a:	d02e      	beq.n	800237a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	7e9b      	ldrb	r3, [r3, #26]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d12a      	bne.n	800237a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2208      	movs	r2, #8
 800232c:	4013      	ands	r3, r2
 800232e:	2b08      	cmp	r3, #8
 8002330:	d123      	bne.n	800237a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	0018      	movs	r0, r3
 8002338:	f7ff fb2c 	bl	8001994 <LL_ADC_REG_IsConversionOngoing>
 800233c:	1e03      	subs	r3, r0, #0
 800233e:	d110      	bne.n	8002362 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	210c      	movs	r1, #12
 800234c:	438a      	bics	r2, r1
 800234e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002354:	4a15      	ldr	r2, [pc, #84]	@ (80023ac <ADC_DMAConvCplt+0xc4>)
 8002356:	4013      	ands	r3, r2
 8002358:	2201      	movs	r2, #1
 800235a:	431a      	orrs	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002360:	e00b      	b.n	800237a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002366:	2220      	movs	r2, #32
 8002368:	431a      	orrs	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002372:	2201      	movs	r2, #1
 8002374:	431a      	orrs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	0018      	movs	r0, r3
 800237e:	f7fe f839 	bl	80003f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002382:	e00f      	b.n	80023a4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002388:	2210      	movs	r2, #16
 800238a:	4013      	ands	r3, r2
 800238c:	d004      	beq.n	8002398 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	0018      	movs	r0, r3
 8002392:	f7ff fd4d 	bl	8001e30 <HAL_ADC_ErrorCallback>
}
 8002396:	e005      	b.n	80023a4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800239c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	0010      	movs	r0, r2
 80023a2:	4798      	blx	r3
}
 80023a4:	46c0      	nop			@ (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b004      	add	sp, #16
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	fffffefe 	.word	0xfffffefe

080023b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f7ff fd2d 	bl	8001e20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023c6:	46c0      	nop			@ (mov r8, r8)
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b004      	add	sp, #16
 80023cc:	bd80      	pop	{r7, pc}

080023ce <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023da:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e0:	2240      	movs	r2, #64	@ 0x40
 80023e2:	431a      	orrs	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ec:	2204      	movs	r2, #4
 80023ee:	431a      	orrs	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	0018      	movs	r0, r3
 80023f8:	f7ff fd1a 	bl	8001e30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023fc:	46c0      	nop			@ (mov r8, r8)
 80023fe:	46bd      	mov	sp, r7
 8002400:	b004      	add	sp, #16
 8002402:	bd80      	pop	{r7, pc}

08002404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	0002      	movs	r2, r0
 800240c:	1dfb      	adds	r3, r7, #7
 800240e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002410:	1dfb      	adds	r3, r7, #7
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b7f      	cmp	r3, #127	@ 0x7f
 8002416:	d809      	bhi.n	800242c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002418:	1dfb      	adds	r3, r7, #7
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	001a      	movs	r2, r3
 800241e:	231f      	movs	r3, #31
 8002420:	401a      	ands	r2, r3
 8002422:	4b04      	ldr	r3, [pc, #16]	@ (8002434 <__NVIC_EnableIRQ+0x30>)
 8002424:	2101      	movs	r1, #1
 8002426:	4091      	lsls	r1, r2
 8002428:	000a      	movs	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800242c:	46c0      	nop			@ (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	b002      	add	sp, #8
 8002432:	bd80      	pop	{r7, pc}
 8002434:	e000e100 	.word	0xe000e100

08002438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	0002      	movs	r2, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	1dfb      	adds	r3, r7, #7
 8002444:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002446:	1dfb      	adds	r3, r7, #7
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b7f      	cmp	r3, #127	@ 0x7f
 800244c:	d828      	bhi.n	80024a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800244e:	4a2f      	ldr	r2, [pc, #188]	@ (800250c <__NVIC_SetPriority+0xd4>)
 8002450:	1dfb      	adds	r3, r7, #7
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	b25b      	sxtb	r3, r3
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	33c0      	adds	r3, #192	@ 0xc0
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	589b      	ldr	r3, [r3, r2]
 800245e:	1dfa      	adds	r2, r7, #7
 8002460:	7812      	ldrb	r2, [r2, #0]
 8002462:	0011      	movs	r1, r2
 8002464:	2203      	movs	r2, #3
 8002466:	400a      	ands	r2, r1
 8002468:	00d2      	lsls	r2, r2, #3
 800246a:	21ff      	movs	r1, #255	@ 0xff
 800246c:	4091      	lsls	r1, r2
 800246e:	000a      	movs	r2, r1
 8002470:	43d2      	mvns	r2, r2
 8002472:	401a      	ands	r2, r3
 8002474:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	019b      	lsls	r3, r3, #6
 800247a:	22ff      	movs	r2, #255	@ 0xff
 800247c:	401a      	ands	r2, r3
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	0018      	movs	r0, r3
 8002484:	2303      	movs	r3, #3
 8002486:	4003      	ands	r3, r0
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800248c:	481f      	ldr	r0, [pc, #124]	@ (800250c <__NVIC_SetPriority+0xd4>)
 800248e:	1dfb      	adds	r3, r7, #7
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b25b      	sxtb	r3, r3
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	430a      	orrs	r2, r1
 8002498:	33c0      	adds	r3, #192	@ 0xc0
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800249e:	e031      	b.n	8002504 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002510 <__NVIC_SetPriority+0xd8>)
 80024a2:	1dfb      	adds	r3, r7, #7
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	0019      	movs	r1, r3
 80024a8:	230f      	movs	r3, #15
 80024aa:	400b      	ands	r3, r1
 80024ac:	3b08      	subs	r3, #8
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3306      	adds	r3, #6
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	18d3      	adds	r3, r2, r3
 80024b6:	3304      	adds	r3, #4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	1dfa      	adds	r2, r7, #7
 80024bc:	7812      	ldrb	r2, [r2, #0]
 80024be:	0011      	movs	r1, r2
 80024c0:	2203      	movs	r2, #3
 80024c2:	400a      	ands	r2, r1
 80024c4:	00d2      	lsls	r2, r2, #3
 80024c6:	21ff      	movs	r1, #255	@ 0xff
 80024c8:	4091      	lsls	r1, r2
 80024ca:	000a      	movs	r2, r1
 80024cc:	43d2      	mvns	r2, r2
 80024ce:	401a      	ands	r2, r3
 80024d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	019b      	lsls	r3, r3, #6
 80024d6:	22ff      	movs	r2, #255	@ 0xff
 80024d8:	401a      	ands	r2, r3
 80024da:	1dfb      	adds	r3, r7, #7
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	0018      	movs	r0, r3
 80024e0:	2303      	movs	r3, #3
 80024e2:	4003      	ands	r3, r0
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024e8:	4809      	ldr	r0, [pc, #36]	@ (8002510 <__NVIC_SetPriority+0xd8>)
 80024ea:	1dfb      	adds	r3, r7, #7
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	001c      	movs	r4, r3
 80024f0:	230f      	movs	r3, #15
 80024f2:	4023      	ands	r3, r4
 80024f4:	3b08      	subs	r3, #8
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	430a      	orrs	r2, r1
 80024fa:	3306      	adds	r3, #6
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	18c3      	adds	r3, r0, r3
 8002500:	3304      	adds	r3, #4
 8002502:	601a      	str	r2, [r3, #0]
}
 8002504:	46c0      	nop			@ (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b003      	add	sp, #12
 800250a:	bd90      	pop	{r4, r7, pc}
 800250c:	e000e100 	.word	0xe000e100
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	1e5a      	subs	r2, r3, #1
 8002520:	2380      	movs	r3, #128	@ 0x80
 8002522:	045b      	lsls	r3, r3, #17
 8002524:	429a      	cmp	r2, r3
 8002526:	d301      	bcc.n	800252c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002528:	2301      	movs	r3, #1
 800252a:	e010      	b.n	800254e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800252c:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <SysTick_Config+0x44>)
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	3a01      	subs	r2, #1
 8002532:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002534:	2301      	movs	r3, #1
 8002536:	425b      	negs	r3, r3
 8002538:	2103      	movs	r1, #3
 800253a:	0018      	movs	r0, r3
 800253c:	f7ff ff7c 	bl	8002438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002540:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <SysTick_Config+0x44>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <SysTick_Config+0x44>)
 8002548:	2207      	movs	r2, #7
 800254a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800254c:	2300      	movs	r3, #0
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b002      	add	sp, #8
 8002554:	bd80      	pop	{r7, pc}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	e000e010 	.word	0xe000e010

0800255c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	210f      	movs	r1, #15
 8002568:	187b      	adds	r3, r7, r1
 800256a:	1c02      	adds	r2, r0, #0
 800256c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	187b      	adds	r3, r7, r1
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b25b      	sxtb	r3, r3
 8002576:	0011      	movs	r1, r2
 8002578:	0018      	movs	r0, r3
 800257a:	f7ff ff5d 	bl	8002438 <__NVIC_SetPriority>
}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b004      	add	sp, #16
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	0002      	movs	r2, r0
 800258e:	1dfb      	adds	r3, r7, #7
 8002590:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002592:	1dfb      	adds	r3, r7, #7
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	b25b      	sxtb	r3, r3
 8002598:	0018      	movs	r0, r3
 800259a:	f7ff ff33 	bl	8002404 <__NVIC_EnableIRQ>
}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b002      	add	sp, #8
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b082      	sub	sp, #8
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f7ff ffaf 	bl	8002514 <SysTick_Config>
 80025b6:	0003      	movs	r3, r0
}
 80025b8:	0018      	movs	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b002      	add	sp, #8
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e077      	b.n	80026c2 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a3d      	ldr	r2, [pc, #244]	@ (80026cc <HAL_DMA_Init+0x10c>)
 80025d8:	4694      	mov	ip, r2
 80025da:	4463      	add	r3, ip
 80025dc:	2114      	movs	r1, #20
 80025de:	0018      	movs	r0, r3
 80025e0:	f7fd fd92 	bl	8000108 <__udivsi3>
 80025e4:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80025e6:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2225      	movs	r2, #37	@ 0x25
 80025f0:	2102      	movs	r1, #2
 80025f2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4934      	ldr	r1, [pc, #208]	@ (80026d0 <HAL_DMA_Init+0x110>)
 8002600:	400a      	ands	r2, r1
 8002602:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	431a      	orrs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	0018      	movs	r0, r3
 800263e:	f000 f9c3 	bl	80029c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	01db      	lsls	r3, r3, #7
 800264a:	429a      	cmp	r2, r3
 800264c:	d102      	bne.n	8002654 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265c:	21ff      	movs	r1, #255	@ 0xff
 800265e:	400a      	ands	r2, r1
 8002660:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800266a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d011      	beq.n	8002698 <HAL_DMA_Init+0xd8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b04      	cmp	r3, #4
 800267a:	d80d      	bhi.n	8002698 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	0018      	movs	r0, r3
 8002680:	f000 f9ce 	bl	8002a20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	e008      	b.n	80026aa <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2225      	movs	r2, #37	@ 0x25
 80026b4:	2101      	movs	r1, #1
 80026b6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2224      	movs	r2, #36	@ 0x24
 80026bc:	2100      	movs	r1, #0
 80026be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	0018      	movs	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b002      	add	sp, #8
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	bffdfff8 	.word	0xbffdfff8
 80026d0:	ffff800f 	.word	0xffff800f

080026d4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e2:	2317      	movs	r3, #23
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2224      	movs	r2, #36	@ 0x24
 80026ee:	5c9b      	ldrb	r3, [r3, r2]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_DMA_Start_IT+0x24>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e070      	b.n	80027da <HAL_DMA_Start_IT+0x106>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2224      	movs	r2, #36	@ 0x24
 80026fc:	2101      	movs	r1, #1
 80026fe:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2225      	movs	r2, #37	@ 0x25
 8002704:	5c9b      	ldrb	r3, [r3, r2]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d157      	bne.n	80027bc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2225      	movs	r2, #37	@ 0x25
 8002710:	2102      	movs	r1, #2
 8002712:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2101      	movs	r1, #1
 8002726:	438a      	bics	r2, r1
 8002728:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f909 	bl	8002948 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	2b00      	cmp	r3, #0
 800273c:	d008      	beq.n	8002750 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	210e      	movs	r1, #14
 800274a:	430a      	orrs	r2, r1
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e00f      	b.n	8002770 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2104      	movs	r1, #4
 800275c:	438a      	bics	r2, r1
 800275e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	210a      	movs	r1, #10
 800276c:	430a      	orrs	r2, r1
 800276e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	2380      	movs	r3, #128	@ 0x80
 8002778:	025b      	lsls	r3, r3, #9
 800277a:	4013      	ands	r3, r2
 800277c:	d008      	beq.n	8002790 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002788:	2180      	movs	r1, #128	@ 0x80
 800278a:	0049      	lsls	r1, r1, #1
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a2:	2180      	movs	r1, #128	@ 0x80
 80027a4:	0049      	lsls	r1, r1, #1
 80027a6:	430a      	orrs	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2101      	movs	r1, #1
 80027b6:	430a      	orrs	r2, r1
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e007      	b.n	80027cc <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2224      	movs	r2, #36	@ 0x24
 80027c0:	2100      	movs	r1, #0
 80027c2:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027c4:	2317      	movs	r3, #23
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2202      	movs	r2, #2
 80027ca:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2224      	movs	r2, #36	@ 0x24
 80027d0:	2100      	movs	r1, #0
 80027d2:	5499      	strb	r1, [r3, r2]

  return status;
 80027d4:	2317      	movs	r3, #23
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	781b      	ldrb	r3, [r3, #0]
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b006      	add	sp, #24
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80027ec:	4b55      	ldr	r3, [pc, #340]	@ (8002944 <HAL_DMA_IRQHandler+0x160>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	221c      	movs	r2, #28
 8002800:	4013      	ands	r3, r2
 8002802:	2204      	movs	r2, #4
 8002804:	409a      	lsls	r2, r3
 8002806:	0013      	movs	r3, r2
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4013      	ands	r3, r2
 800280c:	d027      	beq.n	800285e <HAL_DMA_IRQHandler+0x7a>
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2204      	movs	r2, #4
 8002812:	4013      	ands	r3, r2
 8002814:	d023      	beq.n	800285e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2220      	movs	r2, #32
 800281e:	4013      	ands	r3, r2
 8002820:	d107      	bne.n	8002832 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2104      	movs	r1, #4
 800282e:	438a      	bics	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002832:	4b44      	ldr	r3, [pc, #272]	@ (8002944 <HAL_DMA_IRQHandler+0x160>)
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	221c      	movs	r2, #28
 800283c:	4013      	ands	r3, r2
 800283e:	2204      	movs	r2, #4
 8002840:	409a      	lsls	r2, r3
 8002842:	4b40      	ldr	r3, [pc, #256]	@ (8002944 <HAL_DMA_IRQHandler+0x160>)
 8002844:	430a      	orrs	r2, r1
 8002846:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284c:	2b00      	cmp	r3, #0
 800284e:	d100      	bne.n	8002852 <HAL_DMA_IRQHandler+0x6e>
 8002850:	e073      	b.n	800293a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	0010      	movs	r0, r2
 800285a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800285c:	e06d      	b.n	800293a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	221c      	movs	r2, #28
 8002864:	4013      	ands	r3, r2
 8002866:	2202      	movs	r2, #2
 8002868:	409a      	lsls	r2, r3
 800286a:	0013      	movs	r3, r2
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	4013      	ands	r3, r2
 8002870:	d02e      	beq.n	80028d0 <HAL_DMA_IRQHandler+0xec>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2202      	movs	r2, #2
 8002876:	4013      	ands	r3, r2
 8002878:	d02a      	beq.n	80028d0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2220      	movs	r2, #32
 8002882:	4013      	ands	r3, r2
 8002884:	d10b      	bne.n	800289e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	210a      	movs	r1, #10
 8002892:	438a      	bics	r2, r1
 8002894:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2225      	movs	r2, #37	@ 0x25
 800289a:	2101      	movs	r1, #1
 800289c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800289e:	4b29      	ldr	r3, [pc, #164]	@ (8002944 <HAL_DMA_IRQHandler+0x160>)
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	221c      	movs	r2, #28
 80028a8:	4013      	ands	r3, r2
 80028aa:	2202      	movs	r2, #2
 80028ac:	409a      	lsls	r2, r3
 80028ae:	4b25      	ldr	r3, [pc, #148]	@ (8002944 <HAL_DMA_IRQHandler+0x160>)
 80028b0:	430a      	orrs	r2, r1
 80028b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2224      	movs	r2, #36	@ 0x24
 80028b8:	2100      	movs	r1, #0
 80028ba:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d03a      	beq.n	800293a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	0010      	movs	r0, r2
 80028cc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80028ce:	e034      	b.n	800293a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d4:	221c      	movs	r2, #28
 80028d6:	4013      	ands	r3, r2
 80028d8:	2208      	movs	r2, #8
 80028da:	409a      	lsls	r2, r3
 80028dc:	0013      	movs	r3, r2
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4013      	ands	r3, r2
 80028e2:	d02b      	beq.n	800293c <HAL_DMA_IRQHandler+0x158>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2208      	movs	r2, #8
 80028e8:	4013      	ands	r3, r2
 80028ea:	d027      	beq.n	800293c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	210e      	movs	r1, #14
 80028f8:	438a      	bics	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80028fc:	4b11      	ldr	r3, [pc, #68]	@ (8002944 <HAL_DMA_IRQHandler+0x160>)
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	221c      	movs	r2, #28
 8002906:	4013      	ands	r3, r2
 8002908:	2201      	movs	r2, #1
 800290a:	409a      	lsls	r2, r3
 800290c:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <HAL_DMA_IRQHandler+0x160>)
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2225      	movs	r2, #37	@ 0x25
 800291c:	2101      	movs	r1, #1
 800291e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2224      	movs	r2, #36	@ 0x24
 8002924:	2100      	movs	r1, #0
 8002926:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	0010      	movs	r0, r2
 8002938:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	46c0      	nop			@ (mov r8, r8)
}
 800293e:	46bd      	mov	sp, r7
 8002940:	b004      	add	sp, #16
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40020000 	.word	0x40020000

08002948 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800295e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002970:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002972:	4b14      	ldr	r3, [pc, #80]	@ (80029c4 <DMA_SetConfig+0x7c>)
 8002974:	6859      	ldr	r1, [r3, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	221c      	movs	r2, #28
 800297c:	4013      	ands	r3, r2
 800297e:	2201      	movs	r2, #1
 8002980:	409a      	lsls	r2, r3
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <DMA_SetConfig+0x7c>)
 8002984:	430a      	orrs	r2, r1
 8002986:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b10      	cmp	r3, #16
 8002996:	d108      	bne.n	80029aa <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029a8:	e007      	b.n	80029ba <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	60da      	str	r2, [r3, #12]
}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b004      	add	sp, #16
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	40020000 	.word	0x40020000

080029c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	001a      	movs	r2, r3
 80029d6:	23ff      	movs	r3, #255	@ 0xff
 80029d8:	4013      	ands	r3, r2
 80029da:	3b08      	subs	r3, #8
 80029dc:	2114      	movs	r1, #20
 80029de:	0018      	movs	r0, r3
 80029e0:	f7fd fb92 	bl	8000108 <__udivsi3>
 80029e4:	0003      	movs	r3, r0
 80029e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80029ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80029f0:	4694      	mov	ip, r2
 80029f2:	4463      	add	r3, ip
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	001a      	movs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a07      	ldr	r2, [pc, #28]	@ (8002a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002a00:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	221c      	movs	r2, #28
 8002a06:	4013      	ands	r3, r2
 8002a08:	2201      	movs	r2, #1
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002a10:	46c0      	nop			@ (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b004      	add	sp, #16
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	10008200 	.word	0x10008200
 8002a1c:	40020880 	.word	0x40020880

08002a20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	22ff      	movs	r2, #255	@ 0xff
 8002a2e:	4013      	ands	r3, r2
 8002a30:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4a0a      	ldr	r2, [pc, #40]	@ (8002a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002a36:	4694      	mov	ip, r2
 8002a38:	4463      	add	r3, ip
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	001a      	movs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a07      	ldr	r2, [pc, #28]	@ (8002a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002a46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2201      	movs	r2, #1
 8002a52:	409a      	lsls	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002a58:	46c0      	nop			@ (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b004      	add	sp, #16
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	1000823f 	.word	0x1000823f
 8002a64:	40020940 	.word	0x40020940

08002a68 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a76:	e153      	b.n	8002d20 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4091      	lsls	r1, r2
 8002a82:	000a      	movs	r2, r1
 8002a84:	4013      	ands	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d100      	bne.n	8002a90 <HAL_GPIO_Init+0x28>
 8002a8e:	e144      	b.n	8002d1a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x38>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b12      	cmp	r3, #18
 8002a9e:	d125      	bne.n	8002aec <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	08da      	lsrs	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3208      	adds	r2, #8
 8002aa8:	0092      	lsls	r2, r2, #2
 8002aaa:	58d3      	ldr	r3, [r2, r3]
 8002aac:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	0013      	movs	r3, r2
 8002abc:	43da      	mvns	r2, r3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	220f      	movs	r2, #15
 8002aca:	401a      	ands	r2, r3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2107      	movs	r1, #7
 8002ad0:	400b      	ands	r3, r1
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	0013      	movs	r3, r2
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	08da      	lsrs	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3208      	adds	r2, #8
 8002ae6:	0092      	lsls	r2, r2, #2
 8002ae8:	6979      	ldr	r1, [r7, #20]
 8002aea:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	2203      	movs	r2, #3
 8002af8:	409a      	lsls	r2, r3
 8002afa:	0013      	movs	r3, r2
 8002afc:	43da      	mvns	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	4013      	ands	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	409a      	lsls	r2, r3
 8002b12:	0013      	movs	r3, r2
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d00b      	beq.n	8002b40 <HAL_GPIO_Init+0xd8>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d007      	beq.n	8002b40 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b34:	2b11      	cmp	r3, #17
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b12      	cmp	r3, #18
 8002b3e:	d130      	bne.n	8002ba2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	409a      	lsls	r2, r3
 8002b4e:	0013      	movs	r3, r2
 8002b50:	43da      	mvns	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	4013      	ands	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	409a      	lsls	r2, r3
 8002b62:	0013      	movs	r3, r2
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b76:	2201      	movs	r2, #1
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	0013      	movs	r3, r2
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	4013      	ands	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	401a      	ands	r2, r3
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	409a      	lsls	r2, r3
 8002b94:	0013      	movs	r3, r2
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d017      	beq.n	8002bda <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	0013      	movs	r3, r2
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	055b      	lsls	r3, r3, #21
 8002be2:	4013      	ands	r3, r2
 8002be4:	d100      	bne.n	8002be8 <HAL_GPIO_Init+0x180>
 8002be6:	e098      	b.n	8002d1a <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002be8:	4a53      	ldr	r2, [pc, #332]	@ (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3318      	adds	r3, #24
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	589b      	ldr	r3, [r3, r2]
 8002bf4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	220f      	movs	r2, #15
 8002c00:	409a      	lsls	r2, r3
 8002c02:	0013      	movs	r3, r2
 8002c04:	43da      	mvns	r2, r3
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	23a0      	movs	r3, #160	@ 0xa0
 8002c10:	05db      	lsls	r3, r3, #23
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d019      	beq.n	8002c4a <HAL_GPIO_Init+0x1e2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a48      	ldr	r2, [pc, #288]	@ (8002d3c <HAL_GPIO_Init+0x2d4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_GPIO_Init+0x1de>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a47      	ldr	r2, [pc, #284]	@ (8002d40 <HAL_GPIO_Init+0x2d8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00d      	beq.n	8002c42 <HAL_GPIO_Init+0x1da>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a46      	ldr	r2, [pc, #280]	@ (8002d44 <HAL_GPIO_Init+0x2dc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0x1d6>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a45      	ldr	r2, [pc, #276]	@ (8002d48 <HAL_GPIO_Init+0x2e0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_GPIO_Init+0x1d2>
 8002c36:	2305      	movs	r3, #5
 8002c38:	e008      	b.n	8002c4c <HAL_GPIO_Init+0x1e4>
 8002c3a:	2306      	movs	r3, #6
 8002c3c:	e006      	b.n	8002c4c <HAL_GPIO_Init+0x1e4>
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e004      	b.n	8002c4c <HAL_GPIO_Init+0x1e4>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e002      	b.n	8002c4c <HAL_GPIO_Init+0x1e4>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_GPIO_Init+0x1e4>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	2103      	movs	r1, #3
 8002c50:	400a      	ands	r2, r1
 8002c52:	00d2      	lsls	r2, r2, #3
 8002c54:	4093      	lsls	r3, r2
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002c5c:	4936      	ldr	r1, [pc, #216]	@ (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	089b      	lsrs	r3, r3, #2
 8002c62:	3318      	adds	r3, #24
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002c6a:	4a33      	ldr	r2, [pc, #204]	@ (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	58d3      	ldr	r3, [r2, r3]
 8002c70:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	43da      	mvns	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	2380      	movs	r3, #128	@ 0x80
 8002c82:	025b      	lsls	r3, r3, #9
 8002c84:	4013      	ands	r3, r2
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002c90:	4929      	ldr	r1, [pc, #164]	@ (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002c92:	2280      	movs	r2, #128	@ 0x80
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002c98:	4a27      	ldr	r2, [pc, #156]	@ (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002c9a:	2384      	movs	r3, #132	@ 0x84
 8002c9c:	58d3      	ldr	r3, [r2, r3]
 8002c9e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	43da      	mvns	r2, r3
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	2380      	movs	r3, #128	@ 0x80
 8002cb0:	029b      	lsls	r3, r3, #10
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002cbe:	491e      	ldr	r1, [pc, #120]	@ (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002cc0:	2284      	movs	r2, #132	@ 0x84
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	2380      	movs	r3, #128	@ 0x80
 8002cdc:	035b      	lsls	r3, r3, #13
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002cea:	4b13      	ldr	r3, [pc, #76]	@ (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002cf0:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	2380      	movs	r3, #128	@ 0x80
 8002d06:	039b      	lsls	r3, r3, #14
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002d14:	4b08      	ldr	r3, [pc, #32]	@ (8002d38 <HAL_GPIO_Init+0x2d0>)
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	40da      	lsrs	r2, r3
 8002d28:	1e13      	subs	r3, r2, #0
 8002d2a:	d000      	beq.n	8002d2e <HAL_GPIO_Init+0x2c6>
 8002d2c:	e6a4      	b.n	8002a78 <HAL_GPIO_Init+0x10>
  }
}
 8002d2e:	46c0      	nop			@ (mov r8, r8)
 8002d30:	46c0      	nop			@ (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b006      	add	sp, #24
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021800 	.word	0x40021800
 8002d3c:	50000400 	.word	0x50000400
 8002d40:	50000800 	.word	0x50000800
 8002d44:	50000c00 	.word	0x50000c00
 8002d48:	50001400 	.word	0x50001400

08002d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	0008      	movs	r0, r1
 8002d56:	0011      	movs	r1, r2
 8002d58:	1cbb      	adds	r3, r7, #2
 8002d5a:	1c02      	adds	r2, r0, #0
 8002d5c:	801a      	strh	r2, [r3, #0]
 8002d5e:	1c7b      	adds	r3, r7, #1
 8002d60:	1c0a      	adds	r2, r1, #0
 8002d62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d64:	1c7b      	adds	r3, r7, #1
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d004      	beq.n	8002d76 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d6c:	1cbb      	adds	r3, r7, #2
 8002d6e:	881a      	ldrh	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d74:	e003      	b.n	8002d7e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d76:	1cbb      	adds	r3, r7, #2
 8002d78:	881a      	ldrh	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d7e:	46c0      	nop			@ (mov r8, r8)
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b002      	add	sp, #8
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e08f      	b.n	8002eba <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2241      	movs	r2, #65	@ 0x41
 8002d9e:	5c9b      	ldrb	r3, [r3, r2]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d107      	bne.n	8002db6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2240      	movs	r2, #64	@ 0x40
 8002daa:	2100      	movs	r1, #0
 8002dac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7fe f9ef 	bl	8001194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2241      	movs	r2, #65	@ 0x41
 8002dba:	2124      	movs	r1, #36	@ 0x24
 8002dbc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	438a      	bics	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	493b      	ldr	r1, [pc, #236]	@ (8002ec4 <HAL_I2C_Init+0x13c>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4938      	ldr	r1, [pc, #224]	@ (8002ec8 <HAL_I2C_Init+0x140>)
 8002de8:	400a      	ands	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d108      	bne.n	8002e06 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2180      	movs	r1, #128	@ 0x80
 8002dfe:	0209      	lsls	r1, r1, #8
 8002e00:	430a      	orrs	r2, r1
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	e007      	b.n	8002e16 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2184      	movs	r1, #132	@ 0x84
 8002e10:	0209      	lsls	r1, r1, #8
 8002e12:	430a      	orrs	r2, r1
 8002e14:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d109      	bne.n	8002e32 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2180      	movs	r1, #128	@ 0x80
 8002e2a:	0109      	lsls	r1, r1, #4
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	e007      	b.n	8002e42 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4923      	ldr	r1, [pc, #140]	@ (8002ecc <HAL_I2C_Init+0x144>)
 8002e3e:	400a      	ands	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4920      	ldr	r1, [pc, #128]	@ (8002ed0 <HAL_I2C_Init+0x148>)
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	491a      	ldr	r1, [pc, #104]	@ (8002ec8 <HAL_I2C_Init+0x140>)
 8002e5e:	400a      	ands	r2, r1
 8002e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69d9      	ldr	r1, [r3, #28]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2101      	movs	r1, #1
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2241      	movs	r2, #65	@ 0x41
 8002ea6:	2120      	movs	r1, #32
 8002ea8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2242      	movs	r2, #66	@ 0x42
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	0018      	movs	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b002      	add	sp, #8
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			@ (mov r8, r8)
 8002ec4:	f0ffffff 	.word	0xf0ffffff
 8002ec8:	ffff7fff 	.word	0xffff7fff
 8002ecc:	fffff7ff 	.word	0xfffff7ff
 8002ed0:	02008000 	.word	0x02008000

08002ed4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2241      	movs	r2, #65	@ 0x41
 8002ee2:	5c9b      	ldrb	r3, [r3, r2]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d138      	bne.n	8002f5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2240      	movs	r2, #64	@ 0x40
 8002eee:	5c9b      	ldrb	r3, [r3, r2]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e032      	b.n	8002f5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2240      	movs	r2, #64	@ 0x40
 8002efc:	2101      	movs	r1, #1
 8002efe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2241      	movs	r2, #65	@ 0x41
 8002f04:	2124      	movs	r1, #36	@ 0x24
 8002f06:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2101      	movs	r1, #1
 8002f14:	438a      	bics	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4911      	ldr	r1, [pc, #68]	@ (8002f68 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002f24:	400a      	ands	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6819      	ldr	r1, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2101      	movs	r1, #1
 8002f44:	430a      	orrs	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2241      	movs	r2, #65	@ 0x41
 8002f4c:	2120      	movs	r1, #32
 8002f4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2240      	movs	r2, #64	@ 0x40
 8002f54:	2100      	movs	r1, #0
 8002f56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e000      	b.n	8002f5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
  }
}
 8002f5e:	0018      	movs	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b002      	add	sp, #8
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	ffffefff 	.word	0xffffefff

08002f6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2241      	movs	r2, #65	@ 0x41
 8002f7a:	5c9b      	ldrb	r3, [r3, r2]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d139      	bne.n	8002ff6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2240      	movs	r2, #64	@ 0x40
 8002f86:	5c9b      	ldrb	r3, [r3, r2]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e033      	b.n	8002ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2240      	movs	r2, #64	@ 0x40
 8002f94:	2101      	movs	r1, #1
 8002f96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2241      	movs	r2, #65	@ 0x41
 8002f9c:	2124      	movs	r1, #36	@ 0x24
 8002f9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2101      	movs	r1, #1
 8002fac:	438a      	bics	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4a11      	ldr	r2, [pc, #68]	@ (8003000 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2241      	movs	r2, #65	@ 0x41
 8002fe6:	2120      	movs	r1, #32
 8002fe8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2240      	movs	r2, #64	@ 0x40
 8002fee:	2100      	movs	r1, #0
 8002ff0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e000      	b.n	8002ff8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ff6:	2302      	movs	r3, #2
  }
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b004      	add	sp, #16
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	fffff0ff 	.word	0xfffff0ff

08003004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e20f      	b.n	8003436 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2201      	movs	r2, #1
 800301c:	4013      	ands	r3, r2
 800301e:	d100      	bne.n	8003022 <HAL_RCC_OscConfig+0x1e>
 8003020:	e069      	b.n	80030f6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003022:	4bc8      	ldr	r3, [pc, #800]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	2238      	movs	r2, #56	@ 0x38
 8003028:	4013      	ands	r3, r2
 800302a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b08      	cmp	r3, #8
 8003030:	d105      	bne.n	800303e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d15d      	bne.n	80030f6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e1fb      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	2380      	movs	r3, #128	@ 0x80
 8003044:	025b      	lsls	r3, r3, #9
 8003046:	429a      	cmp	r2, r3
 8003048:	d107      	bne.n	800305a <HAL_RCC_OscConfig+0x56>
 800304a:	4bbe      	ldr	r3, [pc, #760]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4bbd      	ldr	r3, [pc, #756]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003050:	2180      	movs	r1, #128	@ 0x80
 8003052:	0249      	lsls	r1, r1, #9
 8003054:	430a      	orrs	r2, r1
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e020      	b.n	800309c <HAL_RCC_OscConfig+0x98>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	23a0      	movs	r3, #160	@ 0xa0
 8003060:	02db      	lsls	r3, r3, #11
 8003062:	429a      	cmp	r2, r3
 8003064:	d10e      	bne.n	8003084 <HAL_RCC_OscConfig+0x80>
 8003066:	4bb7      	ldr	r3, [pc, #732]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4bb6      	ldr	r3, [pc, #728]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 800306c:	2180      	movs	r1, #128	@ 0x80
 800306e:	02c9      	lsls	r1, r1, #11
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	4bb3      	ldr	r3, [pc, #716]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4bb2      	ldr	r3, [pc, #712]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 800307a:	2180      	movs	r1, #128	@ 0x80
 800307c:	0249      	lsls	r1, r1, #9
 800307e:	430a      	orrs	r2, r1
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	e00b      	b.n	800309c <HAL_RCC_OscConfig+0x98>
 8003084:	4baf      	ldr	r3, [pc, #700]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4bae      	ldr	r3, [pc, #696]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 800308a:	49af      	ldr	r1, [pc, #700]	@ (8003348 <HAL_RCC_OscConfig+0x344>)
 800308c:	400a      	ands	r2, r1
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	4bac      	ldr	r3, [pc, #688]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4bab      	ldr	r3, [pc, #684]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003096:	49ad      	ldr	r1, [pc, #692]	@ (800334c <HAL_RCC_OscConfig+0x348>)
 8003098:	400a      	ands	r2, r1
 800309a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d014      	beq.n	80030ce <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fe fb36 	bl	8001714 <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80030ae:	f7fe fb31 	bl	8001714 <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b64      	cmp	r3, #100	@ 0x64
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e1ba      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030c0:	4ba0      	ldr	r3, [pc, #640]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	2380      	movs	r3, #128	@ 0x80
 80030c6:	029b      	lsls	r3, r3, #10
 80030c8:	4013      	ands	r3, r2
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0xaa>
 80030cc:	e013      	b.n	80030f6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fe fb21 	bl	8001714 <HAL_GetTick>
 80030d2:	0003      	movs	r3, r0
 80030d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80030d8:	f7fe fb1c 	bl	8001714 <HAL_GetTick>
 80030dc:	0002      	movs	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	@ 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e1a5      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ea:	4b96      	ldr	r3, [pc, #600]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	2380      	movs	r3, #128	@ 0x80
 80030f0:	029b      	lsls	r3, r3, #10
 80030f2:	4013      	ands	r3, r2
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2202      	movs	r2, #2
 80030fc:	4013      	ands	r3, r2
 80030fe:	d100      	bne.n	8003102 <HAL_RCC_OscConfig+0xfe>
 8003100:	e086      	b.n	8003210 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003102:	4b90      	ldr	r3, [pc, #576]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2238      	movs	r2, #56	@ 0x38
 8003108:	4013      	ands	r3, r2
 800310a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d12f      	bne.n	8003172 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e18b      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800311e:	4b89      	ldr	r3, [pc, #548]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4a8b      	ldr	r2, [pc, #556]	@ (8003350 <HAL_RCC_OscConfig+0x34c>)
 8003124:	4013      	ands	r3, r2
 8003126:	0019      	movs	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	021a      	lsls	r2, r3, #8
 800312e:	4b85      	ldr	r3, [pc, #532]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003130:	430a      	orrs	r2, r1
 8003132:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d112      	bne.n	8003160 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800313a:	4b82      	ldr	r3, [pc, #520]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a85      	ldr	r2, [pc, #532]	@ (8003354 <HAL_RCC_OscConfig+0x350>)
 8003140:	4013      	ands	r3, r2
 8003142:	0019      	movs	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	4b7e      	ldr	r3, [pc, #504]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 800314a:	430a      	orrs	r2, r1
 800314c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800314e:	4b7d      	ldr	r3, [pc, #500]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	0adb      	lsrs	r3, r3, #11
 8003154:	2207      	movs	r2, #7
 8003156:	4013      	ands	r3, r2
 8003158:	4a7f      	ldr	r2, [pc, #508]	@ (8003358 <HAL_RCC_OscConfig+0x354>)
 800315a:	40da      	lsrs	r2, r3
 800315c:	4b7f      	ldr	r3, [pc, #508]	@ (800335c <HAL_RCC_OscConfig+0x358>)
 800315e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003160:	4b7f      	ldr	r3, [pc, #508]	@ (8003360 <HAL_RCC_OscConfig+0x35c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	0018      	movs	r0, r3
 8003166:	f7fe fa79 	bl	800165c <HAL_InitTick>
 800316a:	1e03      	subs	r3, r0, #0
 800316c:	d050      	beq.n	8003210 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e161      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d030      	beq.n	80031dc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800317a:	4b72      	ldr	r3, [pc, #456]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a75      	ldr	r2, [pc, #468]	@ (8003354 <HAL_RCC_OscConfig+0x350>)
 8003180:	4013      	ands	r3, r2
 8003182:	0019      	movs	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	4b6e      	ldr	r3, [pc, #440]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800318e:	4b6d      	ldr	r3, [pc, #436]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4b6c      	ldr	r3, [pc, #432]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003194:	2180      	movs	r1, #128	@ 0x80
 8003196:	0049      	lsls	r1, r1, #1
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe faba 	bl	8001714 <HAL_GetTick>
 80031a0:	0003      	movs	r3, r0
 80031a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80031a6:	f7fe fab5 	bl	8001714 <HAL_GetTick>
 80031aa:	0002      	movs	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e13e      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b8:	4b62      	ldr	r3, [pc, #392]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	2380      	movs	r3, #128	@ 0x80
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4013      	ands	r3, r2
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b5f      	ldr	r3, [pc, #380]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4a61      	ldr	r2, [pc, #388]	@ (8003350 <HAL_RCC_OscConfig+0x34c>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	021a      	lsls	r2, r3, #8
 80031d4:	4b5b      	ldr	r3, [pc, #364]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	e019      	b.n	8003210 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80031dc:	4b59      	ldr	r3, [pc, #356]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b58      	ldr	r3, [pc, #352]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 80031e2:	4960      	ldr	r1, [pc, #384]	@ (8003364 <HAL_RCC_OscConfig+0x360>)
 80031e4:	400a      	ands	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fe fa94 	bl	8001714 <HAL_GetTick>
 80031ec:	0003      	movs	r3, r0
 80031ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80031f2:	f7fe fa8f 	bl	8001714 <HAL_GetTick>
 80031f6:	0002      	movs	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e118      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003204:	4b4f      	ldr	r3, [pc, #316]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	2380      	movs	r3, #128	@ 0x80
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4013      	ands	r3, r2
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2208      	movs	r2, #8
 8003216:	4013      	ands	r3, r2
 8003218:	d042      	beq.n	80032a0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800321a:	4b4a      	ldr	r3, [pc, #296]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	2238      	movs	r2, #56	@ 0x38
 8003220:	4013      	ands	r3, r2
 8003222:	2b18      	cmp	r3, #24
 8003224:	d105      	bne.n	8003232 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d138      	bne.n	80032a0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e101      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d019      	beq.n	800326e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800323a:	4b42      	ldr	r3, [pc, #264]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 800323c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800323e:	4b41      	ldr	r3, [pc, #260]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003240:	2101      	movs	r1, #1
 8003242:	430a      	orrs	r2, r1
 8003244:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fe fa65 	bl	8001714 <HAL_GetTick>
 800324a:	0003      	movs	r3, r0
 800324c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003250:	f7fe fa60 	bl	8001714 <HAL_GetTick>
 8003254:	0002      	movs	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e0e9      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003262:	4b38      	ldr	r3, [pc, #224]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003266:	2202      	movs	r2, #2
 8003268:	4013      	ands	r3, r2
 800326a:	d0f1      	beq.n	8003250 <HAL_RCC_OscConfig+0x24c>
 800326c:	e018      	b.n	80032a0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800326e:	4b35      	ldr	r3, [pc, #212]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003270:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003272:	4b34      	ldr	r3, [pc, #208]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003274:	2101      	movs	r1, #1
 8003276:	438a      	bics	r2, r1
 8003278:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7fe fa4b 	bl	8001714 <HAL_GetTick>
 800327e:	0003      	movs	r3, r0
 8003280:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003284:	f7fe fa46 	bl	8001714 <HAL_GetTick>
 8003288:	0002      	movs	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e0cf      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003296:	4b2b      	ldr	r3, [pc, #172]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329a:	2202      	movs	r2, #2
 800329c:	4013      	ands	r3, r2
 800329e:	d1f1      	bne.n	8003284 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2204      	movs	r2, #4
 80032a6:	4013      	ands	r3, r2
 80032a8:	d100      	bne.n	80032ac <HAL_RCC_OscConfig+0x2a8>
 80032aa:	e084      	b.n	80033b6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ac:	230f      	movs	r3, #15
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80032b4:	4b23      	ldr	r3, [pc, #140]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2238      	movs	r2, #56	@ 0x38
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b20      	cmp	r3, #32
 80032be:	d106      	bne.n	80032ce <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d000      	beq.n	80032ca <HAL_RCC_OscConfig+0x2c6>
 80032c8:	e075      	b.n	80033b6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0b3      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d106      	bne.n	80032e4 <HAL_RCC_OscConfig+0x2e0>
 80032d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 80032d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032da:	4b1a      	ldr	r3, [pc, #104]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 80032dc:	2101      	movs	r1, #1
 80032de:	430a      	orrs	r2, r1
 80032e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032e2:	e01c      	b.n	800331e <HAL_RCC_OscConfig+0x31a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b05      	cmp	r3, #5
 80032ea:	d10c      	bne.n	8003306 <HAL_RCC_OscConfig+0x302>
 80032ec:	4b15      	ldr	r3, [pc, #84]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 80032ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032f0:	4b14      	ldr	r3, [pc, #80]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 80032f2:	2104      	movs	r1, #4
 80032f4:	430a      	orrs	r2, r1
 80032f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80032f8:	4b12      	ldr	r3, [pc, #72]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 80032fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032fc:	4b11      	ldr	r3, [pc, #68]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 80032fe:	2101      	movs	r1, #1
 8003300:	430a      	orrs	r2, r1
 8003302:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003304:	e00b      	b.n	800331e <HAL_RCC_OscConfig+0x31a>
 8003306:	4b0f      	ldr	r3, [pc, #60]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003308:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800330a:	4b0e      	ldr	r3, [pc, #56]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 800330c:	2101      	movs	r1, #1
 800330e:	438a      	bics	r2, r1
 8003310:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003312:	4b0c      	ldr	r3, [pc, #48]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003314:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003316:	4b0b      	ldr	r3, [pc, #44]	@ (8003344 <HAL_RCC_OscConfig+0x340>)
 8003318:	2104      	movs	r1, #4
 800331a:	438a      	bics	r2, r1
 800331c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d028      	beq.n	8003378 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003326:	f7fe f9f5 	bl	8001714 <HAL_GetTick>
 800332a:	0003      	movs	r3, r0
 800332c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800332e:	e01d      	b.n	800336c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003330:	f7fe f9f0 	bl	8001714 <HAL_GetTick>
 8003334:	0002      	movs	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	4a0b      	ldr	r2, [pc, #44]	@ (8003368 <HAL_RCC_OscConfig+0x364>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d915      	bls.n	800336c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e078      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
 8003344:	40021000 	.word	0x40021000
 8003348:	fffeffff 	.word	0xfffeffff
 800334c:	fffbffff 	.word	0xfffbffff
 8003350:	ffff80ff 	.word	0xffff80ff
 8003354:	ffffc7ff 	.word	0xffffc7ff
 8003358:	02dc6c00 	.word	0x02dc6c00
 800335c:	20000064 	.word	0x20000064
 8003360:	20000068 	.word	0x20000068
 8003364:	fffffeff 	.word	0xfffffeff
 8003368:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800336c:	4b34      	ldr	r3, [pc, #208]	@ (8003440 <HAL_RCC_OscConfig+0x43c>)
 800336e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003370:	2202      	movs	r2, #2
 8003372:	4013      	ands	r3, r2
 8003374:	d0dc      	beq.n	8003330 <HAL_RCC_OscConfig+0x32c>
 8003376:	e013      	b.n	80033a0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe f9cc 	bl	8001714 <HAL_GetTick>
 800337c:	0003      	movs	r3, r0
 800337e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003380:	e009      	b.n	8003396 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fe f9c7 	bl	8001714 <HAL_GetTick>
 8003386:	0002      	movs	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	4a2d      	ldr	r2, [pc, #180]	@ (8003444 <HAL_RCC_OscConfig+0x440>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e04f      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003396:	4b2a      	ldr	r3, [pc, #168]	@ (8003440 <HAL_RCC_OscConfig+0x43c>)
 8003398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339a:	2202      	movs	r2, #2
 800339c:	4013      	ands	r3, r2
 800339e:	d1f0      	bne.n	8003382 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80033a0:	230f      	movs	r3, #15
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d105      	bne.n	80033b6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80033aa:	4b25      	ldr	r3, [pc, #148]	@ (8003440 <HAL_RCC_OscConfig+0x43c>)
 80033ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033ae:	4b24      	ldr	r3, [pc, #144]	@ (8003440 <HAL_RCC_OscConfig+0x43c>)
 80033b0:	4925      	ldr	r1, [pc, #148]	@ (8003448 <HAL_RCC_OscConfig+0x444>)
 80033b2:	400a      	ands	r2, r1
 80033b4:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2210      	movs	r2, #16
 80033bc:	4013      	ands	r3, r2
 80033be:	d039      	beq.n	8003434 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01b      	beq.n	8003400 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003440 <HAL_RCC_OscConfig+0x43c>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003440 <HAL_RCC_OscConfig+0x43c>)
 80033ce:	2180      	movs	r1, #128	@ 0x80
 80033d0:	03c9      	lsls	r1, r1, #15
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d6:	f7fe f99d 	bl	8001714 <HAL_GetTick>
 80033da:	0003      	movs	r3, r0
 80033dc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033e0:	f7fe f998 	bl	8001714 <HAL_GetTick>
 80033e4:	0002      	movs	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e021      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80033f2:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <HAL_RCC_OscConfig+0x43c>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	2380      	movs	r3, #128	@ 0x80
 80033f8:	041b      	lsls	r3, r3, #16
 80033fa:	4013      	ands	r3, r2
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x3dc>
 80033fe:	e019      	b.n	8003434 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003400:	4b0f      	ldr	r3, [pc, #60]	@ (8003440 <HAL_RCC_OscConfig+0x43c>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b0e      	ldr	r3, [pc, #56]	@ (8003440 <HAL_RCC_OscConfig+0x43c>)
 8003406:	4911      	ldr	r1, [pc, #68]	@ (800344c <HAL_RCC_OscConfig+0x448>)
 8003408:	400a      	ands	r2, r1
 800340a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fe f982 	bl	8001714 <HAL_GetTick>
 8003410:	0003      	movs	r3, r0
 8003412:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003416:	f7fe f97d 	bl	8001714 <HAL_GetTick>
 800341a:	0002      	movs	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e006      	b.n	8003436 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8003428:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_RCC_OscConfig+0x43c>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	2380      	movs	r3, #128	@ 0x80
 800342e:	041b      	lsls	r3, r3, #16
 8003430:	4013      	ands	r3, r2
 8003432:	d1f0      	bne.n	8003416 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b006      	add	sp, #24
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	40021000 	.word	0x40021000
 8003444:	00001388 	.word	0x00001388
 8003448:	efffffff 	.word	0xefffffff
 800344c:	ffbfffff 	.word	0xffbfffff

08003450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0f6      	b.n	8003652 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003464:	4b7d      	ldr	r3, [pc, #500]	@ (800365c <HAL_RCC_ClockConfig+0x20c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2207      	movs	r2, #7
 800346a:	4013      	ands	r3, r2
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d91e      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b7a      	ldr	r3, [pc, #488]	@ (800365c <HAL_RCC_ClockConfig+0x20c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2207      	movs	r2, #7
 8003478:	4393      	bics	r3, r2
 800347a:	0019      	movs	r1, r3
 800347c:	4b77      	ldr	r3, [pc, #476]	@ (800365c <HAL_RCC_ClockConfig+0x20c>)
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003484:	f7fe f946 	bl	8001714 <HAL_GetTick>
 8003488:	0003      	movs	r3, r0
 800348a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800348c:	e009      	b.n	80034a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800348e:	f7fe f941 	bl	8001714 <HAL_GetTick>
 8003492:	0002      	movs	r2, r0
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	4a71      	ldr	r2, [pc, #452]	@ (8003660 <HAL_RCC_ClockConfig+0x210>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e0d7      	b.n	8003652 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034a2:	4b6e      	ldr	r3, [pc, #440]	@ (800365c <HAL_RCC_ClockConfig+0x20c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2207      	movs	r2, #7
 80034a8:	4013      	ands	r3, r2
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d1ee      	bne.n	800348e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2202      	movs	r2, #2
 80034b6:	4013      	ands	r3, r2
 80034b8:	d017      	beq.n	80034ea <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2204      	movs	r2, #4
 80034c0:	4013      	ands	r3, r2
 80034c2:	d008      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80034c4:	4b67      	ldr	r3, [pc, #412]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a67      	ldr	r2, [pc, #412]	@ (8003668 <HAL_RCC_ClockConfig+0x218>)
 80034ca:	401a      	ands	r2, r3
 80034cc:	4b65      	ldr	r3, [pc, #404]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 80034ce:	21b0      	movs	r1, #176	@ 0xb0
 80034d0:	0109      	lsls	r1, r1, #4
 80034d2:	430a      	orrs	r2, r1
 80034d4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d6:	4b63      	ldr	r3, [pc, #396]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	4a64      	ldr	r2, [pc, #400]	@ (800366c <HAL_RCC_ClockConfig+0x21c>)
 80034dc:	4013      	ands	r3, r2
 80034de:	0019      	movs	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	4b5f      	ldr	r3, [pc, #380]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 80034e6:	430a      	orrs	r2, r1
 80034e8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2201      	movs	r2, #1
 80034f0:	4013      	ands	r3, r2
 80034f2:	d100      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xa6>
 80034f4:	e061      	b.n	80035ba <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80034f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	221c      	movs	r2, #28
 80034fc:	4393      	bics	r3, r2
 80034fe:	0019      	movs	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	4b57      	ldr	r3, [pc, #348]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003512:	4b54      	ldr	r3, [pc, #336]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	2380      	movs	r3, #128	@ 0x80
 8003518:	029b      	lsls	r3, r3, #10
 800351a:	4013      	ands	r3, r2
 800351c:	d12b      	bne.n	8003576 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e097      	b.n	8003652 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800352a:	4b4e      	ldr	r3, [pc, #312]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	@ 0x80
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4013      	ands	r3, r2
 8003534:	d11f      	bne.n	8003576 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e08b      	b.n	8003652 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8003542:	4b48      	ldr	r3, [pc, #288]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	2380      	movs	r3, #128	@ 0x80
 8003548:	041b      	lsls	r3, r3, #16
 800354a:	4013      	ands	r3, r2
 800354c:	d113      	bne.n	8003576 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e07f      	b.n	8003652 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b03      	cmp	r3, #3
 8003558:	d106      	bne.n	8003568 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800355a:	4b42      	ldr	r3, [pc, #264]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 800355c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355e:	2202      	movs	r2, #2
 8003560:	4013      	ands	r3, r2
 8003562:	d108      	bne.n	8003576 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e074      	b.n	8003652 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003568:	4b3e      	ldr	r3, [pc, #248]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 800356a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356c:	2202      	movs	r2, #2
 800356e:	4013      	ands	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e06d      	b.n	8003652 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003576:	4b3b      	ldr	r3, [pc, #236]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2207      	movs	r2, #7
 800357c:	4393      	bics	r3, r2
 800357e:	0019      	movs	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	4b37      	ldr	r3, [pc, #220]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 8003586:	430a      	orrs	r2, r1
 8003588:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800358a:	f7fe f8c3 	bl	8001714 <HAL_GetTick>
 800358e:	0003      	movs	r3, r0
 8003590:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e009      	b.n	80035a8 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7fe f8be 	bl	8001714 <HAL_GetTick>
 8003598:	0002      	movs	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	4a30      	ldr	r2, [pc, #192]	@ (8003660 <HAL_RCC_ClockConfig+0x210>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e054      	b.n	8003652 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a8:	4b2e      	ldr	r3, [pc, #184]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2238      	movs	r2, #56	@ 0x38
 80035ae:	401a      	ands	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d1ec      	bne.n	8003594 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035ba:	4b28      	ldr	r3, [pc, #160]	@ (800365c <HAL_RCC_ClockConfig+0x20c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2207      	movs	r2, #7
 80035c0:	4013      	ands	r3, r2
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d21e      	bcs.n	8003606 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c8:	4b24      	ldr	r3, [pc, #144]	@ (800365c <HAL_RCC_ClockConfig+0x20c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2207      	movs	r2, #7
 80035ce:	4393      	bics	r3, r2
 80035d0:	0019      	movs	r1, r3
 80035d2:	4b22      	ldr	r3, [pc, #136]	@ (800365c <HAL_RCC_ClockConfig+0x20c>)
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035da:	f7fe f89b 	bl	8001714 <HAL_GetTick>
 80035de:	0003      	movs	r3, r0
 80035e0:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035e2:	e009      	b.n	80035f8 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80035e4:	f7fe f896 	bl	8001714 <HAL_GetTick>
 80035e8:	0002      	movs	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003660 <HAL_RCC_ClockConfig+0x210>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e02c      	b.n	8003652 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80035f8:	4b18      	ldr	r3, [pc, #96]	@ (800365c <HAL_RCC_ClockConfig+0x20c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2207      	movs	r2, #7
 80035fe:	4013      	ands	r3, r2
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d1ee      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2204      	movs	r2, #4
 800360c:	4013      	ands	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003610:	4b14      	ldr	r3, [pc, #80]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a16      	ldr	r2, [pc, #88]	@ (8003670 <HAL_RCC_ClockConfig+0x220>)
 8003616:	4013      	ands	r3, r2
 8003618:	0019      	movs	r1, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 8003620:	430a      	orrs	r2, r1
 8003622:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003624:	f000 f82c 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 8003628:	0001      	movs	r1, r0
 800362a:	4b0e      	ldr	r3, [pc, #56]	@ (8003664 <HAL_RCC_ClockConfig+0x214>)
 800362c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800362e:	0a1b      	lsrs	r3, r3, #8
 8003630:	220f      	movs	r2, #15
 8003632:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003634:	4b0f      	ldr	r3, [pc, #60]	@ (8003674 <HAL_RCC_ClockConfig+0x224>)
 8003636:	0092      	lsls	r2, r2, #2
 8003638:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800363a:	221f      	movs	r2, #31
 800363c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800363e:	000a      	movs	r2, r1
 8003640:	40da      	lsrs	r2, r3
 8003642:	4b0d      	ldr	r3, [pc, #52]	@ (8003678 <HAL_RCC_ClockConfig+0x228>)
 8003644:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003646:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <HAL_RCC_ClockConfig+0x22c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	0018      	movs	r0, r3
 800364c:	f7fe f806 	bl	800165c <HAL_InitTick>
 8003650:	0003      	movs	r3, r0
}
 8003652:	0018      	movs	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	b004      	add	sp, #16
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	40022000 	.word	0x40022000
 8003660:	00001388 	.word	0x00001388
 8003664:	40021000 	.word	0x40021000
 8003668:	ffff84ff 	.word	0xffff84ff
 800366c:	fffff0ff 	.word	0xfffff0ff
 8003670:	ffff8fff 	.word	0xffff8fff
 8003674:	080064b4 	.word	0x080064b4
 8003678:	20000064 	.word	0x20000064
 800367c:	20000068 	.word	0x20000068

08003680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8003686:	4b27      	ldr	r3, [pc, #156]	@ (8003724 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	2207      	movs	r2, #7
 800368e:	4013      	ands	r3, r2
 8003690:	3301      	adds	r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003694:	4b23      	ldr	r3, [pc, #140]	@ (8003724 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2238      	movs	r2, #56	@ 0x38
 800369a:	4013      	ands	r3, r2
 800369c:	d10f      	bne.n	80036be <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800369e:	4b21      	ldr	r3, [pc, #132]	@ (8003724 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	0adb      	lsrs	r3, r3, #11
 80036a4:	2207      	movs	r2, #7
 80036a6:	4013      	ands	r3, r2
 80036a8:	2201      	movs	r2, #1
 80036aa:	409a      	lsls	r2, r3
 80036ac:	0013      	movs	r3, r2
 80036ae:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	481d      	ldr	r0, [pc, #116]	@ (8003728 <HAL_RCC_GetSysClockFreq+0xa8>)
 80036b4:	f7fc fd28 	bl	8000108 <__udivsi3>
 80036b8:	0003      	movs	r3, r0
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	e027      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036be:	4b19      	ldr	r3, [pc, #100]	@ (8003724 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2238      	movs	r2, #56	@ 0x38
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d102      	bne.n	80036d0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036ca:	4b18      	ldr	r3, [pc, #96]	@ (800372c <HAL_RCC_GetSysClockFreq+0xac>)
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e01e      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80036d0:	4b14      	ldr	r3, [pc, #80]	@ (8003724 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2238      	movs	r2, #56	@ 0x38
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d103      	bne.n	80036e4 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80036dc:	2380      	movs	r3, #128	@ 0x80
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	e014      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80036e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003724 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2238      	movs	r2, #56	@ 0x38
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b18      	cmp	r3, #24
 80036ee:	d103      	bne.n	80036f8 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80036f0:	23fa      	movs	r3, #250	@ 0xfa
 80036f2:	01db      	lsls	r3, r3, #7
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	e00a      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 80036f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003724 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2238      	movs	r2, #56	@ 0x38
 80036fe:	4013      	ands	r3, r2
 8003700:	2b10      	cmp	r3, #16
 8003702:	d102      	bne.n	800370a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8003704:	4b08      	ldr	r3, [pc, #32]	@ (8003728 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e001      	b.n	800370e <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f7fc fcf9 	bl	8000108 <__udivsi3>
 8003716:	0003      	movs	r3, r0
 8003718:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800371a:	68fb      	ldr	r3, [r7, #12]
}
 800371c:	0018      	movs	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	b004      	add	sp, #16
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000
 8003728:	02dc6c00 	.word	0x02dc6c00
 800372c:	007a1200 	.word	0x007a1200

08003730 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003734:	f7ff ffa4 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 8003738:	0001      	movs	r1, r0
 800373a:	4b09      	ldr	r3, [pc, #36]	@ (8003760 <HAL_RCC_GetHCLKFreq+0x30>)
 800373c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	220f      	movs	r2, #15
 8003742:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003744:	4b07      	ldr	r3, [pc, #28]	@ (8003764 <HAL_RCC_GetHCLKFreq+0x34>)
 8003746:	0092      	lsls	r2, r2, #2
 8003748:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800374a:	221f      	movs	r2, #31
 800374c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800374e:	000a      	movs	r2, r1
 8003750:	40da      	lsrs	r2, r3
 8003752:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <HAL_RCC_GetHCLKFreq+0x38>)
 8003754:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8003756:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <HAL_RCC_GetHCLKFreq+0x38>)
 8003758:	681b      	ldr	r3, [r3, #0]
}
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40021000 	.word	0x40021000
 8003764:	080064b4 	.word	0x080064b4
 8003768:	20000064 	.word	0x20000064

0800376c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003770:	f7ff ffde 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 8003774:	0001      	movs	r1, r0
 8003776:	4b07      	ldr	r3, [pc, #28]	@ (8003794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	0b1b      	lsrs	r3, r3, #12
 800377c:	2207      	movs	r2, #7
 800377e:	401a      	ands	r2, r3
 8003780:	4b05      	ldr	r3, [pc, #20]	@ (8003798 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003782:	0092      	lsls	r2, r2, #2
 8003784:	58d3      	ldr	r3, [r2, r3]
 8003786:	221f      	movs	r2, #31
 8003788:	4013      	ands	r3, r2
 800378a:	40d9      	lsrs	r1, r3
 800378c:	000b      	movs	r3, r1
}
 800378e:	0018      	movs	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	080064f4 	.word	0x080064f4

0800379c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80037a4:	2313      	movs	r3, #19
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037ac:	2312      	movs	r3, #18
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2240      	movs	r2, #64	@ 0x40
 80037ba:	4013      	ands	r3, r2
 80037bc:	d100      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80037be:	e079      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037c0:	2011      	movs	r0, #17
 80037c2:	183b      	adds	r3, r7, r0
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037cc:	2380      	movs	r3, #128	@ 0x80
 80037ce:	055b      	lsls	r3, r3, #21
 80037d0:	4013      	ands	r3, r2
 80037d2:	d110      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d4:	4b67      	ldr	r3, [pc, #412]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d8:	4b66      	ldr	r3, [pc, #408]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037da:	2180      	movs	r1, #128	@ 0x80
 80037dc:	0549      	lsls	r1, r1, #21
 80037de:	430a      	orrs	r2, r1
 80037e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037e2:	4b64      	ldr	r3, [pc, #400]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037e6:	2380      	movs	r3, #128	@ 0x80
 80037e8:	055b      	lsls	r3, r3, #21
 80037ea:	4013      	ands	r3, r2
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037f0:	183b      	adds	r3, r7, r0
 80037f2:	2201      	movs	r2, #1
 80037f4:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80037f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037fa:	23c0      	movs	r3, #192	@ 0xc0
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4013      	ands	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d019      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	429a      	cmp	r2, r3
 8003810:	d014      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003812:	4b58      	ldr	r3, [pc, #352]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003816:	4a58      	ldr	r2, [pc, #352]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003818:	4013      	ands	r3, r2
 800381a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800381c:	4b55      	ldr	r3, [pc, #340]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800381e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003820:	4b54      	ldr	r3, [pc, #336]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003822:	2180      	movs	r1, #128	@ 0x80
 8003824:	0249      	lsls	r1, r1, #9
 8003826:	430a      	orrs	r2, r1
 8003828:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800382a:	4b52      	ldr	r3, [pc, #328]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800382c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800382e:	4b51      	ldr	r3, [pc, #324]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003830:	4952      	ldr	r1, [pc, #328]	@ (800397c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003832:	400a      	ands	r2, r1
 8003834:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003836:	4b4f      	ldr	r3, [pc, #316]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2201      	movs	r2, #1
 8003840:	4013      	ands	r3, r2
 8003842:	d016      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fd ff66 	bl	8001714 <HAL_GetTick>
 8003848:	0003      	movs	r3, r0
 800384a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800384c:	e00c      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384e:	f7fd ff61 	bl	8001714 <HAL_GetTick>
 8003852:	0002      	movs	r2, r0
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	4a49      	ldr	r2, [pc, #292]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d904      	bls.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800385e:	2313      	movs	r3, #19
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	2203      	movs	r2, #3
 8003864:	701a      	strb	r2, [r3, #0]
          break;
 8003866:	e004      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003868:	4b42      	ldr	r3, [pc, #264]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800386a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386c:	2202      	movs	r2, #2
 800386e:	4013      	ands	r3, r2
 8003870:	d0ed      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8003872:	2313      	movs	r3, #19
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10a      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800387c:	4b3d      	ldr	r3, [pc, #244]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	4a3d      	ldr	r2, [pc, #244]	@ (8003978 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003882:	4013      	ands	r3, r2
 8003884:	0019      	movs	r1, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	4b3a      	ldr	r3, [pc, #232]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800388c:	430a      	orrs	r2, r1
 800388e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003890:	e005      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003892:	2312      	movs	r3, #18
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	2213      	movs	r2, #19
 8003898:	18ba      	adds	r2, r7, r2
 800389a:	7812      	ldrb	r2, [r2, #0]
 800389c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800389e:	2311      	movs	r3, #17
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d105      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a8:	4b32      	ldr	r3, [pc, #200]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038ac:	4b31      	ldr	r3, [pc, #196]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038ae:	4935      	ldr	r1, [pc, #212]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80038b0:	400a      	ands	r2, r1
 80038b2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2201      	movs	r2, #1
 80038ba:	4013      	ands	r3, r2
 80038bc:	d009      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038be:	4b2d      	ldr	r3, [pc, #180]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c2:	2203      	movs	r2, #3
 80038c4:	4393      	bics	r3, r2
 80038c6:	0019      	movs	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	4b29      	ldr	r3, [pc, #164]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038ce:	430a      	orrs	r2, r1
 80038d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2202      	movs	r2, #2
 80038d8:	4013      	ands	r3, r2
 80038da:	d009      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038dc:	4b25      	ldr	r3, [pc, #148]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e0:	4a29      	ldr	r2, [pc, #164]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	0019      	movs	r1, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	4b22      	ldr	r3, [pc, #136]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038ec:	430a      	orrs	r2, r1
 80038ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2220      	movs	r2, #32
 80038f6:	4013      	ands	r3, r2
 80038f8:	d008      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	0899      	lsrs	r1, r3, #2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	4b1b      	ldr	r3, [pc, #108]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003908:	430a      	orrs	r2, r1
 800390a:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2208      	movs	r2, #8
 8003912:	4013      	ands	r3, r2
 8003914:	d009      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003916:	4b17      	ldr	r3, [pc, #92]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391a:	4a1c      	ldr	r2, [pc, #112]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800391c:	4013      	ands	r3, r2
 800391e:	0019      	movs	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	4b13      	ldr	r3, [pc, #76]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003926:	430a      	orrs	r2, r1
 8003928:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2204      	movs	r2, #4
 8003930:	4013      	ands	r3, r2
 8003932:	d009      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003934:	4b0f      	ldr	r3, [pc, #60]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003938:	4a15      	ldr	r2, [pc, #84]	@ (8003990 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800393a:	4013      	ands	r3, r2
 800393c:	0019      	movs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003944:	430a      	orrs	r2, r1
 8003946:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2280      	movs	r2, #128	@ 0x80
 800394e:	4013      	ands	r3, r2
 8003950:	d009      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003952:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	22e0      	movs	r2, #224	@ 0xe0
 8003958:	4393      	bics	r3, r2
 800395a:	0019      	movs	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	4b04      	ldr	r3, [pc, #16]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003962:	430a      	orrs	r2, r1
 8003964:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003966:	2312      	movs	r3, #18
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	781b      	ldrb	r3, [r3, #0]
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	b006      	add	sp, #24
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	fffffcff 	.word	0xfffffcff
 800397c:	fffeffff 	.word	0xfffeffff
 8003980:	00001388 	.word	0x00001388
 8003984:	efffffff 	.word	0xefffffff
 8003988:	ffffcfff 	.word	0xffffcfff
 800398c:	ffffefff 	.word	0xffffefff
 8003990:	ffff3fff 	.word	0xffff3fff

08003994 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e0a8      	b.n	8003af8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	2382      	movs	r3, #130	@ 0x82
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d009      	beq.n	80039ce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	61da      	str	r2, [r3, #28]
 80039c0:	e005      	b.n	80039ce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	225d      	movs	r2, #93	@ 0x5d
 80039d8:	5c9b      	ldrb	r3, [r3, r2]
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d107      	bne.n	80039f0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	225c      	movs	r2, #92	@ 0x5c
 80039e4:	2100      	movs	r1, #0
 80039e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7fd fc34 	bl	8001258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	225d      	movs	r2, #93	@ 0x5d
 80039f4:	2102      	movs	r1, #2
 80039f6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2140      	movs	r1, #64	@ 0x40
 8003a04:	438a      	bics	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	23e0      	movs	r3, #224	@ 0xe0
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d902      	bls.n	8003a1a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	e002      	b.n	8003a20 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a1a:	2380      	movs	r3, #128	@ 0x80
 8003a1c:	015b      	lsls	r3, r3, #5
 8003a1e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	23f0      	movs	r3, #240	@ 0xf0
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d008      	beq.n	8003a3e <HAL_SPI_Init+0xaa>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	23e0      	movs	r3, #224	@ 0xe0
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d002      	beq.n	8003a3e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	2382      	movs	r3, #130	@ 0x82
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	401a      	ands	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6899      	ldr	r1, [r3, #8]
 8003a4c:	2384      	movs	r3, #132	@ 0x84
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	400b      	ands	r3, r1
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2102      	movs	r1, #2
 8003a5a:	400b      	ands	r3, r1
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	2101      	movs	r1, #1
 8003a64:	400b      	ands	r3, r1
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6999      	ldr	r1, [r3, #24]
 8003a6c:	2380      	movs	r3, #128	@ 0x80
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	400b      	ands	r3, r1
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	2138      	movs	r1, #56	@ 0x38
 8003a7a:	400b      	ands	r3, r1
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	2180      	movs	r1, #128	@ 0x80
 8003a84:	400b      	ands	r3, r1
 8003a86:	431a      	orrs	r2, r3
 8003a88:	0011      	movs	r1, r2
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a8e:	2380      	movs	r3, #128	@ 0x80
 8003a90:	019b      	lsls	r3, r3, #6
 8003a92:	401a      	ands	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	0c1b      	lsrs	r3, r3, #16
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	2110      	movs	r1, #16
 8003aac:	400b      	ands	r3, r1
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab4:	2108      	movs	r1, #8
 8003ab6:	400b      	ands	r3, r1
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68d9      	ldr	r1, [r3, #12]
 8003abe:	23f0      	movs	r3, #240	@ 0xf0
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	400b      	ands	r3, r1
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	2380      	movs	r3, #128	@ 0x80
 8003acc:	015b      	lsls	r3, r3, #5
 8003ace:	401a      	ands	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69da      	ldr	r2, [r3, #28]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4907      	ldr	r1, [pc, #28]	@ (8003b00 <HAL_SPI_Init+0x16c>)
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	225d      	movs	r2, #93	@ 0x5d
 8003af2:	2101      	movs	r1, #1
 8003af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	0018      	movs	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b004      	add	sp, #16
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	fffff7ff 	.word	0xfffff7ff

08003b04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e04a      	b.n	8003bac <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	223d      	movs	r2, #61	@ 0x3d
 8003b1a:	5c9b      	ldrb	r3, [r3, r2]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d107      	bne.n	8003b32 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	223c      	movs	r2, #60	@ 0x3c
 8003b26:	2100      	movs	r1, #0
 8003b28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f7fd fc19 	bl	8001364 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	223d      	movs	r2, #61	@ 0x3d
 8003b36:	2102      	movs	r1, #2
 8003b38:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3304      	adds	r3, #4
 8003b42:	0019      	movs	r1, r3
 8003b44:	0010      	movs	r0, r2
 8003b46:	f000 f935 	bl	8003db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2248      	movs	r2, #72	@ 0x48
 8003b4e:	2101      	movs	r1, #1
 8003b50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	223e      	movs	r2, #62	@ 0x3e
 8003b56:	2101      	movs	r1, #1
 8003b58:	5499      	strb	r1, [r3, r2]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	223f      	movs	r2, #63	@ 0x3f
 8003b5e:	2101      	movs	r1, #1
 8003b60:	5499      	strb	r1, [r3, r2]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2240      	movs	r2, #64	@ 0x40
 8003b66:	2101      	movs	r1, #1
 8003b68:	5499      	strb	r1, [r3, r2]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2241      	movs	r2, #65	@ 0x41
 8003b6e:	2101      	movs	r1, #1
 8003b70:	5499      	strb	r1, [r3, r2]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2242      	movs	r2, #66	@ 0x42
 8003b76:	2101      	movs	r1, #1
 8003b78:	5499      	strb	r1, [r3, r2]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2243      	movs	r2, #67	@ 0x43
 8003b7e:	2101      	movs	r1, #1
 8003b80:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2244      	movs	r2, #68	@ 0x44
 8003b86:	2101      	movs	r1, #1
 8003b88:	5499      	strb	r1, [r3, r2]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2245      	movs	r2, #69	@ 0x45
 8003b8e:	2101      	movs	r1, #1
 8003b90:	5499      	strb	r1, [r3, r2]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2246      	movs	r2, #70	@ 0x46
 8003b96:	2101      	movs	r1, #1
 8003b98:	5499      	strb	r1, [r3, r2]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2247      	movs	r2, #71	@ 0x47
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	223d      	movs	r2, #61	@ 0x3d
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b002      	add	sp, #8
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc0:	2317      	movs	r3, #23
 8003bc2:	18fb      	adds	r3, r7, r3
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	223c      	movs	r2, #60	@ 0x3c
 8003bcc:	5c9b      	ldrb	r3, [r3, r2]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e0e5      	b.n	8003da2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	223c      	movs	r2, #60	@ 0x3c
 8003bda:	2101      	movs	r1, #1
 8003bdc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b14      	cmp	r3, #20
 8003be2:	d900      	bls.n	8003be6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003be4:	e0d1      	b.n	8003d8a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	009a      	lsls	r2, r3, #2
 8003bea:	4b70      	ldr	r3, [pc, #448]	@ (8003dac <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003bec:	18d3      	adds	r3, r2, r3
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	0011      	movs	r1, r2
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f000 f95e 	bl	8003ebc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2108      	movs	r1, #8
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2104      	movs	r1, #4
 8003c1c:	438a      	bics	r2, r1
 8003c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6999      	ldr	r1, [r3, #24]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	619a      	str	r2, [r3, #24]
      break;
 8003c32:	e0af      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	0011      	movs	r1, r2
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f000 f9bd 	bl	8003fbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2180      	movs	r1, #128	@ 0x80
 8003c4e:	0109      	lsls	r1, r1, #4
 8003c50:	430a      	orrs	r2, r1
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4954      	ldr	r1, [pc, #336]	@ (8003db0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003c60:	400a      	ands	r2, r1
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	021a      	lsls	r2, r3, #8
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	619a      	str	r2, [r3, #24]
      break;
 8003c78:	e08c      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	0011      	movs	r1, r2
 8003c82:	0018      	movs	r0, r3
 8003c84:	f000 fa18 	bl	80040b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69da      	ldr	r2, [r3, #28]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2108      	movs	r1, #8
 8003c94:	430a      	orrs	r2, r1
 8003c96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69da      	ldr	r2, [r3, #28]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2104      	movs	r1, #4
 8003ca4:	438a      	bics	r2, r1
 8003ca6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69d9      	ldr	r1, [r3, #28]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	61da      	str	r2, [r3, #28]
      break;
 8003cba:	e06b      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f000 fa79 	bl	80041bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2180      	movs	r1, #128	@ 0x80
 8003cd6:	0109      	lsls	r1, r1, #4
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69da      	ldr	r2, [r3, #28]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4932      	ldr	r1, [pc, #200]	@ (8003db0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003ce8:	400a      	ands	r2, r1
 8003cea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69d9      	ldr	r1, [r3, #28]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	021a      	lsls	r2, r3, #8
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	61da      	str	r2, [r3, #28]
      break;
 8003d00:	e048      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	0011      	movs	r1, r2
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f000 faba 	bl	8004284 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2108      	movs	r1, #8
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2104      	movs	r1, #4
 8003d2c:	438a      	bics	r2, r1
 8003d2e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d42:	e027      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	0011      	movs	r1, r2
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 faf3 	bl	8004338 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2180      	movs	r1, #128	@ 0x80
 8003d5e:	0109      	lsls	r1, r1, #4
 8003d60:	430a      	orrs	r2, r1
 8003d62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4910      	ldr	r1, [pc, #64]	@ (8003db0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003d70:	400a      	ands	r2, r1
 8003d72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	021a      	lsls	r2, r3, #8
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d88:	e004      	b.n	8003d94 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003d8a:	2317      	movs	r3, #23
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
      break;
 8003d92:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	223c      	movs	r2, #60	@ 0x3c
 8003d98:	2100      	movs	r1, #0
 8003d9a:	5499      	strb	r1, [r3, r2]

  return status;
 8003d9c:	2317      	movs	r3, #23
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	781b      	ldrb	r3, [r3, #0]
}
 8003da2:	0018      	movs	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b006      	add	sp, #24
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	08006514 	.word	0x08006514
 8003db0:	fffffbff 	.word	0xfffffbff

08003db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a37      	ldr	r2, [pc, #220]	@ (8003ea4 <TIM_Base_SetConfig+0xf0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d008      	beq.n	8003dde <TIM_Base_SetConfig+0x2a>
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	2380      	movs	r3, #128	@ 0x80
 8003dd0:	05db      	lsls	r3, r3, #23
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d003      	beq.n	8003dde <TIM_Base_SetConfig+0x2a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a33      	ldr	r2, [pc, #204]	@ (8003ea8 <TIM_Base_SetConfig+0xf4>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d108      	bne.n	8003df0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2270      	movs	r2, #112	@ 0x70
 8003de2:	4393      	bics	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea4 <TIM_Base_SetConfig+0xf0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d014      	beq.n	8003e22 <TIM_Base_SetConfig+0x6e>
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	2380      	movs	r3, #128	@ 0x80
 8003dfc:	05db      	lsls	r3, r3, #23
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d00f      	beq.n	8003e22 <TIM_Base_SetConfig+0x6e>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a28      	ldr	r2, [pc, #160]	@ (8003ea8 <TIM_Base_SetConfig+0xf4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00b      	beq.n	8003e22 <TIM_Base_SetConfig+0x6e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a27      	ldr	r2, [pc, #156]	@ (8003eac <TIM_Base_SetConfig+0xf8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d007      	beq.n	8003e22 <TIM_Base_SetConfig+0x6e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a26      	ldr	r2, [pc, #152]	@ (8003eb0 <TIM_Base_SetConfig+0xfc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d003      	beq.n	8003e22 <TIM_Base_SetConfig+0x6e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a25      	ldr	r2, [pc, #148]	@ (8003eb4 <TIM_Base_SetConfig+0x100>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d108      	bne.n	8003e34 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4a24      	ldr	r2, [pc, #144]	@ (8003eb8 <TIM_Base_SetConfig+0x104>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2280      	movs	r2, #128	@ 0x80
 8003e38:	4393      	bics	r3, r2
 8003e3a:	001a      	movs	r2, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a11      	ldr	r2, [pc, #68]	@ (8003ea4 <TIM_Base_SetConfig+0xf0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d007      	beq.n	8003e72 <TIM_Base_SetConfig+0xbe>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a12      	ldr	r2, [pc, #72]	@ (8003eb0 <TIM_Base_SetConfig+0xfc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d003      	beq.n	8003e72 <TIM_Base_SetConfig+0xbe>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a11      	ldr	r2, [pc, #68]	@ (8003eb4 <TIM_Base_SetConfig+0x100>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d103      	bne.n	8003e7a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	2201      	movs	r2, #1
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d106      	bne.n	8003e9a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	2201      	movs	r2, #1
 8003e92:	4393      	bics	r3, r2
 8003e94:	001a      	movs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	611a      	str	r2, [r3, #16]
  }
}
 8003e9a:	46c0      	nop			@ (mov r8, r8)
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b004      	add	sp, #16
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40002000 	.word	0x40002000
 8003eb0:	40014400 	.word	0x40014400
 8003eb4:	40014800 	.word	0x40014800
 8003eb8:	fffffcff 	.word	0xfffffcff

08003ebc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	4393      	bics	r3, r2
 8003ed4:	001a      	movs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a2e      	ldr	r2, [pc, #184]	@ (8003fa4 <TIM_OC1_SetConfig+0xe8>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	4393      	bics	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2202      	movs	r2, #2
 8003f04:	4393      	bics	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a24      	ldr	r2, [pc, #144]	@ (8003fa8 <TIM_OC1_SetConfig+0xec>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <TIM_OC1_SetConfig+0x6e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a23      	ldr	r2, [pc, #140]	@ (8003fac <TIM_OC1_SetConfig+0xf0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_OC1_SetConfig+0x6e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a22      	ldr	r2, [pc, #136]	@ (8003fb0 <TIM_OC1_SetConfig+0xf4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10c      	bne.n	8003f44 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	4393      	bics	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2204      	movs	r2, #4
 8003f40:	4393      	bics	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a18      	ldr	r2, [pc, #96]	@ (8003fa8 <TIM_OC1_SetConfig+0xec>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d007      	beq.n	8003f5c <TIM_OC1_SetConfig+0xa0>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a17      	ldr	r2, [pc, #92]	@ (8003fac <TIM_OC1_SetConfig+0xf0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d003      	beq.n	8003f5c <TIM_OC1_SetConfig+0xa0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a16      	ldr	r2, [pc, #88]	@ (8003fb0 <TIM_OC1_SetConfig+0xf4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d111      	bne.n	8003f80 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4a15      	ldr	r2, [pc, #84]	@ (8003fb4 <TIM_OC1_SetConfig+0xf8>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4a14      	ldr	r2, [pc, #80]	@ (8003fb8 <TIM_OC1_SetConfig+0xfc>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	621a      	str	r2, [r3, #32]
}
 8003f9a:	46c0      	nop			@ (mov r8, r8)
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b006      	add	sp, #24
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	46c0      	nop			@ (mov r8, r8)
 8003fa4:	fffeff8f 	.word	0xfffeff8f
 8003fa8:	40012c00 	.word	0x40012c00
 8003fac:	40014400 	.word	0x40014400
 8003fb0:	40014800 	.word	0x40014800
 8003fb4:	fffffeff 	.word	0xfffffeff
 8003fb8:	fffffdff 	.word	0xfffffdff

08003fbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	2210      	movs	r2, #16
 8003fd2:	4393      	bics	r3, r2
 8003fd4:	001a      	movs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4a2c      	ldr	r2, [pc, #176]	@ (800409c <TIM_OC2_SetConfig+0xe0>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4a2b      	ldr	r2, [pc, #172]	@ (80040a0 <TIM_OC2_SetConfig+0xe4>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2220      	movs	r2, #32
 8004006:	4393      	bics	r3, r2
 8004008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4313      	orrs	r3, r2
 8004014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a22      	ldr	r2, [pc, #136]	@ (80040a4 <TIM_OC2_SetConfig+0xe8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d10d      	bne.n	800403a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2280      	movs	r2, #128	@ 0x80
 8004022:	4393      	bics	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2240      	movs	r2, #64	@ 0x40
 8004036:	4393      	bics	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a19      	ldr	r2, [pc, #100]	@ (80040a4 <TIM_OC2_SetConfig+0xe8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <TIM_OC2_SetConfig+0x96>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a18      	ldr	r2, [pc, #96]	@ (80040a8 <TIM_OC2_SetConfig+0xec>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_OC2_SetConfig+0x96>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a17      	ldr	r2, [pc, #92]	@ (80040ac <TIM_OC2_SetConfig+0xf0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d113      	bne.n	800407a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4a16      	ldr	r2, [pc, #88]	@ (80040b0 <TIM_OC2_SetConfig+0xf4>)
 8004056:	4013      	ands	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4a15      	ldr	r2, [pc, #84]	@ (80040b4 <TIM_OC2_SetConfig+0xf8>)
 800405e:	4013      	ands	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	621a      	str	r2, [r3, #32]
}
 8004094:	46c0      	nop			@ (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b006      	add	sp, #24
 800409a:	bd80      	pop	{r7, pc}
 800409c:	feff8fff 	.word	0xfeff8fff
 80040a0:	fffffcff 	.word	0xfffffcff
 80040a4:	40012c00 	.word	0x40012c00
 80040a8:	40014400 	.word	0x40014400
 80040ac:	40014800 	.word	0x40014800
 80040b0:	fffffbff 	.word	0xfffffbff
 80040b4:	fffff7ff 	.word	0xfffff7ff

080040b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	4a31      	ldr	r2, [pc, #196]	@ (8004194 <TIM_OC3_SetConfig+0xdc>)
 80040ce:	401a      	ands	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004198 <TIM_OC3_SetConfig+0xe0>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2203      	movs	r2, #3
 80040ec:	4393      	bics	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	4a27      	ldr	r2, [pc, #156]	@ (800419c <TIM_OC3_SetConfig+0xe4>)
 80040fe:	4013      	ands	r3, r2
 8004100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a23      	ldr	r2, [pc, #140]	@ (80041a0 <TIM_OC3_SetConfig+0xe8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d10d      	bne.n	8004132 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	4a22      	ldr	r2, [pc, #136]	@ (80041a4 <TIM_OC3_SetConfig+0xec>)
 800411a:	4013      	ands	r3, r2
 800411c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	021b      	lsls	r3, r3, #8
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	4a1e      	ldr	r2, [pc, #120]	@ (80041a8 <TIM_OC3_SetConfig+0xf0>)
 800412e:	4013      	ands	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1a      	ldr	r2, [pc, #104]	@ (80041a0 <TIM_OC3_SetConfig+0xe8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d007      	beq.n	800414a <TIM_OC3_SetConfig+0x92>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ac <TIM_OC3_SetConfig+0xf4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d003      	beq.n	800414a <TIM_OC3_SetConfig+0x92>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a1a      	ldr	r2, [pc, #104]	@ (80041b0 <TIM_OC3_SetConfig+0xf8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d113      	bne.n	8004172 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4a19      	ldr	r2, [pc, #100]	@ (80041b4 <TIM_OC3_SetConfig+0xfc>)
 800414e:	4013      	ands	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4a18      	ldr	r2, [pc, #96]	@ (80041b8 <TIM_OC3_SetConfig+0x100>)
 8004156:	4013      	ands	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	621a      	str	r2, [r3, #32]
}
 800418c:	46c0      	nop			@ (mov r8, r8)
 800418e:	46bd      	mov	sp, r7
 8004190:	b006      	add	sp, #24
 8004192:	bd80      	pop	{r7, pc}
 8004194:	fffffeff 	.word	0xfffffeff
 8004198:	fffeff8f 	.word	0xfffeff8f
 800419c:	fffffdff 	.word	0xfffffdff
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	fffff7ff 	.word	0xfffff7ff
 80041a8:	fffffbff 	.word	0xfffffbff
 80041ac:	40014400 	.word	0x40014400
 80041b0:	40014800 	.word	0x40014800
 80041b4:	ffffefff 	.word	0xffffefff
 80041b8:	ffffdfff 	.word	0xffffdfff

080041bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	4a24      	ldr	r2, [pc, #144]	@ (8004264 <TIM_OC4_SetConfig+0xa8>)
 80041d2:	401a      	ands	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4a20      	ldr	r2, [pc, #128]	@ (8004268 <TIM_OC4_SetConfig+0xac>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a1f      	ldr	r2, [pc, #124]	@ (800426c <TIM_OC4_SetConfig+0xb0>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4a1b      	ldr	r2, [pc, #108]	@ (8004270 <TIM_OC4_SetConfig+0xb4>)
 8004204:	4013      	ands	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	031b      	lsls	r3, r3, #12
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a17      	ldr	r2, [pc, #92]	@ (8004274 <TIM_OC4_SetConfig+0xb8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_OC4_SetConfig+0x70>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a16      	ldr	r2, [pc, #88]	@ (8004278 <TIM_OC4_SetConfig+0xbc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_OC4_SetConfig+0x70>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a15      	ldr	r2, [pc, #84]	@ (800427c <TIM_OC4_SetConfig+0xc0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d109      	bne.n	8004240 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	4a14      	ldr	r2, [pc, #80]	@ (8004280 <TIM_OC4_SetConfig+0xc4>)
 8004230:	4013      	ands	r3, r2
 8004232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	019b      	lsls	r3, r3, #6
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	46c0      	nop			@ (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	b006      	add	sp, #24
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			@ (mov r8, r8)
 8004264:	ffffefff 	.word	0xffffefff
 8004268:	feff8fff 	.word	0xfeff8fff
 800426c:	fffffcff 	.word	0xfffffcff
 8004270:	ffffdfff 	.word	0xffffdfff
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40014400 	.word	0x40014400
 800427c:	40014800 	.word	0x40014800
 8004280:	ffffbfff 	.word	0xffffbfff

08004284 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	4a21      	ldr	r2, [pc, #132]	@ (8004320 <TIM_OC5_SetConfig+0x9c>)
 800429a:	401a      	ands	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004324 <TIM_OC5_SetConfig+0xa0>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4a19      	ldr	r2, [pc, #100]	@ (8004328 <TIM_OC5_SetConfig+0xa4>)
 80042c2:	4013      	ands	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	041b      	lsls	r3, r3, #16
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a15      	ldr	r2, [pc, #84]	@ (800432c <TIM_OC5_SetConfig+0xa8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d007      	beq.n	80042ea <TIM_OC5_SetConfig+0x66>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a14      	ldr	r2, [pc, #80]	@ (8004330 <TIM_OC5_SetConfig+0xac>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d003      	beq.n	80042ea <TIM_OC5_SetConfig+0x66>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a13      	ldr	r2, [pc, #76]	@ (8004334 <TIM_OC5_SetConfig+0xb0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d109      	bne.n	80042fe <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004320 <TIM_OC5_SetConfig+0x9c>)
 80042ee:	4013      	ands	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	621a      	str	r2, [r3, #32]
}
 8004318:	46c0      	nop			@ (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b006      	add	sp, #24
 800431e:	bd80      	pop	{r7, pc}
 8004320:	fffeffff 	.word	0xfffeffff
 8004324:	fffeff8f 	.word	0xfffeff8f
 8004328:	fffdffff 	.word	0xfffdffff
 800432c:	40012c00 	.word	0x40012c00
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800

08004338 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4a22      	ldr	r2, [pc, #136]	@ (80043d8 <TIM_OC6_SetConfig+0xa0>)
 800434e:	401a      	ands	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4a1e      	ldr	r2, [pc, #120]	@ (80043dc <TIM_OC6_SetConfig+0xa4>)
 8004364:	4013      	ands	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	4a1a      	ldr	r2, [pc, #104]	@ (80043e0 <TIM_OC6_SetConfig+0xa8>)
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	051b      	lsls	r3, r3, #20
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a16      	ldr	r2, [pc, #88]	@ (80043e4 <TIM_OC6_SetConfig+0xac>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d007      	beq.n	80043a0 <TIM_OC6_SetConfig+0x68>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a15      	ldr	r2, [pc, #84]	@ (80043e8 <TIM_OC6_SetConfig+0xb0>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <TIM_OC6_SetConfig+0x68>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a14      	ldr	r2, [pc, #80]	@ (80043ec <TIM_OC6_SetConfig+0xb4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d109      	bne.n	80043b4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	4a13      	ldr	r2, [pc, #76]	@ (80043f0 <TIM_OC6_SetConfig+0xb8>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	029b      	lsls	r3, r3, #10
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	621a      	str	r2, [r3, #32]
}
 80043ce:	46c0      	nop			@ (mov r8, r8)
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b006      	add	sp, #24
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	ffefffff 	.word	0xffefffff
 80043dc:	feff8fff 	.word	0xfeff8fff
 80043e0:	ffdfffff 	.word	0xffdfffff
 80043e4:	40012c00 	.word	0x40012c00
 80043e8:	40014400 	.word	0x40014400
 80043ec:	40014800 	.word	0x40014800
 80043f0:	fffbffff 	.word	0xfffbffff

080043f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	223c      	movs	r2, #60	@ 0x3c
 8004402:	5c9b      	ldrb	r3, [r3, r2]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004408:	2302      	movs	r3, #2
 800440a:	e050      	b.n	80044ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	223c      	movs	r2, #60	@ 0x3c
 8004410:	2101      	movs	r1, #1
 8004412:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	223d      	movs	r2, #61	@ 0x3d
 8004418:	2102      	movs	r1, #2
 800441a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a21      	ldr	r2, [pc, #132]	@ (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d108      	bne.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a20      	ldr	r2, [pc, #128]	@ (80044bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800443a:	4013      	ands	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2270      	movs	r2, #112	@ 0x70
 800444c:	4393      	bics	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a14      	ldr	r2, [pc, #80]	@ (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00a      	beq.n	8004482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	2380      	movs	r3, #128	@ 0x80
 8004472:	05db      	lsls	r3, r3, #23
 8004474:	429a      	cmp	r2, r3
 8004476:	d004      	beq.n	8004482 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a10      	ldr	r2, [pc, #64]	@ (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d10c      	bne.n	800449c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2280      	movs	r2, #128	@ 0x80
 8004486:	4393      	bics	r3, r2
 8004488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	4313      	orrs	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	223d      	movs	r2, #61	@ 0x3d
 80044a0:	2101      	movs	r1, #1
 80044a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	223c      	movs	r2, #60	@ 0x3c
 80044a8:	2100      	movs	r1, #0
 80044aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	0018      	movs	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b004      	add	sp, #16
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	46c0      	nop			@ (mov r8, r8)
 80044b8:	40012c00 	.word	0x40012c00
 80044bc:	ff0fffff 	.word	0xff0fffff
 80044c0:	40000400 	.word	0x40000400

080044c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	223c      	movs	r2, #60	@ 0x3c
 80044d6:	5c9b      	ldrb	r3, [r3, r2]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044dc:	2302      	movs	r3, #2
 80044de:	e06f      	b.n	80045c0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	223c      	movs	r2, #60	@ 0x3c
 80044e4:	2101      	movs	r1, #1
 80044e6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	22ff      	movs	r2, #255	@ 0xff
 80044ec:	4393      	bics	r3, r2
 80044ee:	001a      	movs	r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a33      	ldr	r2, [pc, #204]	@ (80045c8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80044fc:	401a      	ands	r2, r3
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4a30      	ldr	r2, [pc, #192]	@ (80045cc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800450a:	401a      	ands	r2, r3
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4a2e      	ldr	r2, [pc, #184]	@ (80045d0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004518:	401a      	ands	r2, r3
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4a2b      	ldr	r2, [pc, #172]	@ (80045d4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004526:	401a      	ands	r2, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a29      	ldr	r2, [pc, #164]	@ (80045d8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004534:	401a      	ands	r2, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4a26      	ldr	r2, [pc, #152]	@ (80045dc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004542:	401a      	ands	r2, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a24      	ldr	r2, [pc, #144]	@ (80045e0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004550:	401a      	ands	r2, r3
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	041b      	lsls	r3, r3, #16
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a21      	ldr	r2, [pc, #132]	@ (80045e4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004560:	401a      	ands	r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1e      	ldr	r2, [pc, #120]	@ (80045e8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d11c      	bne.n	80045ae <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4a1d      	ldr	r2, [pc, #116]	@ (80045ec <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004578:	401a      	ands	r2, r3
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457e:	051b      	lsls	r3, r3, #20
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a1a      	ldr	r2, [pc, #104]	@ (80045f0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004588:	401a      	ands	r2, r3
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a17      	ldr	r2, [pc, #92]	@ (80045f4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004596:	401a      	ands	r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a15      	ldr	r2, [pc, #84]	@ (80045f8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80045a4:	401a      	ands	r2, r3
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	223c      	movs	r2, #60	@ 0x3c
 80045ba:	2100      	movs	r1, #0
 80045bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	0018      	movs	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b004      	add	sp, #16
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	fffffcff 	.word	0xfffffcff
 80045cc:	fffffbff 	.word	0xfffffbff
 80045d0:	fffff7ff 	.word	0xfffff7ff
 80045d4:	ffffefff 	.word	0xffffefff
 80045d8:	ffffdfff 	.word	0xffffdfff
 80045dc:	ffffbfff 	.word	0xffffbfff
 80045e0:	fff0ffff 	.word	0xfff0ffff
 80045e4:	efffffff 	.word	0xefffffff
 80045e8:	40012c00 	.word	0x40012c00
 80045ec:	ff0fffff 	.word	0xff0fffff
 80045f0:	feffffff 	.word	0xfeffffff
 80045f4:	fdffffff 	.word	0xfdffffff
 80045f8:	dfffffff 	.word	0xdfffffff

080045fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08c      	sub	sp, #48	@ 0x30
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	1dbb      	adds	r3, r7, #6
 8004608:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2288      	movs	r2, #136	@ 0x88
 800460e:	589b      	ldr	r3, [r3, r2]
 8004610:	2b20      	cmp	r3, #32
 8004612:	d000      	beq.n	8004616 <HAL_UART_Transmit_IT+0x1a>
 8004614:	e08d      	b.n	8004732 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_UART_Transmit_IT+0x28>
 800461c:	1dbb      	adds	r3, r7, #6
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e085      	b.n	8004734 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	2380      	movs	r3, #128	@ 0x80
 800462e:	015b      	lsls	r3, r3, #5
 8004630:	429a      	cmp	r2, r3
 8004632:	d109      	bne.n	8004648 <HAL_UART_Transmit_IT+0x4c>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d105      	bne.n	8004648 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2201      	movs	r2, #1
 8004640:	4013      	ands	r3, r2
 8004642:	d001      	beq.n	8004648 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e075      	b.n	8004734 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1dba      	adds	r2, r7, #6
 8004652:	2154      	movs	r1, #84	@ 0x54
 8004654:	8812      	ldrh	r2, [r2, #0]
 8004656:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	1dba      	adds	r2, r7, #6
 800465c:	2156      	movs	r1, #86	@ 0x56
 800465e:	8812      	ldrh	r2, [r2, #0]
 8004660:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2290      	movs	r2, #144	@ 0x90
 800466c:	2100      	movs	r1, #0
 800466e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2288      	movs	r2, #136	@ 0x88
 8004674:	2121      	movs	r1, #33	@ 0x21
 8004676:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800467c:	2380      	movs	r3, #128	@ 0x80
 800467e:	059b      	lsls	r3, r3, #22
 8004680:	429a      	cmp	r2, r3
 8004682:	d12a      	bne.n	80046da <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	2380      	movs	r3, #128	@ 0x80
 800468a:	015b      	lsls	r3, r3, #5
 800468c:	429a      	cmp	r2, r3
 800468e:	d107      	bne.n	80046a0 <HAL_UART_Transmit_IT+0xa4>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4a28      	ldr	r2, [pc, #160]	@ (800473c <HAL_UART_Transmit_IT+0x140>)
 800469c:	679a      	str	r2, [r3, #120]	@ 0x78
 800469e:	e002      	b.n	80046a6 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a27      	ldr	r2, [pc, #156]	@ (8004740 <HAL_UART_Transmit_IT+0x144>)
 80046a4:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046a6:	f3ef 8310 	mrs	r3, PRIMASK
 80046aa:	61fb      	str	r3, [r7, #28]
  return(result);
 80046ac:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80046ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046b0:	2301      	movs	r3, #1
 80046b2:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	f383 8810 	msr	PRIMASK, r3
}
 80046ba:	46c0      	nop			@ (mov r8, r8)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2180      	movs	r1, #128	@ 0x80
 80046c8:	0409      	lsls	r1, r1, #16
 80046ca:	430a      	orrs	r2, r1
 80046cc:	609a      	str	r2, [r3, #8]
 80046ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	e029      	b.n	800472e <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	2380      	movs	r3, #128	@ 0x80
 80046e0:	015b      	lsls	r3, r3, #5
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d107      	bne.n	80046f6 <HAL_UART_Transmit_IT+0xfa>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d103      	bne.n	80046f6 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4a14      	ldr	r2, [pc, #80]	@ (8004744 <HAL_UART_Transmit_IT+0x148>)
 80046f2:	679a      	str	r2, [r3, #120]	@ 0x78
 80046f4:	e002      	b.n	80046fc <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4a13      	ldr	r2, [pc, #76]	@ (8004748 <HAL_UART_Transmit_IT+0x14c>)
 80046fa:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004700:	613b      	str	r3, [r7, #16]
  return(result);
 8004702:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004704:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004706:	2301      	movs	r3, #1
 8004708:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f383 8810 	msr	PRIMASK, r3
}
 8004710:	46c0      	nop			@ (mov r8, r8)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2180      	movs	r1, #128	@ 0x80
 800471e:	430a      	orrs	r2, r1
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004724:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	f383 8810 	msr	PRIMASK, r3
}
 800472c:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e000      	b.n	8004734 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8004732:	2302      	movs	r3, #2
  }
}
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	b00c      	add	sp, #48	@ 0x30
 800473a:	bd80      	pop	{r7, pc}
 800473c:	08005381 	.word	0x08005381
 8004740:	08005295 	.word	0x08005295
 8004744:	080051d5 	.word	0x080051d5
 8004748:	08005121 	.word	0x08005121

0800474c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004754:	46c0      	nop			@ (mov r8, r8)
 8004756:	46bd      	mov	sp, r7
 8004758:	b002      	add	sp, #8
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	000a      	movs	r2, r1
 8004766:	1cbb      	adds	r3, r7, #2
 8004768:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800476a:	46c0      	nop			@ (mov r8, r8)
 800476c:	46bd      	mov	sp, r7
 800476e:	b002      	add	sp, #8
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800477c:	231e      	movs	r3, #30
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4aab      	ldr	r2, [pc, #684]	@ (8004a50 <UART_SetConfig+0x2dc>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	0019      	movs	r1, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	4aa6      	ldr	r2, [pc, #664]	@ (8004a54 <UART_SetConfig+0x2e0>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	0019      	movs	r1, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a9d      	ldr	r2, [pc, #628]	@ (8004a58 <UART_SetConfig+0x2e4>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	0019      	movs	r1, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f6:	220f      	movs	r2, #15
 80047f8:	4393      	bics	r3, r2
 80047fa:	0019      	movs	r1, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a93      	ldr	r2, [pc, #588]	@ (8004a5c <UART_SetConfig+0x2e8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d127      	bne.n	8004862 <UART_SetConfig+0xee>
 8004812:	4b93      	ldr	r3, [pc, #588]	@ (8004a60 <UART_SetConfig+0x2ec>)
 8004814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004816:	2203      	movs	r2, #3
 8004818:	4013      	ands	r3, r2
 800481a:	2b03      	cmp	r3, #3
 800481c:	d017      	beq.n	800484e <UART_SetConfig+0xda>
 800481e:	d81b      	bhi.n	8004858 <UART_SetConfig+0xe4>
 8004820:	2b02      	cmp	r3, #2
 8004822:	d00a      	beq.n	800483a <UART_SetConfig+0xc6>
 8004824:	d818      	bhi.n	8004858 <UART_SetConfig+0xe4>
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <UART_SetConfig+0xbc>
 800482a:	2b01      	cmp	r3, #1
 800482c:	d00a      	beq.n	8004844 <UART_SetConfig+0xd0>
 800482e:	e013      	b.n	8004858 <UART_SetConfig+0xe4>
 8004830:	231f      	movs	r3, #31
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	e021      	b.n	800487e <UART_SetConfig+0x10a>
 800483a:	231f      	movs	r3, #31
 800483c:	18fb      	adds	r3, r7, r3
 800483e:	2202      	movs	r2, #2
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	e01c      	b.n	800487e <UART_SetConfig+0x10a>
 8004844:	231f      	movs	r3, #31
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	2204      	movs	r2, #4
 800484a:	701a      	strb	r2, [r3, #0]
 800484c:	e017      	b.n	800487e <UART_SetConfig+0x10a>
 800484e:	231f      	movs	r3, #31
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	2208      	movs	r2, #8
 8004854:	701a      	strb	r2, [r3, #0]
 8004856:	e012      	b.n	800487e <UART_SetConfig+0x10a>
 8004858:	231f      	movs	r3, #31
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	2210      	movs	r2, #16
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	e00d      	b.n	800487e <UART_SetConfig+0x10a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a7f      	ldr	r2, [pc, #508]	@ (8004a64 <UART_SetConfig+0x2f0>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d104      	bne.n	8004876 <UART_SetConfig+0x102>
 800486c:	231f      	movs	r3, #31
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e003      	b.n	800487e <UART_SetConfig+0x10a>
 8004876:	231f      	movs	r3, #31
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	2210      	movs	r2, #16
 800487c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69da      	ldr	r2, [r3, #28]
 8004882:	2380      	movs	r3, #128	@ 0x80
 8004884:	021b      	lsls	r3, r3, #8
 8004886:	429a      	cmp	r2, r3
 8004888:	d000      	beq.n	800488c <UART_SetConfig+0x118>
 800488a:	e06f      	b.n	800496c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800488c:	231f      	movs	r3, #31
 800488e:	18fb      	adds	r3, r7, r3
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b08      	cmp	r3, #8
 8004894:	d01f      	beq.n	80048d6 <UART_SetConfig+0x162>
 8004896:	dc22      	bgt.n	80048de <UART_SetConfig+0x16a>
 8004898:	2b04      	cmp	r3, #4
 800489a:	d017      	beq.n	80048cc <UART_SetConfig+0x158>
 800489c:	dc1f      	bgt.n	80048de <UART_SetConfig+0x16a>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <UART_SetConfig+0x134>
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d005      	beq.n	80048b2 <UART_SetConfig+0x13e>
 80048a6:	e01a      	b.n	80048de <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a8:	f7fe ff60 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 80048ac:	0003      	movs	r3, r0
 80048ae:	61bb      	str	r3, [r7, #24]
        break;
 80048b0:	e01c      	b.n	80048ec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80048b2:	4b6b      	ldr	r3, [pc, #428]	@ (8004a60 <UART_SetConfig+0x2ec>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	2207      	movs	r2, #7
 80048ba:	4013      	ands	r3, r2
 80048bc:	3301      	adds	r3, #1
 80048be:	0019      	movs	r1, r3
 80048c0:	4869      	ldr	r0, [pc, #420]	@ (8004a68 <UART_SetConfig+0x2f4>)
 80048c2:	f7fb fc21 	bl	8000108 <__udivsi3>
 80048c6:	0003      	movs	r3, r0
 80048c8:	61bb      	str	r3, [r7, #24]
        break;
 80048ca:	e00f      	b.n	80048ec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048cc:	f7fe fed8 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 80048d0:	0003      	movs	r3, r0
 80048d2:	61bb      	str	r3, [r7, #24]
        break;
 80048d4:	e00a      	b.n	80048ec <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d6:	2380      	movs	r3, #128	@ 0x80
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	61bb      	str	r3, [r7, #24]
        break;
 80048dc:	e006      	b.n	80048ec <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048e2:	231e      	movs	r3, #30
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	2201      	movs	r2, #1
 80048e8:	701a      	strb	r2, [r3, #0]
        break;
 80048ea:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d100      	bne.n	80048f4 <UART_SetConfig+0x180>
 80048f2:	e097      	b.n	8004a24 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048f8:	4b5c      	ldr	r3, [pc, #368]	@ (8004a6c <UART_SetConfig+0x2f8>)
 80048fa:	0052      	lsls	r2, r2, #1
 80048fc:	5ad3      	ldrh	r3, [r2, r3]
 80048fe:	0019      	movs	r1, r3
 8004900:	69b8      	ldr	r0, [r7, #24]
 8004902:	f7fb fc01 	bl	8000108 <__udivsi3>
 8004906:	0003      	movs	r3, r0
 8004908:	005a      	lsls	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	18d2      	adds	r2, r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	0019      	movs	r1, r3
 8004918:	0010      	movs	r0, r2
 800491a:	f7fb fbf5 	bl	8000108 <__udivsi3>
 800491e:	0003      	movs	r3, r0
 8004920:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b0f      	cmp	r3, #15
 8004926:	d91c      	bls.n	8004962 <UART_SetConfig+0x1ee>
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	2380      	movs	r3, #128	@ 0x80
 800492c:	025b      	lsls	r3, r3, #9
 800492e:	429a      	cmp	r2, r3
 8004930:	d217      	bcs.n	8004962 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	b29a      	uxth	r2, r3
 8004936:	200e      	movs	r0, #14
 8004938:	183b      	adds	r3, r7, r0
 800493a:	210f      	movs	r1, #15
 800493c:	438a      	bics	r2, r1
 800493e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	b29b      	uxth	r3, r3
 8004946:	2207      	movs	r2, #7
 8004948:	4013      	ands	r3, r2
 800494a:	b299      	uxth	r1, r3
 800494c:	183b      	adds	r3, r7, r0
 800494e:	183a      	adds	r2, r7, r0
 8004950:	8812      	ldrh	r2, [r2, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	183a      	adds	r2, r7, r0
 800495c:	8812      	ldrh	r2, [r2, #0]
 800495e:	60da      	str	r2, [r3, #12]
 8004960:	e060      	b.n	8004a24 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004962:	231e      	movs	r3, #30
 8004964:	18fb      	adds	r3, r7, r3
 8004966:	2201      	movs	r2, #1
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	e05b      	b.n	8004a24 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800496c:	231f      	movs	r3, #31
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b08      	cmp	r3, #8
 8004974:	d01f      	beq.n	80049b6 <UART_SetConfig+0x242>
 8004976:	dc22      	bgt.n	80049be <UART_SetConfig+0x24a>
 8004978:	2b04      	cmp	r3, #4
 800497a:	d017      	beq.n	80049ac <UART_SetConfig+0x238>
 800497c:	dc1f      	bgt.n	80049be <UART_SetConfig+0x24a>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <UART_SetConfig+0x214>
 8004982:	2b02      	cmp	r3, #2
 8004984:	d005      	beq.n	8004992 <UART_SetConfig+0x21e>
 8004986:	e01a      	b.n	80049be <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004988:	f7fe fef0 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 800498c:	0003      	movs	r3, r0
 800498e:	61bb      	str	r3, [r7, #24]
        break;
 8004990:	e01c      	b.n	80049cc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004992:	4b33      	ldr	r3, [pc, #204]	@ (8004a60 <UART_SetConfig+0x2ec>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	2207      	movs	r2, #7
 800499a:	4013      	ands	r3, r2
 800499c:	3301      	adds	r3, #1
 800499e:	0019      	movs	r1, r3
 80049a0:	4831      	ldr	r0, [pc, #196]	@ (8004a68 <UART_SetConfig+0x2f4>)
 80049a2:	f7fb fbb1 	bl	8000108 <__udivsi3>
 80049a6:	0003      	movs	r3, r0
 80049a8:	61bb      	str	r3, [r7, #24]
        break;
 80049aa:	e00f      	b.n	80049cc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ac:	f7fe fe68 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 80049b0:	0003      	movs	r3, r0
 80049b2:	61bb      	str	r3, [r7, #24]
        break;
 80049b4:	e00a      	b.n	80049cc <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b6:	2380      	movs	r3, #128	@ 0x80
 80049b8:	021b      	lsls	r3, r3, #8
 80049ba:	61bb      	str	r3, [r7, #24]
        break;
 80049bc:	e006      	b.n	80049cc <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049c2:	231e      	movs	r3, #30
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	2201      	movs	r2, #1
 80049c8:	701a      	strb	r2, [r3, #0]
        break;
 80049ca:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d028      	beq.n	8004a24 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049d6:	4b25      	ldr	r3, [pc, #148]	@ (8004a6c <UART_SetConfig+0x2f8>)
 80049d8:	0052      	lsls	r2, r2, #1
 80049da:	5ad3      	ldrh	r3, [r2, r3]
 80049dc:	0019      	movs	r1, r3
 80049de:	69b8      	ldr	r0, [r7, #24]
 80049e0:	f7fb fb92 	bl	8000108 <__udivsi3>
 80049e4:	0003      	movs	r3, r0
 80049e6:	001a      	movs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	18d2      	adds	r2, r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	0019      	movs	r1, r3
 80049f6:	0010      	movs	r0, r2
 80049f8:	f7fb fb86 	bl	8000108 <__udivsi3>
 80049fc:	0003      	movs	r3, r0
 80049fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2b0f      	cmp	r3, #15
 8004a04:	d90a      	bls.n	8004a1c <UART_SetConfig+0x2a8>
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	2380      	movs	r3, #128	@ 0x80
 8004a0a:	025b      	lsls	r3, r3, #9
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d205      	bcs.n	8004a1c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60da      	str	r2, [r3, #12]
 8004a1a:	e003      	b.n	8004a24 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004a1c:	231e      	movs	r3, #30
 8004a1e:	18fb      	adds	r3, r7, r3
 8004a20:	2201      	movs	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	226a      	movs	r2, #106	@ 0x6a
 8004a28:	2101      	movs	r1, #1
 8004a2a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2268      	movs	r2, #104	@ 0x68
 8004a30:	2101      	movs	r1, #1
 8004a32:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004a40:	231e      	movs	r3, #30
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	781b      	ldrb	r3, [r3, #0]
}
 8004a46:	0018      	movs	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b008      	add	sp, #32
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	cfff69f3 	.word	0xcfff69f3
 8004a54:	ffffcfff 	.word	0xffffcfff
 8004a58:	11fff4ff 	.word	0x11fff4ff
 8004a5c:	40013800 	.word	0x40013800
 8004a60:	40021000 	.word	0x40021000
 8004a64:	40004400 	.word	0x40004400
 8004a68:	02dc6c00 	.word	0x02dc6c00
 8004a6c:	08006568 	.word	0x08006568

08004a70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d00b      	beq.n	8004a9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	4a4a      	ldr	r2, [pc, #296]	@ (8004bb4 <UART_AdvFeatureConfig+0x144>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	d00b      	beq.n	8004abc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4a43      	ldr	r2, [pc, #268]	@ (8004bb8 <UART_AdvFeatureConfig+0x148>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	0019      	movs	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d00b      	beq.n	8004ade <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4a3b      	ldr	r2, [pc, #236]	@ (8004bbc <UART_AdvFeatureConfig+0x14c>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	0019      	movs	r1, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae2:	2204      	movs	r2, #4
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d00b      	beq.n	8004b00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4a34      	ldr	r2, [pc, #208]	@ (8004bc0 <UART_AdvFeatureConfig+0x150>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	0019      	movs	r1, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	2210      	movs	r2, #16
 8004b06:	4013      	ands	r3, r2
 8004b08:	d00b      	beq.n	8004b22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc4 <UART_AdvFeatureConfig+0x154>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	0019      	movs	r1, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b26:	2220      	movs	r2, #32
 8004b28:	4013      	ands	r3, r2
 8004b2a:	d00b      	beq.n	8004b44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	4a25      	ldr	r2, [pc, #148]	@ (8004bc8 <UART_AdvFeatureConfig+0x158>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	0019      	movs	r1, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b48:	2240      	movs	r2, #64	@ 0x40
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d01d      	beq.n	8004b8a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	4a1d      	ldr	r2, [pc, #116]	@ (8004bcc <UART_AdvFeatureConfig+0x15c>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	0019      	movs	r1, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b6a:	2380      	movs	r3, #128	@ 0x80
 8004b6c:	035b      	lsls	r3, r3, #13
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d10b      	bne.n	8004b8a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4a15      	ldr	r2, [pc, #84]	@ (8004bd0 <UART_AdvFeatureConfig+0x160>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8e:	2280      	movs	r2, #128	@ 0x80
 8004b90:	4013      	ands	r3, r2
 8004b92:	d00b      	beq.n	8004bac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd4 <UART_AdvFeatureConfig+0x164>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	605a      	str	r2, [r3, #4]
  }
}
 8004bac:	46c0      	nop			@ (mov r8, r8)
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	b002      	add	sp, #8
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	ffff7fff 	.word	0xffff7fff
 8004bb8:	fffdffff 	.word	0xfffdffff
 8004bbc:	fffeffff 	.word	0xfffeffff
 8004bc0:	fffbffff 	.word	0xfffbffff
 8004bc4:	ffffefff 	.word	0xffffefff
 8004bc8:	ffffdfff 	.word	0xffffdfff
 8004bcc:	ffefffff 	.word	0xffefffff
 8004bd0:	ff9fffff 	.word	0xff9fffff
 8004bd4:	fff7ffff 	.word	0xfff7ffff

08004bd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b092      	sub	sp, #72	@ 0x48
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2290      	movs	r2, #144	@ 0x90
 8004be4:	2100      	movs	r1, #0
 8004be6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004be8:	f7fc fd94 	bl	8001714 <HAL_GetTick>
 8004bec:	0003      	movs	r3, r0
 8004bee:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2208      	movs	r2, #8
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d12d      	bne.n	8004c5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c00:	2280      	movs	r2, #128	@ 0x80
 8004c02:	0391      	lsls	r1, r2, #14
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4a47      	ldr	r2, [pc, #284]	@ (8004d24 <UART_CheckIdleState+0x14c>)
 8004c08:	9200      	str	r2, [sp, #0]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f000 f88e 	bl	8004d2c <UART_WaitOnFlagUntilTimeout>
 8004c10:	1e03      	subs	r3, r0, #0
 8004c12:	d022      	beq.n	8004c5a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c14:	f3ef 8310 	mrs	r3, PRIMASK
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c1e:	2301      	movs	r3, #1
 8004c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c24:	f383 8810 	msr	PRIMASK, r3
}
 8004c28:	46c0      	nop			@ (mov r8, r8)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2180      	movs	r1, #128	@ 0x80
 8004c36:	438a      	bics	r2, r1
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c40:	f383 8810 	msr	PRIMASK, r3
}
 8004c44:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2288      	movs	r2, #136	@ 0x88
 8004c4a:	2120      	movs	r1, #32
 8004c4c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2284      	movs	r2, #132	@ 0x84
 8004c52:	2100      	movs	r1, #0
 8004c54:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e060      	b.n	8004d1c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2204      	movs	r2, #4
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d146      	bne.n	8004cf6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c6a:	2280      	movs	r2, #128	@ 0x80
 8004c6c:	03d1      	lsls	r1, r2, #15
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	4a2c      	ldr	r2, [pc, #176]	@ (8004d24 <UART_CheckIdleState+0x14c>)
 8004c72:	9200      	str	r2, [sp, #0]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f000 f859 	bl	8004d2c <UART_WaitOnFlagUntilTimeout>
 8004c7a:	1e03      	subs	r3, r0, #0
 8004c7c:	d03b      	beq.n	8004cf6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c82:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c84:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c88:	2301      	movs	r3, #1
 8004c8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f383 8810 	msr	PRIMASK, r3
}
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4922      	ldr	r1, [pc, #136]	@ (8004d28 <UART_CheckIdleState+0x150>)
 8004ca0:	400a      	ands	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f383 8810 	msr	PRIMASK, r3
}
 8004cae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cb4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cb6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cba:	2301      	movs	r3, #1
 8004cbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	f383 8810 	msr	PRIMASK, r3
}
 8004cc4:	46c0      	nop			@ (mov r8, r8)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	438a      	bics	r2, r1
 8004cd4:	609a      	str	r2, [r3, #8]
 8004cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	f383 8810 	msr	PRIMASK, r3
}
 8004ce0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	228c      	movs	r2, #140	@ 0x8c
 8004ce6:	2120      	movs	r1, #32
 8004ce8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2284      	movs	r2, #132	@ 0x84
 8004cee:	2100      	movs	r1, #0
 8004cf0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e012      	b.n	8004d1c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2288      	movs	r2, #136	@ 0x88
 8004cfa:	2120      	movs	r1, #32
 8004cfc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	228c      	movs	r2, #140	@ 0x8c
 8004d02:	2120      	movs	r1, #32
 8004d04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2284      	movs	r2, #132	@ 0x84
 8004d16:	2100      	movs	r1, #0
 8004d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b010      	add	sp, #64	@ 0x40
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	01ffffff 	.word	0x01ffffff
 8004d28:	fffffedf 	.word	0xfffffedf

08004d2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	1dfb      	adds	r3, r7, #7
 8004d3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3c:	e051      	b.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	3301      	adds	r3, #1
 8004d42:	d04e      	beq.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d44:	f7fc fce6 	bl	8001714 <HAL_GetTick>
 8004d48:	0002      	movs	r2, r0
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d302      	bcc.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e051      	b.n	8004e02 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2204      	movs	r2, #4
 8004d66:	4013      	ands	r3, r2
 8004d68:	d03b      	beq.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b80      	cmp	r3, #128	@ 0x80
 8004d6e:	d038      	beq.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b40      	cmp	r3, #64	@ 0x40
 8004d74:	d035      	beq.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d111      	bne.n	8004da8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f000 f960 	bl	8005054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2290      	movs	r2, #144	@ 0x90
 8004d98:	2108      	movs	r1, #8
 8004d9a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2284      	movs	r2, #132	@ 0x84
 8004da0:	2100      	movs	r1, #0
 8004da2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e02c      	b.n	8004e02 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69da      	ldr	r2, [r3, #28]
 8004dae:	2380      	movs	r3, #128	@ 0x80
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	401a      	ands	r2, r3
 8004db4:	2380      	movs	r3, #128	@ 0x80
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d112      	bne.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2280      	movs	r2, #128	@ 0x80
 8004dc2:	0112      	lsls	r2, r2, #4
 8004dc4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f000 f943 	bl	8005054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2290      	movs	r2, #144	@ 0x90
 8004dd2:	2120      	movs	r1, #32
 8004dd4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2284      	movs	r2, #132	@ 0x84
 8004dda:	2100      	movs	r1, #0
 8004ddc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e00f      	b.n	8004e02 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	4013      	ands	r3, r2
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	425a      	negs	r2, r3
 8004df2:	4153      	adcs	r3, r2
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	001a      	movs	r2, r3
 8004df8:	1dfb      	adds	r3, r7, #7
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d09e      	beq.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b004      	add	sp, #16
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b098      	sub	sp, #96	@ 0x60
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	1dbb      	adds	r3, r7, #6
 8004e18:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1dba      	adds	r2, r7, #6
 8004e24:	215c      	movs	r1, #92	@ 0x5c
 8004e26:	8812      	ldrh	r2, [r2, #0]
 8004e28:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1dba      	adds	r2, r7, #6
 8004e2e:	215e      	movs	r1, #94	@ 0x5e
 8004e30:	8812      	ldrh	r2, [r2, #0]
 8004e32:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	2380      	movs	r3, #128	@ 0x80
 8004e40:	015b      	lsls	r3, r3, #5
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d10d      	bne.n	8004e62 <UART_Start_Receive_IT+0x56>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d104      	bne.n	8004e58 <UART_Start_Receive_IT+0x4c>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2260      	movs	r2, #96	@ 0x60
 8004e52:	497b      	ldr	r1, [pc, #492]	@ (8005040 <UART_Start_Receive_IT+0x234>)
 8004e54:	5299      	strh	r1, [r3, r2]
 8004e56:	e02e      	b.n	8004eb6 <UART_Start_Receive_IT+0xaa>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2260      	movs	r2, #96	@ 0x60
 8004e5c:	21ff      	movs	r1, #255	@ 0xff
 8004e5e:	5299      	strh	r1, [r3, r2]
 8004e60:	e029      	b.n	8004eb6 <UART_Start_Receive_IT+0xaa>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10d      	bne.n	8004e86 <UART_Start_Receive_IT+0x7a>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d104      	bne.n	8004e7c <UART_Start_Receive_IT+0x70>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2260      	movs	r2, #96	@ 0x60
 8004e76:	21ff      	movs	r1, #255	@ 0xff
 8004e78:	5299      	strh	r1, [r3, r2]
 8004e7a:	e01c      	b.n	8004eb6 <UART_Start_Receive_IT+0xaa>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2260      	movs	r2, #96	@ 0x60
 8004e80:	217f      	movs	r1, #127	@ 0x7f
 8004e82:	5299      	strh	r1, [r3, r2]
 8004e84:	e017      	b.n	8004eb6 <UART_Start_Receive_IT+0xaa>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	2380      	movs	r3, #128	@ 0x80
 8004e8c:	055b      	lsls	r3, r3, #21
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d10d      	bne.n	8004eae <UART_Start_Receive_IT+0xa2>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d104      	bne.n	8004ea4 <UART_Start_Receive_IT+0x98>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2260      	movs	r2, #96	@ 0x60
 8004e9e:	217f      	movs	r1, #127	@ 0x7f
 8004ea0:	5299      	strh	r1, [r3, r2]
 8004ea2:	e008      	b.n	8004eb6 <UART_Start_Receive_IT+0xaa>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2260      	movs	r2, #96	@ 0x60
 8004ea8:	213f      	movs	r1, #63	@ 0x3f
 8004eaa:	5299      	strh	r1, [r3, r2]
 8004eac:	e003      	b.n	8004eb6 <UART_Start_Receive_IT+0xaa>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2260      	movs	r2, #96	@ 0x60
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2290      	movs	r2, #144	@ 0x90
 8004eba:	2100      	movs	r1, #0
 8004ebc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	228c      	movs	r2, #140	@ 0x8c
 8004ec2:	2122      	movs	r1, #34	@ 0x22
 8004ec4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eca:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8004ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ece:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ed6:	f383 8810 	msr	PRIMASK, r3
}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	609a      	str	r2, [r3, #8]
 8004eec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004eee:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ef2:	f383 8810 	msr	PRIMASK, r3
}
 8004ef6:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004efc:	2380      	movs	r3, #128	@ 0x80
 8004efe:	059b      	lsls	r3, r3, #22
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d150      	bne.n	8004fa6 <UART_Start_Receive_IT+0x19a>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2268      	movs	r2, #104	@ 0x68
 8004f08:	5a9b      	ldrh	r3, [r3, r2]
 8004f0a:	1dba      	adds	r2, r7, #6
 8004f0c:	8812      	ldrh	r2, [r2, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d349      	bcc.n	8004fa6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	2380      	movs	r3, #128	@ 0x80
 8004f18:	015b      	lsls	r3, r3, #5
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d107      	bne.n	8004f2e <UART_Start_Receive_IT+0x122>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d103      	bne.n	8004f2e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4a46      	ldr	r2, [pc, #280]	@ (8005044 <UART_Start_Receive_IT+0x238>)
 8004f2a:	675a      	str	r2, [r3, #116]	@ 0x74
 8004f2c:	e002      	b.n	8004f34 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a45      	ldr	r2, [pc, #276]	@ (8005048 <UART_Start_Receive_IT+0x23c>)
 8004f32:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d019      	beq.n	8004f70 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f40:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f46:	2301      	movs	r3, #1
 8004f48:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4c:	f383 8810 	msr	PRIMASK, r3
}
 8004f50:	46c0      	nop			@ (mov r8, r8)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2180      	movs	r1, #128	@ 0x80
 8004f5e:	0049      	lsls	r1, r1, #1
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6a:	f383 8810 	msr	PRIMASK, r3
}
 8004f6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f70:	f3ef 8310 	mrs	r3, PRIMASK
 8004f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f78:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f80:	f383 8810 	msr	PRIMASK, r3
}
 8004f84:	46c0      	nop			@ (mov r8, r8)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2180      	movs	r1, #128	@ 0x80
 8004f92:	0549      	lsls	r1, r1, #21
 8004f94:	430a      	orrs	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]
 8004f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f9a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9e:	f383 8810 	msr	PRIMASK, r3
}
 8004fa2:	46c0      	nop			@ (mov r8, r8)
 8004fa4:	e047      	b.n	8005036 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	2380      	movs	r3, #128	@ 0x80
 8004fac:	015b      	lsls	r3, r3, #5
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d107      	bne.n	8004fc2 <UART_Start_Receive_IT+0x1b6>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4a23      	ldr	r2, [pc, #140]	@ (800504c <UART_Start_Receive_IT+0x240>)
 8004fbe:	675a      	str	r2, [r3, #116]	@ 0x74
 8004fc0:	e002      	b.n	8004fc8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4a22      	ldr	r2, [pc, #136]	@ (8005050 <UART_Start_Receive_IT+0x244>)
 8004fc6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d019      	beq.n	8005004 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004fd6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fda:	2301      	movs	r3, #1
 8004fdc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	f383 8810 	msr	PRIMASK, r3
}
 8004fe4:	46c0      	nop			@ (mov r8, r8)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2190      	movs	r1, #144	@ 0x90
 8004ff2:	0049      	lsls	r1, r1, #1
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	f383 8810 	msr	PRIMASK, r3
}
 8005002:	e018      	b.n	8005036 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005004:	f3ef 8310 	mrs	r3, PRIMASK
 8005008:	613b      	str	r3, [r7, #16]
  return(result);
 800500a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800500c:	653b      	str	r3, [r7, #80]	@ 0x50
 800500e:	2301      	movs	r3, #1
 8005010:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f383 8810 	msr	PRIMASK, r3
}
 8005018:	46c0      	nop			@ (mov r8, r8)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2120      	movs	r1, #32
 8005026:	430a      	orrs	r2, r1
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800502c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	f383 8810 	msr	PRIMASK, r3
}
 8005034:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	0018      	movs	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	b018      	add	sp, #96	@ 0x60
 800503e:	bd80      	pop	{r7, pc}
 8005040:	000001ff 	.word	0x000001ff
 8005044:	08005b19 	.word	0x08005b19
 8005048:	080057e5 	.word	0x080057e5
 800504c:	0800562d 	.word	0x0800562d
 8005050:	08005475 	.word	0x08005475

08005054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b08e      	sub	sp, #56	@ 0x38
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800505c:	f3ef 8310 	mrs	r3, PRIMASK
 8005060:	617b      	str	r3, [r7, #20]
  return(result);
 8005062:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005064:	637b      	str	r3, [r7, #52]	@ 0x34
 8005066:	2301      	movs	r3, #1
 8005068:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	f383 8810 	msr	PRIMASK, r3
}
 8005070:	46c0      	nop			@ (mov r8, r8)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4926      	ldr	r1, [pc, #152]	@ (8005118 <UART_EndRxTransfer+0xc4>)
 800507e:	400a      	ands	r2, r1
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005084:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f383 8810 	msr	PRIMASK, r3
}
 800508c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800508e:	f3ef 8310 	mrs	r3, PRIMASK
 8005092:	623b      	str	r3, [r7, #32]
  return(result);
 8005094:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005096:	633b      	str	r3, [r7, #48]	@ 0x30
 8005098:	2301      	movs	r3, #1
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	f383 8810 	msr	PRIMASK, r3
}
 80050a2:	46c0      	nop			@ (mov r8, r8)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	491b      	ldr	r1, [pc, #108]	@ (800511c <UART_EndRxTransfer+0xc8>)
 80050b0:	400a      	ands	r2, r1
 80050b2:	609a      	str	r2, [r3, #8]
 80050b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ba:	f383 8810 	msr	PRIMASK, r3
}
 80050be:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d118      	bne.n	80050fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050c8:	f3ef 8310 	mrs	r3, PRIMASK
 80050cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80050ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050d2:	2301      	movs	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f383 8810 	msr	PRIMASK, r3
}
 80050dc:	46c0      	nop			@ (mov r8, r8)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2110      	movs	r1, #16
 80050ea:	438a      	bics	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f383 8810 	msr	PRIMASK, r3
}
 80050f8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	228c      	movs	r2, #140	@ 0x8c
 80050fe:	2120      	movs	r1, #32
 8005100:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800510e:	46c0      	nop			@ (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b00e      	add	sp, #56	@ 0x38
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			@ (mov r8, r8)
 8005118:	fffffedf 	.word	0xfffffedf
 800511c:	effffffe 	.word	0xeffffffe

08005120 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	@ 0x28
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2288      	movs	r2, #136	@ 0x88
 800512c:	589b      	ldr	r3, [r3, r2]
 800512e:	2b21      	cmp	r3, #33	@ 0x21
 8005130:	d14c      	bne.n	80051cc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2256      	movs	r2, #86	@ 0x56
 8005136:	5a9b      	ldrh	r3, [r3, r2]
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d132      	bne.n	80051a4 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800513e:	f3ef 8310 	mrs	r3, PRIMASK
 8005142:	60bb      	str	r3, [r7, #8]
  return(result);
 8005144:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005146:	627b      	str	r3, [r7, #36]	@ 0x24
 8005148:	2301      	movs	r3, #1
 800514a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f383 8810 	msr	PRIMASK, r3
}
 8005152:	46c0      	nop			@ (mov r8, r8)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2180      	movs	r1, #128	@ 0x80
 8005160:	438a      	bics	r2, r1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f383 8810 	msr	PRIMASK, r3
}
 800516e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005170:	f3ef 8310 	mrs	r3, PRIMASK
 8005174:	617b      	str	r3, [r7, #20]
  return(result);
 8005176:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005178:	623b      	str	r3, [r7, #32]
 800517a:	2301      	movs	r3, #1
 800517c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	f383 8810 	msr	PRIMASK, r3
}
 8005184:	46c0      	nop			@ (mov r8, r8)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2140      	movs	r1, #64	@ 0x40
 8005192:	430a      	orrs	r2, r1
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f383 8810 	msr	PRIMASK, r3
}
 80051a0:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80051a2:	e013      	b.n	80051cc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a8:	781a      	ldrb	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2256      	movs	r2, #86	@ 0x56
 80051be:	5a9b      	ldrh	r3, [r3, r2]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b299      	uxth	r1, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2256      	movs	r2, #86	@ 0x56
 80051ca:	5299      	strh	r1, [r3, r2]
}
 80051cc:	46c0      	nop			@ (mov r8, r8)
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b00a      	add	sp, #40	@ 0x28
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08c      	sub	sp, #48	@ 0x30
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2288      	movs	r2, #136	@ 0x88
 80051e0:	589b      	ldr	r3, [r3, r2]
 80051e2:	2b21      	cmp	r3, #33	@ 0x21
 80051e4:	d151      	bne.n	800528a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2256      	movs	r2, #86	@ 0x56
 80051ea:	5a9b      	ldrh	r3, [r3, r2]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d132      	bne.n	8005258 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80051f2:	f3ef 8310 	mrs	r3, PRIMASK
 80051f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80051f8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80051fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051fc:	2301      	movs	r3, #1
 80051fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f383 8810 	msr	PRIMASK, r3
}
 8005206:	46c0      	nop			@ (mov r8, r8)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2180      	movs	r1, #128	@ 0x80
 8005214:	438a      	bics	r2, r1
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f383 8810 	msr	PRIMASK, r3
}
 8005222:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005224:	f3ef 8310 	mrs	r3, PRIMASK
 8005228:	61bb      	str	r3, [r7, #24]
  return(result);
 800522a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800522c:	627b      	str	r3, [r7, #36]	@ 0x24
 800522e:	2301      	movs	r3, #1
 8005230:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f383 8810 	msr	PRIMASK, r3
}
 8005238:	46c0      	nop			@ (mov r8, r8)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2140      	movs	r1, #64	@ 0x40
 8005246:	430a      	orrs	r2, r1
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f383 8810 	msr	PRIMASK, r3
}
 8005254:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005256:	e018      	b.n	800528a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800525c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800525e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	001a      	movs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	05d2      	lsls	r2, r2, #23
 800526a:	0dd2      	lsrs	r2, r2, #23
 800526c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005272:	1c9a      	adds	r2, r3, #2
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2256      	movs	r2, #86	@ 0x56
 800527c:	5a9b      	ldrh	r3, [r3, r2]
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b299      	uxth	r1, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2256      	movs	r2, #86	@ 0x56
 8005288:	5299      	strh	r1, [r3, r2]
}
 800528a:	46c0      	nop			@ (mov r8, r8)
 800528c:	46bd      	mov	sp, r7
 800528e:	b00c      	add	sp, #48	@ 0x30
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08c      	sub	sp, #48	@ 0x30
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2288      	movs	r2, #136	@ 0x88
 80052a0:	589b      	ldr	r3, [r3, r2]
 80052a2:	2b21      	cmp	r3, #33	@ 0x21
 80052a4:	d165      	bne.n	8005372 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80052a6:	232e      	movs	r3, #46	@ 0x2e
 80052a8:	18fb      	adds	r3, r7, r3
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	216a      	movs	r1, #106	@ 0x6a
 80052ae:	5a52      	ldrh	r2, [r2, r1]
 80052b0:	801a      	strh	r2, [r3, #0]
 80052b2:	e059      	b.n	8005368 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2256      	movs	r2, #86	@ 0x56
 80052b8:	5a9b      	ldrh	r3, [r3, r2]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d133      	bne.n	8005328 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052c0:	f3ef 8310 	mrs	r3, PRIMASK
 80052c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80052c6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80052c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052ca:	2301      	movs	r3, #1
 80052cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f383 8810 	msr	PRIMASK, r3
}
 80052d4:	46c0      	nop			@ (mov r8, r8)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4926      	ldr	r1, [pc, #152]	@ (800537c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80052e2:	400a      	ands	r2, r1
 80052e4:	609a      	str	r2, [r3, #8]
 80052e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f383 8810 	msr	PRIMASK, r3
}
 80052f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052f2:	f3ef 8310 	mrs	r3, PRIMASK
 80052f6:	61bb      	str	r3, [r7, #24]
  return(result);
 80052f8:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80052fc:	2301      	movs	r3, #1
 80052fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	f383 8810 	msr	PRIMASK, r3
}
 8005306:	46c0      	nop			@ (mov r8, r8)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2140      	movs	r1, #64	@ 0x40
 8005314:	430a      	orrs	r2, r1
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	f383 8810 	msr	PRIMASK, r3
}
 8005322:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8005324:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8005326:	e024      	b.n	8005372 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	2280      	movs	r2, #128	@ 0x80
 8005330:	4013      	ands	r3, r2
 8005332:	d013      	beq.n	800535c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005338:	781a      	ldrb	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2256      	movs	r2, #86	@ 0x56
 800534e:	5a9b      	ldrh	r3, [r3, r2]
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b299      	uxth	r1, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2256      	movs	r2, #86	@ 0x56
 800535a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800535c:	212e      	movs	r1, #46	@ 0x2e
 800535e:	187b      	adds	r3, r7, r1
 8005360:	881a      	ldrh	r2, [r3, #0]
 8005362:	187b      	adds	r3, r7, r1
 8005364:	3a01      	subs	r2, #1
 8005366:	801a      	strh	r2, [r3, #0]
 8005368:	232e      	movs	r3, #46	@ 0x2e
 800536a:	18fb      	adds	r3, r7, r3
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1a0      	bne.n	80052b4 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8005372:	46c0      	nop			@ (mov r8, r8)
 8005374:	46bd      	mov	sp, r7
 8005376:	b00c      	add	sp, #48	@ 0x30
 8005378:	bd80      	pop	{r7, pc}
 800537a:	46c0      	nop			@ (mov r8, r8)
 800537c:	ff7fffff 	.word	0xff7fffff

08005380 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08c      	sub	sp, #48	@ 0x30
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2288      	movs	r2, #136	@ 0x88
 800538c:	589b      	ldr	r3, [r3, r2]
 800538e:	2b21      	cmp	r3, #33	@ 0x21
 8005390:	d16a      	bne.n	8005468 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005392:	232e      	movs	r3, #46	@ 0x2e
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	216a      	movs	r1, #106	@ 0x6a
 800539a:	5a52      	ldrh	r2, [r2, r1]
 800539c:	801a      	strh	r2, [r3, #0]
 800539e:	e05e      	b.n	800545e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2256      	movs	r2, #86	@ 0x56
 80053a4:	5a9b      	ldrh	r3, [r3, r2]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d133      	bne.n	8005414 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80053ac:	f3ef 8310 	mrs	r3, PRIMASK
 80053b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80053b2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80053b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80053b6:	2301      	movs	r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f383 8810 	msr	PRIMASK, r3
}
 80053c0:	46c0      	nop			@ (mov r8, r8)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689a      	ldr	r2, [r3, #8]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4928      	ldr	r1, [pc, #160]	@ (8005470 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80053ce:	400a      	ands	r2, r1
 80053d0:	609a      	str	r2, [r3, #8]
 80053d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f383 8810 	msr	PRIMASK, r3
}
 80053dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80053de:	f3ef 8310 	mrs	r3, PRIMASK
 80053e2:	617b      	str	r3, [r7, #20]
  return(result);
 80053e4:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053e6:	623b      	str	r3, [r7, #32]
 80053e8:	2301      	movs	r3, #1
 80053ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f383 8810 	msr	PRIMASK, r3
}
 80053f2:	46c0      	nop			@ (mov r8, r8)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2140      	movs	r1, #64	@ 0x40
 8005400:	430a      	orrs	r2, r1
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f383 8810 	msr	PRIMASK, r3
}
 800540e:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8005410:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8005412:	e029      	b.n	8005468 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	2280      	movs	r2, #128	@ 0x80
 800541c:	4013      	ands	r3, r2
 800541e:	d018      	beq.n	8005452 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005424:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	001a      	movs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	05d2      	lsls	r2, r2, #23
 8005432:	0dd2      	lsrs	r2, r2, #23
 8005434:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800543a:	1c9a      	adds	r2, r3, #2
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2256      	movs	r2, #86	@ 0x56
 8005444:	5a9b      	ldrh	r3, [r3, r2]
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b299      	uxth	r1, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2256      	movs	r2, #86	@ 0x56
 8005450:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005452:	212e      	movs	r1, #46	@ 0x2e
 8005454:	187b      	adds	r3, r7, r1
 8005456:	881a      	ldrh	r2, [r3, #0]
 8005458:	187b      	adds	r3, r7, r1
 800545a:	3a01      	subs	r2, #1
 800545c:	801a      	strh	r2, [r3, #0]
 800545e:	232e      	movs	r3, #46	@ 0x2e
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d19b      	bne.n	80053a0 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8005468:	46c0      	nop			@ (mov r8, r8)
 800546a:	46bd      	mov	sp, r7
 800546c:	b00c      	add	sp, #48	@ 0x30
 800546e:	bd80      	pop	{r7, pc}
 8005470:	ff7fffff 	.word	0xff7fffff

08005474 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b094      	sub	sp, #80	@ 0x50
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800547c:	204e      	movs	r0, #78	@ 0x4e
 800547e:	183b      	adds	r3, r7, r0
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	2160      	movs	r1, #96	@ 0x60
 8005484:	5a52      	ldrh	r2, [r2, r1]
 8005486:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	228c      	movs	r2, #140	@ 0x8c
 800548c:	589b      	ldr	r3, [r3, r2]
 800548e:	2b22      	cmp	r3, #34	@ 0x22
 8005490:	d000      	beq.n	8005494 <UART_RxISR_8BIT+0x20>
 8005492:	e0ba      	b.n	800560a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800549a:	214c      	movs	r1, #76	@ 0x4c
 800549c:	187b      	adds	r3, r7, r1
 800549e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80054a0:	187b      	adds	r3, r7, r1
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	183b      	adds	r3, r7, r0
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b2d9      	uxtb	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b0:	400a      	ands	r2, r1
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	225e      	movs	r2, #94	@ 0x5e
 80054c4:	5a9b      	ldrh	r3, [r3, r2]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b299      	uxth	r1, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	225e      	movs	r2, #94	@ 0x5e
 80054d0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	225e      	movs	r2, #94	@ 0x5e
 80054d6:	5a9b      	ldrh	r3, [r3, r2]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d000      	beq.n	80054e0 <UART_RxISR_8BIT+0x6c>
 80054de:	e09c      	b.n	800561a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80054e0:	f3ef 8310 	mrs	r3, PRIMASK
 80054e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80054e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054ea:	2301      	movs	r3, #1
 80054ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f0:	f383 8810 	msr	PRIMASK, r3
}
 80054f4:	46c0      	nop			@ (mov r8, r8)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4948      	ldr	r1, [pc, #288]	@ (8005624 <UART_RxISR_8BIT+0x1b0>)
 8005502:	400a      	ands	r2, r1
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800550c:	f383 8810 	msr	PRIMASK, r3
}
 8005510:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005512:	f3ef 8310 	mrs	r3, PRIMASK
 8005516:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551a:	647b      	str	r3, [r7, #68]	@ 0x44
 800551c:	2301      	movs	r3, #1
 800551e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005522:	f383 8810 	msr	PRIMASK, r3
}
 8005526:	46c0      	nop			@ (mov r8, r8)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2101      	movs	r1, #1
 8005534:	438a      	bics	r2, r1
 8005536:	609a      	str	r2, [r3, #8]
 8005538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800553a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553e:	f383 8810 	msr	PRIMASK, r3
}
 8005542:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	228c      	movs	r2, #140	@ 0x8c
 8005548:	2120      	movs	r1, #32
 800554a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	2380      	movs	r3, #128	@ 0x80
 8005560:	041b      	lsls	r3, r3, #16
 8005562:	4013      	ands	r3, r2
 8005564:	d018      	beq.n	8005598 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005566:	f3ef 8310 	mrs	r3, PRIMASK
 800556a:	61bb      	str	r3, [r7, #24]
  return(result);
 800556c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800556e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005570:	2301      	movs	r3, #1
 8005572:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f383 8810 	msr	PRIMASK, r3
}
 800557a:	46c0      	nop			@ (mov r8, r8)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4928      	ldr	r1, [pc, #160]	@ (8005628 <UART_RxISR_8BIT+0x1b4>)
 8005588:	400a      	ands	r2, r1
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800558e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	f383 8810 	msr	PRIMASK, r3
}
 8005596:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d12f      	bne.n	8005600 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055a6:	f3ef 8310 	mrs	r3, PRIMASK
 80055aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80055ac:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b0:	2301      	movs	r3, #1
 80055b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f383 8810 	msr	PRIMASK, r3
}
 80055ba:	46c0      	nop			@ (mov r8, r8)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2110      	movs	r1, #16
 80055c8:	438a      	bics	r2, r1
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f383 8810 	msr	PRIMASK, r3
}
 80055d6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	2210      	movs	r2, #16
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b10      	cmp	r3, #16
 80055e4:	d103      	bne.n	80055ee <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2210      	movs	r2, #16
 80055ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	225c      	movs	r2, #92	@ 0x5c
 80055f2:	5a9a      	ldrh	r2, [r3, r2]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	0011      	movs	r1, r2
 80055f8:	0018      	movs	r0, r3
 80055fa:	f7ff f8af 	bl	800475c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055fe:	e00c      	b.n	800561a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	0018      	movs	r0, r3
 8005604:	f7fb fabc 	bl	8000b80 <HAL_UART_RxCpltCallback>
}
 8005608:	e007      	b.n	800561a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699a      	ldr	r2, [r3, #24]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2108      	movs	r1, #8
 8005616:	430a      	orrs	r2, r1
 8005618:	619a      	str	r2, [r3, #24]
}
 800561a:	46c0      	nop			@ (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	b014      	add	sp, #80	@ 0x50
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			@ (mov r8, r8)
 8005624:	fffffedf 	.word	0xfffffedf
 8005628:	fbffffff 	.word	0xfbffffff

0800562c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b094      	sub	sp, #80	@ 0x50
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005634:	204e      	movs	r0, #78	@ 0x4e
 8005636:	183b      	adds	r3, r7, r0
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	2160      	movs	r1, #96	@ 0x60
 800563c:	5a52      	ldrh	r2, [r2, r1]
 800563e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	228c      	movs	r2, #140	@ 0x8c
 8005644:	589b      	ldr	r3, [r3, r2]
 8005646:	2b22      	cmp	r3, #34	@ 0x22
 8005648:	d000      	beq.n	800564c <UART_RxISR_16BIT+0x20>
 800564a:	e0ba      	b.n	80057c2 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005652:	214c      	movs	r1, #76	@ 0x4c
 8005654:	187b      	adds	r3, r7, r1
 8005656:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800565e:	187b      	adds	r3, r7, r1
 8005660:	183a      	adds	r2, r7, r0
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	8812      	ldrh	r2, [r2, #0]
 8005666:	4013      	ands	r3, r2
 8005668:	b29a      	uxth	r2, r3
 800566a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800566c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005672:	1c9a      	adds	r2, r3, #2
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	225e      	movs	r2, #94	@ 0x5e
 800567c:	5a9b      	ldrh	r3, [r3, r2]
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b299      	uxth	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	225e      	movs	r2, #94	@ 0x5e
 8005688:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	225e      	movs	r2, #94	@ 0x5e
 800568e:	5a9b      	ldrh	r3, [r3, r2]
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d000      	beq.n	8005698 <UART_RxISR_16BIT+0x6c>
 8005696:	e09c      	b.n	80057d2 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005698:	f3ef 8310 	mrs	r3, PRIMASK
 800569c:	623b      	str	r3, [r7, #32]
  return(result);
 800569e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056a2:	2301      	movs	r3, #1
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	f383 8810 	msr	PRIMASK, r3
}
 80056ac:	46c0      	nop			@ (mov r8, r8)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4948      	ldr	r1, [pc, #288]	@ (80057dc <UART_RxISR_16BIT+0x1b0>)
 80056ba:	400a      	ands	r2, r1
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c4:	f383 8810 	msr	PRIMASK, r3
}
 80056c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80056ca:	f3ef 8310 	mrs	r3, PRIMASK
 80056ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80056d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80056d4:	2301      	movs	r3, #1
 80056d6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056da:	f383 8810 	msr	PRIMASK, r3
}
 80056de:	46c0      	nop			@ (mov r8, r8)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2101      	movs	r1, #1
 80056ec:	438a      	bics	r2, r1
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f6:	f383 8810 	msr	PRIMASK, r3
}
 80056fa:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	228c      	movs	r2, #140	@ 0x8c
 8005700:	2120      	movs	r1, #32
 8005702:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	2380      	movs	r3, #128	@ 0x80
 8005718:	041b      	lsls	r3, r3, #16
 800571a:	4013      	ands	r3, r2
 800571c:	d018      	beq.n	8005750 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800571e:	f3ef 8310 	mrs	r3, PRIMASK
 8005722:	617b      	str	r3, [r7, #20]
  return(result);
 8005724:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005728:	2301      	movs	r3, #1
 800572a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	f383 8810 	msr	PRIMASK, r3
}
 8005732:	46c0      	nop			@ (mov r8, r8)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4928      	ldr	r1, [pc, #160]	@ (80057e0 <UART_RxISR_16BIT+0x1b4>)
 8005740:	400a      	ands	r2, r1
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005746:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f383 8810 	msr	PRIMASK, r3
}
 800574e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005754:	2b01      	cmp	r3, #1
 8005756:	d12f      	bne.n	80057b8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800575e:	f3ef 8310 	mrs	r3, PRIMASK
 8005762:	60bb      	str	r3, [r7, #8]
  return(result);
 8005764:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005766:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005768:	2301      	movs	r3, #1
 800576a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f383 8810 	msr	PRIMASK, r3
}
 8005772:	46c0      	nop			@ (mov r8, r8)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2110      	movs	r1, #16
 8005780:	438a      	bics	r2, r1
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005786:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f383 8810 	msr	PRIMASK, r3
}
 800578e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	2210      	movs	r2, #16
 8005798:	4013      	ands	r3, r2
 800579a:	2b10      	cmp	r3, #16
 800579c:	d103      	bne.n	80057a6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2210      	movs	r2, #16
 80057a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	225c      	movs	r2, #92	@ 0x5c
 80057aa:	5a9a      	ldrh	r2, [r3, r2]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	0011      	movs	r1, r2
 80057b0:	0018      	movs	r0, r3
 80057b2:	f7fe ffd3 	bl	800475c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057b6:	e00c      	b.n	80057d2 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	0018      	movs	r0, r3
 80057bc:	f7fb f9e0 	bl	8000b80 <HAL_UART_RxCpltCallback>
}
 80057c0:	e007      	b.n	80057d2 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2108      	movs	r1, #8
 80057ce:	430a      	orrs	r2, r1
 80057d0:	619a      	str	r2, [r3, #24]
}
 80057d2:	46c0      	nop			@ (mov r8, r8)
 80057d4:	46bd      	mov	sp, r7
 80057d6:	b014      	add	sp, #80	@ 0x50
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	46c0      	nop			@ (mov r8, r8)
 80057dc:	fffffedf 	.word	0xfffffedf
 80057e0:	fbffffff 	.word	0xfbffffff

080057e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b0a0      	sub	sp, #128	@ 0x80
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80057ec:	237a      	movs	r3, #122	@ 0x7a
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	2160      	movs	r1, #96	@ 0x60
 80057f4:	5a52      	ldrh	r2, [r2, r1]
 80057f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	228c      	movs	r2, #140	@ 0x8c
 8005814:	589b      	ldr	r3, [r3, r2]
 8005816:	2b22      	cmp	r3, #34	@ 0x22
 8005818:	d000      	beq.n	800581c <UART_RxISR_8BIT_FIFOEN+0x38>
 800581a:	e166      	b.n	8005aea <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800581c:	236e      	movs	r3, #110	@ 0x6e
 800581e:	18fb      	adds	r3, r7, r3
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	2168      	movs	r1, #104	@ 0x68
 8005824:	5a52      	ldrh	r2, [r2, r1]
 8005826:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005828:	e10d      	b.n	8005a46 <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005830:	216c      	movs	r1, #108	@ 0x6c
 8005832:	187b      	adds	r3, r7, r1
 8005834:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005836:	187b      	adds	r3, r7, r1
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b2da      	uxtb	r2, r3
 800583c:	237a      	movs	r3, #122	@ 0x7a
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b2d9      	uxtb	r1, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005848:	400a      	ands	r2, r1
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	225e      	movs	r2, #94	@ 0x5e
 800585c:	5a9b      	ldrh	r3, [r3, r2]
 800585e:	b29b      	uxth	r3, r3
 8005860:	3b01      	subs	r3, #1
 8005862:	b299      	uxth	r1, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	225e      	movs	r2, #94	@ 0x5e
 8005868:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005872:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005874:	2207      	movs	r2, #7
 8005876:	4013      	ands	r3, r2
 8005878:	d049      	beq.n	800590e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800587a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800587c:	2201      	movs	r2, #1
 800587e:	4013      	ands	r3, r2
 8005880:	d010      	beq.n	80058a4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005882:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005884:	2380      	movs	r3, #128	@ 0x80
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	4013      	ands	r3, r2
 800588a:	d00b      	beq.n	80058a4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2201      	movs	r2, #1
 8005892:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2290      	movs	r2, #144	@ 0x90
 8005898:	589b      	ldr	r3, [r3, r2]
 800589a:	2201      	movs	r2, #1
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2190      	movs	r1, #144	@ 0x90
 80058a2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058a6:	2202      	movs	r2, #2
 80058a8:	4013      	ands	r3, r2
 80058aa:	d00f      	beq.n	80058cc <UART_RxISR_8BIT_FIFOEN+0xe8>
 80058ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058ae:	2201      	movs	r2, #1
 80058b0:	4013      	ands	r3, r2
 80058b2:	d00b      	beq.n	80058cc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2202      	movs	r2, #2
 80058ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2290      	movs	r2, #144	@ 0x90
 80058c0:	589b      	ldr	r3, [r3, r2]
 80058c2:	2204      	movs	r2, #4
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2190      	movs	r1, #144	@ 0x90
 80058ca:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058ce:	2204      	movs	r2, #4
 80058d0:	4013      	ands	r3, r2
 80058d2:	d00f      	beq.n	80058f4 <UART_RxISR_8BIT_FIFOEN+0x110>
 80058d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058d6:	2201      	movs	r2, #1
 80058d8:	4013      	ands	r3, r2
 80058da:	d00b      	beq.n	80058f4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2204      	movs	r2, #4
 80058e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2290      	movs	r2, #144	@ 0x90
 80058e8:	589b      	ldr	r3, [r3, r2]
 80058ea:	2202      	movs	r2, #2
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2190      	movs	r1, #144	@ 0x90
 80058f2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2290      	movs	r2, #144	@ 0x90
 80058f8:	589b      	ldr	r3, [r3, r2]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	0018      	movs	r0, r3
 8005902:	f7fe ff23 	bl	800474c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2290      	movs	r2, #144	@ 0x90
 800590a:	2100      	movs	r1, #0
 800590c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	225e      	movs	r2, #94	@ 0x5e
 8005912:	5a9b      	ldrh	r3, [r3, r2]
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d000      	beq.n	800591c <UART_RxISR_8BIT_FIFOEN+0x138>
 800591a:	e094      	b.n	8005a46 <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800591c:	f3ef 8310 	mrs	r3, PRIMASK
 8005920:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005924:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005926:	2301      	movs	r3, #1
 8005928:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800592a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800592c:	f383 8810 	msr	PRIMASK, r3
}
 8005930:	46c0      	nop			@ (mov r8, r8)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4971      	ldr	r1, [pc, #452]	@ (8005b04 <UART_RxISR_8BIT_FIFOEN+0x320>)
 800593e:	400a      	ands	r2, r1
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005944:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005948:	f383 8810 	msr	PRIMASK, r3
}
 800594c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800594e:	f3ef 8310 	mrs	r3, PRIMASK
 8005952:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005956:	667b      	str	r3, [r7, #100]	@ 0x64
 8005958:	2301      	movs	r3, #1
 800595a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800595e:	f383 8810 	msr	PRIMASK, r3
}
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689a      	ldr	r2, [r3, #8]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4966      	ldr	r1, [pc, #408]	@ (8005b08 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8005970:	400a      	ands	r2, r1
 8005972:	609a      	str	r2, [r3, #8]
 8005974:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005976:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800597a:	f383 8810 	msr	PRIMASK, r3
}
 800597e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	228c      	movs	r2, #140	@ 0x8c
 8005984:	2120      	movs	r1, #32
 8005986:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	2380      	movs	r3, #128	@ 0x80
 800599c:	041b      	lsls	r3, r3, #16
 800599e:	4013      	ands	r3, r2
 80059a0:	d018      	beq.n	80059d4 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80059a2:	f3ef 8310 	mrs	r3, PRIMASK
 80059a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80059a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80059ac:	2301      	movs	r3, #1
 80059ae:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b2:	f383 8810 	msr	PRIMASK, r3
}
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4952      	ldr	r1, [pc, #328]	@ (8005b0c <UART_RxISR_8BIT_FIFOEN+0x328>)
 80059c4:	400a      	ands	r2, r1
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059ca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ce:	f383 8810 	msr	PRIMASK, r3
}
 80059d2:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d12f      	bne.n	8005a3c <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80059e2:	f3ef 8310 	mrs	r3, PRIMASK
 80059e6:	623b      	str	r3, [r7, #32]
  return(result);
 80059e8:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059ec:	2301      	movs	r3, #1
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	f383 8810 	msr	PRIMASK, r3
}
 80059f6:	46c0      	nop			@ (mov r8, r8)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2110      	movs	r1, #16
 8005a04:	438a      	bics	r2, r1
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	f383 8810 	msr	PRIMASK, r3
}
 8005a12:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	2210      	movs	r2, #16
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b10      	cmp	r3, #16
 8005a20:	d103      	bne.n	8005a2a <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2210      	movs	r2, #16
 8005a28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	225c      	movs	r2, #92	@ 0x5c
 8005a2e:	5a9a      	ldrh	r2, [r3, r2]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	0011      	movs	r1, r2
 8005a34:	0018      	movs	r0, r3
 8005a36:	f7fe fe91 	bl	800475c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005a3a:	e00e      	b.n	8005a5a <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f7fb f89e 	bl	8000b80 <HAL_UART_RxCpltCallback>
        break;
 8005a44:	e009      	b.n	8005a5a <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a46:	236e      	movs	r3, #110	@ 0x6e
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <UART_RxISR_8BIT_FIFOEN+0x276>
 8005a50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a52:	2220      	movs	r2, #32
 8005a54:	4013      	ands	r3, r2
 8005a56:	d000      	beq.n	8005a5a <UART_RxISR_8BIT_FIFOEN+0x276>
 8005a58:	e6e7      	b.n	800582a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005a5a:	205a      	movs	r0, #90	@ 0x5a
 8005a5c:	183b      	adds	r3, r7, r0
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	215e      	movs	r1, #94	@ 0x5e
 8005a62:	5a52      	ldrh	r2, [r2, r1]
 8005a64:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a66:	0001      	movs	r1, r0
 8005a68:	187b      	adds	r3, r7, r1
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d044      	beq.n	8005afa <UART_RxISR_8BIT_FIFOEN+0x316>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2268      	movs	r2, #104	@ 0x68
 8005a74:	5a9b      	ldrh	r3, [r3, r2]
 8005a76:	187a      	adds	r2, r7, r1
 8005a78:	8812      	ldrh	r2, [r2, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d23d      	bcs.n	8005afa <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a82:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a84:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a86:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a88:	2301      	movs	r3, #1
 8005a8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f383 8810 	msr	PRIMASK, r3
}
 8005a92:	46c0      	nop			@ (mov r8, r8)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	491c      	ldr	r1, [pc, #112]	@ (8005b10 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005aa0:	400a      	ands	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]
 8005aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f383 8810 	msr	PRIMASK, r3
}
 8005aae:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a18      	ldr	r2, [pc, #96]	@ (8005b14 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8005ab4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aba:	617b      	str	r3, [r7, #20]
  return(result);
 8005abc:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	f383 8810 	msr	PRIMASK, r3
}
 8005aca:	46c0      	nop			@ (mov r8, r8)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2120      	movs	r1, #32
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ade:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f383 8810 	msr	PRIMASK, r3
}
 8005ae6:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ae8:	e007      	b.n	8005afa <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	699a      	ldr	r2, [r3, #24]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2108      	movs	r1, #8
 8005af6:	430a      	orrs	r2, r1
 8005af8:	619a      	str	r2, [r3, #24]
}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	46bd      	mov	sp, r7
 8005afe:	b020      	add	sp, #128	@ 0x80
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	46c0      	nop			@ (mov r8, r8)
 8005b04:	fffffeff 	.word	0xfffffeff
 8005b08:	effffffe 	.word	0xeffffffe
 8005b0c:	fbffffff 	.word	0xfbffffff
 8005b10:	efffffff 	.word	0xefffffff
 8005b14:	08005475 	.word	0x08005475

08005b18 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b0a2      	sub	sp, #136	@ 0x88
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005b20:	2382      	movs	r3, #130	@ 0x82
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	2160      	movs	r1, #96	@ 0x60
 8005b28:	5a52      	ldrh	r2, [r2, r1]
 8005b2a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	2284      	movs	r2, #132	@ 0x84
 8005b34:	18ba      	adds	r2, r7, r2
 8005b36:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	228c      	movs	r2, #140	@ 0x8c
 8005b4c:	589b      	ldr	r3, [r3, r2]
 8005b4e:	2b22      	cmp	r3, #34	@ 0x22
 8005b50:	d000      	beq.n	8005b54 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005b52:	e170      	b.n	8005e36 <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005b54:	2376      	movs	r3, #118	@ 0x76
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	2168      	movs	r1, #104	@ 0x68
 8005b5c:	5a52      	ldrh	r2, [r2, r1]
 8005b5e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b60:	e115      	b.n	8005d8e <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b68:	2174      	movs	r1, #116	@ 0x74
 8005b6a:	187b      	adds	r3, r7, r1
 8005b6c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b72:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005b74:	187b      	adds	r3, r7, r1
 8005b76:	2282      	movs	r2, #130	@ 0x82
 8005b78:	18ba      	adds	r2, r7, r2
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	8812      	ldrh	r2, [r2, #0]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b8a:	1c9a      	adds	r2, r3, #2
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	225e      	movs	r2, #94	@ 0x5e
 8005b94:	5a9b      	ldrh	r3, [r3, r2]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b299      	uxth	r1, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	225e      	movs	r2, #94	@ 0x5e
 8005ba0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	2184      	movs	r1, #132	@ 0x84
 8005baa:	187a      	adds	r2, r7, r1
 8005bac:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005bae:	187b      	adds	r3, r7, r1
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2207      	movs	r2, #7
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d04e      	beq.n	8005c56 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bb8:	187b      	adds	r3, r7, r1
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d010      	beq.n	8005be4 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005bc2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005bc4:	2380      	movs	r3, #128	@ 0x80
 8005bc6:	005b      	lsls	r3, r3, #1
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d00b      	beq.n	8005be4 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2290      	movs	r2, #144	@ 0x90
 8005bd8:	589b      	ldr	r3, [r3, r2]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2190      	movs	r1, #144	@ 0x90
 8005be2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005be4:	2384      	movs	r3, #132	@ 0x84
 8005be6:	18fb      	adds	r3, r7, r3
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2202      	movs	r2, #2
 8005bec:	4013      	ands	r3, r2
 8005bee:	d00f      	beq.n	8005c10 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005bf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	d00b      	beq.n	8005c10 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2290      	movs	r2, #144	@ 0x90
 8005c04:	589b      	ldr	r3, [r3, r2]
 8005c06:	2204      	movs	r2, #4
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2190      	movs	r1, #144	@ 0x90
 8005c0e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c10:	2384      	movs	r3, #132	@ 0x84
 8005c12:	18fb      	adds	r3, r7, r3
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2204      	movs	r2, #4
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d00f      	beq.n	8005c3c <UART_RxISR_16BIT_FIFOEN+0x124>
 8005c1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c1e:	2201      	movs	r2, #1
 8005c20:	4013      	ands	r3, r2
 8005c22:	d00b      	beq.n	8005c3c <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2204      	movs	r2, #4
 8005c2a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2290      	movs	r2, #144	@ 0x90
 8005c30:	589b      	ldr	r3, [r3, r2]
 8005c32:	2202      	movs	r2, #2
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2190      	movs	r1, #144	@ 0x90
 8005c3a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2290      	movs	r2, #144	@ 0x90
 8005c40:	589b      	ldr	r3, [r3, r2]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7fe fd7f 	bl	800474c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2290      	movs	r2, #144	@ 0x90
 8005c52:	2100      	movs	r1, #0
 8005c54:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	225e      	movs	r2, #94	@ 0x5e
 8005c5a:	5a9b      	ldrh	r3, [r3, r2]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d000      	beq.n	8005c64 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005c62:	e094      	b.n	8005d8e <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c64:	f3ef 8310 	mrs	r3, PRIMASK
 8005c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005c6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c6e:	2301      	movs	r3, #1
 8005c70:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c74:	f383 8810 	msr	PRIMASK, r3
}
 8005c78:	46c0      	nop			@ (mov r8, r8)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4972      	ldr	r1, [pc, #456]	@ (8005e50 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8005c86:	400a      	ands	r2, r1
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c8c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c90:	f383 8810 	msr	PRIMASK, r3
}
 8005c94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c96:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005c9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ca6:	f383 8810 	msr	PRIMASK, r3
}
 8005caa:	46c0      	nop			@ (mov r8, r8)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4967      	ldr	r1, [pc, #412]	@ (8005e54 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8005cb8:	400a      	ands	r2, r1
 8005cba:	609a      	str	r2, [r3, #8]
 8005cbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cbe:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cc2:	f383 8810 	msr	PRIMASK, r3
}
 8005cc6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	228c      	movs	r2, #140	@ 0x8c
 8005ccc:	2120      	movs	r1, #32
 8005cce:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	2380      	movs	r3, #128	@ 0x80
 8005ce4:	041b      	lsls	r3, r3, #16
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d018      	beq.n	8005d1c <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cea:	f3ef 8310 	mrs	r3, PRIMASK
 8005cee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cf2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfa:	f383 8810 	msr	PRIMASK, r3
}
 8005cfe:	46c0      	nop			@ (mov r8, r8)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4953      	ldr	r1, [pc, #332]	@ (8005e58 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005d0c:	400a      	ands	r2, r1
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d12:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d16:	f383 8810 	msr	PRIMASK, r3
}
 8005d1a:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d12f      	bne.n	8005d84 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d32:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d34:	2301      	movs	r3, #1
 8005d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3a:	f383 8810 	msr	PRIMASK, r3
}
 8005d3e:	46c0      	nop			@ (mov r8, r8)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2110      	movs	r1, #16
 8005d4c:	438a      	bics	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d56:	f383 8810 	msr	PRIMASK, r3
}
 8005d5a:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	2210      	movs	r2, #16
 8005d64:	4013      	ands	r3, r2
 8005d66:	2b10      	cmp	r3, #16
 8005d68:	d103      	bne.n	8005d72 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2210      	movs	r2, #16
 8005d70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	225c      	movs	r2, #92	@ 0x5c
 8005d76:	5a9a      	ldrh	r2, [r3, r2]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	0011      	movs	r1, r2
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f7fe fced 	bl	800475c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005d82:	e010      	b.n	8005da6 <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f7fa fefa 	bl	8000b80 <HAL_UART_RxCpltCallback>
        break;
 8005d8c:	e00b      	b.n	8005da6 <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d8e:	2376      	movs	r3, #118	@ 0x76
 8005d90:	18fb      	adds	r3, r7, r3
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d006      	beq.n	8005da6 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8005d98:	2384      	movs	r3, #132	@ 0x84
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	4013      	ands	r3, r2
 8005da2:	d000      	beq.n	8005da6 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8005da4:	e6dd      	b.n	8005b62 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005da6:	205e      	movs	r0, #94	@ 0x5e
 8005da8:	183b      	adds	r3, r7, r0
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	215e      	movs	r1, #94	@ 0x5e
 8005dae:	5a52      	ldrh	r2, [r2, r1]
 8005db0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005db2:	0001      	movs	r1, r0
 8005db4:	187b      	adds	r3, r7, r1
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d044      	beq.n	8005e46 <UART_RxISR_16BIT_FIFOEN+0x32e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2268      	movs	r2, #104	@ 0x68
 8005dc0:	5a9b      	ldrh	r3, [r3, r2]
 8005dc2:	187a      	adds	r2, r7, r1
 8005dc4:	8812      	ldrh	r2, [r2, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d23d      	bcs.n	8005e46 <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005dca:	f3ef 8310 	mrs	r3, PRIMASK
 8005dce:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005dd2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f383 8810 	msr	PRIMASK, r3
}
 8005dde:	46c0      	nop			@ (mov r8, r8)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	491c      	ldr	r1, [pc, #112]	@ (8005e5c <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005dec:	400a      	ands	r2, r1
 8005dee:	609a      	str	r2, [r3, #8]
 8005df0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005df2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f383 8810 	msr	PRIMASK, r3
}
 8005dfa:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a18      	ldr	r2, [pc, #96]	@ (8005e60 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8005e00:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005e02:	f3ef 8310 	mrs	r3, PRIMASK
 8005e06:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e08:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	f383 8810 	msr	PRIMASK, r3
}
 8005e16:	46c0      	nop			@ (mov r8, r8)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2120      	movs	r1, #32
 8005e24:	430a      	orrs	r2, r1
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	f383 8810 	msr	PRIMASK, r3
}
 8005e32:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e34:	e007      	b.n	8005e46 <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	699a      	ldr	r2, [r3, #24]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2108      	movs	r1, #8
 8005e42:	430a      	orrs	r2, r1
 8005e44:	619a      	str	r2, [r3, #24]
}
 8005e46:	46c0      	nop			@ (mov r8, r8)
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	b022      	add	sp, #136	@ 0x88
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	46c0      	nop			@ (mov r8, r8)
 8005e50:	fffffeff 	.word	0xfffffeff
 8005e54:	effffffe 	.word	0xeffffffe
 8005e58:	fbffffff 	.word	0xfbffffff
 8005e5c:	efffffff 	.word	0xefffffff
 8005e60:	0800562d 	.word	0x0800562d

08005e64 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e05d      	b.n	8005f38 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2288      	movs	r2, #136	@ 0x88
 8005e80:	589b      	ldr	r3, [r3, r2]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d107      	bne.n	8005e96 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2284      	movs	r2, #132	@ 0x84
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	0018      	movs	r0, r3
 8005e92:	f7fb fac5 	bl	8001420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2288      	movs	r2, #136	@ 0x88
 8005e9a:	2124      	movs	r1, #36	@ 0x24
 8005e9c:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	438a      	bics	r2, r1
 8005eac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f7fe fdd9 	bl	8004a70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f7fe fc57 	bl	8004774 <UART_SetConfig>
 8005ec6:	0003      	movs	r3, r0
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e033      	b.n	8005f38 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2180      	movs	r1, #128	@ 0x80
 8005edc:	01c9      	lsls	r1, r1, #7
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	4a15      	ldr	r2, [pc, #84]	@ (8005f40 <HAL_RS485Ex_Init+0xdc>)
 8005eea:	4013      	ands	r3, r2
 8005eec:	0019      	movs	r1, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	055b      	lsls	r3, r3, #21
 8005efc:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	041b      	lsls	r3, r3, #16
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8005f44 <HAL_RS485Ex_Init+0xe0>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	0019      	movs	r1, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2101      	movs	r1, #1
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	0018      	movs	r0, r3
 8005f32:	f7fe fe51 	bl	8004bd8 <UART_CheckIdleState>
 8005f36:	0003      	movs	r3, r0
}
 8005f38:	0018      	movs	r0, r3
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	b006      	add	sp, #24
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	ffff7fff 	.word	0xffff7fff
 8005f44:	fc00ffff 	.word	0xfc00ffff

08005f48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2284      	movs	r2, #132	@ 0x84
 8005f54:	5c9b      	ldrb	r3, [r3, r2]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d101      	bne.n	8005f5e <HAL_UARTEx_DisableFifoMode+0x16>
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e027      	b.n	8005fae <HAL_UARTEx_DisableFifoMode+0x66>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2284      	movs	r2, #132	@ 0x84
 8005f62:	2101      	movs	r1, #1
 8005f64:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2288      	movs	r2, #136	@ 0x88
 8005f6a:	2124      	movs	r1, #36	@ 0x24
 8005f6c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2101      	movs	r1, #1
 8005f82:	438a      	bics	r2, r1
 8005f84:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4a0b      	ldr	r2, [pc, #44]	@ (8005fb8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2288      	movs	r2, #136	@ 0x88
 8005fa0:	2120      	movs	r1, #32
 8005fa2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2284      	movs	r2, #132	@ 0x84
 8005fa8:	2100      	movs	r1, #0
 8005faa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	0018      	movs	r0, r3
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	b004      	add	sp, #16
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	46c0      	nop			@ (mov r8, r8)
 8005fb8:	dfffffff 	.word	0xdfffffff

08005fbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2284      	movs	r2, #132	@ 0x84
 8005fca:	5c9b      	ldrb	r3, [r3, r2]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	e02e      	b.n	8006032 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2284      	movs	r2, #132	@ 0x84
 8005fd8:	2101      	movs	r1, #1
 8005fda:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2288      	movs	r2, #136	@ 0x88
 8005fe0:	2124      	movs	r1, #36	@ 0x24
 8005fe2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	438a      	bics	r2, r1
 8005ffa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	08d9      	lsrs	r1, r3, #3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	0018      	movs	r0, r3
 8006014:	f000 f8b8 	bl	8006188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2288      	movs	r2, #136	@ 0x88
 8006024:	2120      	movs	r1, #32
 8006026:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2284      	movs	r2, #132	@ 0x84
 800602c:	2100      	movs	r1, #0
 800602e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	0018      	movs	r0, r3
 8006034:	46bd      	mov	sp, r7
 8006036:	b004      	add	sp, #16
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2284      	movs	r2, #132	@ 0x84
 800604a:	5c9b      	ldrb	r3, [r3, r2]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006050:	2302      	movs	r3, #2
 8006052:	e02f      	b.n	80060b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2284      	movs	r2, #132	@ 0x84
 8006058:	2101      	movs	r1, #1
 800605a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2288      	movs	r2, #136	@ 0x88
 8006060:	2124      	movs	r1, #36	@ 0x24
 8006062:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2101      	movs	r1, #1
 8006078:	438a      	bics	r2, r1
 800607a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	4a0e      	ldr	r2, [pc, #56]	@ (80060bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006084:	4013      	ands	r3, r2
 8006086:	0019      	movs	r1, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	0018      	movs	r0, r3
 8006096:	f000 f877 	bl	8006188 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2288      	movs	r2, #136	@ 0x88
 80060a6:	2120      	movs	r1, #32
 80060a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2284      	movs	r2, #132	@ 0x84
 80060ae:	2100      	movs	r1, #0
 80060b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b004      	add	sp, #16
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	f1ffffff 	.word	0xf1ffffff

080060c0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	@ 0x28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	1dbb      	adds	r3, r7, #6
 80060cc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ce:	2327      	movs	r3, #39	@ 0x27
 80060d0:	18fb      	adds	r3, r7, r3
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	228c      	movs	r2, #140	@ 0x8c
 80060da:	589b      	ldr	r3, [r3, r2]
 80060dc:	2b20      	cmp	r3, #32
 80060de:	d14e      	bne.n	800617e <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
 80060e6:	1dbb      	adds	r3, r7, #6
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_UARTEx_ReceiveToIdle_IT+0x32>
    {
      return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e046      	b.n	8006180 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	2380      	movs	r3, #128	@ 0x80
 80060f8:	015b      	lsls	r3, r3, #5
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d109      	bne.n	8006112 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d105      	bne.n	8006112 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2201      	movs	r2, #1
 800610a:	4013      	ands	r3, r2
 800610c:	d001      	beq.n	8006112 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
      {
        return  HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e036      	b.n	8006180 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2201      	movs	r2, #1
 8006116:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 800611e:	1dbb      	adds	r3, r7, #6
 8006120:	881a      	ldrh	r2, [r3, #0]
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	0018      	movs	r0, r3
 8006128:	f7fe fe70 	bl	8004e0c <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006130:	2b01      	cmp	r3, #1
 8006132:	d11c      	bne.n	800616e <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2210      	movs	r2, #16
 800613a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800613c:	f3ef 8310 	mrs	r3, PRIMASK
 8006140:	617b      	str	r3, [r7, #20]
  return(result);
 8006142:	697b      	ldr	r3, [r7, #20]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006144:	623b      	str	r3, [r7, #32]
 8006146:	2301      	movs	r3, #1
 8006148:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	f383 8810 	msr	PRIMASK, r3
}
 8006150:	46c0      	nop			@ (mov r8, r8)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2110      	movs	r1, #16
 800615e:	430a      	orrs	r2, r1
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	f383 8810 	msr	PRIMASK, r3
}
 800616c:	e003      	b.n	8006176 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800616e:	2327      	movs	r3, #39	@ 0x27
 8006170:	18fb      	adds	r3, r7, r3
 8006172:	2201      	movs	r2, #1
 8006174:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8006176:	2327      	movs	r3, #39	@ 0x27
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	e000      	b.n	8006180 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 800617e:	2302      	movs	r3, #2
  }
}
 8006180:	0018      	movs	r0, r3
 8006182:	46bd      	mov	sp, r7
 8006184:	b00a      	add	sp, #40	@ 0x28
 8006186:	bd80      	pop	{r7, pc}

08006188 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006194:	2b00      	cmp	r3, #0
 8006196:	d108      	bne.n	80061aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	226a      	movs	r2, #106	@ 0x6a
 800619c:	2101      	movs	r1, #1
 800619e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2268      	movs	r2, #104	@ 0x68
 80061a4:	2101      	movs	r1, #1
 80061a6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061a8:	e043      	b.n	8006232 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061aa:	260f      	movs	r6, #15
 80061ac:	19bb      	adds	r3, r7, r6
 80061ae:	2208      	movs	r2, #8
 80061b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061b2:	200e      	movs	r0, #14
 80061b4:	183b      	adds	r3, r7, r0
 80061b6:	2208      	movs	r2, #8
 80061b8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	0e5b      	lsrs	r3, r3, #25
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	240d      	movs	r4, #13
 80061c6:	193b      	adds	r3, r7, r4
 80061c8:	2107      	movs	r1, #7
 80061ca:	400a      	ands	r2, r1
 80061cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	0f5b      	lsrs	r3, r3, #29
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	250c      	movs	r5, #12
 80061da:	197b      	adds	r3, r7, r5
 80061dc:	2107      	movs	r1, #7
 80061de:	400a      	ands	r2, r1
 80061e0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061e2:	183b      	adds	r3, r7, r0
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	197a      	adds	r2, r7, r5
 80061e8:	7812      	ldrb	r2, [r2, #0]
 80061ea:	4914      	ldr	r1, [pc, #80]	@ (800623c <UARTEx_SetNbDataToProcess+0xb4>)
 80061ec:	5c8a      	ldrb	r2, [r1, r2]
 80061ee:	435a      	muls	r2, r3
 80061f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80061f2:	197b      	adds	r3, r7, r5
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	4a12      	ldr	r2, [pc, #72]	@ (8006240 <UARTEx_SetNbDataToProcess+0xb8>)
 80061f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061fa:	0019      	movs	r1, r3
 80061fc:	f7fa f80e 	bl	800021c <__divsi3>
 8006200:	0003      	movs	r3, r0
 8006202:	b299      	uxth	r1, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	226a      	movs	r2, #106	@ 0x6a
 8006208:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800620a:	19bb      	adds	r3, r7, r6
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	193a      	adds	r2, r7, r4
 8006210:	7812      	ldrb	r2, [r2, #0]
 8006212:	490a      	ldr	r1, [pc, #40]	@ (800623c <UARTEx_SetNbDataToProcess+0xb4>)
 8006214:	5c8a      	ldrb	r2, [r1, r2]
 8006216:	435a      	muls	r2, r3
 8006218:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800621a:	193b      	adds	r3, r7, r4
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	4a08      	ldr	r2, [pc, #32]	@ (8006240 <UARTEx_SetNbDataToProcess+0xb8>)
 8006220:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006222:	0019      	movs	r1, r3
 8006224:	f7f9 fffa 	bl	800021c <__divsi3>
 8006228:	0003      	movs	r3, r0
 800622a:	b299      	uxth	r1, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2268      	movs	r2, #104	@ 0x68
 8006230:	5299      	strh	r1, [r3, r2]
}
 8006232:	46c0      	nop			@ (mov r8, r8)
 8006234:	46bd      	mov	sp, r7
 8006236:	b005      	add	sp, #20
 8006238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800623a:	46c0      	nop			@ (mov r8, r8)
 800623c:	08006580 	.word	0x08006580
 8006240:	08006588 	.word	0x08006588

08006244 <memset>:
 8006244:	0003      	movs	r3, r0
 8006246:	1882      	adds	r2, r0, r2
 8006248:	4293      	cmp	r3, r2
 800624a:	d100      	bne.n	800624e <memset+0xa>
 800624c:	4770      	bx	lr
 800624e:	7019      	strb	r1, [r3, #0]
 8006250:	3301      	adds	r3, #1
 8006252:	e7f9      	b.n	8006248 <memset+0x4>

08006254 <__libc_init_array>:
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	2600      	movs	r6, #0
 8006258:	4c0c      	ldr	r4, [pc, #48]	@ (800628c <__libc_init_array+0x38>)
 800625a:	4d0d      	ldr	r5, [pc, #52]	@ (8006290 <__libc_init_array+0x3c>)
 800625c:	1b64      	subs	r4, r4, r5
 800625e:	10a4      	asrs	r4, r4, #2
 8006260:	42a6      	cmp	r6, r4
 8006262:	d109      	bne.n	8006278 <__libc_init_array+0x24>
 8006264:	2600      	movs	r6, #0
 8006266:	f000 f819 	bl	800629c <_init>
 800626a:	4c0a      	ldr	r4, [pc, #40]	@ (8006294 <__libc_init_array+0x40>)
 800626c:	4d0a      	ldr	r5, [pc, #40]	@ (8006298 <__libc_init_array+0x44>)
 800626e:	1b64      	subs	r4, r4, r5
 8006270:	10a4      	asrs	r4, r4, #2
 8006272:	42a6      	cmp	r6, r4
 8006274:	d105      	bne.n	8006282 <__libc_init_array+0x2e>
 8006276:	bd70      	pop	{r4, r5, r6, pc}
 8006278:	00b3      	lsls	r3, r6, #2
 800627a:	58eb      	ldr	r3, [r5, r3]
 800627c:	4798      	blx	r3
 800627e:	3601      	adds	r6, #1
 8006280:	e7ee      	b.n	8006260 <__libc_init_array+0xc>
 8006282:	00b3      	lsls	r3, r6, #2
 8006284:	58eb      	ldr	r3, [r5, r3]
 8006286:	4798      	blx	r3
 8006288:	3601      	adds	r6, #1
 800628a:	e7f2      	b.n	8006272 <__libc_init_array+0x1e>
 800628c:	08006590 	.word	0x08006590
 8006290:	08006590 	.word	0x08006590
 8006294:	08006594 	.word	0x08006594
 8006298:	08006590 	.word	0x08006590

0800629c <_init>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	46c0      	nop			@ (mov r8, r8)
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr

080062a8 <_fini>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	46c0      	nop			@ (mov r8, r8)
 80062ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ae:	bc08      	pop	{r3}
 80062b0:	469e      	mov	lr, r3
 80062b2:	4770      	bx	lr
