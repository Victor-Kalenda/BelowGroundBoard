
BelowGroundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000673c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  080067fc  080067fc  000077fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad8  08006ad8  00008084  2**0
                  CONTENTS
  4 .ARM          00000000  08006ad8  08006ad8  00008084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ad8  08006ad8  00008084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ad8  08006ad8  00007ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006adc  08006adc  00007adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08006ae0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  20000084  08006b64  00008084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000074c  08006b64  0000874c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d3e  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e41  00000000  00000000  0001fdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  00022c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001156  00000000  00000000  00024210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d81  00000000  00000000  00025366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a885  00000000  00000000  000280e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bbd9  00000000  00000000  0004296c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de545  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005170  00000000  00000000  000de588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e36f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080067e4 	.word	0x080067e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	080067e4 	.word	0x080067e4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f001 fb3e 	bl	8001a7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f889 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 fb71 	bl	8000ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000406:	f000 fb41 	bl	8000a8c <MX_DMA_Init>
  MX_ADC1_Init();
 800040a:	f000 f8c7 	bl	800059c <MX_ADC1_Init>
  MX_I2C1_Init();
 800040e:	f000 f99f 	bl	8000750 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000412:	f000 f9dd 	bl	80007d0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000416:	f000 fa19 	bl	800084c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800041a:	f000 fae7 	bl	80009ec <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800041e:	f000 fabf 	bl	80009a0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the pin mapping table
  pin_map[0] = Actuator_A_EN_Pin;
 8000422:	4b35      	ldr	r3, [pc, #212]	@ (80004f8 <main+0x104>)
 8000424:	2280      	movs	r2, #128	@ 0x80
 8000426:	0092      	lsls	r2, r2, #2
 8000428:	801a      	strh	r2, [r3, #0]
  pin_map[1] = Actuator_B_EN_Pin;
 800042a:	4b33      	ldr	r3, [pc, #204]	@ (80004f8 <main+0x104>)
 800042c:	2280      	movs	r2, #128	@ 0x80
 800042e:	0052      	lsls	r2, r2, #1
 8000430:	805a      	strh	r2, [r3, #2]
  pin_map[2] = Actuator_C_EN_Pin;
 8000432:	4b31      	ldr	r3, [pc, #196]	@ (80004f8 <main+0x104>)
 8000434:	2280      	movs	r2, #128	@ 0x80
 8000436:	809a      	strh	r2, [r3, #4]

  // Initialize the PID constraints to defaults
  pid_constraints.Kp = 1;              // Proportional gain constant
 8000438:	4b30      	ldr	r3, [pc, #192]	@ (80004fc <main+0x108>)
 800043a:	22fe      	movs	r2, #254	@ 0xfe
 800043c:	0592      	lsls	r2, r2, #22
 800043e:	601a      	str	r2, [r3, #0]
  pid_constraints.Ki = 0.1;            // Integral gain constant
 8000440:	4b2e      	ldr	r3, [pc, #184]	@ (80004fc <main+0x108>)
 8000442:	4a2f      	ldr	r2, [pc, #188]	@ (8000500 <main+0x10c>)
 8000444:	605a      	str	r2, [r3, #4]
  pid_constraints.Kd = 5;              // Derivative gain constant
 8000446:	4b2d      	ldr	r3, [pc, #180]	@ (80004fc <main+0x108>)
 8000448:	4a2e      	ldr	r2, [pc, #184]	@ (8000504 <main+0x110>)
 800044a:	609a      	str	r2, [r3, #8]
  pid_constraints.Kaw = 0.1;           // Anti-windup gain constant
 800044c:	4b2b      	ldr	r3, [pc, #172]	@ (80004fc <main+0x108>)
 800044e:	4a2c      	ldr	r2, [pc, #176]	@ (8000500 <main+0x10c>)
 8000450:	60da      	str	r2, [r3, #12]
  pid_constraints.T_C = 1;             // Time constant for derivative filtering
 8000452:	4b2a      	ldr	r3, [pc, #168]	@ (80004fc <main+0x108>)
 8000454:	22fe      	movs	r2, #254	@ 0xfe
 8000456:	0592      	lsls	r2, r2, #22
 8000458:	611a      	str	r2, [r3, #16]
  pid_constraints.T = 100;             // Time step
 800045a:	4b28      	ldr	r3, [pc, #160]	@ (80004fc <main+0x108>)
 800045c:	4a2a      	ldr	r2, [pc, #168]	@ (8000508 <main+0x114>)
 800045e:	615a      	str	r2, [r3, #20]
  pid_constraints.max = 100;           // Max command
 8000460:	4b26      	ldr	r3, [pc, #152]	@ (80004fc <main+0x108>)
 8000462:	4a29      	ldr	r2, [pc, #164]	@ (8000508 <main+0x114>)
 8000464:	619a      	str	r2, [r3, #24]
  pid_constraints.min = 0;             // Min command
 8000466:	4b25      	ldr	r3, [pc, #148]	@ (80004fc <main+0x108>)
 8000468:	2200      	movs	r2, #0
 800046a:	61da      	str	r2, [r3, #28]
  pid_constraints.max_rate = 40;       // Max rate of change of the command
 800046c:	4b23      	ldr	r3, [pc, #140]	@ (80004fc <main+0x108>)
 800046e:	4a27      	ldr	r2, [pc, #156]	@ (800050c <main+0x118>)
 8000470:	621a      	str	r2, [r3, #32]
  pid_constraints.integral = 0;        // Integral term
 8000472:	4b22      	ldr	r3, [pc, #136]	@ (80004fc <main+0x108>)
 8000474:	2200      	movs	r2, #0
 8000476:	625a      	str	r2, [r3, #36]	@ 0x24
  pid_constraints.err_prev = 0;        // Previous error
 8000478:	4b20      	ldr	r3, [pc, #128]	@ (80004fc <main+0x108>)
 800047a:	2200      	movs	r2, #0
 800047c:	629a      	str	r2, [r3, #40]	@ 0x28
  pid_constraints.deriv_prev = 0;      // Previous derivative
 800047e:	4b1f      	ldr	r3, [pc, #124]	@ (80004fc <main+0x108>)
 8000480:	2200      	movs	r2, #0
 8000482:	62da      	str	r2, [r3, #44]	@ 0x2c
  pid_constraints.command_sat_prev = 0;// Previous saturated command
 8000484:	4b1d      	ldr	r3, [pc, #116]	@ (80004fc <main+0x108>)
 8000486:	2200      	movs	r2, #0
 8000488:	631a      	str	r2, [r3, #48]	@ 0x30
  pid_constraints.command_prev = 0;    // Previous command
 800048a:	4b1c      	ldr	r3, [pc, #112]	@ (80004fc <main+0x108>)
 800048c:	2200      	movs	r2, #0
 800048e:	635a      	str	r2, [r3, #52]	@ 0x34

  if(modbus_set_rx() != HAL_OK)
 8000490:	f000 fee8 	bl	8001264 <modbus_set_rx>
 8000494:	1e03      	subs	r3, r0, #0
 8000496:	d001      	beq.n	800049c <main+0xa8>
  {
	  Error_Handler();
 8000498:	f000 fba2 	bl	8000be0 <Error_Handler>
   * target_actuator
   * 0: Actuator A
   * 1: Actuator B
   * 2: Actuator C
   */
  uint8_t target_actuator = 0;
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	  if(modbus_rx())
 80004a2:	f000 fec9 	bl	8001238 <modbus_rx>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d0fb      	beq.n	80004a2 <main+0xae>
	  {
		  int8_t status = 0;
 80004aa:	1dbb      	adds	r3, r7, #6
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 80004b0:	2000      	movs	r0, #0
 80004b2:	f000 fc85 	bl	8000dc0 <get_rx_buffer>
 80004b6:	0003      	movs	r3, r0
 80004b8:	001a      	movs	r2, r3
 80004ba:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <main+0x11c>)
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d114      	bne.n	80004ec <main+0xf8>
		  {
			  switch(get_rx_buffer(1))
 80004c2:	2001      	movs	r0, #1
 80004c4:	f000 fc7c 	bl	8000dc0 <get_rx_buffer>
 80004c8:	0003      	movs	r3, r0
 80004ca:	2b03      	cmp	r3, #3
 80004cc:	d002      	beq.n	80004d4 <main+0xe0>
 80004ce:	2b10      	cmp	r3, #16
 80004d0:	d006      	beq.n	80004e0 <main+0xec>
 80004d2:	e00b      	b.n	80004ec <main+0xf8>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 80004d4:	1dbc      	adds	r4, r7, #6
 80004d6:	f000 fca5 	bl	8000e24 <return_holding_registers>
 80004da:	0003      	movs	r3, r0
 80004dc:	7023      	strb	r3, [r4, #0]
					  break;
 80004de:	e005      	b.n	80004ec <main+0xf8>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 80004e0:	1dbc      	adds	r4, r7, #6
 80004e2:	f000 fd3b 	bl	8000f5c <edit_multiple_registers>
 80004e6:	0003      	movs	r3, r0
 80004e8:	7023      	strb	r3, [r4, #0]
					  break;
 80004ea:	46c0      	nop			@ (mov r8, r8)
			  {
				  // log error in a queue
				  //Error_Handler();
			  }
		  }
		  status = modbus_set_rx();
 80004ec:	1dbc      	adds	r4, r7, #6
 80004ee:	f000 feb9 	bl	8001264 <modbus_set_rx>
 80004f2:	0003      	movs	r3, r0
 80004f4:	7023      	strb	r3, [r4, #0]
	  if(modbus_rx())
 80004f6:	e7d4      	b.n	80004a2 <main+0xae>
 80004f8:	20000434 	.word	0x20000434
 80004fc:	200003fc 	.word	0x200003fc
 8000500:	3dcccccd 	.word	0x3dcccccd
 8000504:	40a00000 	.word	0x40a00000
 8000508:	42c80000 	.word	0x42c80000
 800050c:	42200000 	.word	0x42200000
 8000510:	20000000 	.word	0x20000000

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b08f      	sub	sp, #60	@ 0x3c
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	2418      	movs	r4, #24
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	2320      	movs	r3, #32
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f006 f927 	bl	8006778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	0018      	movs	r0, r3
 800052e:	2314      	movs	r3, #20
 8000530:	001a      	movs	r2, r3
 8000532:	2100      	movs	r1, #0
 8000534:	f006 f920 	bl	8006778 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2202      	movs	r2, #2
 800053c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2280      	movs	r2, #128	@ 0x80
 8000542:	0052      	lsls	r2, r2, #1
 8000544:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	2280      	movs	r2, #128	@ 0x80
 800054a:	0152      	lsls	r2, r2, #5
 800054c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2240      	movs	r2, #64	@ 0x40
 8000552:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	193b      	adds	r3, r7, r4
 8000556:	0018      	movs	r0, r3
 8000558:	f002 fe62 	bl	8003220 <HAL_RCC_OscConfig>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000560:	f000 fb3e 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2207      	movs	r2, #7
 8000568:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2100      	movs	r1, #0
 8000586:	0018      	movs	r0, r3
 8000588:	f003 f870 	bl	800366c <HAL_RCC_ClockConfig>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000590:	f000 fb26 	bl	8000be0 <Error_Handler>
  }
}
 8000594:	46c0      	nop			@ (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b00f      	add	sp, #60	@ 0x3c
 800059a:	bd90      	pop	{r4, r7, pc}

0800059c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	0018      	movs	r0, r3
 80005a6:	230c      	movs	r3, #12
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f006 f8e4 	bl	8006778 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b0:	4b5d      	ldr	r3, [pc, #372]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80005b2:	4a5e      	ldr	r2, [pc, #376]	@ (800072c <MX_ADC1_Init+0x190>)
 80005b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80005b6:	4b5c      	ldr	r3, [pc, #368]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80005b8:	22c0      	movs	r2, #192	@ 0xc0
 80005ba:	0612      	lsls	r2, r2, #24
 80005bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005be:	4b5a      	ldr	r3, [pc, #360]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c4:	4b58      	ldr	r3, [pc, #352]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80005ca:	4b57      	ldr	r3, [pc, #348]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80005cc:	2280      	movs	r2, #128	@ 0x80
 80005ce:	0612      	lsls	r2, r2, #24
 80005d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d2:	4b55      	ldr	r3, [pc, #340]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80005d4:	2204      	movs	r2, #4
 80005d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005d8:	4b53      	ldr	r3, [pc, #332]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80005de:	4b52      	ldr	r3, [pc, #328]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005e4:	4b50      	ldr	r3, [pc, #320]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 0;
 80005ea:	4b4f      	ldr	r3, [pc, #316]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f0:	4b4d      	ldr	r3, [pc, #308]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f6:	4b4c      	ldr	r3, [pc, #304]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005fc:	4b4a      	ldr	r3, [pc, #296]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80005fe:	222c      	movs	r2, #44	@ 0x2c
 8000600:	2101      	movs	r1, #1
 8000602:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000604:	4b48      	ldr	r3, [pc, #288]	@ (8000728 <MX_ADC1_Init+0x18c>)
 8000606:	2200      	movs	r2, #0
 8000608:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800060a:	4b47      	ldr	r3, [pc, #284]	@ (8000728 <MX_ADC1_Init+0x18c>)
 800060c:	2200      	movs	r2, #0
 800060e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000610:	4b45      	ldr	r3, [pc, #276]	@ (8000728 <MX_ADC1_Init+0x18c>)
 8000612:	223c      	movs	r2, #60	@ 0x3c
 8000614:	2100      	movs	r1, #0
 8000616:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000618:	4b43      	ldr	r3, [pc, #268]	@ (8000728 <MX_ADC1_Init+0x18c>)
 800061a:	2200      	movs	r2, #0
 800061c:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061e:	4b42      	ldr	r3, [pc, #264]	@ (8000728 <MX_ADC1_Init+0x18c>)
 8000620:	0018      	movs	r0, r3
 8000622:	f001 fba5 	bl	8001d70 <HAL_ADC_Init>
 8000626:	1e03      	subs	r3, r0, #0
 8000628:	d001      	beq.n	800062e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800062a:	f000 fad9 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2201      	movs	r2, #1
 8000632:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2201      	movs	r2, #1
 8000638:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063a:	1d3a      	adds	r2, r7, #4
 800063c:	4b3a      	ldr	r3, [pc, #232]	@ (8000728 <MX_ADC1_Init+0x18c>)
 800063e:	0011      	movs	r1, r2
 8000640:	0018      	movs	r0, r3
 8000642:	f001 fd3b 	bl	80020bc <HAL_ADC_ConfigChannel>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800064a:	f000 fac9 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4a37      	ldr	r2, [pc, #220]	@ (8000730 <MX_ADC1_Init+0x194>)
 8000652:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	1d3a      	adds	r2, r7, #4
 8000656:	4b34      	ldr	r3, [pc, #208]	@ (8000728 <MX_ADC1_Init+0x18c>)
 8000658:	0011      	movs	r1, r2
 800065a:	0018      	movs	r0, r3
 800065c:	f001 fd2e 	bl	80020bc <HAL_ADC_ConfigChannel>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000664:	f000 fabc 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4a32      	ldr	r2, [pc, #200]	@ (8000734 <MX_ADC1_Init+0x198>)
 800066c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066e:	1d3a      	adds	r2, r7, #4
 8000670:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <MX_ADC1_Init+0x18c>)
 8000672:	0011      	movs	r1, r2
 8000674:	0018      	movs	r0, r3
 8000676:	f001 fd21 	bl	80020bc <HAL_ADC_ConfigChannel>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800067e:	f000 faaf 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	4a2c      	ldr	r2, [pc, #176]	@ (8000738 <MX_ADC1_Init+0x19c>)
 8000686:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	1d3a      	adds	r2, r7, #4
 800068a:	4b27      	ldr	r3, [pc, #156]	@ (8000728 <MX_ADC1_Init+0x18c>)
 800068c:	0011      	movs	r1, r2
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fd14 	bl	80020bc <HAL_ADC_ConfigChannel>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000698:	f000 faa2 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4a27      	ldr	r2, [pc, #156]	@ (800073c <MX_ADC1_Init+0x1a0>)
 80006a0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a2:	1d3a      	adds	r2, r7, #4
 80006a4:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 fd07 	bl	80020bc <HAL_ADC_ConfigChannel>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80006b2:	f000 fa95 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4a21      	ldr	r2, [pc, #132]	@ (8000740 <MX_ADC1_Init+0x1a4>)
 80006ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	1d3a      	adds	r2, r7, #4
 80006be:	4b1a      	ldr	r3, [pc, #104]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80006c0:	0011      	movs	r1, r2
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 fcfa 	bl	80020bc <HAL_ADC_ConfigChannel>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80006cc:	f000 fa88 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000744 <MX_ADC1_Init+0x1a8>)
 80006d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d6:	1d3a      	adds	r2, r7, #4
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80006da:	0011      	movs	r1, r2
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fced 	bl	80020bc <HAL_ADC_ConfigChannel>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80006e6:	f000 fa7b 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4a16      	ldr	r2, [pc, #88]	@ (8000748 <MX_ADC1_Init+0x1ac>)
 80006ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f0:	1d3a      	adds	r2, r7, #4
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <MX_ADC1_Init+0x18c>)
 80006f4:	0011      	movs	r1, r2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 fce0 	bl	80020bc <HAL_ADC_ConfigChannel>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC1_Init+0x168>
  {
    Error_Handler();
 8000700:	f000 fa6e 	bl	8000be0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4a11      	ldr	r2, [pc, #68]	@ (800074c <MX_ADC1_Init+0x1b0>)
 8000708:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070a:	1d3a      	adds	r2, r7, #4
 800070c:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_ADC1_Init+0x18c>)
 800070e:	0011      	movs	r1, r2
 8000710:	0018      	movs	r0, r3
 8000712:	f001 fcd3 	bl	80020bc <HAL_ADC_ConfigChannel>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <MX_ADC1_Init+0x182>
  {
    Error_Handler();
 800071a:	f000 fa61 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b004      	add	sp, #16
 8000724:	bd80      	pop	{r7, pc}
 8000726:	46c0      	nop			@ (mov r8, r8)
 8000728:	200000a0 	.word	0x200000a0
 800072c:	40012400 	.word	0x40012400
 8000730:	04000002 	.word	0x04000002
 8000734:	08000004 	.word	0x08000004
 8000738:	0c000008 	.word	0x0c000008
 800073c:	10000010 	.word	0x10000010
 8000740:	14000020 	.word	0x14000020
 8000744:	18000040 	.word	0x18000040
 8000748:	1c000080 	.word	0x1c000080
 800074c:	20000100 	.word	0x20000100

08000750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	@ (80007c8 <MX_I2C1_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100412;
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	@ (80007cc <MX_I2C1_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000766:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000768:	2201      	movs	r2, #1
 800076a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b14      	ldr	r3, [pc, #80]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800078c:	0018      	movs	r0, r3
 800078e:	f002 fc09 	bl	8002fa4 <HAL_I2C_Init>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000796:	f000 fa23 	bl	8000be0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079a:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <MX_I2C1_Init+0x74>)
 800079c:	2100      	movs	r1, #0
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 fca6 	bl	80030f0 <HAL_I2CEx_ConfigAnalogFilter>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007a8:	f000 fa1a 	bl	8000be0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <MX_I2C1_Init+0x74>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fce9 	bl	8003188 <HAL_I2CEx_ConfigDigitalFilter>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 fa11 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000160 	.word	0x20000160
 80007c8:	40005400 	.word	0x40005400
 80007cc:	00100412 	.word	0x00100412

080007d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000848 <MX_SPI1_Init+0x78>)
 80007d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007dc:	2282      	movs	r2, #130	@ 0x82
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007e2:	4b18      	ldr	r3, [pc, #96]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e8:	4b16      	ldr	r3, [pc, #88]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007ea:	22e0      	movs	r2, #224	@ 0xe0
 80007ec:	00d2      	lsls	r2, r2, #3
 80007ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f6:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_SPI1_Init+0x74>)
 80007fe:	2280      	movs	r2, #128	@ 0x80
 8000800:	0092      	lsls	r2, r2, #2
 8000802:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_SPI1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_SPI1_Init+0x74>)
 800081e:	2207      	movs	r2, #7
 8000820:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_SPI1_Init+0x74>)
 800082a:	2208      	movs	r2, #8
 800082c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800082e:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <MX_SPI1_Init+0x74>)
 8000830:	0018      	movs	r0, r3
 8000832:	f003 f9bd 	bl	8003bb0 <HAL_SPI_Init>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800083a:	f000 f9d1 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000210 	.word	0x20000210
 8000848:	40013000 	.word	0x40013000

0800084c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b098      	sub	sp, #96	@ 0x60
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000852:	2354      	movs	r3, #84	@ 0x54
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	0018      	movs	r0, r3
 8000858:	230c      	movs	r3, #12
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f005 ff8b 	bl	8006778 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000862:	2338      	movs	r3, #56	@ 0x38
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	0018      	movs	r0, r3
 8000868:	231c      	movs	r3, #28
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	f005 ff83 	bl	8006778 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	0018      	movs	r0, r3
 8000876:	2334      	movs	r3, #52	@ 0x34
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f005 ff7c 	bl	8006778 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000880:	4b45      	ldr	r3, [pc, #276]	@ (8000998 <MX_TIM1_Init+0x14c>)
 8000882:	4a46      	ldr	r2, [pc, #280]	@ (800099c <MX_TIM1_Init+0x150>)
 8000884:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 12-1;
 8000886:	4b44      	ldr	r3, [pc, #272]	@ (8000998 <MX_TIM1_Init+0x14c>)
 8000888:	220b      	movs	r2, #11
 800088a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b42      	ldr	r3, [pc, #264]	@ (8000998 <MX_TIM1_Init+0x14c>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000892:	4b41      	ldr	r3, [pc, #260]	@ (8000998 <MX_TIM1_Init+0x14c>)
 8000894:	2263      	movs	r2, #99	@ 0x63
 8000896:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b3f      	ldr	r3, [pc, #252]	@ (8000998 <MX_TIM1_Init+0x14c>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800089e:	4b3e      	ldr	r3, [pc, #248]	@ (8000998 <MX_TIM1_Init+0x14c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a4:	4b3c      	ldr	r3, [pc, #240]	@ (8000998 <MX_TIM1_Init+0x14c>)
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000998 <MX_TIM1_Init+0x14c>)
 80008ac:	0018      	movs	r0, r3
 80008ae:	f003 fa8f 	bl	8003dd0 <HAL_TIM_PWM_Init>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 f993 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ba:	2154      	movs	r1, #84	@ 0x54
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ce:	187a      	adds	r2, r7, r1
 80008d0:	4b31      	ldr	r3, [pc, #196]	@ (8000998 <MX_TIM1_Init+0x14c>)
 80008d2:	0011      	movs	r1, r2
 80008d4:	0018      	movs	r0, r3
 80008d6:	f003 fef3 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80008de:	f000 f97f 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e2:	2138      	movs	r1, #56	@ 0x38
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2260      	movs	r2, #96	@ 0x60
 80008e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800090e:	1879      	adds	r1, r7, r1
 8000910:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <MX_TIM1_Init+0x14c>)
 8000912:	2200      	movs	r2, #0
 8000914:	0018      	movs	r0, r3
 8000916:	f003 fab3 	bl	8003e80 <HAL_TIM_PWM_ConfigChannel>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800091e:	f000 f95f 	bl	8000be0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2280      	movs	r2, #128	@ 0x80
 8000944:	0192      	lsls	r2, r2, #6
 8000946:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800095a:	1d3b      	adds	r3, r7, #4
 800095c:	2280      	movs	r2, #128	@ 0x80
 800095e:	0492      	lsls	r2, r2, #18
 8000960:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000974:	1d3a      	adds	r2, r7, #4
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <MX_TIM1_Init+0x14c>)
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f003 ff08 	bl	8004790 <HAL_TIMEx_ConfigBreakDeadTime>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000984:	f000 f92c 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000988:	4b03      	ldr	r3, [pc, #12]	@ (8000998 <MX_TIM1_Init+0x14c>)
 800098a:	0018      	movs	r0, r3
 800098c:	f000 fed6 	bl	800173c <HAL_TIM_MspPostInit>

}
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b018      	add	sp, #96	@ 0x60
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000274 	.word	0x20000274
 800099c:	40012c00 	.word	0x40012c00

080009a0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_TIM14_Init+0x40>)
 80009a6:	4a0f      	ldr	r2, [pc, #60]	@ (80009e4 <MX_TIM14_Init+0x44>)
 80009a8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 12 - 1 ;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	@ (80009e0 <MX_TIM14_Init+0x40>)
 80009ac:	220b      	movs	r2, #11
 80009ae:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b0:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <MX_TIM14_Init+0x40>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80009b6:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <MX_TIM14_Init+0x40>)
 80009b8:	4a0b      	ldr	r2, [pc, #44]	@ (80009e8 <MX_TIM14_Init+0x48>)
 80009ba:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <MX_TIM14_Init+0x40>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <MX_TIM14_Init+0x40>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009c8:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <MX_TIM14_Init+0x40>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f003 f9a8 	bl	8003d20 <HAL_TIM_Base_Init>
 80009d0:	1e03      	subs	r3, r0, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80009d4:	f000 f904 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	200002c0 	.word	0x200002c0
 80009e4:	40002000 	.word	0x40002000
 80009e8:	0000ffff 	.word	0x0000ffff

080009ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f0:	4b24      	ldr	r3, [pc, #144]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 80009f2:	4a25      	ldr	r2, [pc, #148]	@ (8000a88 <MX_USART1_UART_Init+0x9c>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009f6:	4b23      	ldr	r3, [pc, #140]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 80009f8:	2296      	movs	r2, #150	@ 0x96
 80009fa:	0192      	lsls	r2, r2, #6
 80009fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b1b      	ldr	r3, [pc, #108]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000a34:	4813      	ldr	r0, [pc, #76]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 8000a36:	2300      	movs	r3, #0
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f005 fc90 	bl	8006360 <HAL_RS485Ex_Init>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000a44:	f000 f8cc 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f005 fd4b 	bl	80064e8 <HAL_UARTEx_SetTxFifoThreshold>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8000a56:	f000 f8c3 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f005 fd82 	bl	8006568 <HAL_UARTEx_SetRxFifoThreshold>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8000a68:	f000 f8ba 	bl	8000be0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a6c:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <MX_USART1_UART_Init+0x98>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f005 fd00 	bl	8006474 <HAL_UARTEx_DisableFifoMode>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8000a78:	f000 f8b2 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	2000030c 	.word	0x2000030c
 8000a88:	40013800 	.word	0x40013800

08000a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <MX_DMA_Init+0x58>)
 8000a94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a96:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <MX_DMA_Init+0x58>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_DMA_Init+0x58>)
 8000aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	2009      	movs	r0, #9
 8000ab0:	f001 fd86 	bl	80025c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ab4:	2009      	movs	r0, #9
 8000ab6:	f001 fd98 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f001 fd7e 	bl	80025c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ac4:	200a      	movs	r0, #10
 8000ac6:	f001 fd90 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_DMA1_CH4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_DMA1_CH4_5_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	200b      	movs	r0, #11
 8000ad0:	f001 fd76 	bl	80025c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_DMA1_CH4_5_IRQn);
 8000ad4:	200b      	movs	r0, #11
 8000ad6:	f001 fd88 	bl	80025ea <HAL_NVIC_EnableIRQ>

}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b08b      	sub	sp, #44	@ 0x2c
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	2414      	movs	r4, #20
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	0018      	movs	r0, r3
 8000af4:	2314      	movs	r3, #20
 8000af6:	001a      	movs	r2, r3
 8000af8:	2100      	movs	r1, #0
 8000afa:	f005 fe3d 	bl	8006778 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	4b35      	ldr	r3, [pc, #212]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b02:	4b34      	ldr	r3, [pc, #208]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b04:	2104      	movs	r1, #4
 8000b06:	430a      	orrs	r2, r1
 8000b08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b0a:	4b32      	ldr	r3, [pc, #200]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b0e:	2204      	movs	r2, #4
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b16:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b22:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b26:	2220      	movs	r2, #32
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4b29      	ldr	r3, [pc, #164]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b32:	4b28      	ldr	r3, [pc, #160]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b34:	2101      	movs	r1, #1
 8000b36:	430a      	orrs	r2, r1
 8000b38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b3a:	4b26      	ldr	r3, [pc, #152]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b46:	4b23      	ldr	r3, [pc, #140]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b4a:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b52:	4b20      	ldr	r3, [pc, #128]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b56:	2202      	movs	r2, #2
 8000b58:	4013      	ands	r3, r2
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b64:	2108      	movs	r1, #8
 8000b66:	430a      	orrs	r2, r1
 8000b68:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_GPIO_Init+0xec>)
 8000b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b6e:	2208      	movs	r2, #8
 8000b70:	4013      	ands	r3, r2
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Actuator_C_EN_Pin|Actuator_B_EN_Pin|Actuator_A_EN_Pin, GPIO_PIN_RESET);
 8000b76:	23e0      	movs	r3, #224	@ 0xe0
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4817      	ldr	r0, [pc, #92]	@ (8000bd8 <MX_GPIO_Init+0xf0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	0019      	movs	r1, r3
 8000b80:	f002 f9f2 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Encoder_Pulse_B_Pin Encoder_Pulse_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Pulse_B_Pin|Encoder_Pulse_A_Pin;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2206      	movs	r2, #6
 8000b88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	4a10      	ldr	r2, [pc, #64]	@ (8000bdc <MX_GPIO_Init+0xf4>)
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	0010      	movs	r0, r2
 8000b9e:	f002 f871 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : Actuator_C_EN_Pin Actuator_B_EN_Pin Actuator_A_EN_Pin */
  GPIO_InitStruct.Pin = Actuator_C_EN_Pin|Actuator_B_EN_Pin|Actuator_A_EN_Pin;
 8000ba2:	0021      	movs	r1, r4
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	22e0      	movs	r2, #224	@ 0xe0
 8000ba8:	0092      	lsls	r2, r2, #2
 8000baa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2201      	movs	r2, #1
 8000bb0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <MX_GPIO_Init+0xf0>)
 8000bc2:	0019      	movs	r1, r3
 8000bc4:	0010      	movs	r0, r2
 8000bc6:	f002 f85d 	bl	8002c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b00b      	add	sp, #44	@ 0x2c
 8000bd0:	bd90      	pop	{r4, r7, pc}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	50000400 	.word	0x50000400
 8000bdc:	50000c00 	.word	0x50000c00

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	46c0      	nop			@ (mov r8, r8)
 8000bea:	e7fd      	b.n	8000be8 <Error_Handler+0x8>

08000bec <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	000a      	movs	r2, r1
 8000bf6:	1cbb      	adds	r3, r7, #2
 8000bf8:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a44      	ldr	r2, [pc, #272]	@ (8000d10 <HAL_UARTEx_RxEventCallback+0x124>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d000      	beq.n	8000c06 <HAL_UARTEx_RxEventCallback+0x1a>
 8000c04:	e080      	b.n	8000d08 <HAL_UARTEx_RxEventCallback+0x11c>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 8000c06:	4b43      	ldr	r3, [pc, #268]	@ (8000d14 <HAL_UARTEx_RxEventCallback+0x128>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	4b42      	ldr	r3, [pc, #264]	@ (8000d18 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000c0e:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 8000c10:	4b41      	ldr	r3, [pc, #260]	@ (8000d18 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	001a      	movs	r2, r3
 8000c18:	1cbb      	adds	r3, r7, #2
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	18d2      	adds	r2, r2, r3
 8000c1e:	2380      	movs	r3, #128	@ 0x80
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	429a      	cmp	r2, r3
 8000c24:	dd29      	ble.n	8000c7a <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 8000c26:	4b3c      	ldr	r3, [pc, #240]	@ (8000d18 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	240e      	movs	r4, #14
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	2180      	movs	r1, #128	@ 0x80
 8000c32:	0049      	lsls	r1, r1, #1
 8000c34:	1a8a      	subs	r2, r1, r2
 8000c36:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 8000c38:	4b37      	ldr	r3, [pc, #220]	@ (8000d18 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	001a      	movs	r2, r3
 8000c40:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <HAL_UARTEx_RxEventCallback+0x130>)
 8000c42:	18d0      	adds	r0, r2, r3
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	881a      	ldrh	r2, [r3, #0]
 8000c48:	4b35      	ldr	r3, [pc, #212]	@ (8000d20 <HAL_UARTEx_RxEventCallback+0x134>)
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	f005 fdc0 	bl	80067d0 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8000c50:	1cba      	adds	r2, r7, #2
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	8812      	ldrh	r2, [r2, #0]
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d14 <HAL_UARTEx_RxEventCallback+0x128>)
 8000c5e:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	881a      	ldrh	r2, [r3, #0]
 8000c64:	4b2e      	ldr	r3, [pc, #184]	@ (8000d20 <HAL_UARTEx_RxEventCallback+0x134>)
 8000c66:	18d1      	adds	r1, r2, r3
 8000c68:	4b2a      	ldr	r3, [pc, #168]	@ (8000d14 <HAL_UARTEx_RxEventCallback+0x128>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	001a      	movs	r2, r3
 8000c70:	4b2a      	ldr	r3, [pc, #168]	@ (8000d1c <HAL_UARTEx_RxEventCallback+0x130>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f005 fdac 	bl	80067d0 <memcpy>
 8000c78:	e014      	b.n	8000ca4 <HAL_UARTEx_RxEventCallback+0xb8>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 8000c7a:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	001a      	movs	r2, r3
 8000c82:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <HAL_UARTEx_RxEventCallback+0x130>)
 8000c84:	18d0      	adds	r0, r2, r3
 8000c86:	1cbb      	adds	r3, r7, #2
 8000c88:	881a      	ldrh	r2, [r3, #0]
 8000c8a:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <HAL_UARTEx_RxEventCallback+0x134>)
 8000c8c:	0019      	movs	r1, r3
 8000c8e:	f005 fd9f 	bl	80067d0 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8000c92:	4b21      	ldr	r3, [pc, #132]	@ (8000d18 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	1cbb      	adds	r3, r7, #2
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	18d3      	adds	r3, r2, r3
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <HAL_UARTEx_RxEventCallback+0x128>)
 8000ca2:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d24 <HAL_UARTEx_RxEventCallback+0x138>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d026      	beq.n	8000cfc <HAL_UARTEx_RxEventCallback+0x110>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 8000cae:	f000 ff57 	bl	8001b60 <HAL_GetTick>
 8000cb2:	0002      	movs	r2, r0
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000cb6:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	@ (8000d18 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <HAL_UARTEx_RxEventCallback+0x140>)
 8000cc0:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <HAL_UARTEx_RxEventCallback+0x138>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the message + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5]) + 2 + 1));
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_UARTEx_RxEventCallback+0x134>)
 8000cca:	791b      	ldrb	r3, [r3, #4]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <HAL_UARTEx_RxEventCallback+0x134>)
 8000cd2:	795b      	ldrb	r3, [r3, #5]
 8000cd4:	b21b      	sxth	r3, r3
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	3303      	adds	r3, #3
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	490f      	ldr	r1, [pc, #60]	@ (8000d20 <HAL_UARTEx_RxEventCallback+0x134>)
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <HAL_UARTEx_RxEventCallback+0x144>)
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f005 fc81 	bl	80065ec <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0x148>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <HAL_UARTEx_RxEventCallback+0x148>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2104      	movs	r1, #4
 8000cf6:	438a      	bics	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			rx_int = 1;
		}
	}
}
 8000cfa:	e005      	b.n	8000d08 <HAL_UARTEx_RxEventCallback+0x11c>
			modbus_header = 1;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <HAL_UARTEx_RxEventCallback+0x138>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	801a      	strh	r2, [r3, #0]
			rx_int = 1;
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <HAL_UARTEx_RxEventCallback+0x14c>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b005      	add	sp, #20
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	40013800 	.word	0x40013800
 8000d14:	20000744 	.word	0x20000744
 8000d18:	20000742 	.word	0x20000742
 8000d1c:	2000043c 	.word	0x2000043c
 8000d20:	2000063c 	.word	0x2000063c
 8000d24:	20000076 	.word	0x20000076
 8000d28:	2000073c 	.word	0x2000073c
 8000d2c:	20000740 	.word	0x20000740
 8000d30:	2000030c 	.word	0x2000030c
 8000d34:	200003a0 	.word	0x200003a0
 8000d38:	20000746 	.word	0x20000746

08000d3c <HAL_UART_TxCpltCallback>:

// Transmit Interrupt Handler
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	tx_int = 1;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <HAL_UART_TxCpltCallback+0x18>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
}
 8000d4a:	46c0      	nop			@ (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	20000747 	.word	0x20000747

08000d58 <handle_chunk_miss>:


// Chunk Miss Error Handling Function
int8_t handle_chunk_miss()
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <handle_chunk_miss+0x5c>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d120      	bne.n	8000daa <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8000d68:	f000 fefa 	bl	8001b60 <HAL_GetTick>
 8000d6c:	0002      	movs	r2, r0
 8000d6e:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <handle_chunk_miss+0x60>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b0a      	cmp	r3, #10
 8000d76:	d918      	bls.n	8000daa <handle_chunk_miss+0x52>
		{
			// TODO: Log the chunk miss as an error
			modbus_header = 1;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <handle_chunk_miss+0x5c>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort_IT(&huart1);
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <handle_chunk_miss+0x64>)
 8000d80:	0018      	movs	r0, r3
 8000d82:	f003 fe49 	bl	8004a18 <HAL_UART_Abort_IT>
 8000d86:	0003      	movs	r3, r0
 8000d88:	001a      	movs	r2, r3
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d104      	bne.n	8000da2 <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8000d98:	1dfc      	adds	r4, r7, #7
 8000d9a:	f000 fa63 	bl	8001264 <modbus_set_rx>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	7023      	strb	r3, [r4, #0]
			}
			return status;
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	e000      	b.n	8000dac <handle_chunk_miss+0x54>
		}
	}
	return HAL_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	0018      	movs	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b003      	add	sp, #12
 8000db2:	bd90      	pop	{r4, r7, pc}
 8000db4:	20000076 	.word	0x20000076
 8000db8:	2000073c 	.word	0x2000073c
 8000dbc:	2000030c 	.word	0x2000030c

08000dc0 <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	1dfb      	adds	r3, r7, #7
 8000dca:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2bff      	cmp	r3, #255	@ 0xff
 8000dd2:	d01e      	beq.n	8000e12 <get_rx_buffer+0x52>
	{
		return ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8000dd4:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <get_rx_buffer+0x5c>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	001a      	movs	r2, r3
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8000de2:	2bff      	cmp	r3, #255	@ 0xff
 8000de4:	dd0b      	ble.n	8000dfe <get_rx_buffer+0x3e>
 8000de6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e1c <get_rx_buffer+0x5c>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	001a      	movs	r2, r3
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	18d3      	adds	r3, r2, r3
 8000df4:	3b01      	subs	r3, #1
 8000df6:	3bff      	subs	r3, #255	@ 0xff
 8000df8:	4a09      	ldr	r2, [pc, #36]	@ (8000e20 <get_rx_buffer+0x60>)
 8000dfa:	5cd3      	ldrb	r3, [r2, r3]
 8000dfc:	e00a      	b.n	8000e14 <get_rx_buffer+0x54>
				modbus_rx_buffer[start_index + index];
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <get_rx_buffer+0x5c>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	001a      	movs	r2, r3
 8000e06:	1dfb      	adds	r3, r7, #7
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	18d3      	adds	r3, r2, r3
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 8000e0c:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <get_rx_buffer+0x60>)
 8000e0e:	5cd3      	ldrb	r3, [r2, r3]
 8000e10:	e000      	b.n	8000e14 <get_rx_buffer+0x54>
	}
	return 0xFF;
 8000e12:	23ff      	movs	r3, #255	@ 0xff
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b002      	add	sp, #8
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000740 	.word	0x20000740
 8000e20:	2000043c 	.word	0x2000043c

08000e24 <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	f7ff ffc8 	bl	8000dc0 <get_rx_buffer>
 8000e30:	0003      	movs	r3, r0
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	b21c      	sxth	r4, r3
 8000e36:	2003      	movs	r0, #3
 8000e38:	f7ff ffc2 	bl	8000dc0 <get_rx_buffer>
 8000e3c:	0003      	movs	r3, r0
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	4323      	orrs	r3, r4
 8000e42:	b21a      	sxth	r2, r3
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8000e48:	2004      	movs	r0, #4
 8000e4a:	f7ff ffb9 	bl	8000dc0 <get_rx_buffer>
 8000e4e:	0003      	movs	r3, r0
 8000e50:	021b      	lsls	r3, r3, #8
 8000e52:	b21c      	sxth	r4, r3
 8000e54:	2005      	movs	r0, #5
 8000e56:	f7ff ffb3 	bl	8000dc0 <get_rx_buffer>
 8000e5a:	0003      	movs	r3, r0
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4323      	orrs	r3, r4
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	1cbb      	adds	r3, r7, #2
 8000e64:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8000e66:	1cbb      	adds	r3, r7, #2
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e6c:	d803      	bhi.n	8000e76 <return_holding_registers+0x52>
 8000e6e:	1cbb      	adds	r3, r7, #2
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d104      	bne.n	8000e80 <return_holding_registers+0x5c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000e76:	2006      	movs	r0, #6
 8000e78:	f000 f94c 	bl	8001114 <modbus_exception>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	e065      	b.n	8000f4c <return_holding_registers+0x128>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000e80:	1cba      	adds	r2, r7, #2
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	8812      	ldrh	r2, [r2, #0]
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	18d3      	adds	r3, r2, r3
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	003b      	movs	r3, r7
 8000e8e:	3a01      	subs	r2, #1
 8000e90:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000e92:	003b      	movs	r3, r7
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e98:	d904      	bls.n	8000ea4 <return_holding_registers+0x80>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000e9a:	2005      	movs	r0, #5
 8000e9c:	f000 f93a 	bl	8001114 <modbus_exception>
 8000ea0:	0003      	movs	r3, r0
 8000ea2:	e053      	b.n	8000f4c <return_holding_registers+0x128>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f7ff ff8b 	bl	8000dc0 <get_rx_buffer>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	001a      	movs	r2, r3
 8000eae:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <return_holding_registers+0x130>)
 8000eb0:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f7ff ff84 	bl	8000dc0 <get_rx_buffer>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	001a      	movs	r2, r3
 8000ebc:	4b25      	ldr	r3, [pc, #148]	@ (8000f54 <return_holding_registers+0x130>)
 8000ebe:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8000ec0:	1cbb      	adds	r3, r7, #2
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	18db      	adds	r3, r3, r3
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b22      	ldr	r3, [pc, #136]	@ (8000f54 <return_holding_registers+0x130>)
 8000ecc:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8000ece:	1dfb      	adds	r3, r7, #7
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8000ed4:	1dbb      	adds	r3, r7, #6
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e028      	b.n	8000f2e <return_holding_registers+0x10a>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	881a      	ldrh	r2, [r3, #0]
 8000ee0:	1dbb      	adds	r3, r7, #6
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	18d2      	adds	r2, r2, r3
 8000ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <return_holding_registers+0x134>)
 8000ee8:	0052      	lsls	r2, r2, #1
 8000eea:	5ad3      	ldrh	r3, [r2, r3]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	b299      	uxth	r1, r3
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	1dfa      	adds	r2, r7, #7
 8000ef6:	1c58      	adds	r0, r3, #1
 8000ef8:	7010      	strb	r0, [r2, #0]
 8000efa:	001a      	movs	r2, r3
 8000efc:	b2c9      	uxtb	r1, r1
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <return_holding_registers+0x130>)
 8000f00:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	881a      	ldrh	r2, [r3, #0]
 8000f06:	1dbb      	adds	r3, r7, #6
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	18d2      	adds	r2, r2, r3
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <return_holding_registers+0x134>)
 8000f0e:	0052      	lsls	r2, r2, #1
 8000f10:	5ad1      	ldrh	r1, [r2, r3]
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	1dfa      	adds	r2, r7, #7
 8000f18:	1c58      	adds	r0, r3, #1
 8000f1a:	7010      	strb	r0, [r2, #0]
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	b2c9      	uxtb	r1, r1
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <return_holding_registers+0x130>)
 8000f22:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8000f24:	1dbb      	adds	r3, r7, #6
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	1dbb      	adds	r3, r7, #6
 8000f2a:	3201      	adds	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
 8000f2e:	1dbb      	adds	r3, r7, #6
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	1cba      	adds	r2, r7, #2
 8000f36:	8812      	ldrh	r2, [r2, #0]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8cf      	bhi.n	8000edc <return_holding_registers+0xb8>
	}

	return modbus_send(modbus_tx_buffer, index);
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	781a      	ldrb	r2, [r3, #0]
 8000f40:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <return_holding_registers+0x130>)
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f000 f90f 	bl	8001168 <modbus_send>
 8000f4a:	0003      	movs	r3, r0
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b003      	add	sp, #12
 8000f52:	bd90      	pop	{r4, r7, pc}
 8000f54:	2000053c 	.word	0x2000053c
 8000f58:	20000000 	.word	0x20000000

08000f5c <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8000f62:	2002      	movs	r0, #2
 8000f64:	f7ff ff2c 	bl	8000dc0 <get_rx_buffer>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	b21c      	sxth	r4, r3
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f7ff ff26 	bl	8000dc0 <get_rx_buffer>
 8000f74:	0003      	movs	r3, r0
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	4323      	orrs	r3, r4
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8000f80:	2004      	movs	r0, #4
 8000f82:	f7ff ff1d 	bl	8000dc0 <get_rx_buffer>
 8000f86:	0003      	movs	r3, r0
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	b21c      	sxth	r4, r3
 8000f8c:	2005      	movs	r0, #5
 8000f8e:	f7ff ff17 	bl	8000dc0 <get_rx_buffer>
 8000f92:	0003      	movs	r3, r0
 8000f94:	b21b      	sxth	r3, r3
 8000f96:	4323      	orrs	r3, r4
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	1cbb      	adds	r3, r7, #2
 8000f9c:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8000f9e:	1cbb      	adds	r3, r7, #2
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	2b7d      	cmp	r3, #125	@ 0x7d
 8000fa4:	d803      	bhi.n	8000fae <edit_multiple_registers+0x52>
 8000fa6:	1cbb      	adds	r3, r7, #2
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d104      	bne.n	8000fb8 <edit_multiple_registers+0x5c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000fae:	2006      	movs	r0, #6
 8000fb0:	f000 f8b0 	bl	8001114 <modbus_exception>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	e0a4      	b.n	8001102 <edit_multiple_registers+0x1a6>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000fb8:	1cba      	adds	r2, r7, #2
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	8812      	ldrh	r2, [r2, #0]
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	18d3      	adds	r3, r2, r3
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	003b      	movs	r3, r7
 8000fc6:	3a01      	subs	r2, #1
 8000fc8:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000fca:	003b      	movs	r3, r7
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	2b3b      	cmp	r3, #59	@ 0x3b
 8000fd0:	d904      	bls.n	8000fdc <edit_multiple_registers+0x80>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000fd2:	2005      	movs	r0, #5
 8000fd4:	f000 f89e 	bl	8001114 <modbus_exception>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	e092      	b.n	8001102 <edit_multiple_registers+0x1a6>
	}

	if((last_register_address <= 10 && last_register_address >= 2) 		||
 8000fdc:	003b      	movs	r3, r7
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	2b0a      	cmp	r3, #10
 8000fe2:	d803      	bhi.n	8000fec <edit_multiple_registers+0x90>
 8000fe4:	003b      	movs	r3, r7
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d80f      	bhi.n	800100c <edit_multiple_registers+0xb0>
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	2b0a      	cmp	r3, #10
 8000ff2:	d803      	bhi.n	8000ffc <edit_multiple_registers+0xa0>
		(first_register_address <= 10 && first_register_address >= 2) 	||
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d807      	bhi.n	800100c <edit_multiple_registers+0xb0>
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d808      	bhi.n	8001016 <edit_multiple_registers+0xba>
		(first_register_address < 2 && last_register_address > 10))
 8001004:	003b      	movs	r3, r7
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	2b0a      	cmp	r3, #10
 800100a:	d904      	bls.n	8001016 <edit_multiple_registers+0xba>
	{
		// Ensure that ADC values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 800100c:	2004      	movs	r0, #4
 800100e:	f000 f881 	bl	8001114 <modbus_exception>
 8001012:	0003      	movs	r3, r0
 8001014:	e075      	b.n	8001102 <edit_multiple_registers+0x1a6>
	}


	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff fed2 	bl	8000dc0 <get_rx_buffer>
 800101c:	0003      	movs	r3, r0
 800101e:	001a      	movs	r2, r3
 8001020:	4b3a      	ldr	r3, [pc, #232]	@ (800110c <edit_multiple_registers+0x1b0>)
 8001022:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8001024:	2001      	movs	r0, #1
 8001026:	f7ff fecb 	bl	8000dc0 <get_rx_buffer>
 800102a:	0003      	movs	r3, r0
 800102c:	001a      	movs	r2, r3
 800102e:	4b37      	ldr	r3, [pc, #220]	@ (800110c <edit_multiple_registers+0x1b0>)
 8001030:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8001032:	1cbb      	adds	r3, r7, #2
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	18db      	adds	r3, r3, r3
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b33      	ldr	r3, [pc, #204]	@ (800110c <edit_multiple_registers+0x1b0>)
 800103e:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8001040:	1dfb      	adds	r3, r7, #7
 8001042:	2203      	movs	r2, #3
 8001044:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8001046:	1dbb      	adds	r3, r7, #6
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	e04a      	b.n	80010e4 <edit_multiple_registers+0x188>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 6) << 8) | get_rx_buffer(2 * i + 7);
 800104e:	1dbb      	adds	r3, r7, #6
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	3303      	adds	r3, #3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	18db      	adds	r3, r3, r3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	0018      	movs	r0, r3
 800105c:	f7ff feb0 	bl	8000dc0 <get_rx_buffer>
 8001060:	0003      	movs	r3, r0
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21c      	sxth	r4, r3
 8001066:	1dbb      	adds	r3, r7, #6
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	18db      	adds	r3, r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	3307      	adds	r3, #7
 8001070:	b2db      	uxtb	r3, r3
 8001072:	0018      	movs	r0, r3
 8001074:	f7ff fea4 	bl	8000dc0 <get_rx_buffer>
 8001078:	0003      	movs	r3, r0
 800107a:	b21b      	sxth	r3, r3
 800107c:	4323      	orrs	r3, r4
 800107e:	b219      	sxth	r1, r3
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	881a      	ldrh	r2, [r3, #0]
 8001084:	1dbb      	adds	r3, r7, #6
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	18d2      	adds	r2, r2, r3
 800108a:	b289      	uxth	r1, r1
 800108c:	4b20      	ldr	r3, [pc, #128]	@ (8001110 <edit_multiple_registers+0x1b4>)
 800108e:	0052      	lsls	r2, r2, #1
 8001090:	52d1      	strh	r1, [r2, r3]
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	881a      	ldrh	r2, [r3, #0]
 8001096:	1dbb      	adds	r3, r7, #6
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	18d2      	adds	r2, r2, r3
 800109c:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <edit_multiple_registers+0x1b4>)
 800109e:	0052      	lsls	r2, r2, #1
 80010a0:	5ad3      	ldrh	r3, [r2, r3]
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	b299      	uxth	r1, r3
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	1dfa      	adds	r2, r7, #7
 80010ac:	1c58      	adds	r0, r3, #1
 80010ae:	7010      	strb	r0, [r2, #0]
 80010b0:	001a      	movs	r2, r3
 80010b2:	b2c9      	uxtb	r1, r1
 80010b4:	4b15      	ldr	r3, [pc, #84]	@ (800110c <edit_multiple_registers+0x1b0>)
 80010b6:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	881a      	ldrh	r2, [r3, #0]
 80010bc:	1dbb      	adds	r3, r7, #6
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	18d2      	adds	r2, r2, r3
 80010c2:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <edit_multiple_registers+0x1b4>)
 80010c4:	0052      	lsls	r2, r2, #1
 80010c6:	5ad1      	ldrh	r1, [r2, r3]
 80010c8:	1dfb      	adds	r3, r7, #7
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	1dfa      	adds	r2, r7, #7
 80010ce:	1c58      	adds	r0, r3, #1
 80010d0:	7010      	strb	r0, [r2, #0]
 80010d2:	001a      	movs	r2, r3
 80010d4:	b2c9      	uxtb	r1, r1
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <edit_multiple_registers+0x1b0>)
 80010d8:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 80010da:	1dbb      	adds	r3, r7, #6
 80010dc:	781a      	ldrb	r2, [r3, #0]
 80010de:	1dbb      	adds	r3, r7, #6
 80010e0:	3201      	adds	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	1dbb      	adds	r3, r7, #6
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	1cba      	adds	r2, r7, #2
 80010ec:	8812      	ldrh	r2, [r2, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d8ad      	bhi.n	800104e <edit_multiple_registers+0xf2>
	}

	return modbus_send(modbus_tx_buffer, index);
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781a      	ldrb	r2, [r3, #0]
 80010f6:	4b05      	ldr	r3, [pc, #20]	@ (800110c <edit_multiple_registers+0x1b0>)
 80010f8:	0011      	movs	r1, r2
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 f834 	bl	8001168 <modbus_send>
 8001100:	0003      	movs	r3, r0
}
 8001102:	0018      	movs	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	b003      	add	sp, #12
 8001108:	bd90      	pop	{r4, r7, pc}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	2000053c 	.word	0x2000053c
 8001110:	20000000 	.word	0x20000000

08001114 <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	0002      	movs	r2, r0
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff fe4d 	bl	8000dc0 <get_rx_buffer>
 8001126:	0003      	movs	r3, r0
 8001128:	001a      	movs	r2, r3
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <modbus_exception+0x50>)
 800112c:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 800112e:	2001      	movs	r0, #1
 8001130:	f7ff fe46 	bl	8000dc0 <get_rx_buffer>
 8001134:	0003      	movs	r3, r0
 8001136:	001a      	movs	r2, r3
 8001138:	2380      	movs	r3, #128	@ 0x80
 800113a:	425b      	negs	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <modbus_exception+0x50>)
 8001142:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	3b03      	subs	r3, #3
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <modbus_exception+0x50>)
 800114e:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <modbus_exception+0x50>)
 8001152:	2103      	movs	r1, #3
 8001154:	0018      	movs	r0, r3
 8001156:	f000 f807 	bl	8001168 <modbus_send>
 800115a:	0003      	movs	r3, r0
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000053c 	.word	0x2000053c

08001168 <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	000a      	movs	r2, r1
 8001172:	1cfb      	adds	r3, r7, #3
 8001174:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 8001176:	250e      	movs	r5, #14
 8001178:	197c      	adds	r4, r7, r5
 800117a:	1cfb      	adds	r3, r7, #3
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	4b2a      	ldr	r3, [pc, #168]	@ (8001228 <modbus_send+0xc0>)
 8001180:	0011      	movs	r1, r2
 8001182:	0018      	movs	r0, r3
 8001184:	f000 f890 	bl	80012a8 <crc_16>
 8001188:	0003      	movs	r3, r0
 800118a:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 800118c:	1cfb      	adds	r3, r7, #3
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	197a      	adds	r2, r7, r5
 8001192:	8812      	ldrh	r2, [r2, #0]
 8001194:	b2d1      	uxtb	r1, r2
 8001196:	4a24      	ldr	r2, [pc, #144]	@ (8001228 <modbus_send+0xc0>)
 8001198:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 800119a:	197b      	adds	r3, r7, r5
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	0a1b      	lsrs	r3, r3, #8
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	1cfb      	adds	r3, r7, #3
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	b2d1      	uxtb	r1, r2
 80011aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001228 <modbus_send+0xc0>)
 80011ac:	54d1      	strb	r1, [r2, r3]

	int8_t status = HAL_OK;
 80011ae:	240d      	movs	r4, #13
 80011b0:	193b      	adds	r3, r7, r4
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit_IT(&huart1, modbus_tx_buffer, size + 2);
 80011b6:	1cfb      	adds	r3, r7, #3
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	3302      	adds	r3, #2
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4919      	ldr	r1, [pc, #100]	@ (8001228 <modbus_send+0xc0>)
 80011c2:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <modbus_send+0xc4>)
 80011c4:	0018      	movs	r0, r3
 80011c6:	f003 fb7f 	bl	80048c8 <HAL_UART_Transmit_IT>
 80011ca:	0003      	movs	r3, r0
 80011cc:	001a      	movs	r2, r3
 80011ce:	193b      	adds	r3, r7, r4
 80011d0:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 80011d2:	193b      	adds	r3, r7, r4
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <modbus_send+0x7c>
	{
		return status;
 80011dc:	193b      	adds	r3, r7, r4
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	e01d      	b.n	8001220 <modbus_send+0xb8>
	}
	time = HAL_GetTick();
 80011e4:	f000 fcbc 	bl	8001b60 <HAL_GetTick>
 80011e8:	0002      	movs	r2, r0
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <modbus_send+0xc8>)
 80011ec:	601a      	str	r2, [r3, #0]
	while(!tx_int && ((HAL_GetTick()) - time < 100));
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <modbus_send+0xcc>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d107      	bne.n	800120a <modbus_send+0xa2>
 80011fa:	f000 fcb1 	bl	8001b60 <HAL_GetTick>
 80011fe:	0002      	movs	r2, r0
 8001200:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <modbus_send+0xc8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b63      	cmp	r3, #99	@ 0x63
 8001208:	d9f2      	bls.n	80011f0 <modbus_send+0x88>
	if(tx_int)
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <modbus_send+0xcc>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d004      	beq.n	800121e <modbus_send+0xb6>
	{
		tx_int = 0;
 8001214:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <modbus_send+0xcc>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <modbus_send+0xb8>
	}
	else
	{
		return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
	}
}
 8001220:	0018      	movs	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	b004      	add	sp, #16
 8001226:	bdb0      	pop	{r4, r5, r7, pc}
 8001228:	2000053c 	.word	0x2000053c
 800122c:	2000030c 	.word	0x2000030c
 8001230:	20000738 	.word	0x20000738
 8001234:	20000747 	.word	0x20000747

08001238 <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	if(rx_int)
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <modbus_rx+0x28>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d004      	beq.n	8001250 <modbus_rx+0x18>
	{
		rx_int = 0;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <modbus_rx+0x28>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
		return 1;
 800124c:	2301      	movs	r3, #1
 800124e:	e004      	b.n	800125a <modbus_rx+0x22>
	}
	if(handle_chunk_miss() != HAL_OK)
 8001250:	f7ff fd82 	bl	8000d58 <handle_chunk_miss>
	{
		// TODO: log the error when startup the UART back up
	}
	return rx_int;
 8001254:	4b02      	ldr	r3, [pc, #8]	@ (8001260 <modbus_rx+0x28>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b2db      	uxtb	r3, r3
}
 800125a:	0018      	movs	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000746 	.word	0x20000746

08001264 <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx()
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 800126a:	490c      	ldr	r1, [pc, #48]	@ (800129c <modbus_set_rx+0x38>)
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <modbus_set_rx+0x3c>)
 800126e:	2206      	movs	r2, #6
 8001270:	0018      	movs	r0, r3
 8001272:	f005 f9bb 	bl	80065ec <HAL_UARTEx_ReceiveToIdle_DMA>
 8001276:	0003      	movs	r3, r0
 8001278:	001a      	movs	r2, r3
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <modbus_set_rx+0x40>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <modbus_set_rx+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2104      	movs	r1, #4
 800128a:	438a      	bics	r2, r1
 800128c:	601a      	str	r2, [r3, #0]

	return status;
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	b25b      	sxtb	r3, r3
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000063c 	.word	0x2000063c
 80012a0:	2000030c 	.word	0x2000030c
 80012a4:	200003a0 	.word	0x200003a0

080012a8 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	000a      	movs	r2, r1
 80012b2:	1cfb      	adds	r3, r7, #3
 80012b4:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 80012b6:	230f      	movs	r3, #15
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	22ff      	movs	r2, #255	@ 0xff
 80012bc:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 80012be:	230e      	movs	r3, #14
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	22ff      	movs	r2, #255	@ 0xff
 80012c4:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 80012c6:	e019      	b.n	80012fc <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	200e      	movs	r0, #14
 80012d2:	183b      	adds	r3, r7, r0
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	4053      	eors	r3, r2
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 80012dc:	4a13      	ldr	r2, [pc, #76]	@ (800132c <crc_16+0x84>)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	18d3      	adds	r3, r2, r3
 80012e2:	7819      	ldrb	r1, [r3, #0]
 80012e4:	183b      	adds	r3, r7, r0
 80012e6:	200f      	movs	r0, #15
 80012e8:	183a      	adds	r2, r7, r0
 80012ea:	7812      	ldrb	r2, [r2, #0]
 80012ec:	404a      	eors	r2, r1
 80012ee:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 80012f0:	183b      	adds	r3, r7, r0
 80012f2:	490f      	ldr	r1, [pc, #60]	@ (8001330 <crc_16+0x88>)
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	188a      	adds	r2, r1, r2
 80012f8:	7812      	ldrb	r2, [r2, #0]
 80012fa:	701a      	strb	r2, [r3, #0]
	while (size--)
 80012fc:	1cfb      	adds	r3, r7, #3
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	1cfa      	adds	r2, r7, #3
 8001302:	1e59      	subs	r1, r3, #1
 8001304:	7011      	strb	r1, [r2, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1de      	bne.n	80012c8 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 800130a:	230f      	movs	r3, #15
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b21a      	sxth	r2, r3
 8001314:	230e      	movs	r3, #14
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b21b      	sxth	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b21b      	sxth	r3, r3
 8001320:	b29b      	uxth	r3, r3
}
 8001322:	0018      	movs	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	b004      	add	sp, #16
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	080067fc 	.word	0x080067fc
 8001330:	080068fc 	.word	0x080068fc

08001334 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133a:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <HAL_MspInit+0x44>)
 800133c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800133e:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <HAL_MspInit+0x44>)
 8001340:	2101      	movs	r1, #1
 8001342:	430a      	orrs	r2, r1
 8001344:	641a      	str	r2, [r3, #64]	@ 0x40
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <HAL_MspInit+0x44>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	2201      	movs	r2, #1
 800134c:	4013      	ands	r3, r2
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <HAL_MspInit+0x44>)
 8001354:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001356:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <HAL_MspInit+0x44>)
 8001358:	2180      	movs	r1, #128	@ 0x80
 800135a:	0549      	lsls	r1, r1, #21
 800135c:	430a      	orrs	r2, r1
 800135e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001360:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <HAL_MspInit+0x44>)
 8001362:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001364:	2380      	movs	r3, #128	@ 0x80
 8001366:	055b      	lsls	r3, r3, #21
 8001368:	4013      	ands	r3, r2
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b002      	add	sp, #8
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	40021000 	.word	0x40021000

0800137c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b093      	sub	sp, #76	@ 0x4c
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	2334      	movs	r3, #52	@ 0x34
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	0018      	movs	r0, r3
 800138a:	2314      	movs	r3, #20
 800138c:	001a      	movs	r2, r3
 800138e:	2100      	movs	r1, #0
 8001390:	f005 f9f2 	bl	8006778 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001394:	2414      	movs	r4, #20
 8001396:	193b      	adds	r3, r7, r4
 8001398:	0018      	movs	r0, r3
 800139a:	2320      	movs	r3, #32
 800139c:	001a      	movs	r2, r3
 800139e:	2100      	movs	r1, #0
 80013a0:	f005 f9ea 	bl	8006778 <memset>
  if(hadc->Instance==ADC1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a35      	ldr	r2, [pc, #212]	@ (8001480 <HAL_ADC_MspInit+0x104>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d163      	bne.n	8001476 <HAL_ADC_MspInit+0xfa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	2220      	movs	r2, #32
 80013b2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ba:	193b      	adds	r3, r7, r4
 80013bc:	0018      	movs	r0, r3
 80013be:	f002 fafb 	bl	80039b8 <HAL_RCCEx_PeriphCLKConfig>
 80013c2:	1e03      	subs	r3, r0, #0
 80013c4:	d001      	beq.n	80013ca <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80013c6:	f7ff fc0b 	bl	8000be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001484 <HAL_ADC_MspInit+0x108>)
 80013cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <HAL_ADC_MspInit+0x108>)
 80013d0:	2180      	movs	r1, #128	@ 0x80
 80013d2:	0349      	lsls	r1, r1, #13
 80013d4:	430a      	orrs	r2, r1
 80013d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80013d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001484 <HAL_ADC_MspInit+0x108>)
 80013da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	035b      	lsls	r3, r3, #13
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b27      	ldr	r3, [pc, #156]	@ (8001484 <HAL_ADC_MspInit+0x108>)
 80013e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ea:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <HAL_ADC_MspInit+0x108>)
 80013ec:	2101      	movs	r1, #1
 80013ee:	430a      	orrs	r2, r1
 80013f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <HAL_ADC_MspInit+0x108>)
 80013f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f6:	2201      	movs	r2, #1
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PA8     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = Thrust_Sensor_A_Pin|Thrust_Sensor_B_Pin|Thrust_Sensor_C_Pin|Motor_Temp_Pin
 80013fe:	2134      	movs	r1, #52	@ 0x34
 8001400:	187b      	adds	r3, r7, r1
 8001402:	4a21      	ldr	r2, [pc, #132]	@ (8001488 <HAL_ADC_MspInit+0x10c>)
 8001404:	601a      	str	r2, [r3, #0]
                          |Earth_Pressure_Pin|Flame_Sensor_Pin|Actuator_A_Pos_Pin|Actuator_B_Pos_Pin
                          |Actuator_C_Pos_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001406:	187b      	adds	r3, r7, r1
 8001408:	2203      	movs	r2, #3
 800140a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	187b      	adds	r3, r7, r1
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	187a      	adds	r2, r7, r1
 8001414:	23a0      	movs	r3, #160	@ 0xa0
 8001416:	05db      	lsls	r3, r3, #23
 8001418:	0011      	movs	r1, r2
 800141a:	0018      	movs	r0, r3
 800141c:	f001 fc32 	bl	8002c84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001420:	4b1a      	ldr	r3, [pc, #104]	@ (800148c <HAL_ADC_MspInit+0x110>)
 8001422:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <HAL_ADC_MspInit+0x114>)
 8001424:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001426:	4b19      	ldr	r3, [pc, #100]	@ (800148c <HAL_ADC_MspInit+0x110>)
 8001428:	2205      	movs	r2, #5
 800142a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800142c:	4b17      	ldr	r3, [pc, #92]	@ (800148c <HAL_ADC_MspInit+0x110>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001432:	4b16      	ldr	r3, [pc, #88]	@ (800148c <HAL_ADC_MspInit+0x110>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001438:	4b14      	ldr	r3, [pc, #80]	@ (800148c <HAL_ADC_MspInit+0x110>)
 800143a:	2280      	movs	r2, #128	@ 0x80
 800143c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800143e:	4b13      	ldr	r3, [pc, #76]	@ (800148c <HAL_ADC_MspInit+0x110>)
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	0052      	lsls	r2, r2, #1
 8001444:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001446:	4b11      	ldr	r3, [pc, #68]	@ (800148c <HAL_ADC_MspInit+0x110>)
 8001448:	2280      	movs	r2, #128	@ 0x80
 800144a:	00d2      	lsls	r2, r2, #3
 800144c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <HAL_ADC_MspInit+0x110>)
 8001450:	2220      	movs	r2, #32
 8001452:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001454:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <HAL_ADC_MspInit+0x110>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800145a:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_ADC_MspInit+0x110>)
 800145c:	0018      	movs	r0, r3
 800145e:	f001 f8e1 	bl	8002624 <HAL_DMA_Init>
 8001462:	1e03      	subs	r3, r0, #0
 8001464:	d001      	beq.n	800146a <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8001466:	f7ff fbbb 	bl	8000be0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a07      	ldr	r2, [pc, #28]	@ (800148c <HAL_ADC_MspInit+0x110>)
 800146e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_ADC_MspInit+0x110>)
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b013      	add	sp, #76	@ 0x4c
 800147c:	bd90      	pop	{r4, r7, pc}
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	40012400 	.word	0x40012400
 8001484:	40021000 	.word	0x40021000
 8001488:	000001ff 	.word	0x000001ff
 800148c:	20000104 	.word	0x20000104
 8001490:	40020008 	.word	0x40020008

08001494 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b093      	sub	sp, #76	@ 0x4c
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	2334      	movs	r3, #52	@ 0x34
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	0018      	movs	r0, r3
 80014a2:	2314      	movs	r3, #20
 80014a4:	001a      	movs	r2, r3
 80014a6:	2100      	movs	r1, #0
 80014a8:	f005 f966 	bl	8006778 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ac:	2414      	movs	r4, #20
 80014ae:	193b      	adds	r3, r7, r4
 80014b0:	0018      	movs	r0, r3
 80014b2:	2320      	movs	r3, #32
 80014b4:	001a      	movs	r2, r3
 80014b6:	2100      	movs	r1, #0
 80014b8:	f005 f95e 	bl	8006778 <memset>
  if(hi2c->Instance==I2C1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a37      	ldr	r2, [pc, #220]	@ (80015a0 <HAL_I2C_MspInit+0x10c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d168      	bne.n	8001598 <HAL_I2C_MspInit+0x104>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014c6:	193b      	adds	r3, r7, r4
 80014c8:	2202      	movs	r2, #2
 80014ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014cc:	193b      	adds	r3, r7, r4
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d2:	193b      	adds	r3, r7, r4
 80014d4:	0018      	movs	r0, r3
 80014d6:	f002 fa6f 	bl	80039b8 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80014de:	f7ff fb7f 	bl	8000be0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	4b30      	ldr	r3, [pc, #192]	@ (80015a4 <HAL_I2C_MspInit+0x110>)
 80014e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014e6:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <HAL_I2C_MspInit+0x110>)
 80014e8:	2101      	movs	r1, #1
 80014ea:	430a      	orrs	r2, r1
 80014ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ee:	4b2d      	ldr	r3, [pc, #180]	@ (80015a4 <HAL_I2C_MspInit+0x110>)
 80014f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f2:	2201      	movs	r2, #1
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9 [PA11]     ------> I2C1_SCL
    PA10 [PA12]     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014fa:	2134      	movs	r1, #52	@ 0x34
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	22c0      	movs	r2, #192	@ 0xc0
 8001500:	00d2      	lsls	r2, r2, #3
 8001502:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2212      	movs	r2, #18
 8001508:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	187b      	adds	r3, r7, r1
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	187b      	adds	r3, r7, r1
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001516:	187b      	adds	r3, r7, r1
 8001518:	2206      	movs	r2, #6
 800151a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	187a      	adds	r2, r7, r1
 800151e:	23a0      	movs	r3, #160	@ 0xa0
 8001520:	05db      	lsls	r3, r3, #23
 8001522:	0011      	movs	r1, r2
 8001524:	0018      	movs	r0, r3
 8001526:	f001 fbad 	bl	8002c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800152a:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <HAL_I2C_MspInit+0x110>)
 800152c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800152e:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <HAL_I2C_MspInit+0x110>)
 8001530:	2180      	movs	r1, #128	@ 0x80
 8001532:	0389      	lsls	r1, r1, #14
 8001534:	430a      	orrs	r2, r1
 8001536:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001538:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <HAL_I2C_MspInit+0x110>)
 800153a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800153c:	2380      	movs	r3, #128	@ 0x80
 800153e:	039b      	lsls	r3, r3, #14
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 8001546:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <HAL_I2C_MspInit+0x114>)
 8001548:	4a18      	ldr	r2, [pc, #96]	@ (80015ac <HAL_I2C_MspInit+0x118>)
 800154a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800154c:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <HAL_I2C_MspInit+0x114>)
 800154e:	220a      	movs	r2, #10
 8001550:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <HAL_I2C_MspInit+0x114>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001558:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <HAL_I2C_MspInit+0x114>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800155e:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <HAL_I2C_MspInit+0x114>)
 8001560:	2280      	movs	r2, #128	@ 0x80
 8001562:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001564:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <HAL_I2C_MspInit+0x114>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800156a:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <HAL_I2C_MspInit+0x114>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001570:	4b0d      	ldr	r3, [pc, #52]	@ (80015a8 <HAL_I2C_MspInit+0x114>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001576:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <HAL_I2C_MspInit+0x114>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_I2C_MspInit+0x114>)
 800157e:	0018      	movs	r0, r3
 8001580:	f001 f850 	bl	8002624 <HAL_DMA_Init>
 8001584:	1e03      	subs	r3, r0, #0
 8001586:	d001      	beq.n	800158c <HAL_I2C_MspInit+0xf8>
    {
      Error_Handler();
 8001588:	f7ff fb2a 	bl	8000be0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a06      	ldr	r2, [pc, #24]	@ (80015a8 <HAL_I2C_MspInit+0x114>)
 8001590:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001592:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <HAL_I2C_MspInit+0x114>)
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001598:	46c0      	nop			@ (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b013      	add	sp, #76	@ 0x4c
 800159e:	bd90      	pop	{r4, r7, pc}
 80015a0:	40005400 	.word	0x40005400
 80015a4:	40021000 	.word	0x40021000
 80015a8:	200001b4 	.word	0x200001b4
 80015ac:	4002001c 	.word	0x4002001c

080015b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b093      	sub	sp, #76	@ 0x4c
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	2334      	movs	r3, #52	@ 0x34
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	0018      	movs	r0, r3
 80015be:	2314      	movs	r3, #20
 80015c0:	001a      	movs	r2, r3
 80015c2:	2100      	movs	r1, #0
 80015c4:	f005 f8d8 	bl	8006778 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c8:	2414      	movs	r4, #20
 80015ca:	193b      	adds	r3, r7, r4
 80015cc:	0018      	movs	r0, r3
 80015ce:	2320      	movs	r3, #32
 80015d0:	001a      	movs	r2, r3
 80015d2:	2100      	movs	r1, #0
 80015d4:	f005 f8d0 	bl	8006778 <memset>
  if(hspi->Instance==SPI1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a34      	ldr	r2, [pc, #208]	@ (80016b0 <HAL_SPI_MspInit+0x100>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d162      	bne.n	80016a8 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 80015e2:	193b      	adds	r3, r7, r4
 80015e4:	2204      	movs	r2, #4
 80015e6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 80015e8:	193b      	adds	r3, r7, r4
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ee:	193b      	adds	r3, r7, r4
 80015f0:	0018      	movs	r0, r3
 80015f2:	f002 f9e1 	bl	80039b8 <HAL_RCCEx_PeriphCLKConfig>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d001      	beq.n	80015fe <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80015fa:	f7ff faf1 	bl	8000be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015fe:	4b2d      	ldr	r3, [pc, #180]	@ (80016b4 <HAL_SPI_MspInit+0x104>)
 8001600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001602:	4b2c      	ldr	r3, [pc, #176]	@ (80016b4 <HAL_SPI_MspInit+0x104>)
 8001604:	2180      	movs	r1, #128	@ 0x80
 8001606:	0149      	lsls	r1, r1, #5
 8001608:	430a      	orrs	r2, r1
 800160a:	641a      	str	r2, [r3, #64]	@ 0x40
 800160c:	4b29      	ldr	r3, [pc, #164]	@ (80016b4 <HAL_SPI_MspInit+0x104>)
 800160e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	015b      	lsls	r3, r3, #5
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <HAL_SPI_MspInit+0x104>)
 800161c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800161e:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <HAL_SPI_MspInit+0x104>)
 8001620:	2101      	movs	r1, #1
 8001622:	430a      	orrs	r2, r1
 8001624:	635a      	str	r2, [r3, #52]	@ 0x34
 8001626:	4b23      	ldr	r3, [pc, #140]	@ (80016b4 <HAL_SPI_MspInit+0x104>)
 8001628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800162a:	2201      	movs	r2, #1
 800162c:	4013      	ands	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <HAL_SPI_MspInit+0x104>)
 8001634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001636:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <HAL_SPI_MspInit+0x104>)
 8001638:	2102      	movs	r1, #2
 800163a:	430a      	orrs	r2, r1
 800163c:	635a      	str	r2, [r3, #52]	@ 0x34
 800163e:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <HAL_SPI_MspInit+0x104>)
 8001640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001642:	2202      	movs	r2, #2
 8001644:	4013      	ands	r3, r2
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA11 [PA9]     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800164a:	2134      	movs	r1, #52	@ 0x34
 800164c:	187b      	adds	r3, r7, r1
 800164e:	2280      	movs	r2, #128	@ 0x80
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	000c      	movs	r4, r1
 8001656:	193b      	adds	r3, r7, r4
 8001658:	2202      	movs	r2, #2
 800165a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	193b      	adds	r3, r7, r4
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	193b      	adds	r3, r7, r4
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001668:	193b      	adds	r3, r7, r4
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	193a      	adds	r2, r7, r4
 8001670:	23a0      	movs	r3, #160	@ 0xa0
 8001672:	05db      	lsls	r3, r3, #23
 8001674:	0011      	movs	r1, r2
 8001676:	0018      	movs	r0, r3
 8001678:	f001 fb04 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800167c:	0021      	movs	r1, r4
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2228      	movs	r2, #40	@ 0x28
 8001682:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	187b      	adds	r3, r7, r1
 8001686:	2202      	movs	r2, #2
 8001688:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	187b      	adds	r3, r7, r1
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	187b      	adds	r3, r7, r1
 800169e:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <HAL_SPI_MspInit+0x108>)
 80016a0:	0019      	movs	r1, r3
 80016a2:	0010      	movs	r0, r2
 80016a4:	f001 faee 	bl	8002c84 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80016a8:	46c0      	nop			@ (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b013      	add	sp, #76	@ 0x4c
 80016ae:	bd90      	pop	{r4, r7, pc}
 80016b0:	40013000 	.word	0x40013000
 80016b4:	40021000 	.word	0x40021000
 80016b8:	50000400 	.word	0x50000400

080016bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <HAL_TIM_PWM_MspInit+0x38>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10d      	bne.n	80016ea <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ce:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80016d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80016d4:	2180      	movs	r1, #128	@ 0x80
 80016d6:	0109      	lsls	r1, r1, #4
 80016d8:	430a      	orrs	r2, r1
 80016da:	641a      	str	r2, [r3, #64]	@ 0x40
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_TIM_PWM_MspInit+0x3c>)
 80016de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016e0:	2380      	movs	r3, #128	@ 0x80
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80016ea:	46c0      	nop			@ (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	b004      	add	sp, #16
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	40012c00 	.word	0x40012c00
 80016f8:	40021000 	.word	0x40021000

080016fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <HAL_TIM_Base_MspInit+0x38>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d10d      	bne.n	800172a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_TIM_Base_MspInit+0x3c>)
 8001710:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <HAL_TIM_Base_MspInit+0x3c>)
 8001714:	2180      	movs	r1, #128	@ 0x80
 8001716:	0209      	lsls	r1, r1, #8
 8001718:	430a      	orrs	r2, r1
 800171a:	641a      	str	r2, [r3, #64]	@ 0x40
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_TIM_Base_MspInit+0x3c>)
 800171e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001720:	2380      	movs	r3, #128	@ 0x80
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	4013      	ands	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b004      	add	sp, #16
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	40002000 	.word	0x40002000
 8001738:	40021000 	.word	0x40021000

0800173c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b089      	sub	sp, #36	@ 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	240c      	movs	r4, #12
 8001746:	193b      	adds	r3, r7, r4
 8001748:	0018      	movs	r0, r3
 800174a:	2314      	movs	r3, #20
 800174c:	001a      	movs	r2, r3
 800174e:	2100      	movs	r1, #0
 8001750:	f005 f812 	bl	8006778 <memset>
  if(htim->Instance==TIM1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a15      	ldr	r2, [pc, #84]	@ (80017b0 <HAL_TIM_MspPostInit+0x74>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d123      	bne.n	80017a6 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <HAL_TIM_MspPostInit+0x78>)
 8001760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001762:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <HAL_TIM_MspPostInit+0x78>)
 8001764:	2101      	movs	r1, #1
 8001766:	430a      	orrs	r2, r1
 8001768:	635a      	str	r2, [r3, #52]	@ 0x34
 800176a:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <HAL_TIM_MspPostInit+0x78>)
 800176c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800176e:	2201      	movs	r2, #1
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA15     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Actuator_PWM_Pin;
 8001776:	193b      	adds	r3, r7, r4
 8001778:	2280      	movs	r2, #128	@ 0x80
 800177a:	0212      	lsls	r2, r2, #8
 800177c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	0021      	movs	r1, r4
 8001780:	187b      	adds	r3, r7, r1
 8001782:	2202      	movs	r2, #2
 8001784:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	187b      	adds	r3, r7, r1
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	187b      	adds	r3, r7, r1
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001792:	187b      	adds	r3, r7, r1
 8001794:	2202      	movs	r2, #2
 8001796:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(Actuator_PWM_GPIO_Port, &GPIO_InitStruct);
 8001798:	187a      	adds	r2, r7, r1
 800179a:	23a0      	movs	r3, #160	@ 0xa0
 800179c:	05db      	lsls	r3, r3, #23
 800179e:	0011      	movs	r1, r2
 80017a0:	0018      	movs	r0, r3
 80017a2:	f001 fa6f 	bl	8002c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b009      	add	sp, #36	@ 0x24
 80017ac:	bd90      	pop	{r4, r7, pc}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	40012c00 	.word	0x40012c00
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b095      	sub	sp, #84	@ 0x54
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	233c      	movs	r3, #60	@ 0x3c
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	0018      	movs	r0, r3
 80017c6:	2314      	movs	r3, #20
 80017c8:	001a      	movs	r2, r3
 80017ca:	2100      	movs	r1, #0
 80017cc:	f004 ffd4 	bl	8006778 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017d0:	241c      	movs	r4, #28
 80017d2:	193b      	adds	r3, r7, r4
 80017d4:	0018      	movs	r0, r3
 80017d6:	2320      	movs	r3, #32
 80017d8:	001a      	movs	r2, r3
 80017da:	2100      	movs	r1, #0
 80017dc:	f004 ffcc 	bl	8006778 <memset>
  if(huart->Instance==USART1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a5f      	ldr	r2, [pc, #380]	@ (8001964 <HAL_UART_MspInit+0x1ac>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d000      	beq.n	80017ec <HAL_UART_MspInit+0x34>
 80017ea:	e0b6      	b.n	800195a <HAL_UART_MspInit+0x1a2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	2201      	movs	r2, #1
 80017f0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80017f2:	193b      	adds	r3, r7, r4
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f8:	193b      	adds	r3, r7, r4
 80017fa:	0018      	movs	r0, r3
 80017fc:	f002 f8dc 	bl	80039b8 <HAL_RCCEx_PeriphCLKConfig>
 8001800:	1e03      	subs	r3, r0, #0
 8001802:	d001      	beq.n	8001808 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001804:	f7ff f9ec 	bl	8000be0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001808:	4b57      	ldr	r3, [pc, #348]	@ (8001968 <HAL_UART_MspInit+0x1b0>)
 800180a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800180c:	4b56      	ldr	r3, [pc, #344]	@ (8001968 <HAL_UART_MspInit+0x1b0>)
 800180e:	2180      	movs	r1, #128	@ 0x80
 8001810:	01c9      	lsls	r1, r1, #7
 8001812:	430a      	orrs	r2, r1
 8001814:	641a      	str	r2, [r3, #64]	@ 0x40
 8001816:	4b54      	ldr	r3, [pc, #336]	@ (8001968 <HAL_UART_MspInit+0x1b0>)
 8001818:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800181a:	2380      	movs	r3, #128	@ 0x80
 800181c:	01db      	lsls	r3, r3, #7
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001824:	4b50      	ldr	r3, [pc, #320]	@ (8001968 <HAL_UART_MspInit+0x1b0>)
 8001826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001828:	4b4f      	ldr	r3, [pc, #316]	@ (8001968 <HAL_UART_MspInit+0x1b0>)
 800182a:	2104      	movs	r1, #4
 800182c:	430a      	orrs	r2, r1
 800182e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001830:	4b4d      	ldr	r3, [pc, #308]	@ (8001968 <HAL_UART_MspInit+0x1b0>)
 8001832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001834:	2204      	movs	r2, #4
 8001836:	4013      	ands	r3, r2
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183c:	4b4a      	ldr	r3, [pc, #296]	@ (8001968 <HAL_UART_MspInit+0x1b0>)
 800183e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001840:	4b49      	ldr	r3, [pc, #292]	@ (8001968 <HAL_UART_MspInit+0x1b0>)
 8001842:	2102      	movs	r1, #2
 8001844:	430a      	orrs	r2, r1
 8001846:	635a      	str	r2, [r3, #52]	@ 0x34
 8001848:	4b47      	ldr	r3, [pc, #284]	@ (8001968 <HAL_UART_MspInit+0x1b0>)
 800184a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800184c:	2202      	movs	r2, #2
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	4b44      	ldr	r3, [pc, #272]	@ (8001968 <HAL_UART_MspInit+0x1b0>)
 8001856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001858:	4b43      	ldr	r3, [pc, #268]	@ (8001968 <HAL_UART_MspInit+0x1b0>)
 800185a:	2101      	movs	r1, #1
 800185c:	430a      	orrs	r2, r1
 800185e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001860:	4b41      	ldr	r3, [pc, #260]	@ (8001968 <HAL_UART_MspInit+0x1b0>)
 8001862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001864:	2201      	movs	r2, #1
 8001866:	4013      	ands	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800186c:	213c      	movs	r1, #60	@ 0x3c
 800186e:	187b      	adds	r3, r7, r1
 8001870:	2280      	movs	r2, #128	@ 0x80
 8001872:	01d2      	lsls	r2, r2, #7
 8001874:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	000c      	movs	r4, r1
 8001878:	193b      	adds	r3, r7, r4
 800187a:	2202      	movs	r2, #2
 800187c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	193b      	adds	r3, r7, r4
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	193b      	adds	r3, r7, r4
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800188a:	193b      	adds	r3, r7, r4
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001890:	193b      	adds	r3, r7, r4
 8001892:	4a36      	ldr	r2, [pc, #216]	@ (800196c <HAL_UART_MspInit+0x1b4>)
 8001894:	0019      	movs	r1, r3
 8001896:	0010      	movs	r0, r2
 8001898:	f001 f9f4 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800189c:	193b      	adds	r3, r7, r4
 800189e:	2204      	movs	r2, #4
 80018a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	2202      	movs	r2, #2
 80018a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	193b      	adds	r3, r7, r4
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80018b4:	193b      	adds	r3, r7, r4
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ba:	193b      	adds	r3, r7, r4
 80018bc:	4a2c      	ldr	r2, [pc, #176]	@ (8001970 <HAL_UART_MspInit+0x1b8>)
 80018be:	0019      	movs	r1, r3
 80018c0:	0010      	movs	r0, r2
 80018c2:	f001 f9df 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80018c6:	0021      	movs	r1, r4
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2280      	movs	r2, #128	@ 0x80
 80018cc:	0152      	lsls	r2, r2, #5
 80018ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	2202      	movs	r2, #2
 80018d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	187b      	adds	r3, r7, r1
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	2201      	movs	r2, #1
 80018e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	187a      	adds	r2, r7, r1
 80018ea:	23a0      	movs	r3, #160	@ 0xa0
 80018ec:	05db      	lsls	r3, r3, #23
 80018ee:	0011      	movs	r1, r2
 80018f0:	0018      	movs	r0, r3
 80018f2:	f001 f9c7 	bl	8002c84 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel4;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <HAL_UART_MspInit+0x1bc>)
 80018f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001978 <HAL_UART_MspInit+0x1c0>)
 80018fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <HAL_UART_MspInit+0x1bc>)
 80018fe:	2232      	movs	r2, #50	@ 0x32
 8001900:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001902:	4b1c      	ldr	r3, [pc, #112]	@ (8001974 <HAL_UART_MspInit+0x1bc>)
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001908:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <HAL_UART_MspInit+0x1bc>)
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800190e:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_UART_MspInit+0x1bc>)
 8001910:	2280      	movs	r2, #128	@ 0x80
 8001912:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001914:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <HAL_UART_MspInit+0x1bc>)
 8001916:	2200      	movs	r2, #0
 8001918:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800191a:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <HAL_UART_MspInit+0x1bc>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001920:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <HAL_UART_MspInit+0x1bc>)
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <HAL_UART_MspInit+0x1bc>)
 8001928:	2200      	movs	r2, #0
 800192a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <HAL_UART_MspInit+0x1bc>)
 800192e:	0018      	movs	r0, r3
 8001930:	f000 fe78 	bl	8002624 <HAL_DMA_Init>
 8001934:	1e03      	subs	r3, r0, #0
 8001936:	d001      	beq.n	800193c <HAL_UART_MspInit+0x184>
    {
      Error_Handler();
 8001938:	f7ff f952 	bl	8000be0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2180      	movs	r1, #128	@ 0x80
 8001940:	4a0c      	ldr	r2, [pc, #48]	@ (8001974 <HAL_UART_MspInit+0x1bc>)
 8001942:	505a      	str	r2, [r3, r1]
 8001944:	4b0b      	ldr	r3, [pc, #44]	@ (8001974 <HAL_UART_MspInit+0x1bc>)
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	201b      	movs	r0, #27
 8001950:	f000 fe36 	bl	80025c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001954:	201b      	movs	r0, #27
 8001956:	f000 fe48 	bl	80025ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	46bd      	mov	sp, r7
 800195e:	b015      	add	sp, #84	@ 0x54
 8001960:	bd90      	pop	{r4, r7, pc}
 8001962:	46c0      	nop			@ (mov r8, r8)
 8001964:	40013800 	.word	0x40013800
 8001968:	40021000 	.word	0x40021000
 800196c:	50000800 	.word	0x50000800
 8001970:	50000400 	.word	0x50000400
 8001974:	200003a0 	.word	0x200003a0
 8001978:	40020044 	.word	0x40020044

0800197c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001980:	46c0      	nop			@ (mov r8, r8)
 8001982:	e7fd      	b.n	8001980 <NMI_Handler+0x4>

08001984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001988:	46c0      	nop			@ (mov r8, r8)
 800198a:	e7fd      	b.n	8001988 <HardFault_Handler+0x4>

0800198c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001990:	46c0      	nop			@ (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a4:	f000 f8ca 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a8:	46c0      	nop			@ (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <DMA1_Channel1_IRQHandler+0x14>)
 80019b6:	0018      	movs	r0, r3
 80019b8:	f001 f822 	bl	8002a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019bc:	46c0      	nop			@ (mov r8, r8)
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			@ (mov r8, r8)
 80019c4:	20000104 	.word	0x20000104

080019c8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80019cc:	4b03      	ldr	r3, [pc, #12]	@ (80019dc <DMA1_Channel2_3_IRQHandler+0x14>)
 80019ce:	0018      	movs	r0, r3
 80019d0:	f001 f816 	bl	8002a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80019d4:	46c0      	nop			@ (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	200001b4 	.word	0x200001b4

080019e0 <DMAMUX1_DMA1_CH4_5_IRQHandler>:

/**
  * @brief This function handles DMAMUX1, DMA1 Channel 4 and 5.
  */
void DMAMUX1_DMA1_CH4_5_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 0 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <DMAMUX1_DMA1_CH4_5_IRQHandler+0x14>)
 80019e6:	0018      	movs	r0, r3
 80019e8:	f001 f80a 	bl	8002a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_DMA1_CH4_5_IRQn 1 */

  /* USER CODE END DMAMUX1_DMA1_CH4_5_IRQn 1 */
}
 80019ec:	46c0      	nop			@ (mov r8, r8)
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	200003a0 	.word	0x200003a0

080019f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019fc:	4b03      	ldr	r3, [pc, #12]	@ (8001a0c <USART1_IRQHandler+0x14>)
 80019fe:	0018      	movs	r0, r3
 8001a00:	f003 f93e 	bl	8004c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a04:	46c0      	nop			@ (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	2000030c 	.word	0x2000030c

08001a10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a14:	4b03      	ldr	r3, [pc, #12]	@ (8001a24 <SystemInit+0x14>)
 8001a16:	2280      	movs	r2, #128	@ 0x80
 8001a18:	0512      	lsls	r2, r2, #20
 8001a1a:	609a      	str	r2, [r3, #8]
#endif
}
 8001a1c:	46c0      	nop			@ (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a28:	480d      	ldr	r0, [pc, #52]	@ (8001a60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a2c:	f7ff fff0 	bl	8001a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a30:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a32:	e003      	b.n	8001a3c <LoopCopyDataInit>

08001a34 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a34:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001a36:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a38:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a3a:	3104      	adds	r1, #4

08001a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a3c:	480a      	ldr	r0, [pc, #40]	@ (8001a68 <LoopForever+0xa>)
  ldr r3, =_edata
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <LoopForever+0xe>)
  adds r2, r0, r1
 8001a40:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a42:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a44:	d3f6      	bcc.n	8001a34 <CopyDataInit>
  ldr r2, =_sbss
 8001a46:	4a0a      	ldr	r2, [pc, #40]	@ (8001a70 <LoopForever+0x12>)
  b LoopFillZerobss
 8001a48:	e002      	b.n	8001a50 <LoopFillZerobss>

08001a4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  str  r3, [r2]
 8001a4c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a4e:	3204      	adds	r2, #4

08001a50 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <LoopForever+0x16>)
  cmp r2, r3
 8001a52:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a54:	d3f9      	bcc.n	8001a4a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001a56:	f004 fe97 	bl	8006788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a5a:	f7fe fccb 	bl	80003f4 <main>

08001a5e <LoopForever>:

LoopForever:
    b LoopForever
 8001a5e:	e7fe      	b.n	8001a5e <LoopForever>
  ldr   r0, =_estack
 8001a60:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8001a64:	08006ae0 	.word	0x08006ae0
  ldr r0, =_sdata
 8001a68:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a6c:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8001a70:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 8001a74:	2000074c 	.word	0x2000074c

08001a78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC1_IRQHandler>

08001a7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a80:	1dfb      	adds	r3, r7, #7
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a86:	2003      	movs	r0, #3
 8001a88:	f000 f80e 	bl	8001aa8 <HAL_InitTick>
 8001a8c:	1e03      	subs	r3, r0, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001a90:	1dfb      	adds	r3, r7, #7
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e001      	b.n	8001a9c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a98:	f7ff fc4c 	bl	8001334 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a9c:	1dfb      	adds	r3, r7, #7
 8001a9e:	781b      	ldrb	r3, [r3, #0]
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ab0:	230f      	movs	r3, #15
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <HAL_InitTick+0x88>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d02b      	beq.n	8001b18 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b34 <HAL_InitTick+0x8c>)
 8001ac2:	681c      	ldr	r4, [r3, #0]
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <HAL_InitTick+0x88>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	0019      	movs	r1, r3
 8001aca:	23fa      	movs	r3, #250	@ 0xfa
 8001acc:	0098      	lsls	r0, r3, #2
 8001ace:	f7fe fb1b 	bl	8000108 <__udivsi3>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	0020      	movs	r0, r4
 8001ad8:	f7fe fb16 	bl	8000108 <__udivsi3>
 8001adc:	0003      	movs	r3, r0
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f000 fd93 	bl	800260a <HAL_SYSTICK_Config>
 8001ae4:	1e03      	subs	r3, r0, #0
 8001ae6:	d112      	bne.n	8001b0e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	d80a      	bhi.n	8001b04 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	2301      	movs	r3, #1
 8001af2:	425b      	negs	r3, r3
 8001af4:	2200      	movs	r2, #0
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 fd62 	bl	80025c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001afc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_InitTick+0x90>)
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e00d      	b.n	8001b20 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001b04:	230f      	movs	r3, #15
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
 8001b0c:	e008      	b.n	8001b20 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b0e:	230f      	movs	r3, #15
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	e003      	b.n	8001b20 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b18:	230f      	movs	r3, #15
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001b20:	230f      	movs	r3, #15
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	781b      	ldrb	r3, [r3, #0]
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b005      	add	sp, #20
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	46c0      	nop			@ (mov r8, r8)
 8001b30:	20000080 	.word	0x20000080
 8001b34:	20000078 	.word	0x20000078
 8001b38:	2000007c 	.word	0x2000007c

08001b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <HAL_IncTick+0x1c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	001a      	movs	r2, r3
 8001b46:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <HAL_IncTick+0x20>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	18d2      	adds	r2, r2, r3
 8001b4c:	4b03      	ldr	r3, [pc, #12]	@ (8001b5c <HAL_IncTick+0x20>)
 8001b4e:	601a      	str	r2, [r3, #0]
}
 8001b50:	46c0      	nop			@ (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	20000080 	.word	0x20000080
 8001b5c:	20000748 	.word	0x20000748

08001b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  return uwTick;
 8001b64:	4b02      	ldr	r3, [pc, #8]	@ (8001b70 <HAL_GetTick+0x10>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	0018      	movs	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	20000748 	.word	0x20000748

08001b74 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a05      	ldr	r2, [pc, #20]	@ (8001b98 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001b84:	401a      	ands	r2, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	601a      	str	r2, [r3, #0]
}
 8001b8e:	46c0      	nop			@ (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b002      	add	sp, #8
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			@ (mov r8, r8)
 8001b98:	ff3fffff 	.word	0xff3fffff

08001b9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	23c0      	movs	r3, #192	@ 0xc0
 8001baa:	041b      	lsls	r3, r3, #16
 8001bac:	4013      	ands	r3, r2
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b002      	add	sp, #8
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	2104      	movs	r1, #4
 8001bca:	400a      	ands	r2, r1
 8001bcc:	2107      	movs	r1, #7
 8001bce:	4091      	lsls	r1, r2
 8001bd0:	000a      	movs	r2, r1
 8001bd2:	43d2      	mvns	r2, r2
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2104      	movs	r1, #4
 8001bda:	400b      	ands	r3, r1
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4099      	lsls	r1, r3
 8001be0:	000b      	movs	r3, r1
 8001be2:	431a      	orrs	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001be8:	46c0      	nop			@ (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b004      	add	sp, #16
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	2104      	movs	r1, #4
 8001c02:	400a      	ands	r2, r1
 8001c04:	2107      	movs	r1, #7
 8001c06:	4091      	lsls	r1, r2
 8001c08:	000a      	movs	r2, r1
 8001c0a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2104      	movs	r1, #4
 8001c10:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001c12:	40da      	lsrs	r2, r3
 8001c14:	0013      	movs	r3, r2
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b084      	sub	sp, #16
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	211f      	movs	r1, #31
 8001c32:	400a      	ands	r2, r1
 8001c34:	210f      	movs	r1, #15
 8001c36:	4091      	lsls	r1, r2
 8001c38:	000a      	movs	r2, r1
 8001c3a:	43d2      	mvns	r2, r2
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0e9b      	lsrs	r3, r3, #26
 8001c42:	210f      	movs	r1, #15
 8001c44:	4019      	ands	r1, r3
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	201f      	movs	r0, #31
 8001c4a:	4003      	ands	r3, r0
 8001c4c:	4099      	lsls	r1, r3
 8001c4e:	000b      	movs	r3, r1
 8001c50:	431a      	orrs	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b004      	add	sp, #16
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	025b      	lsls	r3, r3, #9
 8001c70:	0a5b      	lsrs	r3, r3, #9
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c78:	46c0      	nop			@ (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b002      	add	sp, #8
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	0252      	lsls	r2, r2, #9
 8001c92:	0a52      	lsrs	r2, r2, #9
 8001c94:	43d2      	mvns	r2, r2
 8001c96:	401a      	ands	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c9c:	46c0      	nop			@ (mov r8, r8)
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	b002      	add	sp, #8
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	0212      	lsls	r2, r2, #8
 8001cb8:	43d2      	mvns	r2, r2
 8001cba:	401a      	ands	r2, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
 8001cc4:	4904      	ldr	r1, [pc, #16]	@ (8001cd8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001cc6:	400b      	ands	r3, r1
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001cce:	46c0      	nop			@ (mov r8, r8)
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b004      	add	sp, #16
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	7fffff00 	.word	0x7fffff00

08001cdc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <LL_ADC_EnableInternalRegulator+0x24>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	2280      	movs	r2, #128	@ 0x80
 8001cee:	0552      	lsls	r2, r2, #21
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cf6:	46c0      	nop			@ (mov r8, r8)
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b002      	add	sp, #8
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			@ (mov r8, r8)
 8001d00:	6fffffe8 	.word	0x6fffffe8

08001d04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	055b      	lsls	r3, r3, #21
 8001d14:	401a      	ands	r2, r3
 8001d16:	2380      	movs	r3, #128	@ 0x80
 8001d18:	055b      	lsls	r3, r3, #21
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d101      	bne.n	8001d22 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	0018      	movs	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <LL_ADC_IsEnabled+0x18>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <LL_ADC_IsEnabled+0x1a>
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b002      	add	sp, #8
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d101      	bne.n	8001d66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	0018      	movs	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b002      	add	sp, #8
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d78:	231f      	movs	r3, #31
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e17e      	b.n	8002094 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10a      	bne.n	8001db4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff faeb 	bl	800137c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2254      	movs	r2, #84	@ 0x54
 8001db0:	2100      	movs	r1, #0
 8001db2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff ffa3 	bl	8001d04 <LL_ADC_IsInternalRegulatorEnabled>
 8001dbe:	1e03      	subs	r3, r0, #0
 8001dc0:	d114      	bne.n	8001dec <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7ff ff88 	bl	8001cdc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001dcc:	4bb3      	ldr	r3, [pc, #716]	@ (800209c <HAL_ADC_Init+0x32c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	49b3      	ldr	r1, [pc, #716]	@ (80020a0 <HAL_ADC_Init+0x330>)
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f7fe f998 	bl	8000108 <__udivsi3>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dde:	e002      	b.n	8001de6 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f9      	bne.n	8001de0 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff ff87 	bl	8001d04 <LL_ADC_IsInternalRegulatorEnabled>
 8001df6:	1e03      	subs	r3, r0, #0
 8001df8:	d10f      	bne.n	8001e1a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	2210      	movs	r2, #16
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e12:	231f      	movs	r3, #31
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7ff ff95 	bl	8001d4e <LL_ADC_REG_IsConversionOngoing>
 8001e24:	0003      	movs	r3, r0
 8001e26:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2c:	2210      	movs	r2, #16
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d000      	beq.n	8001e34 <HAL_ADC_Init+0xc4>
 8001e32:	e122      	b.n	800207a <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d000      	beq.n	8001e3c <HAL_ADC_Init+0xcc>
 8001e3a:	e11e      	b.n	800207a <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e40:	4a98      	ldr	r2, [pc, #608]	@ (80020a4 <HAL_ADC_Init+0x334>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	2202      	movs	r2, #2
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff ff6b 	bl	8001d2c <LL_ADC_IsEnabled>
 8001e56:	1e03      	subs	r3, r0, #0
 8001e58:	d000      	beq.n	8001e5c <HAL_ADC_Init+0xec>
 8001e5a:	e0ad      	b.n	8001fb8 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	7e1b      	ldrb	r3, [r3, #24]
 8001e64:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001e66:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7e5b      	ldrb	r3, [r3, #25]
 8001e6c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001e6e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7e9b      	ldrb	r3, [r3, #26]
 8001e74:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001e76:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_ADC_Init+0x116>
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	015b      	lsls	r3, r3, #5
 8001e84:	e000      	b.n	8001e88 <HAL_ADC_Init+0x118>
 8001e86:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001e88:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001e8e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	da04      	bge.n	8001ea2 <HAL_ADC_Init+0x132>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	e001      	b.n	8001ea6 <HAL_ADC_Init+0x136>
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001ea6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	212c      	movs	r1, #44	@ 0x2c
 8001eac:	5c5b      	ldrb	r3, [r3, r1]
 8001eae:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001eb0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	5c9b      	ldrb	r3, [r3, r2]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d115      	bne.n	8001eee <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7e9b      	ldrb	r3, [r3, #26]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d105      	bne.n	8001ed6 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2280      	movs	r2, #128	@ 0x80
 8001ece:	0252      	lsls	r2, r2, #9
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	e00b      	b.n	8001eee <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	2220      	movs	r2, #32
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00a      	beq.n	8001f0c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001efa:	23e0      	movs	r3, #224	@ 0xe0
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001f04:	4313      	orrs	r3, r2
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	4a65      	ldr	r2, [pc, #404]	@ (80020a8 <HAL_ADC_Init+0x338>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	0019      	movs	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	0f9b      	lsrs	r3, r3, #30
 8001f28:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	223c      	movs	r2, #60	@ 0x3c
 8001f3a:	5c9b      	ldrb	r3, [r3, r2]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d111      	bne.n	8001f64 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	0f9b      	lsrs	r3, r3, #30
 8001f46:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001f4c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001f52:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001f58:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4313      	orrs	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	4a50      	ldr	r2, [pc, #320]	@ (80020ac <HAL_ADC_Init+0x33c>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	23c0      	movs	r3, #192	@ 0xc0
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d018      	beq.n	8001fb8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001f8a:	2380      	movs	r3, #128	@ 0x80
 8001f8c:	05db      	lsls	r3, r3, #23
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d012      	beq.n	8001fb8 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001f96:	2380      	movs	r3, #128	@ 0x80
 8001f98:	061b      	lsls	r3, r3, #24
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d00c      	beq.n	8001fb8 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001f9e:	4b44      	ldr	r3, [pc, #272]	@ (80020b0 <HAL_ADC_Init+0x340>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a44      	ldr	r2, [pc, #272]	@ (80020b4 <HAL_ADC_Init+0x344>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	23f0      	movs	r3, #240	@ 0xf0
 8001fae:	039b      	lsls	r3, r3, #14
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80020b0 <HAL_ADC_Init+0x340>)
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	f7ff fdf7 	bl	8001bb6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd0:	4939      	ldr	r1, [pc, #228]	@ (80020b8 <HAL_ADC_Init+0x348>)
 8001fd2:	001a      	movs	r2, r3
 8001fd4:	f7ff fdef 	bl	8001bb6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d109      	bne.n	8001ff4 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2110      	movs	r1, #16
 8001fec:	4249      	negs	r1, r1
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ff2:	e018      	b.n	8002026 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	2380      	movs	r3, #128	@ 0x80
 8001ffa:	039b      	lsls	r3, r3, #14
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d112      	bne.n	8002026 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	3b01      	subs	r3, #1
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	221c      	movs	r2, #28
 8002010:	4013      	ands	r3, r2
 8002012:	2210      	movs	r2, #16
 8002014:	4252      	negs	r2, r2
 8002016:	409a      	lsls	r2, r3
 8002018:	0011      	movs	r1, r2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2100      	movs	r1, #0
 800202c:	0018      	movs	r0, r3
 800202e:	f7ff fddf 	bl	8001bf0 <LL_ADC_GetSamplingTimeCommonChannels>
 8002032:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002038:	429a      	cmp	r2, r3
 800203a:	d10b      	bne.n	8002054 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002046:	2203      	movs	r2, #3
 8002048:	4393      	bics	r3, r2
 800204a:	2201      	movs	r2, #1
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002052:	e01c      	b.n	800208e <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002058:	2212      	movs	r2, #18
 800205a:	4393      	bics	r3, r2
 800205c:	2210      	movs	r2, #16
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002068:	2201      	movs	r2, #1
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002070:	231f      	movs	r3, #31
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002078:	e009      	b.n	800208e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207e:	2210      	movs	r2, #16
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002086:	231f      	movs	r3, #31
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800208e:	231f      	movs	r3, #31
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	781b      	ldrb	r3, [r3, #0]
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b008      	add	sp, #32
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000078 	.word	0x20000078
 80020a0:	00030d40 	.word	0x00030d40
 80020a4:	fffffefd 	.word	0xfffffefd
 80020a8:	ffde0201 	.word	0xffde0201
 80020ac:	1ffffc02 	.word	0x1ffffc02
 80020b0:	40012708 	.word	0x40012708
 80020b4:	ffc3ffff 	.word	0xffc3ffff
 80020b8:	7fffff04 	.word	0x7fffff04

080020bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c6:	2317      	movs	r3, #23
 80020c8:	18fb      	adds	r3, r7, r3
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2254      	movs	r2, #84	@ 0x54
 80020d6:	5c9b      	ldrb	r3, [r3, r2]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x24>
 80020dc:	2302      	movs	r3, #2
 80020de:	e1be      	b.n	800245e <HAL_ADC_ConfigChannel+0x3a2>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2254      	movs	r2, #84	@ 0x54
 80020e4:	2101      	movs	r1, #1
 80020e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f7ff fe2e 	bl	8001d4e <LL_ADC_REG_IsConversionOngoing>
 80020f2:	1e03      	subs	r3, r0, #0
 80020f4:	d000      	beq.n	80020f8 <HAL_ADC_ConfigChannel+0x3c>
 80020f6:	e1a1      	b.n	800243c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d100      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x46>
 8002100:	e152      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	2380      	movs	r3, #128	@ 0x80
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	429a      	cmp	r2, r3
 800210c:	d004      	beq.n	8002118 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002112:	4ac2      	ldr	r2, [pc, #776]	@ (800241c <HAL_ADC_ConfigChannel+0x360>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d108      	bne.n	800212a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0019      	movs	r1, r3
 8002122:	0010      	movs	r0, r2
 8002124:	f7ff fd9b 	bl	8001c5e <LL_ADC_REG_SetSequencerChAdd>
 8002128:	e0ed      	b.n	8002306 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	211f      	movs	r1, #31
 8002134:	400b      	ands	r3, r1
 8002136:	210f      	movs	r1, #15
 8002138:	4099      	lsls	r1, r3
 800213a:	000b      	movs	r3, r1
 800213c:	43db      	mvns	r3, r3
 800213e:	4013      	ands	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	025b      	lsls	r3, r3, #9
 8002148:	0a5b      	lsrs	r3, r3, #9
 800214a:	d105      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x9c>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0e9b      	lsrs	r3, r3, #26
 8002152:	221f      	movs	r2, #31
 8002154:	4013      	ands	r3, r2
 8002156:	e0bc      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2201      	movs	r2, #1
 800215e:	4013      	ands	r3, r2
 8002160:	d000      	beq.n	8002164 <HAL_ADC_ConfigChannel+0xa8>
 8002162:	e0b5      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x214>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2202      	movs	r2, #2
 800216a:	4013      	ands	r3, r2
 800216c:	d000      	beq.n	8002170 <HAL_ADC_ConfigChannel+0xb4>
 800216e:	e0ad      	b.n	80022cc <HAL_ADC_ConfigChannel+0x210>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2204      	movs	r2, #4
 8002176:	4013      	ands	r3, r2
 8002178:	d000      	beq.n	800217c <HAL_ADC_ConfigChannel+0xc0>
 800217a:	e0a5      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x20c>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2208      	movs	r2, #8
 8002182:	4013      	ands	r3, r2
 8002184:	d000      	beq.n	8002188 <HAL_ADC_ConfigChannel+0xcc>
 8002186:	e09d      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x208>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2210      	movs	r2, #16
 800218e:	4013      	ands	r3, r2
 8002190:	d000      	beq.n	8002194 <HAL_ADC_ConfigChannel+0xd8>
 8002192:	e095      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x204>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2220      	movs	r2, #32
 800219a:	4013      	ands	r3, r2
 800219c:	d000      	beq.n	80021a0 <HAL_ADC_ConfigChannel+0xe4>
 800219e:	e08d      	b.n	80022bc <HAL_ADC_ConfigChannel+0x200>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2240      	movs	r2, #64	@ 0x40
 80021a6:	4013      	ands	r3, r2
 80021a8:	d000      	beq.n	80021ac <HAL_ADC_ConfigChannel+0xf0>
 80021aa:	e085      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x1fc>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2280      	movs	r2, #128	@ 0x80
 80021b2:	4013      	ands	r3, r2
 80021b4:	d000      	beq.n	80021b8 <HAL_ADC_ConfigChannel+0xfc>
 80021b6:	e07d      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x1f8>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	2380      	movs	r3, #128	@ 0x80
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4013      	ands	r3, r2
 80021c2:	d000      	beq.n	80021c6 <HAL_ADC_ConfigChannel+0x10a>
 80021c4:	e074      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x1f4>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4013      	ands	r3, r2
 80021d0:	d000      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x118>
 80021d2:	e06b      	b.n	80022ac <HAL_ADC_ConfigChannel+0x1f0>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4013      	ands	r3, r2
 80021de:	d000      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x126>
 80021e0:	e062      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x1ec>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	2380      	movs	r3, #128	@ 0x80
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	4013      	ands	r3, r2
 80021ec:	d000      	beq.n	80021f0 <HAL_ADC_ConfigChannel+0x134>
 80021ee:	e059      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x1e8>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2380      	movs	r3, #128	@ 0x80
 80021f6:	015b      	lsls	r3, r3, #5
 80021f8:	4013      	ands	r3, r2
 80021fa:	d151      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x1e4>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	2380      	movs	r3, #128	@ 0x80
 8002202:	019b      	lsls	r3, r3, #6
 8002204:	4013      	ands	r3, r2
 8002206:	d149      	bne.n	800229c <HAL_ADC_ConfigChannel+0x1e0>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2380      	movs	r3, #128	@ 0x80
 800220e:	01db      	lsls	r3, r3, #7
 8002210:	4013      	ands	r3, r2
 8002212:	d141      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x1dc>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	@ 0x80
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	4013      	ands	r3, r2
 800221e:	d139      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x1d8>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2380      	movs	r3, #128	@ 0x80
 8002226:	025b      	lsls	r3, r3, #9
 8002228:	4013      	ands	r3, r2
 800222a:	d131      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x1d4>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	029b      	lsls	r3, r3, #10
 8002234:	4013      	ands	r3, r2
 8002236:	d129      	bne.n	800228c <HAL_ADC_ConfigChannel+0x1d0>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	02db      	lsls	r3, r3, #11
 8002240:	4013      	ands	r3, r2
 8002242:	d121      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1cc>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	2380      	movs	r3, #128	@ 0x80
 800224a:	031b      	lsls	r3, r3, #12
 800224c:	4013      	ands	r3, r2
 800224e:	d119      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x1c8>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	@ 0x80
 8002256:	035b      	lsls	r3, r3, #13
 8002258:	4013      	ands	r3, r2
 800225a:	d111      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x1c4>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2380      	movs	r3, #128	@ 0x80
 8002262:	039b      	lsls	r3, r3, #14
 8002264:	4013      	ands	r3, r2
 8002266:	d109      	bne.n	800227c <HAL_ADC_ConfigChannel+0x1c0>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2380      	movs	r3, #128	@ 0x80
 800226e:	03db      	lsls	r3, r3, #15
 8002270:	4013      	ands	r3, r2
 8002272:	d001      	beq.n	8002278 <HAL_ADC_ConfigChannel+0x1bc>
 8002274:	2316      	movs	r3, #22
 8002276:	e02c      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 8002278:	2300      	movs	r3, #0
 800227a:	e02a      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 800227c:	2315      	movs	r3, #21
 800227e:	e028      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 8002280:	2314      	movs	r3, #20
 8002282:	e026      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 8002284:	2313      	movs	r3, #19
 8002286:	e024      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 8002288:	2312      	movs	r3, #18
 800228a:	e022      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 800228c:	2311      	movs	r3, #17
 800228e:	e020      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 8002290:	2310      	movs	r3, #16
 8002292:	e01e      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 8002294:	230f      	movs	r3, #15
 8002296:	e01c      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 8002298:	230e      	movs	r3, #14
 800229a:	e01a      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 800229c:	230d      	movs	r3, #13
 800229e:	e018      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 80022a0:	230c      	movs	r3, #12
 80022a2:	e016      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 80022a4:	230b      	movs	r3, #11
 80022a6:	e014      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 80022a8:	230a      	movs	r3, #10
 80022aa:	e012      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 80022ac:	2309      	movs	r3, #9
 80022ae:	e010      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 80022b0:	2308      	movs	r3, #8
 80022b2:	e00e      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 80022b4:	2307      	movs	r3, #7
 80022b6:	e00c      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 80022b8:	2306      	movs	r3, #6
 80022ba:	e00a      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 80022bc:	2305      	movs	r3, #5
 80022be:	e008      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 80022c0:	2304      	movs	r3, #4
 80022c2:	e006      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 80022c4:	2303      	movs	r3, #3
 80022c6:	e004      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e002      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x216>
 80022d0:	2300      	movs	r3, #0
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	6852      	ldr	r2, [r2, #4]
 80022d6:	201f      	movs	r0, #31
 80022d8:	4002      	ands	r2, r0
 80022da:	4093      	lsls	r3, r2
 80022dc:	000a      	movs	r2, r1
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	089b      	lsrs	r3, r3, #2
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d808      	bhi.n	8002306 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	001a      	movs	r2, r3
 8002302:	f7ff fc8c 	bl	8001c1e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6819      	ldr	r1, [r3, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	001a      	movs	r2, r3
 8002314:	f7ff fcc6 	bl	8001ca4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	db00      	blt.n	8002322 <HAL_ADC_ConfigChannel+0x266>
 8002320:	e096      	b.n	8002450 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002322:	4b3f      	ldr	r3, [pc, #252]	@ (8002420 <HAL_ADC_ConfigChannel+0x364>)
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff fc39 	bl	8001b9c <LL_ADC_GetCommonPathInternalCh>
 800232a:	0003      	movs	r3, r0
 800232c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a3c      	ldr	r2, [pc, #240]	@ (8002424 <HAL_ADC_ConfigChannel+0x368>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d123      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	041b      	lsls	r3, r3, #16
 800233e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002340:	d11e      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2280      	movs	r2, #128	@ 0x80
 8002346:	0412      	lsls	r2, r2, #16
 8002348:	4313      	orrs	r3, r2
 800234a:	4a35      	ldr	r2, [pc, #212]	@ (8002420 <HAL_ADC_ConfigChannel+0x364>)
 800234c:	0019      	movs	r1, r3
 800234e:	0010      	movs	r0, r2
 8002350:	f7ff fc10 	bl	8001b74 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002354:	4b34      	ldr	r3, [pc, #208]	@ (8002428 <HAL_ADC_ConfigChannel+0x36c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4934      	ldr	r1, [pc, #208]	@ (800242c <HAL_ADC_ConfigChannel+0x370>)
 800235a:	0018      	movs	r0, r3
 800235c:	f7fd fed4 	bl	8000108 <__udivsi3>
 8002360:	0003      	movs	r3, r0
 8002362:	001a      	movs	r2, r3
 8002364:	0013      	movs	r3, r2
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	189b      	adds	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	3301      	adds	r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002370:	e002      	b.n	8002378 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3b01      	subs	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f9      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800237e:	e067      	b.n	8002450 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2a      	ldr	r2, [pc, #168]	@ (8002430 <HAL_ADC_ConfigChannel+0x374>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d162      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	03db      	lsls	r3, r3, #15
 8002390:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002392:	d15d      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2280      	movs	r2, #128	@ 0x80
 8002398:	03d2      	lsls	r2, r2, #15
 800239a:	4313      	orrs	r3, r2
 800239c:	4a20      	ldr	r2, [pc, #128]	@ (8002420 <HAL_ADC_ConfigChannel+0x364>)
 800239e:	0019      	movs	r1, r3
 80023a0:	0010      	movs	r0, r2
 80023a2:	f7ff fbe7 	bl	8001b74 <LL_ADC_SetCommonPathInternalCh>
 80023a6:	e053      	b.n	8002450 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	2380      	movs	r3, #128	@ 0x80
 80023ae:	061b      	lsls	r3, r3, #24
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d004      	beq.n	80023be <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80023b8:	4a18      	ldr	r2, [pc, #96]	@ (800241c <HAL_ADC_ConfigChannel+0x360>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d107      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	0019      	movs	r1, r3
 80023c8:	0010      	movs	r0, r2
 80023ca:	f7ff fc59 	bl	8001c80 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da3c      	bge.n	8002450 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023d6:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <HAL_ADC_ConfigChannel+0x364>)
 80023d8:	0018      	movs	r0, r3
 80023da:	f7ff fbdf 	bl	8001b9c <LL_ADC_GetCommonPathInternalCh>
 80023de:	0003      	movs	r3, r0
 80023e0:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002424 <HAL_ADC_ConfigChannel+0x368>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d108      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4a11      	ldr	r2, [pc, #68]	@ (8002434 <HAL_ADC_ConfigChannel+0x378>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002420 <HAL_ADC_ConfigChannel+0x364>)
 80023f4:	0019      	movs	r1, r3
 80023f6:	0010      	movs	r0, r2
 80023f8:	f7ff fbbc 	bl	8001b74 <LL_ADC_SetCommonPathInternalCh>
 80023fc:	e028      	b.n	8002450 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a0b      	ldr	r2, [pc, #44]	@ (8002430 <HAL_ADC_ConfigChannel+0x374>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d123      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4a0b      	ldr	r2, [pc, #44]	@ (8002438 <HAL_ADC_ConfigChannel+0x37c>)
 800240c:	4013      	ands	r3, r2
 800240e:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <HAL_ADC_ConfigChannel+0x364>)
 8002410:	0019      	movs	r1, r3
 8002412:	0010      	movs	r0, r2
 8002414:	f7ff fbae 	bl	8001b74 <LL_ADC_SetCommonPathInternalCh>
 8002418:	e01a      	b.n	8002450 <HAL_ADC_ConfigChannel+0x394>
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	80000004 	.word	0x80000004
 8002420:	40012708 	.word	0x40012708
 8002424:	a4000200 	.word	0xa4000200
 8002428:	20000078 	.word	0x20000078
 800242c:	00030d40 	.word	0x00030d40
 8002430:	a8000400 	.word	0xa8000400
 8002434:	ff7fffff 	.word	0xff7fffff
 8002438:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002440:	2220      	movs	r2, #32
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002448:	2317      	movs	r3, #23
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2254      	movs	r2, #84	@ 0x54
 8002454:	2100      	movs	r1, #0
 8002456:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002458:	2317      	movs	r3, #23
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	781b      	ldrb	r3, [r3, #0]
}
 800245e:	0018      	movs	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	b006      	add	sp, #24
 8002464:	bd80      	pop	{r7, pc}
 8002466:	46c0      	nop			@ (mov r8, r8)

08002468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	0002      	movs	r2, r0
 8002470:	1dfb      	adds	r3, r7, #7
 8002472:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002474:	1dfb      	adds	r3, r7, #7
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b7f      	cmp	r3, #127	@ 0x7f
 800247a:	d809      	bhi.n	8002490 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	001a      	movs	r2, r3
 8002482:	231f      	movs	r3, #31
 8002484:	401a      	ands	r2, r3
 8002486:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <__NVIC_EnableIRQ+0x30>)
 8002488:	2101      	movs	r1, #1
 800248a:	4091      	lsls	r1, r2
 800248c:	000a      	movs	r2, r1
 800248e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002490:	46c0      	nop			@ (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b002      	add	sp, #8
 8002496:	bd80      	pop	{r7, pc}
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	0002      	movs	r2, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	1dfb      	adds	r3, r7, #7
 80024a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024aa:	1dfb      	adds	r3, r7, #7
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80024b0:	d828      	bhi.n	8002504 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002570 <__NVIC_SetPriority+0xd4>)
 80024b4:	1dfb      	adds	r3, r7, #7
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b25b      	sxtb	r3, r3
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	33c0      	adds	r3, #192	@ 0xc0
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	589b      	ldr	r3, [r3, r2]
 80024c2:	1dfa      	adds	r2, r7, #7
 80024c4:	7812      	ldrb	r2, [r2, #0]
 80024c6:	0011      	movs	r1, r2
 80024c8:	2203      	movs	r2, #3
 80024ca:	400a      	ands	r2, r1
 80024cc:	00d2      	lsls	r2, r2, #3
 80024ce:	21ff      	movs	r1, #255	@ 0xff
 80024d0:	4091      	lsls	r1, r2
 80024d2:	000a      	movs	r2, r1
 80024d4:	43d2      	mvns	r2, r2
 80024d6:	401a      	ands	r2, r3
 80024d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	019b      	lsls	r3, r3, #6
 80024de:	22ff      	movs	r2, #255	@ 0xff
 80024e0:	401a      	ands	r2, r3
 80024e2:	1dfb      	adds	r3, r7, #7
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	0018      	movs	r0, r3
 80024e8:	2303      	movs	r3, #3
 80024ea:	4003      	ands	r3, r0
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024f0:	481f      	ldr	r0, [pc, #124]	@ (8002570 <__NVIC_SetPriority+0xd4>)
 80024f2:	1dfb      	adds	r3, r7, #7
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b25b      	sxtb	r3, r3
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	430a      	orrs	r2, r1
 80024fc:	33c0      	adds	r3, #192	@ 0xc0
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002502:	e031      	b.n	8002568 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002504:	4a1b      	ldr	r2, [pc, #108]	@ (8002574 <__NVIC_SetPriority+0xd8>)
 8002506:	1dfb      	adds	r3, r7, #7
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	0019      	movs	r1, r3
 800250c:	230f      	movs	r3, #15
 800250e:	400b      	ands	r3, r1
 8002510:	3b08      	subs	r3, #8
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	3306      	adds	r3, #6
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	18d3      	adds	r3, r2, r3
 800251a:	3304      	adds	r3, #4
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	1dfa      	adds	r2, r7, #7
 8002520:	7812      	ldrb	r2, [r2, #0]
 8002522:	0011      	movs	r1, r2
 8002524:	2203      	movs	r2, #3
 8002526:	400a      	ands	r2, r1
 8002528:	00d2      	lsls	r2, r2, #3
 800252a:	21ff      	movs	r1, #255	@ 0xff
 800252c:	4091      	lsls	r1, r2
 800252e:	000a      	movs	r2, r1
 8002530:	43d2      	mvns	r2, r2
 8002532:	401a      	ands	r2, r3
 8002534:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	019b      	lsls	r3, r3, #6
 800253a:	22ff      	movs	r2, #255	@ 0xff
 800253c:	401a      	ands	r2, r3
 800253e:	1dfb      	adds	r3, r7, #7
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	0018      	movs	r0, r3
 8002544:	2303      	movs	r3, #3
 8002546:	4003      	ands	r3, r0
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800254c:	4809      	ldr	r0, [pc, #36]	@ (8002574 <__NVIC_SetPriority+0xd8>)
 800254e:	1dfb      	adds	r3, r7, #7
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	001c      	movs	r4, r3
 8002554:	230f      	movs	r3, #15
 8002556:	4023      	ands	r3, r4
 8002558:	3b08      	subs	r3, #8
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	430a      	orrs	r2, r1
 800255e:	3306      	adds	r3, #6
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	18c3      	adds	r3, r0, r3
 8002564:	3304      	adds	r3, #4
 8002566:	601a      	str	r2, [r3, #0]
}
 8002568:	46c0      	nop			@ (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b003      	add	sp, #12
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	e000e100 	.word	0xe000e100
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	1e5a      	subs	r2, r3, #1
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	045b      	lsls	r3, r3, #17
 8002588:	429a      	cmp	r2, r3
 800258a:	d301      	bcc.n	8002590 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800258c:	2301      	movs	r3, #1
 800258e:	e010      	b.n	80025b2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002590:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <SysTick_Config+0x44>)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	3a01      	subs	r2, #1
 8002596:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002598:	2301      	movs	r3, #1
 800259a:	425b      	negs	r3, r3
 800259c:	2103      	movs	r1, #3
 800259e:	0018      	movs	r0, r3
 80025a0:	f7ff ff7c 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a4:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <SysTick_Config+0x44>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025aa:	4b04      	ldr	r3, [pc, #16]	@ (80025bc <SysTick_Config+0x44>)
 80025ac:	2207      	movs	r2, #7
 80025ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b002      	add	sp, #8
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	e000e010 	.word	0xe000e010

080025c0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
 80025ca:	210f      	movs	r1, #15
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	1c02      	adds	r2, r0, #0
 80025d0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	187b      	adds	r3, r7, r1
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	b25b      	sxtb	r3, r3
 80025da:	0011      	movs	r1, r2
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff ff5d 	bl	800249c <__NVIC_SetPriority>
}
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b004      	add	sp, #16
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	0002      	movs	r2, r0
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f6:	1dfb      	adds	r3, r7, #7
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	b25b      	sxtb	r3, r3
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7ff ff33 	bl	8002468 <__NVIC_EnableIRQ>
}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	b002      	add	sp, #8
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	0018      	movs	r0, r3
 8002616:	f7ff ffaf 	bl	8002578 <SysTick_Config>
 800261a:	0003      	movs	r3, r0
}
 800261c:	0018      	movs	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	b002      	add	sp, #8
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e077      	b.n	8002726 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a3d      	ldr	r2, [pc, #244]	@ (8002730 <HAL_DMA_Init+0x10c>)
 800263c:	4694      	mov	ip, r2
 800263e:	4463      	add	r3, ip
 8002640:	2114      	movs	r1, #20
 8002642:	0018      	movs	r0, r3
 8002644:	f7fd fd60 	bl	8000108 <__udivsi3>
 8002648:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800264a:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2225      	movs	r2, #37	@ 0x25
 8002654:	2102      	movs	r1, #2
 8002656:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4934      	ldr	r1, [pc, #208]	@ (8002734 <HAL_DMA_Init+0x110>)
 8002664:	400a      	ands	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6819      	ldr	r1, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 fa9f 	bl	8002be4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	2380      	movs	r3, #128	@ 0x80
 80026ac:	01db      	lsls	r3, r3, #7
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d102      	bne.n	80026b8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c0:	21ff      	movs	r1, #255	@ 0xff
 80026c2:	400a      	ands	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80026ce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d011      	beq.n	80026fc <HAL_DMA_Init+0xd8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d80d      	bhi.n	80026fc <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 faaa 	bl	8002c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	e008      	b.n	800270e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2225      	movs	r2, #37	@ 0x25
 8002718:	2101      	movs	r1, #1
 800271a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2224      	movs	r2, #36	@ 0x24
 8002720:	2100      	movs	r1, #0
 8002722:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	0018      	movs	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	b002      	add	sp, #8
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			@ (mov r8, r8)
 8002730:	bffdfff8 	.word	0xbffdfff8
 8002734:	ffff800f 	.word	0xffff800f

08002738 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002746:	2317      	movs	r3, #23
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2224      	movs	r2, #36	@ 0x24
 8002752:	5c9b      	ldrb	r3, [r3, r2]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_DMA_Start_IT+0x24>
 8002758:	2302      	movs	r3, #2
 800275a:	e070      	b.n	800283e <HAL_DMA_Start_IT+0x106>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2224      	movs	r2, #36	@ 0x24
 8002760:	2101      	movs	r1, #1
 8002762:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2225      	movs	r2, #37	@ 0x25
 8002768:	5c9b      	ldrb	r3, [r3, r2]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d157      	bne.n	8002820 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2225      	movs	r2, #37	@ 0x25
 8002774:	2102      	movs	r1, #2
 8002776:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2101      	movs	r1, #1
 800278a:	438a      	bics	r2, r1
 800278c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f000 f9e5 	bl	8002b64 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d008      	beq.n	80027b4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	210e      	movs	r1, #14
 80027ae:	430a      	orrs	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e00f      	b.n	80027d4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2104      	movs	r1, #4
 80027c0:	438a      	bics	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	210a      	movs	r1, #10
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	2380      	movs	r3, #128	@ 0x80
 80027dc:	025b      	lsls	r3, r3, #9
 80027de:	4013      	ands	r3, r2
 80027e0:	d008      	beq.n	80027f4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ec:	2180      	movs	r1, #128	@ 0x80
 80027ee:	0049      	lsls	r1, r1, #1
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002806:	2180      	movs	r1, #128	@ 0x80
 8002808:	0049      	lsls	r1, r1, #1
 800280a:	430a      	orrs	r2, r1
 800280c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2101      	movs	r1, #1
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e007      	b.n	8002830 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2224      	movs	r2, #36	@ 0x24
 8002824:	2100      	movs	r1, #0
 8002826:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002828:	2317      	movs	r3, #23
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2202      	movs	r2, #2
 800282e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2224      	movs	r2, #36	@ 0x24
 8002834:	2100      	movs	r1, #0
 8002836:	5499      	strb	r1, [r3, r2]

  return status;
 8002838:	2317      	movs	r3, #23
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	781b      	ldrb	r3, [r3, #0]
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b006      	add	sp, #24
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e050      	b.n	80028fc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2225      	movs	r2, #37	@ 0x25
 800285e:	5c9b      	ldrb	r3, [r3, r2]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d008      	beq.n	8002878 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2204      	movs	r2, #4
 800286a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2224      	movs	r2, #36	@ 0x24
 8002870:	2100      	movs	r1, #0
 8002872:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e041      	b.n	80028fc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	210e      	movs	r1, #14
 8002884:	438a      	bics	r2, r1
 8002886:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	491c      	ldr	r1, [pc, #112]	@ (8002904 <HAL_DMA_Abort+0xbc>)
 8002894:	400a      	ands	r2, r1
 8002896:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2101      	movs	r1, #1
 80028a4:	438a      	bics	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80028a8:	4b17      	ldr	r3, [pc, #92]	@ (8002908 <HAL_DMA_Abort+0xc0>)
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	221c      	movs	r2, #28
 80028b2:	4013      	ands	r3, r2
 80028b4:	2201      	movs	r2, #1
 80028b6:	409a      	lsls	r2, r3
 80028b8:	4b13      	ldr	r3, [pc, #76]	@ (8002908 <HAL_DMA_Abort+0xc0>)
 80028ba:	430a      	orrs	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80028c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00c      	beq.n	80028ea <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028da:	490a      	ldr	r1, [pc, #40]	@ (8002904 <HAL_DMA_Abort+0xbc>)
 80028dc:	400a      	ands	r2, r1
 80028de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80028e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2225      	movs	r2, #37	@ 0x25
 80028ee:	2101      	movs	r1, #1
 80028f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2224      	movs	r2, #36	@ 0x24
 80028f6:	2100      	movs	r1, #0
 80028f8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b002      	add	sp, #8
 8002902:	bd80      	pop	{r7, pc}
 8002904:	fffffeff 	.word	0xfffffeff
 8002908:	40020000 	.word	0x40020000

0800290c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002914:	230f      	movs	r3, #15
 8002916:	18fb      	adds	r3, r7, r3
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2224      	movs	r2, #36	@ 0x24
 8002920:	2100      	movs	r1, #0
 8002922:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2224      	movs	r2, #36	@ 0x24
 8002928:	5c9b      	ldrb	r3, [r3, r2]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_DMA_Abort_IT+0x26>
 800292e:	2302      	movs	r3, #2
 8002930:	e05e      	b.n	80029f0 <HAL_DMA_Abort_IT+0xe4>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2224      	movs	r2, #36	@ 0x24
 8002936:	2101      	movs	r1, #1
 8002938:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2225      	movs	r2, #37	@ 0x25
 800293e:	5c9b      	ldrb	r3, [r3, r2]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d007      	beq.n	8002956 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2204      	movs	r2, #4
 800294a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800294c:	230f      	movs	r3, #15
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
 8002954:	e049      	b.n	80029ea <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	210e      	movs	r1, #14
 8002962:	438a      	bics	r2, r1
 8002964:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2101      	movs	r1, #1
 8002972:	438a      	bics	r2, r1
 8002974:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002980:	491d      	ldr	r1, [pc, #116]	@ (80029f8 <HAL_DMA_Abort_IT+0xec>)
 8002982:	400a      	ands	r2, r1
 8002984:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8002986:	4b1d      	ldr	r3, [pc, #116]	@ (80029fc <HAL_DMA_Abort_IT+0xf0>)
 8002988:	6859      	ldr	r1, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	221c      	movs	r2, #28
 8002990:	4013      	ands	r3, r2
 8002992:	2201      	movs	r2, #1
 8002994:	409a      	lsls	r2, r3
 8002996:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <HAL_DMA_Abort_IT+0xf0>)
 8002998:	430a      	orrs	r2, r1
 800299a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80029a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00c      	beq.n	80029c8 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029b8:	490f      	ldr	r1, [pc, #60]	@ (80029f8 <HAL_DMA_Abort_IT+0xec>)
 80029ba:	400a      	ands	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80029c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2225      	movs	r2, #37	@ 0x25
 80029cc:	2101      	movs	r1, #1
 80029ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2224      	movs	r2, #36	@ 0x24
 80029d4:	2100      	movs	r1, #0
 80029d6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	0010      	movs	r0, r2
 80029e8:	4798      	blx	r3
    }
  }
  return status;
 80029ea:	230f      	movs	r3, #15
 80029ec:	18fb      	adds	r3, r7, r3
 80029ee:	781b      	ldrb	r3, [r3, #0]
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b004      	add	sp, #16
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	fffffeff 	.word	0xfffffeff
 80029fc:	40020000 	.word	0x40020000

08002a00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8002a08:	4b55      	ldr	r3, [pc, #340]	@ (8002b60 <HAL_DMA_IRQHandler+0x160>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	221c      	movs	r2, #28
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2204      	movs	r2, #4
 8002a20:	409a      	lsls	r2, r3
 8002a22:	0013      	movs	r3, r2
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4013      	ands	r3, r2
 8002a28:	d027      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x7a>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d023      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d107      	bne.n	8002a4e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2104      	movs	r1, #4
 8002a4a:	438a      	bics	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002a4e:	4b44      	ldr	r3, [pc, #272]	@ (8002b60 <HAL_DMA_IRQHandler+0x160>)
 8002a50:	6859      	ldr	r1, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	221c      	movs	r2, #28
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	409a      	lsls	r2, r3
 8002a5e:	4b40      	ldr	r3, [pc, #256]	@ (8002b60 <HAL_DMA_IRQHandler+0x160>)
 8002a60:	430a      	orrs	r2, r1
 8002a62:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d100      	bne.n	8002a6e <HAL_DMA_IRQHandler+0x6e>
 8002a6c:	e073      	b.n	8002b56 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	0010      	movs	r0, r2
 8002a76:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002a78:	e06d      	b.n	8002b56 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	221c      	movs	r2, #28
 8002a80:	4013      	ands	r3, r2
 8002a82:	2202      	movs	r2, #2
 8002a84:	409a      	lsls	r2, r3
 8002a86:	0013      	movs	r3, r2
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d02e      	beq.n	8002aec <HAL_DMA_IRQHandler+0xec>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2202      	movs	r2, #2
 8002a92:	4013      	ands	r3, r2
 8002a94:	d02a      	beq.n	8002aec <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d10b      	bne.n	8002aba <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	210a      	movs	r1, #10
 8002aae:	438a      	bics	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2225      	movs	r2, #37	@ 0x25
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8002aba:	4b29      	ldr	r3, [pc, #164]	@ (8002b60 <HAL_DMA_IRQHandler+0x160>)
 8002abc:	6859      	ldr	r1, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	221c      	movs	r2, #28
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	4b25      	ldr	r3, [pc, #148]	@ (8002b60 <HAL_DMA_IRQHandler+0x160>)
 8002acc:	430a      	orrs	r2, r1
 8002ace:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2224      	movs	r2, #36	@ 0x24
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d03a      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	0010      	movs	r0, r2
 8002ae8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002aea:	e034      	b.n	8002b56 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	221c      	movs	r2, #28
 8002af2:	4013      	ands	r3, r2
 8002af4:	2208      	movs	r2, #8
 8002af6:	409a      	lsls	r2, r3
 8002af8:	0013      	movs	r3, r2
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4013      	ands	r3, r2
 8002afe:	d02b      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x158>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2208      	movs	r2, #8
 8002b04:	4013      	ands	r3, r2
 8002b06:	d027      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	210e      	movs	r1, #14
 8002b14:	438a      	bics	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <HAL_DMA_IRQHandler+0x160>)
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	221c      	movs	r2, #28
 8002b22:	4013      	ands	r3, r2
 8002b24:	2201      	movs	r2, #1
 8002b26:	409a      	lsls	r2, r3
 8002b28:	4b0d      	ldr	r3, [pc, #52]	@ (8002b60 <HAL_DMA_IRQHandler+0x160>)
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2225      	movs	r2, #37	@ 0x25
 8002b38:	2101      	movs	r1, #1
 8002b3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2224      	movs	r2, #36	@ 0x24
 8002b40:	2100      	movs	r1, #0
 8002b42:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	0010      	movs	r0, r2
 8002b54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	46c0      	nop			@ (mov r8, r8)
}
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b004      	add	sp, #16
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40020000 	.word	0x40020000

08002b64 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002b7a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d004      	beq.n	8002b8e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002b8c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002b8e:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <DMA_SetConfig+0x7c>)
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	221c      	movs	r2, #28
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <DMA_SetConfig+0x7c>)
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d108      	bne.n	8002bc6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002bc4:	e007      	b.n	8002bd6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	60da      	str	r2, [r3, #12]
}
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b004      	add	sp, #16
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	40020000 	.word	0x40020000

08002be4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	001a      	movs	r2, r3
 8002bf2:	23ff      	movs	r3, #255	@ 0xff
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	3b08      	subs	r3, #8
 8002bf8:	2114      	movs	r1, #20
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7fd fa84 	bl	8000108 <__udivsi3>
 8002c00:	0003      	movs	r3, r0
 8002c02:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002c0c:	4694      	mov	ip, r2
 8002c0e:	4463      	add	r3, ip
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	001a      	movs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a07      	ldr	r2, [pc, #28]	@ (8002c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002c1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	221c      	movs	r2, #28
 8002c22:	4013      	ands	r3, r2
 8002c24:	2201      	movs	r2, #1
 8002c26:	409a      	lsls	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002c2c:	46c0      	nop			@ (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b004      	add	sp, #16
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	10008200 	.word	0x10008200
 8002c38:	40020880 	.word	0x40020880

08002c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	22ff      	movs	r2, #255	@ 0xff
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4a0a      	ldr	r2, [pc, #40]	@ (8002c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c52:	4694      	mov	ip, r2
 8002c54:	4463      	add	r3, ip
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	001a      	movs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a07      	ldr	r2, [pc, #28]	@ (8002c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	1000823f 	.word	0x1000823f
 8002c80:	40020940 	.word	0x40020940

08002c84 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c92:	e153      	b.n	8002f3c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4091      	lsls	r1, r2
 8002c9e:	000a      	movs	r2, r1
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d100      	bne.n	8002cac <HAL_GPIO_Init+0x28>
 8002caa:	e144      	b.n	8002f36 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x38>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b12      	cmp	r3, #18
 8002cba:	d125      	bne.n	8002d08 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	08da      	lsrs	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3208      	adds	r2, #8
 8002cc4:	0092      	lsls	r2, r2, #2
 8002cc6:	58d3      	ldr	r3, [r2, r3]
 8002cc8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2207      	movs	r2, #7
 8002cce:	4013      	ands	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	0013      	movs	r3, r2
 8002cd8:	43da      	mvns	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	220f      	movs	r2, #15
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2107      	movs	r1, #7
 8002cec:	400b      	ands	r3, r1
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	0013      	movs	r3, r2
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	08da      	lsrs	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3208      	adds	r2, #8
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	6979      	ldr	r1, [r7, #20]
 8002d06:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	409a      	lsls	r2, r3
 8002d16:	0013      	movs	r3, r2
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2203      	movs	r2, #3
 8002d26:	401a      	ands	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	0013      	movs	r3, r2
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d00b      	beq.n	8002d5c <HAL_GPIO_Init+0xd8>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d007      	beq.n	8002d5c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d50:	2b11      	cmp	r3, #17
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b12      	cmp	r3, #18
 8002d5a:	d130      	bne.n	8002dbe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	0013      	movs	r3, r2
 8002d6c:	43da      	mvns	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	4013      	ands	r3, r2
 8002d72:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	0013      	movs	r3, r2
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d92:	2201      	movs	r2, #1
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	409a      	lsls	r2, r3
 8002d98:	0013      	movs	r3, r2
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	2201      	movs	r2, #1
 8002daa:	401a      	ands	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	409a      	lsls	r2, r3
 8002db0:	0013      	movs	r3, r2
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d017      	beq.n	8002df6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	0013      	movs	r3, r2
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	409a      	lsls	r2, r3
 8002de8:	0013      	movs	r3, r2
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	2380      	movs	r3, #128	@ 0x80
 8002dfc:	055b      	lsls	r3, r3, #21
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d100      	bne.n	8002e04 <HAL_GPIO_Init+0x180>
 8002e02:	e098      	b.n	8002f36 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002e04:	4a53      	ldr	r2, [pc, #332]	@ (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	3318      	adds	r3, #24
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	589b      	ldr	r3, [r3, r2]
 8002e10:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2203      	movs	r2, #3
 8002e16:	4013      	ands	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	0013      	movs	r3, r2
 8002e20:	43da      	mvns	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	4013      	ands	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	23a0      	movs	r3, #160	@ 0xa0
 8002e2c:	05db      	lsls	r3, r3, #23
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d019      	beq.n	8002e66 <HAL_GPIO_Init+0x1e2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a48      	ldr	r2, [pc, #288]	@ (8002f58 <HAL_GPIO_Init+0x2d4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d013      	beq.n	8002e62 <HAL_GPIO_Init+0x1de>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a47      	ldr	r2, [pc, #284]	@ (8002f5c <HAL_GPIO_Init+0x2d8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00d      	beq.n	8002e5e <HAL_GPIO_Init+0x1da>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a46      	ldr	r2, [pc, #280]	@ (8002f60 <HAL_GPIO_Init+0x2dc>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d007      	beq.n	8002e5a <HAL_GPIO_Init+0x1d6>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a45      	ldr	r2, [pc, #276]	@ (8002f64 <HAL_GPIO_Init+0x2e0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d101      	bne.n	8002e56 <HAL_GPIO_Init+0x1d2>
 8002e52:	2305      	movs	r3, #5
 8002e54:	e008      	b.n	8002e68 <HAL_GPIO_Init+0x1e4>
 8002e56:	2306      	movs	r3, #6
 8002e58:	e006      	b.n	8002e68 <HAL_GPIO_Init+0x1e4>
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e004      	b.n	8002e68 <HAL_GPIO_Init+0x1e4>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e002      	b.n	8002e68 <HAL_GPIO_Init+0x1e4>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_GPIO_Init+0x1e4>
 8002e66:	2300      	movs	r3, #0
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	2103      	movs	r1, #3
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	00d2      	lsls	r2, r2, #3
 8002e70:	4093      	lsls	r3, r2
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002e78:	4936      	ldr	r1, [pc, #216]	@ (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	089b      	lsrs	r3, r3, #2
 8002e7e:	3318      	adds	r3, #24
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002e86:	4a33      	ldr	r2, [pc, #204]	@ (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002e88:	2380      	movs	r3, #128	@ 0x80
 8002e8a:	58d3      	ldr	r3, [r2, r3]
 8002e8c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	43da      	mvns	r2, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	4013      	ands	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	2380      	movs	r3, #128	@ 0x80
 8002e9e:	025b      	lsls	r3, r3, #9
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002eac:	4929      	ldr	r1, [pc, #164]	@ (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002eae:	2280      	movs	r2, #128	@ 0x80
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002eb4:	4a27      	ldr	r2, [pc, #156]	@ (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002eb6:	2384      	movs	r3, #132	@ 0x84
 8002eb8:	58d3      	ldr	r3, [r2, r3]
 8002eba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	43da      	mvns	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	2380      	movs	r3, #128	@ 0x80
 8002ecc:	029b      	lsls	r3, r3, #10
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002eda:	491e      	ldr	r1, [pc, #120]	@ (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002edc:	2284      	movs	r2, #132	@ 0x84
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	43da      	mvns	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	2380      	movs	r3, #128	@ 0x80
 8002ef8:	035b      	lsls	r3, r3, #13
 8002efa:	4013      	ands	r3, r2
 8002efc:	d003      	beq.n	8002f06 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002f06:	4b13      	ldr	r3, [pc, #76]	@ (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002f0c:	4b11      	ldr	r3, [pc, #68]	@ (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	43da      	mvns	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	2380      	movs	r3, #128	@ 0x80
 8002f22:	039b      	lsls	r3, r3, #14
 8002f24:	4013      	ands	r3, r2
 8002f26:	d003      	beq.n	8002f30 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002f30:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	40da      	lsrs	r2, r3
 8002f44:	1e13      	subs	r3, r2, #0
 8002f46:	d000      	beq.n	8002f4a <HAL_GPIO_Init+0x2c6>
 8002f48:	e6a4      	b.n	8002c94 <HAL_GPIO_Init+0x10>
  }
}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	46c0      	nop			@ (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b006      	add	sp, #24
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40021800 	.word	0x40021800
 8002f58:	50000400 	.word	0x50000400
 8002f5c:	50000800 	.word	0x50000800
 8002f60:	50000c00 	.word	0x50000c00
 8002f64:	50001400 	.word	0x50001400

08002f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	0008      	movs	r0, r1
 8002f72:	0011      	movs	r1, r2
 8002f74:	1cbb      	adds	r3, r7, #2
 8002f76:	1c02      	adds	r2, r0, #0
 8002f78:	801a      	strh	r2, [r3, #0]
 8002f7a:	1c7b      	adds	r3, r7, #1
 8002f7c:	1c0a      	adds	r2, r1, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f80:	1c7b      	adds	r3, r7, #1
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d004      	beq.n	8002f92 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f88:	1cbb      	adds	r3, r7, #2
 8002f8a:	881a      	ldrh	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f90:	e003      	b.n	8002f9a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f92:	1cbb      	adds	r3, r7, #2
 8002f94:	881a      	ldrh	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b002      	add	sp, #8
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e08f      	b.n	80030d6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2241      	movs	r2, #65	@ 0x41
 8002fba:	5c9b      	ldrb	r3, [r3, r2]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d107      	bne.n	8002fd2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2240      	movs	r2, #64	@ 0x40
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7fe fa61 	bl	8001494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2241      	movs	r2, #65	@ 0x41
 8002fd6:	2124      	movs	r1, #36	@ 0x24
 8002fd8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	438a      	bics	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	493b      	ldr	r1, [pc, #236]	@ (80030e0 <HAL_I2C_Init+0x13c>)
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4938      	ldr	r1, [pc, #224]	@ (80030e4 <HAL_I2C_Init+0x140>)
 8003004:	400a      	ands	r2, r1
 8003006:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d108      	bne.n	8003022 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2180      	movs	r1, #128	@ 0x80
 800301a:	0209      	lsls	r1, r1, #8
 800301c:	430a      	orrs	r2, r1
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	e007      	b.n	8003032 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2184      	movs	r1, #132	@ 0x84
 800302c:	0209      	lsls	r1, r1, #8
 800302e:	430a      	orrs	r2, r1
 8003030:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d109      	bne.n	800304e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2180      	movs	r1, #128	@ 0x80
 8003046:	0109      	lsls	r1, r1, #4
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	e007      	b.n	800305e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4923      	ldr	r1, [pc, #140]	@ (80030e8 <HAL_I2C_Init+0x144>)
 800305a:	400a      	ands	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4920      	ldr	r1, [pc, #128]	@ (80030ec <HAL_I2C_Init+0x148>)
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	491a      	ldr	r1, [pc, #104]	@ (80030e4 <HAL_I2C_Init+0x140>)
 800307a:	400a      	ands	r2, r1
 800307c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	431a      	orrs	r2, r3
 8003088:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69d9      	ldr	r1, [r3, #28]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1a      	ldr	r2, [r3, #32]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2101      	movs	r1, #1
 80030b4:	430a      	orrs	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2241      	movs	r2, #65	@ 0x41
 80030c2:	2120      	movs	r1, #32
 80030c4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2242      	movs	r2, #66	@ 0x42
 80030d0:	2100      	movs	r1, #0
 80030d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	f0ffffff 	.word	0xf0ffffff
 80030e4:	ffff7fff 	.word	0xffff7fff
 80030e8:	fffff7ff 	.word	0xfffff7ff
 80030ec:	02008000 	.word	0x02008000

080030f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2241      	movs	r2, #65	@ 0x41
 80030fe:	5c9b      	ldrb	r3, [r3, r2]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b20      	cmp	r3, #32
 8003104:	d138      	bne.n	8003178 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2240      	movs	r2, #64	@ 0x40
 800310a:	5c9b      	ldrb	r3, [r3, r2]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003110:	2302      	movs	r3, #2
 8003112:	e032      	b.n	800317a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2240      	movs	r2, #64	@ 0x40
 8003118:	2101      	movs	r1, #1
 800311a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2241      	movs	r2, #65	@ 0x41
 8003120:	2124      	movs	r1, #36	@ 0x24
 8003122:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2101      	movs	r1, #1
 8003130:	438a      	bics	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4911      	ldr	r1, [pc, #68]	@ (8003184 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003140:	400a      	ands	r2, r1
 8003142:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2101      	movs	r1, #1
 8003160:	430a      	orrs	r2, r1
 8003162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2241      	movs	r2, #65	@ 0x41
 8003168:	2120      	movs	r1, #32
 800316a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2240      	movs	r2, #64	@ 0x40
 8003170:	2100      	movs	r1, #0
 8003172:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	e000      	b.n	800317a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003178:	2302      	movs	r3, #2
  }
}
 800317a:	0018      	movs	r0, r3
 800317c:	46bd      	mov	sp, r7
 800317e:	b002      	add	sp, #8
 8003180:	bd80      	pop	{r7, pc}
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	ffffefff 	.word	0xffffefff

08003188 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2241      	movs	r2, #65	@ 0x41
 8003196:	5c9b      	ldrb	r3, [r3, r2]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b20      	cmp	r3, #32
 800319c:	d139      	bne.n	8003212 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2240      	movs	r2, #64	@ 0x40
 80031a2:	5c9b      	ldrb	r3, [r3, r2]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e033      	b.n	8003214 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2240      	movs	r2, #64	@ 0x40
 80031b0:	2101      	movs	r1, #1
 80031b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2241      	movs	r2, #65	@ 0x41
 80031b8:	2124      	movs	r1, #36	@ 0x24
 80031ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2101      	movs	r1, #1
 80031c8:	438a      	bics	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4a11      	ldr	r2, [pc, #68]	@ (800321c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2101      	movs	r1, #1
 80031fa:	430a      	orrs	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2241      	movs	r2, #65	@ 0x41
 8003202:	2120      	movs	r1, #32
 8003204:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2240      	movs	r2, #64	@ 0x40
 800320a:	2100      	movs	r1, #0
 800320c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	e000      	b.n	8003214 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003212:	2302      	movs	r3, #2
  }
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b004      	add	sp, #16
 800321a:	bd80      	pop	{r7, pc}
 800321c:	fffff0ff 	.word	0xfffff0ff

08003220 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e20f      	b.n	8003652 <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2201      	movs	r2, #1
 8003238:	4013      	ands	r3, r2
 800323a:	d100      	bne.n	800323e <HAL_RCC_OscConfig+0x1e>
 800323c:	e069      	b.n	8003312 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800323e:	4bc8      	ldr	r3, [pc, #800]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2238      	movs	r2, #56	@ 0x38
 8003244:	4013      	ands	r3, r2
 8003246:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b08      	cmp	r3, #8
 800324c:	d105      	bne.n	800325a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d15d      	bne.n	8003312 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e1fb      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	2380      	movs	r3, #128	@ 0x80
 8003260:	025b      	lsls	r3, r3, #9
 8003262:	429a      	cmp	r2, r3
 8003264:	d107      	bne.n	8003276 <HAL_RCC_OscConfig+0x56>
 8003266:	4bbe      	ldr	r3, [pc, #760]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4bbd      	ldr	r3, [pc, #756]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 800326c:	2180      	movs	r1, #128	@ 0x80
 800326e:	0249      	lsls	r1, r1, #9
 8003270:	430a      	orrs	r2, r1
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e020      	b.n	80032b8 <HAL_RCC_OscConfig+0x98>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	23a0      	movs	r3, #160	@ 0xa0
 800327c:	02db      	lsls	r3, r3, #11
 800327e:	429a      	cmp	r2, r3
 8003280:	d10e      	bne.n	80032a0 <HAL_RCC_OscConfig+0x80>
 8003282:	4bb7      	ldr	r3, [pc, #732]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4bb6      	ldr	r3, [pc, #728]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003288:	2180      	movs	r1, #128	@ 0x80
 800328a:	02c9      	lsls	r1, r1, #11
 800328c:	430a      	orrs	r2, r1
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	4bb3      	ldr	r3, [pc, #716]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4bb2      	ldr	r3, [pc, #712]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003296:	2180      	movs	r1, #128	@ 0x80
 8003298:	0249      	lsls	r1, r1, #9
 800329a:	430a      	orrs	r2, r1
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e00b      	b.n	80032b8 <HAL_RCC_OscConfig+0x98>
 80032a0:	4baf      	ldr	r3, [pc, #700]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	4bae      	ldr	r3, [pc, #696]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80032a6:	49af      	ldr	r1, [pc, #700]	@ (8003564 <HAL_RCC_OscConfig+0x344>)
 80032a8:	400a      	ands	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	4bac      	ldr	r3, [pc, #688]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4bab      	ldr	r3, [pc, #684]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80032b2:	49ad      	ldr	r1, [pc, #692]	@ (8003568 <HAL_RCC_OscConfig+0x348>)
 80032b4:	400a      	ands	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d014      	beq.n	80032ea <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fc4e 	bl	8001b60 <HAL_GetTick>
 80032c4:	0003      	movs	r3, r0
 80032c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80032ca:	f7fe fc49 	bl	8001b60 <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	@ 0x64
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e1ba      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032dc:	4ba0      	ldr	r3, [pc, #640]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	@ 0x80
 80032e2:	029b      	lsls	r3, r3, #10
 80032e4:	4013      	ands	r3, r2
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0xaa>
 80032e8:	e013      	b.n	8003312 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ea:	f7fe fc39 	bl	8001b60 <HAL_GetTick>
 80032ee:	0003      	movs	r3, r0
 80032f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80032f4:	f7fe fc34 	bl	8001b60 <HAL_GetTick>
 80032f8:	0002      	movs	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	@ 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1a5      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003306:	4b96      	ldr	r3, [pc, #600]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	2380      	movs	r3, #128	@ 0x80
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	4013      	ands	r3, r2
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2202      	movs	r2, #2
 8003318:	4013      	ands	r3, r2
 800331a:	d100      	bne.n	800331e <HAL_RCC_OscConfig+0xfe>
 800331c:	e086      	b.n	800342c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800331e:	4b90      	ldr	r3, [pc, #576]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2238      	movs	r2, #56	@ 0x38
 8003324:	4013      	ands	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d12f      	bne.n	800338e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e18b      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333a:	4b89      	ldr	r3, [pc, #548]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4a8b      	ldr	r2, [pc, #556]	@ (800356c <HAL_RCC_OscConfig+0x34c>)
 8003340:	4013      	ands	r3, r2
 8003342:	0019      	movs	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	021a      	lsls	r2, r3, #8
 800334a:	4b85      	ldr	r3, [pc, #532]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d112      	bne.n	800337c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003356:	4b82      	ldr	r3, [pc, #520]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a85      	ldr	r2, [pc, #532]	@ (8003570 <HAL_RCC_OscConfig+0x350>)
 800335c:	4013      	ands	r3, r2
 800335e:	0019      	movs	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	4b7e      	ldr	r3, [pc, #504]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003366:	430a      	orrs	r2, r1
 8003368:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800336a:	4b7d      	ldr	r3, [pc, #500]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	0adb      	lsrs	r3, r3, #11
 8003370:	2207      	movs	r2, #7
 8003372:	4013      	ands	r3, r2
 8003374:	4a7f      	ldr	r2, [pc, #508]	@ (8003574 <HAL_RCC_OscConfig+0x354>)
 8003376:	40da      	lsrs	r2, r3
 8003378:	4b7f      	ldr	r3, [pc, #508]	@ (8003578 <HAL_RCC_OscConfig+0x358>)
 800337a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800337c:	4b7f      	ldr	r3, [pc, #508]	@ (800357c <HAL_RCC_OscConfig+0x35c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	0018      	movs	r0, r3
 8003382:	f7fe fb91 	bl	8001aa8 <HAL_InitTick>
 8003386:	1e03      	subs	r3, r0, #0
 8003388:	d050      	beq.n	800342c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e161      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d030      	beq.n	80033f8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003396:	4b72      	ldr	r3, [pc, #456]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a75      	ldr	r2, [pc, #468]	@ (8003570 <HAL_RCC_OscConfig+0x350>)
 800339c:	4013      	ands	r3, r2
 800339e:	0019      	movs	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	4b6e      	ldr	r3, [pc, #440]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80033a6:	430a      	orrs	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80033aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b6c      	ldr	r3, [pc, #432]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80033b0:	2180      	movs	r1, #128	@ 0x80
 80033b2:	0049      	lsls	r1, r1, #1
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe fbd2 	bl	8001b60 <HAL_GetTick>
 80033bc:	0003      	movs	r3, r0
 80033be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80033c2:	f7fe fbcd 	bl	8001b60 <HAL_GetTick>
 80033c6:	0002      	movs	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e13e      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033d4:	4b62      	ldr	r3, [pc, #392]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	2380      	movs	r3, #128	@ 0x80
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4013      	ands	r3, r2
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e0:	4b5f      	ldr	r3, [pc, #380]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4a61      	ldr	r2, [pc, #388]	@ (800356c <HAL_RCC_OscConfig+0x34c>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	0019      	movs	r1, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	021a      	lsls	r2, r3, #8
 80033f0:	4b5b      	ldr	r3, [pc, #364]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	e019      	b.n	800342c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80033f8:	4b59      	ldr	r3, [pc, #356]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b58      	ldr	r3, [pc, #352]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80033fe:	4960      	ldr	r1, [pc, #384]	@ (8003580 <HAL_RCC_OscConfig+0x360>)
 8003400:	400a      	ands	r2, r1
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe fbac 	bl	8001b60 <HAL_GetTick>
 8003408:	0003      	movs	r3, r0
 800340a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800340e:	f7fe fba7 	bl	8001b60 <HAL_GetTick>
 8003412:	0002      	movs	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e118      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003420:	4b4f      	ldr	r3, [pc, #316]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	2380      	movs	r3, #128	@ 0x80
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4013      	ands	r3, r2
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2208      	movs	r2, #8
 8003432:	4013      	ands	r3, r2
 8003434:	d042      	beq.n	80034bc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003436:	4b4a      	ldr	r3, [pc, #296]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2238      	movs	r2, #56	@ 0x38
 800343c:	4013      	ands	r3, r2
 800343e:	2b18      	cmp	r3, #24
 8003440:	d105      	bne.n	800344e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d138      	bne.n	80034bc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e101      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d019      	beq.n	800348a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003456:	4b42      	ldr	r3, [pc, #264]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003458:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800345a:	4b41      	ldr	r3, [pc, #260]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 800345c:	2101      	movs	r1, #1
 800345e:	430a      	orrs	r2, r1
 8003460:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fe fb7d 	bl	8001b60 <HAL_GetTick>
 8003466:	0003      	movs	r3, r0
 8003468:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800346c:	f7fe fb78 	bl	8001b60 <HAL_GetTick>
 8003470:	0002      	movs	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e0e9      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800347e:	4b38      	ldr	r3, [pc, #224]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003482:	2202      	movs	r2, #2
 8003484:	4013      	ands	r3, r2
 8003486:	d0f1      	beq.n	800346c <HAL_RCC_OscConfig+0x24c>
 8003488:	e018      	b.n	80034bc <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800348a:	4b35      	ldr	r3, [pc, #212]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 800348c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800348e:	4b34      	ldr	r3, [pc, #208]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003490:	2101      	movs	r1, #1
 8003492:	438a      	bics	r2, r1
 8003494:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003496:	f7fe fb63 	bl	8001b60 <HAL_GetTick>
 800349a:	0003      	movs	r3, r0
 800349c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80034a0:	f7fe fb5e 	bl	8001b60 <HAL_GetTick>
 80034a4:	0002      	movs	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0cf      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80034b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80034b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b6:	2202      	movs	r2, #2
 80034b8:	4013      	ands	r3, r2
 80034ba:	d1f1      	bne.n	80034a0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2204      	movs	r2, #4
 80034c2:	4013      	ands	r3, r2
 80034c4:	d100      	bne.n	80034c8 <HAL_RCC_OscConfig+0x2a8>
 80034c6:	e084      	b.n	80035d2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c8:	230f      	movs	r3, #15
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	2200      	movs	r2, #0
 80034ce:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80034d0:	4b23      	ldr	r3, [pc, #140]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2238      	movs	r2, #56	@ 0x38
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d106      	bne.n	80034ea <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d000      	beq.n	80034e6 <HAL_RCC_OscConfig+0x2c6>
 80034e4:	e075      	b.n	80035d2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0b3      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d106      	bne.n	8003500 <HAL_RCC_OscConfig+0x2e0>
 80034f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80034f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 80034f8:	2101      	movs	r1, #1
 80034fa:	430a      	orrs	r2, r1
 80034fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034fe:	e01c      	b.n	800353a <HAL_RCC_OscConfig+0x31a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d10c      	bne.n	8003522 <HAL_RCC_OscConfig+0x302>
 8003508:	4b15      	ldr	r3, [pc, #84]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 800350a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800350c:	4b14      	ldr	r3, [pc, #80]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 800350e:	2104      	movs	r1, #4
 8003510:	430a      	orrs	r2, r1
 8003512:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003514:	4b12      	ldr	r3, [pc, #72]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003516:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003518:	4b11      	ldr	r3, [pc, #68]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 800351a:	2101      	movs	r1, #1
 800351c:	430a      	orrs	r2, r1
 800351e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003520:	e00b      	b.n	800353a <HAL_RCC_OscConfig+0x31a>
 8003522:	4b0f      	ldr	r3, [pc, #60]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003524:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003526:	4b0e      	ldr	r3, [pc, #56]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003528:	2101      	movs	r1, #1
 800352a:	438a      	bics	r2, r1
 800352c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800352e:	4b0c      	ldr	r3, [pc, #48]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003530:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003532:	4b0b      	ldr	r3, [pc, #44]	@ (8003560 <HAL_RCC_OscConfig+0x340>)
 8003534:	2104      	movs	r1, #4
 8003536:	438a      	bics	r2, r1
 8003538:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d028      	beq.n	8003594 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fe fb0d 	bl	8001b60 <HAL_GetTick>
 8003546:	0003      	movs	r3, r0
 8003548:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800354a:	e01d      	b.n	8003588 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354c:	f7fe fb08 	bl	8001b60 <HAL_GetTick>
 8003550:	0002      	movs	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	4a0b      	ldr	r2, [pc, #44]	@ (8003584 <HAL_RCC_OscConfig+0x364>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d915      	bls.n	8003588 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e078      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
 8003560:	40021000 	.word	0x40021000
 8003564:	fffeffff 	.word	0xfffeffff
 8003568:	fffbffff 	.word	0xfffbffff
 800356c:	ffff80ff 	.word	0xffff80ff
 8003570:	ffffc7ff 	.word	0xffffc7ff
 8003574:	02dc6c00 	.word	0x02dc6c00
 8003578:	20000078 	.word	0x20000078
 800357c:	2000007c 	.word	0x2000007c
 8003580:	fffffeff 	.word	0xfffffeff
 8003584:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003588:	4b34      	ldr	r3, [pc, #208]	@ (800365c <HAL_RCC_OscConfig+0x43c>)
 800358a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358c:	2202      	movs	r2, #2
 800358e:	4013      	ands	r3, r2
 8003590:	d0dc      	beq.n	800354c <HAL_RCC_OscConfig+0x32c>
 8003592:	e013      	b.n	80035bc <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fe fae4 	bl	8001b60 <HAL_GetTick>
 8003598:	0003      	movs	r3, r0
 800359a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800359c:	e009      	b.n	80035b2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fe fadf 	bl	8001b60 <HAL_GetTick>
 80035a2:	0002      	movs	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003660 <HAL_RCC_OscConfig+0x440>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e04f      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80035b2:	4b2a      	ldr	r3, [pc, #168]	@ (800365c <HAL_RCC_OscConfig+0x43c>)
 80035b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b6:	2202      	movs	r2, #2
 80035b8:	4013      	ands	r3, r2
 80035ba:	d1f0      	bne.n	800359e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80035bc:	230f      	movs	r3, #15
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d105      	bne.n	80035d2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80035c6:	4b25      	ldr	r3, [pc, #148]	@ (800365c <HAL_RCC_OscConfig+0x43c>)
 80035c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035ca:	4b24      	ldr	r3, [pc, #144]	@ (800365c <HAL_RCC_OscConfig+0x43c>)
 80035cc:	4925      	ldr	r1, [pc, #148]	@ (8003664 <HAL_RCC_OscConfig+0x444>)
 80035ce:	400a      	ands	r2, r1
 80035d0:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2210      	movs	r2, #16
 80035d8:	4013      	ands	r3, r2
 80035da:	d039      	beq.n	8003650 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01b      	beq.n	800361c <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035e4:	4b1d      	ldr	r3, [pc, #116]	@ (800365c <HAL_RCC_OscConfig+0x43c>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b1c      	ldr	r3, [pc, #112]	@ (800365c <HAL_RCC_OscConfig+0x43c>)
 80035ea:	2180      	movs	r1, #128	@ 0x80
 80035ec:	03c9      	lsls	r1, r1, #15
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f2:	f7fe fab5 	bl	8001b60 <HAL_GetTick>
 80035f6:	0003      	movs	r3, r0
 80035f8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035fc:	f7fe fab0 	bl	8001b60 <HAL_GetTick>
 8003600:	0002      	movs	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e021      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800360e:	4b13      	ldr	r3, [pc, #76]	@ (800365c <HAL_RCC_OscConfig+0x43c>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	4013      	ands	r3, r2
 8003618:	d0f0      	beq.n	80035fc <HAL_RCC_OscConfig+0x3dc>
 800361a:	e019      	b.n	8003650 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800361c:	4b0f      	ldr	r3, [pc, #60]	@ (800365c <HAL_RCC_OscConfig+0x43c>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b0e      	ldr	r3, [pc, #56]	@ (800365c <HAL_RCC_OscConfig+0x43c>)
 8003622:	4911      	ldr	r1, [pc, #68]	@ (8003668 <HAL_RCC_OscConfig+0x448>)
 8003624:	400a      	ands	r2, r1
 8003626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe fa9a 	bl	8001b60 <HAL_GetTick>
 800362c:	0003      	movs	r3, r0
 800362e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003632:	f7fe fa95 	bl	8001b60 <HAL_GetTick>
 8003636:	0002      	movs	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e006      	b.n	8003652 <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8003644:	4b05      	ldr	r3, [pc, #20]	@ (800365c <HAL_RCC_OscConfig+0x43c>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	2380      	movs	r3, #128	@ 0x80
 800364a:	041b      	lsls	r3, r3, #16
 800364c:	4013      	ands	r3, r2
 800364e:	d1f0      	bne.n	8003632 <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	0018      	movs	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	b006      	add	sp, #24
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	40021000 	.word	0x40021000
 8003660:	00001388 	.word	0x00001388
 8003664:	efffffff 	.word	0xefffffff
 8003668:	ffbfffff 	.word	0xffbfffff

0800366c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0f6      	b.n	800386e <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003680:	4b7d      	ldr	r3, [pc, #500]	@ (8003878 <HAL_RCC_ClockConfig+0x20c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2207      	movs	r2, #7
 8003686:	4013      	ands	r3, r2
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d91e      	bls.n	80036cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368e:	4b7a      	ldr	r3, [pc, #488]	@ (8003878 <HAL_RCC_ClockConfig+0x20c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2207      	movs	r2, #7
 8003694:	4393      	bics	r3, r2
 8003696:	0019      	movs	r1, r3
 8003698:	4b77      	ldr	r3, [pc, #476]	@ (8003878 <HAL_RCC_ClockConfig+0x20c>)
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036a0:	f7fe fa5e 	bl	8001b60 <HAL_GetTick>
 80036a4:	0003      	movs	r3, r0
 80036a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036a8:	e009      	b.n	80036be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80036aa:	f7fe fa59 	bl	8001b60 <HAL_GetTick>
 80036ae:	0002      	movs	r2, r0
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	4a71      	ldr	r2, [pc, #452]	@ (800387c <HAL_RCC_ClockConfig+0x210>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e0d7      	b.n	800386e <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036be:	4b6e      	ldr	r3, [pc, #440]	@ (8003878 <HAL_RCC_ClockConfig+0x20c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2207      	movs	r2, #7
 80036c4:	4013      	ands	r3, r2
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d1ee      	bne.n	80036aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2202      	movs	r2, #2
 80036d2:	4013      	ands	r3, r2
 80036d4:	d017      	beq.n	8003706 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2204      	movs	r2, #4
 80036dc:	4013      	ands	r3, r2
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80036e0:	4b67      	ldr	r3, [pc, #412]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4a67      	ldr	r2, [pc, #412]	@ (8003884 <HAL_RCC_ClockConfig+0x218>)
 80036e6:	401a      	ands	r2, r3
 80036e8:	4b65      	ldr	r3, [pc, #404]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 80036ea:	21b0      	movs	r1, #176	@ 0xb0
 80036ec:	0109      	lsls	r1, r1, #4
 80036ee:	430a      	orrs	r2, r1
 80036f0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f2:	4b63      	ldr	r3, [pc, #396]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	4a64      	ldr	r2, [pc, #400]	@ (8003888 <HAL_RCC_ClockConfig+0x21c>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	0019      	movs	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	4b5f      	ldr	r3, [pc, #380]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 8003702:	430a      	orrs	r2, r1
 8003704:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	4013      	ands	r3, r2
 800370e:	d100      	bne.n	8003712 <HAL_RCC_ClockConfig+0xa6>
 8003710:	e061      	b.n	80037d6 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8003712:	4b5b      	ldr	r3, [pc, #364]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	221c      	movs	r2, #28
 8003718:	4393      	bics	r3, r2
 800371a:	0019      	movs	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	4b57      	ldr	r3, [pc, #348]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 8003722:	430a      	orrs	r2, r1
 8003724:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800372e:	4b54      	ldr	r3, [pc, #336]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	2380      	movs	r3, #128	@ 0x80
 8003734:	029b      	lsls	r3, r3, #10
 8003736:	4013      	ands	r3, r2
 8003738:	d12b      	bne.n	8003792 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e097      	b.n	800386e <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003746:	4b4e      	ldr	r3, [pc, #312]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	2380      	movs	r3, #128	@ 0x80
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4013      	ands	r3, r2
 8003750:	d11f      	bne.n	8003792 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e08b      	b.n	800386e <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800375e:	4b48      	ldr	r3, [pc, #288]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	2380      	movs	r3, #128	@ 0x80
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	4013      	ands	r3, r2
 8003768:	d113      	bne.n	8003792 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e07f      	b.n	800386e <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d106      	bne.n	8003784 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003776:	4b42      	ldr	r3, [pc, #264]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 8003778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377a:	2202      	movs	r2, #2
 800377c:	4013      	ands	r3, r2
 800377e:	d108      	bne.n	8003792 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e074      	b.n	800386e <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003784:	4b3e      	ldr	r3, [pc, #248]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 8003786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003788:	2202      	movs	r2, #2
 800378a:	4013      	ands	r3, r2
 800378c:	d101      	bne.n	8003792 <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e06d      	b.n	800386e <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003792:	4b3b      	ldr	r3, [pc, #236]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2207      	movs	r2, #7
 8003798:	4393      	bics	r3, r2
 800379a:	0019      	movs	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	4b37      	ldr	r3, [pc, #220]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a6:	f7fe f9db 	bl	8001b60 <HAL_GetTick>
 80037aa:	0003      	movs	r3, r0
 80037ac:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	e009      	b.n	80037c4 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80037b0:	f7fe f9d6 	bl	8001b60 <HAL_GetTick>
 80037b4:	0002      	movs	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	4a30      	ldr	r2, [pc, #192]	@ (800387c <HAL_RCC_ClockConfig+0x210>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e054      	b.n	800386e <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2238      	movs	r2, #56	@ 0x38
 80037ca:	401a      	ands	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d1ec      	bne.n	80037b0 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037d6:	4b28      	ldr	r3, [pc, #160]	@ (8003878 <HAL_RCC_ClockConfig+0x20c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2207      	movs	r2, #7
 80037dc:	4013      	ands	r3, r2
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d21e      	bcs.n	8003822 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e4:	4b24      	ldr	r3, [pc, #144]	@ (8003878 <HAL_RCC_ClockConfig+0x20c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2207      	movs	r2, #7
 80037ea:	4393      	bics	r3, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	4b22      	ldr	r3, [pc, #136]	@ (8003878 <HAL_RCC_ClockConfig+0x20c>)
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037f6:	f7fe f9b3 	bl	8001b60 <HAL_GetTick>
 80037fa:	0003      	movs	r3, r0
 80037fc:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037fe:	e009      	b.n	8003814 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003800:	f7fe f9ae 	bl	8001b60 <HAL_GetTick>
 8003804:	0002      	movs	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	4a1c      	ldr	r2, [pc, #112]	@ (800387c <HAL_RCC_ClockConfig+0x210>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e02c      	b.n	800386e <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003814:	4b18      	ldr	r3, [pc, #96]	@ (8003878 <HAL_RCC_ClockConfig+0x20c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2207      	movs	r2, #7
 800381a:	4013      	ands	r3, r2
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d1ee      	bne.n	8003800 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2204      	movs	r2, #4
 8003828:	4013      	ands	r3, r2
 800382a:	d009      	beq.n	8003840 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800382c:	4b14      	ldr	r3, [pc, #80]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a16      	ldr	r2, [pc, #88]	@ (800388c <HAL_RCC_ClockConfig+0x220>)
 8003832:	4013      	ands	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691a      	ldr	r2, [r3, #16]
 800383a:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003840:	f000 f82c 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003844:	0001      	movs	r1, r0
 8003846:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <HAL_RCC_ClockConfig+0x214>)
 8003848:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800384a:	0a1b      	lsrs	r3, r3, #8
 800384c:	220f      	movs	r2, #15
 800384e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003850:	4b0f      	ldr	r3, [pc, #60]	@ (8003890 <HAL_RCC_ClockConfig+0x224>)
 8003852:	0092      	lsls	r2, r2, #2
 8003854:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003856:	221f      	movs	r2, #31
 8003858:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800385a:	000a      	movs	r2, r1
 800385c:	40da      	lsrs	r2, r3
 800385e:	4b0d      	ldr	r3, [pc, #52]	@ (8003894 <HAL_RCC_ClockConfig+0x228>)
 8003860:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003862:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <HAL_RCC_ClockConfig+0x22c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	0018      	movs	r0, r3
 8003868:	f7fe f91e 	bl	8001aa8 <HAL_InitTick>
 800386c:	0003      	movs	r3, r0
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b004      	add	sp, #16
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	40022000 	.word	0x40022000
 800387c:	00001388 	.word	0x00001388
 8003880:	40021000 	.word	0x40021000
 8003884:	ffff84ff 	.word	0xffff84ff
 8003888:	fffff0ff 	.word	0xfffff0ff
 800388c:	ffff8fff 	.word	0xffff8fff
 8003890:	080069fc 	.word	0x080069fc
 8003894:	20000078 	.word	0x20000078
 8003898:	2000007c 	.word	0x2000007c

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 80038a2:	4b27      	ldr	r3, [pc, #156]	@ (8003940 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	089b      	lsrs	r3, r3, #2
 80038a8:	2207      	movs	r2, #7
 80038aa:	4013      	ands	r3, r2
 80038ac:	3301      	adds	r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038b0:	4b23      	ldr	r3, [pc, #140]	@ (8003940 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2238      	movs	r2, #56	@ 0x38
 80038b6:	4013      	ands	r3, r2
 80038b8:	d10f      	bne.n	80038da <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80038ba:	4b21      	ldr	r3, [pc, #132]	@ (8003940 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	0adb      	lsrs	r3, r3, #11
 80038c0:	2207      	movs	r2, #7
 80038c2:	4013      	ands	r3, r2
 80038c4:	2201      	movs	r2, #1
 80038c6:	409a      	lsls	r2, r3
 80038c8:	0013      	movs	r3, r2
 80038ca:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	481d      	ldr	r0, [pc, #116]	@ (8003944 <HAL_RCC_GetSysClockFreq+0xa8>)
 80038d0:	f7fc fc1a 	bl	8000108 <__udivsi3>
 80038d4:	0003      	movs	r3, r0
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	e027      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038da:	4b19      	ldr	r3, [pc, #100]	@ (8003940 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	2238      	movs	r2, #56	@ 0x38
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d102      	bne.n	80038ec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038e6:	4b18      	ldr	r3, [pc, #96]	@ (8003948 <HAL_RCC_GetSysClockFreq+0xac>)
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	e01e      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80038ec:	4b14      	ldr	r3, [pc, #80]	@ (8003940 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2238      	movs	r2, #56	@ 0x38
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d103      	bne.n	8003900 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80038f8:	2380      	movs	r3, #128	@ 0x80
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	e014      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003900:	4b0f      	ldr	r3, [pc, #60]	@ (8003940 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2238      	movs	r2, #56	@ 0x38
 8003906:	4013      	ands	r3, r2
 8003908:	2b18      	cmp	r3, #24
 800390a:	d103      	bne.n	8003914 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800390c:	23fa      	movs	r3, #250	@ 0xfa
 800390e:	01db      	lsls	r3, r3, #7
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e00a      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8003914:	4b0a      	ldr	r3, [pc, #40]	@ (8003940 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2238      	movs	r2, #56	@ 0x38
 800391a:	4013      	ands	r3, r2
 800391c:	2b10      	cmp	r3, #16
 800391e:	d102      	bne.n	8003926 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 8003920:	4b08      	ldr	r3, [pc, #32]	@ (8003944 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e001      	b.n	800392a <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f7fc fbeb 	bl	8000108 <__udivsi3>
 8003932:	0003      	movs	r3, r0
 8003934:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8003936:	68fb      	ldr	r3, [r7, #12]
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b004      	add	sp, #16
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	02dc6c00 	.word	0x02dc6c00
 8003948:	007a1200 	.word	0x007a1200

0800394c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003950:	f7ff ffa4 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003954:	0001      	movs	r1, r0
 8003956:	4b09      	ldr	r3, [pc, #36]	@ (800397c <HAL_RCC_GetHCLKFreq+0x30>)
 8003958:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	220f      	movs	r2, #15
 800395e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003960:	4b07      	ldr	r3, [pc, #28]	@ (8003980 <HAL_RCC_GetHCLKFreq+0x34>)
 8003962:	0092      	lsls	r2, r2, #2
 8003964:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003966:	221f      	movs	r2, #31
 8003968:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800396a:	000a      	movs	r2, r1
 800396c:	40da      	lsrs	r2, r3
 800396e:	4b05      	ldr	r3, [pc, #20]	@ (8003984 <HAL_RCC_GetHCLKFreq+0x38>)
 8003970:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8003972:	4b04      	ldr	r3, [pc, #16]	@ (8003984 <HAL_RCC_GetHCLKFreq+0x38>)
 8003974:	681b      	ldr	r3, [r3, #0]
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40021000 	.word	0x40021000
 8003980:	080069fc 	.word	0x080069fc
 8003984:	20000078 	.word	0x20000078

08003988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800398c:	f7ff ffde 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8003990:	0001      	movs	r1, r0
 8003992:	4b07      	ldr	r3, [pc, #28]	@ (80039b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0b1b      	lsrs	r3, r3, #12
 8003998:	2207      	movs	r2, #7
 800399a:	401a      	ands	r2, r3
 800399c:	4b05      	ldr	r3, [pc, #20]	@ (80039b4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800399e:	0092      	lsls	r2, r2, #2
 80039a0:	58d3      	ldr	r3, [r2, r3]
 80039a2:	221f      	movs	r2, #31
 80039a4:	4013      	ands	r3, r2
 80039a6:	40d9      	lsrs	r1, r3
 80039a8:	000b      	movs	r3, r1
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40021000 	.word	0x40021000
 80039b4:	08006a3c 	.word	0x08006a3c

080039b8 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80039c0:	2313      	movs	r3, #19
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	2200      	movs	r2, #0
 80039c6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039c8:	2312      	movs	r3, #18
 80039ca:	18fb      	adds	r3, r7, r3
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2240      	movs	r2, #64	@ 0x40
 80039d6:	4013      	ands	r3, r2
 80039d8:	d100      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x24>
 80039da:	e079      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039dc:	2011      	movs	r0, #17
 80039de:	183b      	adds	r3, r7, r0
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039e8:	2380      	movs	r3, #128	@ 0x80
 80039ea:	055b      	lsls	r3, r3, #21
 80039ec:	4013      	ands	r3, r2
 80039ee:	d110      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f0:	4b67      	ldr	r3, [pc, #412]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039f4:	4b66      	ldr	r3, [pc, #408]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039f6:	2180      	movs	r1, #128	@ 0x80
 80039f8:	0549      	lsls	r1, r1, #21
 80039fa:	430a      	orrs	r2, r1
 80039fc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80039fe:	4b64      	ldr	r3, [pc, #400]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a02:	2380      	movs	r3, #128	@ 0x80
 8003a04:	055b      	lsls	r3, r3, #21
 8003a06:	4013      	ands	r3, r2
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0c:	183b      	adds	r3, r7, r0
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003a12:	4b5f      	ldr	r3, [pc, #380]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a16:	23c0      	movs	r3, #192	@ 0xc0
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d019      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d014      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003a2e:	4b58      	ldr	r3, [pc, #352]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a32:	4a58      	ldr	r2, [pc, #352]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a38:	4b55      	ldr	r3, [pc, #340]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a3c:	4b54      	ldr	r3, [pc, #336]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a3e:	2180      	movs	r1, #128	@ 0x80
 8003a40:	0249      	lsls	r1, r1, #9
 8003a42:	430a      	orrs	r2, r1
 8003a44:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a46:	4b52      	ldr	r3, [pc, #328]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a4a:	4b51      	ldr	r3, [pc, #324]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a4c:	4952      	ldr	r1, [pc, #328]	@ (8003b98 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003a4e:	400a      	ands	r2, r1
 8003a50:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003a52:	4b4f      	ldr	r3, [pc, #316]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d016      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fe f87e 	bl	8001b60 <HAL_GetTick>
 8003a64:	0003      	movs	r3, r0
 8003a66:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003a68:	e00c      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7fe f879 	bl	8001b60 <HAL_GetTick>
 8003a6e:	0002      	movs	r2, r0
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	4a49      	ldr	r2, [pc, #292]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d904      	bls.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8003a7a:	2313      	movs	r3, #19
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	2203      	movs	r2, #3
 8003a80:	701a      	strb	r2, [r3, #0]
          break;
 8003a82:	e004      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003a84:	4b42      	ldr	r3, [pc, #264]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a88:	2202      	movs	r2, #2
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d0ed      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8003a8e:	2313      	movs	r3, #19
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a98:	4b3d      	ldr	r3, [pc, #244]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9c:	4a3d      	ldr	r2, [pc, #244]	@ (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	0019      	movs	r1, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003aac:	e005      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aae:	2312      	movs	r3, #18
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	2213      	movs	r2, #19
 8003ab4:	18ba      	adds	r2, r7, r2
 8003ab6:	7812      	ldrb	r2, [r2, #0]
 8003ab8:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aba:	2311      	movs	r3, #17
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac4:	4b32      	ldr	r3, [pc, #200]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ac6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ac8:	4b31      	ldr	r3, [pc, #196]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aca:	4935      	ldr	r1, [pc, #212]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003acc:	400a      	ands	r2, r1
 8003ace:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d009      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ada:	4b2d      	ldr	r3, [pc, #180]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ade:	2203      	movs	r2, #3
 8003ae0:	4393      	bics	r3, r2
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	4b29      	ldr	r3, [pc, #164]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003aea:	430a      	orrs	r2, r1
 8003aec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2202      	movs	r2, #2
 8003af4:	4013      	ands	r3, r2
 8003af6:	d009      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003af8:	4b25      	ldr	r3, [pc, #148]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afc:	4a29      	ldr	r2, [pc, #164]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	0019      	movs	r1, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	4b22      	ldr	r3, [pc, #136]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2220      	movs	r2, #32
 8003b12:	4013      	ands	r3, r2
 8003b14:	d008      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b16:	4b1e      	ldr	r3, [pc, #120]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	0899      	lsrs	r1, r3, #2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b24:	430a      	orrs	r2, r1
 8003b26:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b32:	4b17      	ldr	r3, [pc, #92]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b36:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b42:	430a      	orrs	r2, r1
 8003b44:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2204      	movs	r2, #4
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003b50:	4b0f      	ldr	r3, [pc, #60]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b54:	4a15      	ldr	r2, [pc, #84]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	0019      	movs	r1, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b60:	430a      	orrs	r2, r1
 8003b62:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2280      	movs	r2, #128	@ 0x80
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003b6e:	4b08      	ldr	r3, [pc, #32]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	22e0      	movs	r2, #224	@ 0xe0
 8003b74:	4393      	bics	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003b82:	2312      	movs	r3, #18
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	781b      	ldrb	r3, [r3, #0]
}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b006      	add	sp, #24
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40021000 	.word	0x40021000
 8003b94:	fffffcff 	.word	0xfffffcff
 8003b98:	fffeffff 	.word	0xfffeffff
 8003b9c:	00001388 	.word	0x00001388
 8003ba0:	efffffff 	.word	0xefffffff
 8003ba4:	ffffcfff 	.word	0xffffcfff
 8003ba8:	ffffefff 	.word	0xffffefff
 8003bac:	ffff3fff 	.word	0xffff3fff

08003bb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e0a8      	b.n	8003d14 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	2382      	movs	r3, #130	@ 0x82
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d009      	beq.n	8003bea <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	61da      	str	r2, [r3, #28]
 8003bdc:	e005      	b.n	8003bea <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	225d      	movs	r2, #93	@ 0x5d
 8003bf4:	5c9b      	ldrb	r3, [r3, r2]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d107      	bne.n	8003c0c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	225c      	movs	r2, #92	@ 0x5c
 8003c00:	2100      	movs	r1, #0
 8003c02:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	0018      	movs	r0, r3
 8003c08:	f7fd fcd2 	bl	80015b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	225d      	movs	r2, #93	@ 0x5d
 8003c10:	2102      	movs	r1, #2
 8003c12:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2140      	movs	r1, #64	@ 0x40
 8003c20:	438a      	bics	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68da      	ldr	r2, [r3, #12]
 8003c28:	23e0      	movs	r3, #224	@ 0xe0
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d902      	bls.n	8003c36 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	e002      	b.n	8003c3c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c36:	2380      	movs	r3, #128	@ 0x80
 8003c38:	015b      	lsls	r3, r3, #5
 8003c3a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	23f0      	movs	r3, #240	@ 0xf0
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d008      	beq.n	8003c5a <HAL_SPI_Init+0xaa>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	23e0      	movs	r3, #224	@ 0xe0
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d002      	beq.n	8003c5a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	2382      	movs	r3, #130	@ 0x82
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	401a      	ands	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6899      	ldr	r1, [r3, #8]
 8003c68:	2384      	movs	r3, #132	@ 0x84
 8003c6a:	021b      	lsls	r3, r3, #8
 8003c6c:	400b      	ands	r3, r1
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	2102      	movs	r1, #2
 8003c76:	400b      	ands	r3, r1
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	2101      	movs	r1, #1
 8003c80:	400b      	ands	r3, r1
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6999      	ldr	r1, [r3, #24]
 8003c88:	2380      	movs	r3, #128	@ 0x80
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	400b      	ands	r3, r1
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	2138      	movs	r1, #56	@ 0x38
 8003c96:	400b      	ands	r3, r1
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	2180      	movs	r1, #128	@ 0x80
 8003ca0:	400b      	ands	r3, r1
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	0011      	movs	r1, r2
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003caa:	2380      	movs	r3, #128	@ 0x80
 8003cac:	019b      	lsls	r3, r3, #6
 8003cae:	401a      	ands	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc6:	2110      	movs	r1, #16
 8003cc8:	400b      	ands	r3, r1
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd0:	2108      	movs	r1, #8
 8003cd2:	400b      	ands	r3, r1
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68d9      	ldr	r1, [r3, #12]
 8003cda:	23f0      	movs	r3, #240	@ 0xf0
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	400b      	ands	r3, r1
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	2380      	movs	r3, #128	@ 0x80
 8003ce8:	015b      	lsls	r3, r3, #5
 8003cea:	401a      	ands	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	69da      	ldr	r2, [r3, #28]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4907      	ldr	r1, [pc, #28]	@ (8003d1c <HAL_SPI_Init+0x16c>)
 8003d00:	400a      	ands	r2, r1
 8003d02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	225d      	movs	r2, #93	@ 0x5d
 8003d0e:	2101      	movs	r1, #1
 8003d10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	0018      	movs	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b004      	add	sp, #16
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	fffff7ff 	.word	0xfffff7ff

08003d20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e04a      	b.n	8003dc8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	223d      	movs	r2, #61	@ 0x3d
 8003d36:	5c9b      	ldrb	r3, [r3, r2]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	223c      	movs	r2, #60	@ 0x3c
 8003d42:	2100      	movs	r1, #0
 8003d44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f7fd fcd7 	bl	80016fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	223d      	movs	r2, #61	@ 0x3d
 8003d52:	2102      	movs	r1, #2
 8003d54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	0019      	movs	r1, r3
 8003d60:	0010      	movs	r0, r2
 8003d62:	f000 f98d 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2248      	movs	r2, #72	@ 0x48
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	223e      	movs	r2, #62	@ 0x3e
 8003d72:	2101      	movs	r1, #1
 8003d74:	5499      	strb	r1, [r3, r2]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	223f      	movs	r2, #63	@ 0x3f
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	5499      	strb	r1, [r3, r2]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2240      	movs	r2, #64	@ 0x40
 8003d82:	2101      	movs	r1, #1
 8003d84:	5499      	strb	r1, [r3, r2]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2241      	movs	r2, #65	@ 0x41
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	5499      	strb	r1, [r3, r2]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2242      	movs	r2, #66	@ 0x42
 8003d92:	2101      	movs	r1, #1
 8003d94:	5499      	strb	r1, [r3, r2]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2243      	movs	r2, #67	@ 0x43
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2244      	movs	r2, #68	@ 0x44
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2245      	movs	r2, #69	@ 0x45
 8003daa:	2101      	movs	r1, #1
 8003dac:	5499      	strb	r1, [r3, r2]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2246      	movs	r2, #70	@ 0x46
 8003db2:	2101      	movs	r1, #1
 8003db4:	5499      	strb	r1, [r3, r2]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2247      	movs	r2, #71	@ 0x47
 8003dba:	2101      	movs	r1, #1
 8003dbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	223d      	movs	r2, #61	@ 0x3d
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	0018      	movs	r0, r3
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b002      	add	sp, #8
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e04a      	b.n	8003e78 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	223d      	movs	r2, #61	@ 0x3d
 8003de6:	5c9b      	ldrb	r3, [r3, r2]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d107      	bne.n	8003dfe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	223c      	movs	r2, #60	@ 0x3c
 8003df2:	2100      	movs	r1, #0
 8003df4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f7fd fc5f 	bl	80016bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	223d      	movs	r2, #61	@ 0x3d
 8003e02:	2102      	movs	r1, #2
 8003e04:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	0019      	movs	r1, r3
 8003e10:	0010      	movs	r0, r2
 8003e12:	f000 f935 	bl	8004080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2248      	movs	r2, #72	@ 0x48
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	223e      	movs	r2, #62	@ 0x3e
 8003e22:	2101      	movs	r1, #1
 8003e24:	5499      	strb	r1, [r3, r2]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	223f      	movs	r2, #63	@ 0x3f
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	5499      	strb	r1, [r3, r2]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2240      	movs	r2, #64	@ 0x40
 8003e32:	2101      	movs	r1, #1
 8003e34:	5499      	strb	r1, [r3, r2]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2241      	movs	r2, #65	@ 0x41
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	5499      	strb	r1, [r3, r2]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2242      	movs	r2, #66	@ 0x42
 8003e42:	2101      	movs	r1, #1
 8003e44:	5499      	strb	r1, [r3, r2]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2243      	movs	r2, #67	@ 0x43
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2244      	movs	r2, #68	@ 0x44
 8003e52:	2101      	movs	r1, #1
 8003e54:	5499      	strb	r1, [r3, r2]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2245      	movs	r2, #69	@ 0x45
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	5499      	strb	r1, [r3, r2]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2246      	movs	r2, #70	@ 0x46
 8003e62:	2101      	movs	r1, #1
 8003e64:	5499      	strb	r1, [r3, r2]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2247      	movs	r2, #71	@ 0x47
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	223d      	movs	r2, #61	@ 0x3d
 8003e72:	2101      	movs	r1, #1
 8003e74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	0018      	movs	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b002      	add	sp, #8
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e8c:	2317      	movs	r3, #23
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	2200      	movs	r2, #0
 8003e92:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	223c      	movs	r2, #60	@ 0x3c
 8003e98:	5c9b      	ldrb	r3, [r3, r2]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e0e5      	b.n	800406e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	223c      	movs	r2, #60	@ 0x3c
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b14      	cmp	r3, #20
 8003eae:	d900      	bls.n	8003eb2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003eb0:	e0d1      	b.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	009a      	lsls	r2, r3, #2
 8003eb6:	4b70      	ldr	r3, [pc, #448]	@ (8004078 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003eb8:	18d3      	adds	r3, r2, r3
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	0011      	movs	r1, r2
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f000 f95e 	bl	8004188 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2108      	movs	r1, #8
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699a      	ldr	r2, [r3, #24]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2104      	movs	r1, #4
 8003ee8:	438a      	bics	r2, r1
 8003eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6999      	ldr	r1, [r3, #24]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	619a      	str	r2, [r3, #24]
      break;
 8003efe:	e0af      	b.n	8004060 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	0011      	movs	r1, r2
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 f9bd 	bl	8004288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2180      	movs	r1, #128	@ 0x80
 8003f1a:	0109      	lsls	r1, r1, #4
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4954      	ldr	r1, [pc, #336]	@ (800407c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003f2c:	400a      	ands	r2, r1
 8003f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6999      	ldr	r1, [r3, #24]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	021a      	lsls	r2, r3, #8
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	619a      	str	r2, [r3, #24]
      break;
 8003f44:	e08c      	b.n	8004060 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	0011      	movs	r1, r2
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f000 fa18 	bl	8004384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69da      	ldr	r2, [r3, #28]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2108      	movs	r1, #8
 8003f60:	430a      	orrs	r2, r1
 8003f62:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69da      	ldr	r2, [r3, #28]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2104      	movs	r1, #4
 8003f70:	438a      	bics	r2, r1
 8003f72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69d9      	ldr	r1, [r3, #28]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	61da      	str	r2, [r3, #28]
      break;
 8003f86:	e06b      	b.n	8004060 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	0011      	movs	r1, r2
 8003f90:	0018      	movs	r0, r3
 8003f92:	f000 fa79 	bl	8004488 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2180      	movs	r1, #128	@ 0x80
 8003fa2:	0109      	lsls	r1, r1, #4
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4932      	ldr	r1, [pc, #200]	@ (800407c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003fb4:	400a      	ands	r2, r1
 8003fb6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69d9      	ldr	r1, [r3, #28]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	021a      	lsls	r2, r3, #8
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	61da      	str	r2, [r3, #28]
      break;
 8003fcc:	e048      	b.n	8004060 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	0011      	movs	r1, r2
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f000 faba 	bl	8004550 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2108      	movs	r1, #8
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	438a      	bics	r2, r1
 8003ffa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800400e:	e027      	b.n	8004060 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	0011      	movs	r1, r2
 8004018:	0018      	movs	r0, r3
 800401a:	f000 faf3 	bl	8004604 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2180      	movs	r1, #128	@ 0x80
 800402a:	0109      	lsls	r1, r1, #4
 800402c:	430a      	orrs	r2, r1
 800402e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4910      	ldr	r1, [pc, #64]	@ (800407c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800403c:	400a      	ands	r2, r1
 800403e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	021a      	lsls	r2, r3, #8
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004054:	e004      	b.n	8004060 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004056:	2317      	movs	r3, #23
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
      break;
 800405e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	223c      	movs	r2, #60	@ 0x3c
 8004064:	2100      	movs	r1, #0
 8004066:	5499      	strb	r1, [r3, r2]

  return status;
 8004068:	2317      	movs	r3, #23
 800406a:	18fb      	adds	r3, r7, r3
 800406c:	781b      	ldrb	r3, [r3, #0]
}
 800406e:	0018      	movs	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	b006      	add	sp, #24
 8004074:	bd80      	pop	{r7, pc}
 8004076:	46c0      	nop			@ (mov r8, r8)
 8004078:	08006a5c 	.word	0x08006a5c
 800407c:	fffffbff 	.word	0xfffffbff

08004080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a37      	ldr	r2, [pc, #220]	@ (8004170 <TIM_Base_SetConfig+0xf0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d008      	beq.n	80040aa <TIM_Base_SetConfig+0x2a>
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	05db      	lsls	r3, r3, #23
 800409e:	429a      	cmp	r2, r3
 80040a0:	d003      	beq.n	80040aa <TIM_Base_SetConfig+0x2a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a33      	ldr	r2, [pc, #204]	@ (8004174 <TIM_Base_SetConfig+0xf4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d108      	bne.n	80040bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2270      	movs	r2, #112	@ 0x70
 80040ae:	4393      	bics	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a2c      	ldr	r2, [pc, #176]	@ (8004170 <TIM_Base_SetConfig+0xf0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d014      	beq.n	80040ee <TIM_Base_SetConfig+0x6e>
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	2380      	movs	r3, #128	@ 0x80
 80040c8:	05db      	lsls	r3, r3, #23
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d00f      	beq.n	80040ee <TIM_Base_SetConfig+0x6e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a28      	ldr	r2, [pc, #160]	@ (8004174 <TIM_Base_SetConfig+0xf4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00b      	beq.n	80040ee <TIM_Base_SetConfig+0x6e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a27      	ldr	r2, [pc, #156]	@ (8004178 <TIM_Base_SetConfig+0xf8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d007      	beq.n	80040ee <TIM_Base_SetConfig+0x6e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a26      	ldr	r2, [pc, #152]	@ (800417c <TIM_Base_SetConfig+0xfc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d003      	beq.n	80040ee <TIM_Base_SetConfig+0x6e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a25      	ldr	r2, [pc, #148]	@ (8004180 <TIM_Base_SetConfig+0x100>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d108      	bne.n	8004100 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a24      	ldr	r2, [pc, #144]	@ (8004184 <TIM_Base_SetConfig+0x104>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2280      	movs	r2, #128	@ 0x80
 8004104:	4393      	bics	r3, r2
 8004106:	001a      	movs	r2, r3
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a11      	ldr	r2, [pc, #68]	@ (8004170 <TIM_Base_SetConfig+0xf0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <TIM_Base_SetConfig+0xbe>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a12      	ldr	r2, [pc, #72]	@ (800417c <TIM_Base_SetConfig+0xfc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d003      	beq.n	800413e <TIM_Base_SetConfig+0xbe>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a11      	ldr	r2, [pc, #68]	@ (8004180 <TIM_Base_SetConfig+0x100>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d103      	bne.n	8004146 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	2201      	movs	r2, #1
 8004152:	4013      	ands	r3, r2
 8004154:	2b01      	cmp	r3, #1
 8004156:	d106      	bne.n	8004166 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2201      	movs	r2, #1
 800415e:	4393      	bics	r3, r2
 8004160:	001a      	movs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	611a      	str	r2, [r3, #16]
  }
}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	46bd      	mov	sp, r7
 800416a:	b004      	add	sp, #16
 800416c:	bd80      	pop	{r7, pc}
 800416e:	46c0      	nop			@ (mov r8, r8)
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40000400 	.word	0x40000400
 8004178:	40002000 	.word	0x40002000
 800417c:	40014400 	.word	0x40014400
 8004180:	40014800 	.word	0x40014800
 8004184:	fffffcff 	.word	0xfffffcff

08004188 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	2201      	movs	r2, #1
 800419e:	4393      	bics	r3, r2
 80041a0:	001a      	movs	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004270 <TIM_OC1_SetConfig+0xe8>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2203      	movs	r2, #3
 80041be:	4393      	bics	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2202      	movs	r2, #2
 80041d0:	4393      	bics	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a24      	ldr	r2, [pc, #144]	@ (8004274 <TIM_OC1_SetConfig+0xec>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <TIM_OC1_SetConfig+0x6e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a23      	ldr	r2, [pc, #140]	@ (8004278 <TIM_OC1_SetConfig+0xf0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_OC1_SetConfig+0x6e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a22      	ldr	r2, [pc, #136]	@ (800427c <TIM_OC1_SetConfig+0xf4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d10c      	bne.n	8004210 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2208      	movs	r2, #8
 80041fa:	4393      	bics	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	2204      	movs	r2, #4
 800420c:	4393      	bics	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <TIM_OC1_SetConfig+0xec>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d007      	beq.n	8004228 <TIM_OC1_SetConfig+0xa0>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a17      	ldr	r2, [pc, #92]	@ (8004278 <TIM_OC1_SetConfig+0xf0>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_OC1_SetConfig+0xa0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a16      	ldr	r2, [pc, #88]	@ (800427c <TIM_OC1_SetConfig+0xf4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d111      	bne.n	800424c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4a15      	ldr	r2, [pc, #84]	@ (8004280 <TIM_OC1_SetConfig+0xf8>)
 800422c:	4013      	ands	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4a14      	ldr	r2, [pc, #80]	@ (8004284 <TIM_OC1_SetConfig+0xfc>)
 8004234:	4013      	ands	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	46bd      	mov	sp, r7
 800426a:	b006      	add	sp, #24
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	fffeff8f 	.word	0xfffeff8f
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40014400 	.word	0x40014400
 800427c:	40014800 	.word	0x40014800
 8004280:	fffffeff 	.word	0xfffffeff
 8004284:	fffffdff 	.word	0xfffffdff

08004288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	2210      	movs	r2, #16
 800429e:	4393      	bics	r3, r2
 80042a0:	001a      	movs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004368 <TIM_OC2_SetConfig+0xe0>)
 80042b6:	4013      	ands	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4a2b      	ldr	r2, [pc, #172]	@ (800436c <TIM_OC2_SetConfig+0xe4>)
 80042be:	4013      	ands	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2220      	movs	r2, #32
 80042d2:	4393      	bics	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a22      	ldr	r2, [pc, #136]	@ (8004370 <TIM_OC2_SetConfig+0xe8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d10d      	bne.n	8004306 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2280      	movs	r2, #128	@ 0x80
 80042ee:	4393      	bics	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2240      	movs	r2, #64	@ 0x40
 8004302:	4393      	bics	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a19      	ldr	r2, [pc, #100]	@ (8004370 <TIM_OC2_SetConfig+0xe8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d007      	beq.n	800431e <TIM_OC2_SetConfig+0x96>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a18      	ldr	r2, [pc, #96]	@ (8004374 <TIM_OC2_SetConfig+0xec>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d003      	beq.n	800431e <TIM_OC2_SetConfig+0x96>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a17      	ldr	r2, [pc, #92]	@ (8004378 <TIM_OC2_SetConfig+0xf0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d113      	bne.n	8004346 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4a16      	ldr	r2, [pc, #88]	@ (800437c <TIM_OC2_SetConfig+0xf4>)
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4a15      	ldr	r2, [pc, #84]	@ (8004380 <TIM_OC2_SetConfig+0xf8>)
 800432a:	4013      	ands	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	621a      	str	r2, [r3, #32]
}
 8004360:	46c0      	nop			@ (mov r8, r8)
 8004362:	46bd      	mov	sp, r7
 8004364:	b006      	add	sp, #24
 8004366:	bd80      	pop	{r7, pc}
 8004368:	feff8fff 	.word	0xfeff8fff
 800436c:	fffffcff 	.word	0xfffffcff
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40014400 	.word	0x40014400
 8004378:	40014800 	.word	0x40014800
 800437c:	fffffbff 	.word	0xfffffbff
 8004380:	fffff7ff 	.word	0xfffff7ff

08004384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	4a31      	ldr	r2, [pc, #196]	@ (8004460 <TIM_OC3_SetConfig+0xdc>)
 800439a:	401a      	ands	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004464 <TIM_OC3_SetConfig+0xe0>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2203      	movs	r2, #3
 80043b8:	4393      	bics	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	4a27      	ldr	r2, [pc, #156]	@ (8004468 <TIM_OC3_SetConfig+0xe4>)
 80043ca:	4013      	ands	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	021b      	lsls	r3, r3, #8
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a23      	ldr	r2, [pc, #140]	@ (800446c <TIM_OC3_SetConfig+0xe8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d10d      	bne.n	80043fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	4a22      	ldr	r2, [pc, #136]	@ (8004470 <TIM_OC3_SetConfig+0xec>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	021b      	lsls	r3, r3, #8
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004474 <TIM_OC3_SetConfig+0xf0>)
 80043fa:	4013      	ands	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a1a      	ldr	r2, [pc, #104]	@ (800446c <TIM_OC3_SetConfig+0xe8>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <TIM_OC3_SetConfig+0x92>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a1b      	ldr	r2, [pc, #108]	@ (8004478 <TIM_OC3_SetConfig+0xf4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d003      	beq.n	8004416 <TIM_OC3_SetConfig+0x92>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a1a      	ldr	r2, [pc, #104]	@ (800447c <TIM_OC3_SetConfig+0xf8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d113      	bne.n	800443e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4a19      	ldr	r2, [pc, #100]	@ (8004480 <TIM_OC3_SetConfig+0xfc>)
 800441a:	4013      	ands	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4a18      	ldr	r2, [pc, #96]	@ (8004484 <TIM_OC3_SetConfig+0x100>)
 8004422:	4013      	ands	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	621a      	str	r2, [r3, #32]
}
 8004458:	46c0      	nop			@ (mov r8, r8)
 800445a:	46bd      	mov	sp, r7
 800445c:	b006      	add	sp, #24
 800445e:	bd80      	pop	{r7, pc}
 8004460:	fffffeff 	.word	0xfffffeff
 8004464:	fffeff8f 	.word	0xfffeff8f
 8004468:	fffffdff 	.word	0xfffffdff
 800446c:	40012c00 	.word	0x40012c00
 8004470:	fffff7ff 	.word	0xfffff7ff
 8004474:	fffffbff 	.word	0xfffffbff
 8004478:	40014400 	.word	0x40014400
 800447c:	40014800 	.word	0x40014800
 8004480:	ffffefff 	.word	0xffffefff
 8004484:	ffffdfff 	.word	0xffffdfff

08004488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	4a24      	ldr	r2, [pc, #144]	@ (8004530 <TIM_OC4_SetConfig+0xa8>)
 800449e:	401a      	ands	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4a20      	ldr	r2, [pc, #128]	@ (8004534 <TIM_OC4_SetConfig+0xac>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004538 <TIM_OC4_SetConfig+0xb0>)
 80044bc:	4013      	ands	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	021b      	lsls	r3, r3, #8
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4a1b      	ldr	r2, [pc, #108]	@ (800453c <TIM_OC4_SetConfig+0xb4>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	031b      	lsls	r3, r3, #12
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a17      	ldr	r2, [pc, #92]	@ (8004540 <TIM_OC4_SetConfig+0xb8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d007      	beq.n	80044f8 <TIM_OC4_SetConfig+0x70>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a16      	ldr	r2, [pc, #88]	@ (8004544 <TIM_OC4_SetConfig+0xbc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <TIM_OC4_SetConfig+0x70>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a15      	ldr	r2, [pc, #84]	@ (8004548 <TIM_OC4_SetConfig+0xc0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d109      	bne.n	800450c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	4a14      	ldr	r2, [pc, #80]	@ (800454c <TIM_OC4_SetConfig+0xc4>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	019b      	lsls	r3, r3, #6
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	46c0      	nop			@ (mov r8, r8)
 8004528:	46bd      	mov	sp, r7
 800452a:	b006      	add	sp, #24
 800452c:	bd80      	pop	{r7, pc}
 800452e:	46c0      	nop			@ (mov r8, r8)
 8004530:	ffffefff 	.word	0xffffefff
 8004534:	feff8fff 	.word	0xfeff8fff
 8004538:	fffffcff 	.word	0xfffffcff
 800453c:	ffffdfff 	.word	0xffffdfff
 8004540:	40012c00 	.word	0x40012c00
 8004544:	40014400 	.word	0x40014400
 8004548:	40014800 	.word	0x40014800
 800454c:	ffffbfff 	.word	0xffffbfff

08004550 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	4a21      	ldr	r2, [pc, #132]	@ (80045ec <TIM_OC5_SetConfig+0x9c>)
 8004566:	401a      	ands	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a1d      	ldr	r2, [pc, #116]	@ (80045f0 <TIM_OC5_SetConfig+0xa0>)
 800457c:	4013      	ands	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4a19      	ldr	r2, [pc, #100]	@ (80045f4 <TIM_OC5_SetConfig+0xa4>)
 800458e:	4013      	ands	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a15      	ldr	r2, [pc, #84]	@ (80045f8 <TIM_OC5_SetConfig+0xa8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d007      	beq.n	80045b6 <TIM_OC5_SetConfig+0x66>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a14      	ldr	r2, [pc, #80]	@ (80045fc <TIM_OC5_SetConfig+0xac>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d003      	beq.n	80045b6 <TIM_OC5_SetConfig+0x66>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a13      	ldr	r2, [pc, #76]	@ (8004600 <TIM_OC5_SetConfig+0xb0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d109      	bne.n	80045ca <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	4a0c      	ldr	r2, [pc, #48]	@ (80045ec <TIM_OC5_SetConfig+0x9c>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	621a      	str	r2, [r3, #32]
}
 80045e4:	46c0      	nop			@ (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b006      	add	sp, #24
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	fffeffff 	.word	0xfffeffff
 80045f0:	fffeff8f 	.word	0xfffeff8f
 80045f4:	fffdffff 	.word	0xfffdffff
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40014400 	.word	0x40014400
 8004600:	40014800 	.word	0x40014800

08004604 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	4a22      	ldr	r2, [pc, #136]	@ (80046a4 <TIM_OC6_SetConfig+0xa0>)
 800461a:	401a      	ands	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a1e      	ldr	r2, [pc, #120]	@ (80046a8 <TIM_OC6_SetConfig+0xa4>)
 8004630:	4013      	ands	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4a1a      	ldr	r2, [pc, #104]	@ (80046ac <TIM_OC6_SetConfig+0xa8>)
 8004644:	4013      	ands	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	051b      	lsls	r3, r3, #20
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a16      	ldr	r2, [pc, #88]	@ (80046b0 <TIM_OC6_SetConfig+0xac>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d007      	beq.n	800466c <TIM_OC6_SetConfig+0x68>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a15      	ldr	r2, [pc, #84]	@ (80046b4 <TIM_OC6_SetConfig+0xb0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d003      	beq.n	800466c <TIM_OC6_SetConfig+0x68>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a14      	ldr	r2, [pc, #80]	@ (80046b8 <TIM_OC6_SetConfig+0xb4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d109      	bne.n	8004680 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	4a13      	ldr	r2, [pc, #76]	@ (80046bc <TIM_OC6_SetConfig+0xb8>)
 8004670:	4013      	ands	r3, r2
 8004672:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	029b      	lsls	r3, r3, #10
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	621a      	str	r2, [r3, #32]
}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	46bd      	mov	sp, r7
 800469e:	b006      	add	sp, #24
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	ffefffff 	.word	0xffefffff
 80046a8:	feff8fff 	.word	0xfeff8fff
 80046ac:	ffdfffff 	.word	0xffdfffff
 80046b0:	40012c00 	.word	0x40012c00
 80046b4:	40014400 	.word	0x40014400
 80046b8:	40014800 	.word	0x40014800
 80046bc:	fffbffff 	.word	0xfffbffff

080046c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	223c      	movs	r2, #60	@ 0x3c
 80046ce:	5c9b      	ldrb	r3, [r3, r2]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e050      	b.n	800477a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	223c      	movs	r2, #60	@ 0x3c
 80046dc:	2101      	movs	r1, #1
 80046de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	223d      	movs	r2, #61	@ 0x3d
 80046e4:	2102      	movs	r1, #2
 80046e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a21      	ldr	r2, [pc, #132]	@ (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d108      	bne.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4a20      	ldr	r2, [pc, #128]	@ (8004788 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004706:	4013      	ands	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2270      	movs	r2, #112	@ 0x70
 8004718:	4393      	bics	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a14      	ldr	r2, [pc, #80]	@ (8004784 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00a      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	2380      	movs	r3, #128	@ 0x80
 800473e:	05db      	lsls	r3, r3, #23
 8004740:	429a      	cmp	r2, r3
 8004742:	d004      	beq.n	800474e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a10      	ldr	r2, [pc, #64]	@ (800478c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d10c      	bne.n	8004768 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2280      	movs	r2, #128	@ 0x80
 8004752:	4393      	bics	r3, r2
 8004754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	4313      	orrs	r3, r2
 800475e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	223d      	movs	r2, #61	@ 0x3d
 800476c:	2101      	movs	r1, #1
 800476e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	223c      	movs	r2, #60	@ 0x3c
 8004774:	2100      	movs	r1, #0
 8004776:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	0018      	movs	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	b004      	add	sp, #16
 8004780:	bd80      	pop	{r7, pc}
 8004782:	46c0      	nop			@ (mov r8, r8)
 8004784:	40012c00 	.word	0x40012c00
 8004788:	ff0fffff 	.word	0xff0fffff
 800478c:	40000400 	.word	0x40000400

08004790 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	223c      	movs	r2, #60	@ 0x3c
 80047a2:	5c9b      	ldrb	r3, [r3, r2]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e06f      	b.n	800488c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	223c      	movs	r2, #60	@ 0x3c
 80047b0:	2101      	movs	r1, #1
 80047b2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	22ff      	movs	r2, #255	@ 0xff
 80047b8:	4393      	bics	r3, r2
 80047ba:	001a      	movs	r2, r3
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a33      	ldr	r2, [pc, #204]	@ (8004894 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80047c8:	401a      	ands	r2, r3
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4a30      	ldr	r2, [pc, #192]	@ (8004898 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80047d6:	401a      	ands	r2, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4313      	orrs	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4a2e      	ldr	r2, [pc, #184]	@ (800489c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80047e4:	401a      	ands	r2, r3
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4a2b      	ldr	r2, [pc, #172]	@ (80048a0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80047f2:	401a      	ands	r2, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a29      	ldr	r2, [pc, #164]	@ (80048a4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004800:	401a      	ands	r2, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a26      	ldr	r2, [pc, #152]	@ (80048a8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800480e:	401a      	ands	r2, r3
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4a24      	ldr	r2, [pc, #144]	@ (80048ac <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800481c:	401a      	ands	r2, r3
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	041b      	lsls	r3, r3, #16
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4a21      	ldr	r2, [pc, #132]	@ (80048b0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800482c:	401a      	ands	r2, r3
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a1e      	ldr	r2, [pc, #120]	@ (80048b4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d11c      	bne.n	800487a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a1d      	ldr	r2, [pc, #116]	@ (80048b8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004844:	401a      	ands	r2, r3
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484a:	051b      	lsls	r3, r3, #20
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a1a      	ldr	r2, [pc, #104]	@ (80048bc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004854:	401a      	ands	r2, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4a17      	ldr	r2, [pc, #92]	@ (80048c0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004862:	401a      	ands	r2, r3
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a15      	ldr	r2, [pc, #84]	@ (80048c4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004870:	401a      	ands	r2, r3
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	223c      	movs	r2, #60	@ 0x3c
 8004886:	2100      	movs	r1, #0
 8004888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	0018      	movs	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	b004      	add	sp, #16
 8004892:	bd80      	pop	{r7, pc}
 8004894:	fffffcff 	.word	0xfffffcff
 8004898:	fffffbff 	.word	0xfffffbff
 800489c:	fffff7ff 	.word	0xfffff7ff
 80048a0:	ffffefff 	.word	0xffffefff
 80048a4:	ffffdfff 	.word	0xffffdfff
 80048a8:	ffffbfff 	.word	0xffffbfff
 80048ac:	fff0ffff 	.word	0xfff0ffff
 80048b0:	efffffff 	.word	0xefffffff
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	ff0fffff 	.word	0xff0fffff
 80048bc:	feffffff 	.word	0xfeffffff
 80048c0:	fdffffff 	.word	0xfdffffff
 80048c4:	dfffffff 	.word	0xdfffffff

080048c8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08c      	sub	sp, #48	@ 0x30
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	1dbb      	adds	r3, r7, #6
 80048d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2288      	movs	r2, #136	@ 0x88
 80048da:	589b      	ldr	r3, [r3, r2]
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d000      	beq.n	80048e2 <HAL_UART_Transmit_IT+0x1a>
 80048e0:	e08d      	b.n	80049fe <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_UART_Transmit_IT+0x28>
 80048e8:	1dbb      	adds	r3, r7, #6
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e085      	b.n	8004a00 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	2380      	movs	r3, #128	@ 0x80
 80048fa:	015b      	lsls	r3, r3, #5
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d109      	bne.n	8004914 <HAL_UART_Transmit_IT+0x4c>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d105      	bne.n	8004914 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2201      	movs	r2, #1
 800490c:	4013      	ands	r3, r2
 800490e:	d001      	beq.n	8004914 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e075      	b.n	8004a00 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1dba      	adds	r2, r7, #6
 800491e:	2154      	movs	r1, #84	@ 0x54
 8004920:	8812      	ldrh	r2, [r2, #0]
 8004922:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1dba      	adds	r2, r7, #6
 8004928:	2156      	movs	r1, #86	@ 0x56
 800492a:	8812      	ldrh	r2, [r2, #0]
 800492c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2290      	movs	r2, #144	@ 0x90
 8004938:	2100      	movs	r1, #0
 800493a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2288      	movs	r2, #136	@ 0x88
 8004940:	2121      	movs	r1, #33	@ 0x21
 8004942:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004948:	2380      	movs	r3, #128	@ 0x80
 800494a:	059b      	lsls	r3, r3, #22
 800494c:	429a      	cmp	r2, r3
 800494e:	d12a      	bne.n	80049a6 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	2380      	movs	r3, #128	@ 0x80
 8004956:	015b      	lsls	r3, r3, #5
 8004958:	429a      	cmp	r2, r3
 800495a:	d107      	bne.n	800496c <HAL_UART_Transmit_IT+0xa4>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4a28      	ldr	r2, [pc, #160]	@ (8004a08 <HAL_UART_Transmit_IT+0x140>)
 8004968:	679a      	str	r2, [r3, #120]	@ 0x78
 800496a:	e002      	b.n	8004972 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a27      	ldr	r2, [pc, #156]	@ (8004a0c <HAL_UART_Transmit_IT+0x144>)
 8004970:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004972:	f3ef 8310 	mrs	r3, PRIMASK
 8004976:	61fb      	str	r3, [r7, #28]
  return(result);
 8004978:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800497a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800497c:	2301      	movs	r3, #1
 800497e:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	f383 8810 	msr	PRIMASK, r3
}
 8004986:	46c0      	nop			@ (mov r8, r8)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2180      	movs	r1, #128	@ 0x80
 8004994:	0409      	lsls	r1, r1, #16
 8004996:	430a      	orrs	r2, r1
 8004998:	609a      	str	r2, [r3, #8]
 800499a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	f383 8810 	msr	PRIMASK, r3
}
 80049a4:	e029      	b.n	80049fa <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	2380      	movs	r3, #128	@ 0x80
 80049ac:	015b      	lsls	r3, r3, #5
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d107      	bne.n	80049c2 <HAL_UART_Transmit_IT+0xfa>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4a14      	ldr	r2, [pc, #80]	@ (8004a10 <HAL_UART_Transmit_IT+0x148>)
 80049be:	679a      	str	r2, [r3, #120]	@ 0x78
 80049c0:	e002      	b.n	80049c8 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4a13      	ldr	r2, [pc, #76]	@ (8004a14 <HAL_UART_Transmit_IT+0x14c>)
 80049c6:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80049c8:	f3ef 8310 	mrs	r3, PRIMASK
 80049cc:	613b      	str	r3, [r7, #16]
  return(result);
 80049ce:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80049d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049d2:	2301      	movs	r3, #1
 80049d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f383 8810 	msr	PRIMASK, r3
}
 80049dc:	46c0      	nop			@ (mov r8, r8)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2180      	movs	r1, #128	@ 0x80
 80049ea:	430a      	orrs	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	f383 8810 	msr	PRIMASK, r3
}
 80049f8:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 80049fe:	2302      	movs	r3, #2
  }
}
 8004a00:	0018      	movs	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b00c      	add	sp, #48	@ 0x30
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	08006215 	.word	0x08006215
 8004a0c:	08006129 	.word	0x08006129
 8004a10:	08006069 	.word	0x08006069
 8004a14:	08005fb5 	.word	0x08005fb5

08004a18 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b098      	sub	sp, #96	@ 0x60
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8004a20:	2301      	movs	r3, #1
 8004a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a24:	f3ef 8310 	mrs	r3, PRIMASK
 8004a28:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8004a2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a2e:	2301      	movs	r3, #1
 8004a30:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a34:	f383 8810 	msr	PRIMASK, r3
}
 8004a38:	46c0      	nop			@ (mov r8, r8)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	498a      	ldr	r1, [pc, #552]	@ (8004c70 <HAL_UART_Abort_IT+0x258>)
 8004a46:	400a      	ands	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a50:	f383 8810 	msr	PRIMASK, r3
}
 8004a54:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a56:	f3ef 8310 	mrs	r3, PRIMASK
 8004a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8004a5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a60:	2301      	movs	r3, #1
 8004a62:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a66:	f383 8810 	msr	PRIMASK, r3
}
 8004a6a:	46c0      	nop			@ (mov r8, r8)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	497f      	ldr	r1, [pc, #508]	@ (8004c74 <HAL_UART_Abort_IT+0x25c>)
 8004a78:	400a      	ands	r2, r1
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a7e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a82:	f383 8810 	msr	PRIMASK, r3
}
 8004a86:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d118      	bne.n	8004ac2 <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a90:	f3ef 8310 	mrs	r3, PRIMASK
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004a98:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa0:	f383 8810 	msr	PRIMASK, r3
}
 8004aa4:	46c0      	nop			@ (mov r8, r8)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2110      	movs	r1, #16
 8004ab2:	438a      	bics	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004abc:	f383 8810 	msr	PRIMASK, r3
}
 8004ac0:	46c0      	nop			@ (mov r8, r8)

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00f      	beq.n	8004aea <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2280      	movs	r2, #128	@ 0x80
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b80      	cmp	r3, #128	@ 0x80
 8004ad6:	d104      	bne.n	8004ae2 <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004adc:	4a66      	ldr	r2, [pc, #408]	@ (8004c78 <HAL_UART_Abort_IT+0x260>)
 8004ade:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ae0:	e003      	b.n	8004aea <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2280      	movs	r2, #128	@ 0x80
 8004aee:	589b      	ldr	r3, [r3, r2]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d011      	beq.n	8004b18 <HAL_UART_Abort_IT+0x100>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2240      	movs	r2, #64	@ 0x40
 8004afc:	4013      	ands	r3, r2
 8004afe:	2b40      	cmp	r3, #64	@ 0x40
 8004b00:	d105      	bne.n	8004b0e <HAL_UART_Abort_IT+0xf6>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2280      	movs	r2, #128	@ 0x80
 8004b06:	589b      	ldr	r3, [r3, r2]
 8004b08:	4a5c      	ldr	r2, [pc, #368]	@ (8004c7c <HAL_UART_Abort_IT+0x264>)
 8004b0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b0c:	e004      	b.n	8004b18 <HAL_UART_Abort_IT+0x100>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2280      	movs	r2, #128	@ 0x80
 8004b12:	589b      	ldr	r3, [r3, r2]
 8004b14:	2200      	movs	r2, #0
 8004b16:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2280      	movs	r2, #128	@ 0x80
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b80      	cmp	r3, #128	@ 0x80
 8004b24:	d12a      	bne.n	8004b7c <HAL_UART_Abort_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b26:	f3ef 8310 	mrs	r3, PRIMASK
 8004b2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b2c:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b30:	2301      	movs	r3, #1
 8004b32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f383 8810 	msr	PRIMASK, r3
}
 8004b3a:	46c0      	nop			@ (mov r8, r8)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689a      	ldr	r2, [r3, #8]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2180      	movs	r1, #128	@ 0x80
 8004b48:	438a      	bics	r2, r1
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	f383 8810 	msr	PRIMASK, r3
}
 8004b56:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00d      	beq.n	8004b7c <HAL_UART_Abort_IT+0x164>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7fd fed1 	bl	800290c <HAL_DMA_Abort_IT>
 8004b6a:	1e03      	subs	r3, r0, #0
 8004b6c:	d004      	beq.n	8004b78 <HAL_UART_Abort_IT+0x160>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b72:	2200      	movs	r2, #0
 8004b74:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b76:	e001      	b.n	8004b7c <HAL_UART_Abort_IT+0x164>
      }
      else
      {
        abortcplt = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2240      	movs	r2, #64	@ 0x40
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b40      	cmp	r3, #64	@ 0x40
 8004b88:	d12f      	bne.n	8004bea <HAL_UART_Abort_IT+0x1d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b90:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b94:	2301      	movs	r3, #1
 8004b96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f383 8810 	msr	PRIMASK, r3
}
 8004b9e:	46c0      	nop			@ (mov r8, r8)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2140      	movs	r1, #64	@ 0x40
 8004bac:	438a      	bics	r2, r1
 8004bae:	609a      	str	r2, [r3, #8]
 8004bb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f383 8810 	msr	PRIMASK, r3
}
 8004bba:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2280      	movs	r2, #128	@ 0x80
 8004bc0:	589b      	ldr	r3, [r3, r2]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d011      	beq.n	8004bea <HAL_UART_Abort_IT+0x1d2>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2280      	movs	r2, #128	@ 0x80
 8004bca:	589b      	ldr	r3, [r3, r2]
 8004bcc:	0018      	movs	r0, r3
 8004bce:	f7fd fe9d 	bl	800290c <HAL_DMA_Abort_IT>
 8004bd2:	1e03      	subs	r3, r0, #0
 8004bd4:	d007      	beq.n	8004be6 <HAL_UART_Abort_IT+0x1ce>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2280      	movs	r2, #128	@ 0x80
 8004bda:	589b      	ldr	r3, [r3, r2]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	639a      	str	r2, [r3, #56]	@ 0x38
        abortcplt = 1U;
 8004be0:	2301      	movs	r3, #1
 8004be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004be4:	e001      	b.n	8004bea <HAL_UART_Abort_IT+0x1d2>
      }
      else
      {
        abortcplt = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8004bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d13a      	bne.n	8004c66 <HAL_UART_Abort_IT+0x24e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2256      	movs	r2, #86	@ 0x56
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	225e      	movs	r2, #94	@ 0x5e
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2290      	movs	r2, #144	@ 0x90
 8004c10:	2100      	movs	r1, #0
 8004c12:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	220f      	movs	r2, #15
 8004c1a:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004c20:	2380      	movs	r3, #128	@ 0x80
 8004c22:	059b      	lsls	r3, r3, #22
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d107      	bne.n	8004c38 <HAL_UART_Abort_IT+0x220>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2110      	movs	r1, #16
 8004c34:	430a      	orrs	r2, r1
 8004c36:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2108      	movs	r1, #8
 8004c44:	430a      	orrs	r2, r1
 8004c46:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2288      	movs	r2, #136	@ 0x88
 8004c4c:	2120      	movs	r1, #32
 8004c4e:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	228c      	movs	r2, #140	@ 0x8c
 8004c54:	2120      	movs	r1, #32
 8004c56:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	0018      	movs	r0, r3
 8004c62:	f000 fb6b 	bl	800533c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	0018      	movs	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b018      	add	sp, #96	@ 0x60
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	fffffe1f 	.word	0xfffffe1f
 8004c74:	ef7ffffe 	.word	0xef7ffffe
 8004c78:	08005ea3 	.word	0x08005ea3
 8004c7c:	08005f33 	.word	0x08005f33

08004c80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c80:	b5b0      	push	{r4, r5, r7, lr}
 8004c82:	b0aa      	sub	sp, #168	@ 0xa8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	22a4      	movs	r2, #164	@ 0xa4
 8004c90:	18b9      	adds	r1, r7, r2
 8004c92:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	20a0      	movs	r0, #160	@ 0xa0
 8004c9c:	1839      	adds	r1, r7, r0
 8004c9e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	249c      	movs	r4, #156	@ 0x9c
 8004ca8:	1939      	adds	r1, r7, r4
 8004caa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cac:	0011      	movs	r1, r2
 8004cae:	18bb      	adds	r3, r7, r2
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4aa2      	ldr	r2, [pc, #648]	@ (8004f3c <HAL_UART_IRQHandler+0x2bc>)
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2298      	movs	r2, #152	@ 0x98
 8004cb8:	18bd      	adds	r5, r7, r2
 8004cba:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004cbc:	18bb      	adds	r3, r7, r2
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11a      	bne.n	8004cfa <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004cc4:	187b      	adds	r3, r7, r1
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d015      	beq.n	8004cfa <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004cce:	183b      	adds	r3, r7, r0
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d105      	bne.n	8004ce4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004cd8:	193b      	adds	r3, r7, r4
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	2380      	movs	r3, #128	@ 0x80
 8004cde:	055b      	lsls	r3, r3, #21
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d00a      	beq.n	8004cfa <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d100      	bne.n	8004cee <HAL_UART_IRQHandler+0x6e>
 8004cec:	e2fb      	b.n	80052e6 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	0010      	movs	r0, r2
 8004cf6:	4798      	blx	r3
      }
      return;
 8004cf8:	e2f5      	b.n	80052e6 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004cfa:	2398      	movs	r3, #152	@ 0x98
 8004cfc:	18fb      	adds	r3, r7, r3
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d100      	bne.n	8004d06 <HAL_UART_IRQHandler+0x86>
 8004d04:	e122      	b.n	8004f4c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004d06:	239c      	movs	r3, #156	@ 0x9c
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a8c      	ldr	r2, [pc, #560]	@ (8004f40 <HAL_UART_IRQHandler+0x2c0>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d106      	bne.n	8004d20 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d12:	23a0      	movs	r3, #160	@ 0xa0
 8004d14:	18fb      	adds	r3, r7, r3
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a8a      	ldr	r2, [pc, #552]	@ (8004f44 <HAL_UART_IRQHandler+0x2c4>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d100      	bne.n	8004d20 <HAL_UART_IRQHandler+0xa0>
 8004d1e:	e115      	b.n	8004f4c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d20:	23a4      	movs	r3, #164	@ 0xa4
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2201      	movs	r2, #1
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d012      	beq.n	8004d52 <HAL_UART_IRQHandler+0xd2>
 8004d2c:	23a0      	movs	r3, #160	@ 0xa0
 8004d2e:	18fb      	adds	r3, r7, r3
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	2380      	movs	r3, #128	@ 0x80
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	4013      	ands	r3, r2
 8004d38:	d00b      	beq.n	8004d52 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2290      	movs	r2, #144	@ 0x90
 8004d46:	589b      	ldr	r3, [r3, r2]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2190      	movs	r1, #144	@ 0x90
 8004d50:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d52:	23a4      	movs	r3, #164	@ 0xa4
 8004d54:	18fb      	adds	r3, r7, r3
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	d011      	beq.n	8004d82 <HAL_UART_IRQHandler+0x102>
 8004d5e:	239c      	movs	r3, #156	@ 0x9c
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2201      	movs	r2, #1
 8004d66:	4013      	ands	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2290      	movs	r2, #144	@ 0x90
 8004d76:	589b      	ldr	r3, [r3, r2]
 8004d78:	2204      	movs	r2, #4
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2190      	movs	r1, #144	@ 0x90
 8004d80:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d82:	23a4      	movs	r3, #164	@ 0xa4
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2204      	movs	r2, #4
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	d011      	beq.n	8004db2 <HAL_UART_IRQHandler+0x132>
 8004d8e:	239c      	movs	r3, #156	@ 0x9c
 8004d90:	18fb      	adds	r3, r7, r3
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2201      	movs	r2, #1
 8004d96:	4013      	ands	r3, r2
 8004d98:	d00b      	beq.n	8004db2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2204      	movs	r2, #4
 8004da0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2290      	movs	r2, #144	@ 0x90
 8004da6:	589b      	ldr	r3, [r3, r2]
 8004da8:	2202      	movs	r2, #2
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2190      	movs	r1, #144	@ 0x90
 8004db0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004db2:	23a4      	movs	r3, #164	@ 0xa4
 8004db4:	18fb      	adds	r3, r7, r3
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2208      	movs	r2, #8
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d017      	beq.n	8004dee <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004dbe:	23a0      	movs	r3, #160	@ 0xa0
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d105      	bne.n	8004dd6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004dca:	239c      	movs	r3, #156	@ 0x9c
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a5b      	ldr	r2, [pc, #364]	@ (8004f40 <HAL_UART_IRQHandler+0x2c0>)
 8004dd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004dd4:	d00b      	beq.n	8004dee <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2208      	movs	r2, #8
 8004ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2290      	movs	r2, #144	@ 0x90
 8004de2:	589b      	ldr	r3, [r3, r2]
 8004de4:	2208      	movs	r2, #8
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2190      	movs	r1, #144	@ 0x90
 8004dec:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004dee:	23a4      	movs	r3, #164	@ 0xa4
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	2380      	movs	r3, #128	@ 0x80
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <HAL_UART_IRQHandler+0x1a4>
 8004dfc:	23a0      	movs	r3, #160	@ 0xa0
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	2380      	movs	r3, #128	@ 0x80
 8004e04:	04db      	lsls	r3, r3, #19
 8004e06:	4013      	ands	r3, r2
 8004e08:	d00c      	beq.n	8004e24 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2280      	movs	r2, #128	@ 0x80
 8004e10:	0112      	lsls	r2, r2, #4
 8004e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2290      	movs	r2, #144	@ 0x90
 8004e18:	589b      	ldr	r3, [r3, r2]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2190      	movs	r1, #144	@ 0x90
 8004e22:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2290      	movs	r2, #144	@ 0x90
 8004e28:	589b      	ldr	r3, [r3, r2]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d100      	bne.n	8004e30 <HAL_UART_IRQHandler+0x1b0>
 8004e2e:	e25c      	b.n	80052ea <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e30:	23a4      	movs	r3, #164	@ 0xa4
 8004e32:	18fb      	adds	r3, r7, r3
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2220      	movs	r2, #32
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d015      	beq.n	8004e68 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e3c:	23a0      	movs	r3, #160	@ 0xa0
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2220      	movs	r2, #32
 8004e44:	4013      	ands	r3, r2
 8004e46:	d106      	bne.n	8004e56 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e48:	239c      	movs	r3, #156	@ 0x9c
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	2380      	movs	r3, #128	@ 0x80
 8004e50:	055b      	lsls	r3, r3, #21
 8004e52:	4013      	ands	r3, r2
 8004e54:	d008      	beq.n	8004e68 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d004      	beq.n	8004e68 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	0010      	movs	r0, r2
 8004e66:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2290      	movs	r2, #144	@ 0x90
 8004e6c:	589b      	ldr	r3, [r3, r2]
 8004e6e:	2194      	movs	r1, #148	@ 0x94
 8004e70:	187a      	adds	r2, r7, r1
 8004e72:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2240      	movs	r2, #64	@ 0x40
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	2b40      	cmp	r3, #64	@ 0x40
 8004e80:	d004      	beq.n	8004e8c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e82:	187b      	adds	r3, r7, r1
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2228      	movs	r2, #40	@ 0x28
 8004e88:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e8a:	d04c      	beq.n	8004f26 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	0018      	movs	r0, r3
 8004e90:	f000 fe8e 	bl	8005bb0 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2240      	movs	r2, #64	@ 0x40
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	2b40      	cmp	r3, #64	@ 0x40
 8004ea0:	d13c      	bne.n	8004f1c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8004ea8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eaa:	2090      	movs	r0, #144	@ 0x90
 8004eac:	183a      	adds	r2, r7, r0
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eb6:	f383 8810 	msr	PRIMASK, r3
}
 8004eba:	46c0      	nop			@ (mov r8, r8)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2140      	movs	r1, #64	@ 0x40
 8004ec8:	438a      	bics	r2, r1
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	183b      	adds	r3, r7, r0
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ed4:	f383 8810 	msr	PRIMASK, r3
}
 8004ed8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2280      	movs	r2, #128	@ 0x80
 8004ede:	589b      	ldr	r3, [r3, r2]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d016      	beq.n	8004f12 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2280      	movs	r2, #128	@ 0x80
 8004ee8:	589b      	ldr	r3, [r3, r2]
 8004eea:	4a17      	ldr	r2, [pc, #92]	@ (8004f48 <HAL_UART_IRQHandler+0x2c8>)
 8004eec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2280      	movs	r2, #128	@ 0x80
 8004ef2:	589b      	ldr	r3, [r3, r2]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f7fd fd09 	bl	800290c <HAL_DMA_Abort_IT>
 8004efa:	1e03      	subs	r3, r0, #0
 8004efc:	d01c      	beq.n	8004f38 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2280      	movs	r2, #128	@ 0x80
 8004f02:	589b      	ldr	r3, [r3, r2]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	2180      	movs	r1, #128	@ 0x80
 8004f0a:	5852      	ldr	r2, [r2, r1]
 8004f0c:	0010      	movs	r0, r2
 8004f0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f10:	e012      	b.n	8004f38 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	0018      	movs	r0, r3
 8004f16:	f000 fa09 	bl	800532c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1a:	e00d      	b.n	8004f38 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f000 fa04 	bl	800532c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	e008      	b.n	8004f38 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f000 f9ff 	bl	800532c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2290      	movs	r2, #144	@ 0x90
 8004f32:	2100      	movs	r1, #0
 8004f34:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004f36:	e1d8      	b.n	80052ea <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f38:	46c0      	nop			@ (mov r8, r8)
    return;
 8004f3a:	e1d6      	b.n	80052ea <HAL_UART_IRQHandler+0x66a>
 8004f3c:	0000080f 	.word	0x0000080f
 8004f40:	10000001 	.word	0x10000001
 8004f44:	04000120 	.word	0x04000120
 8004f48:	08005e75 	.word	0x08005e75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d000      	beq.n	8004f56 <HAL_UART_IRQHandler+0x2d6>
 8004f54:	e15d      	b.n	8005212 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f56:	23a4      	movs	r3, #164	@ 0xa4
 8004f58:	18fb      	adds	r3, r7, r3
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2210      	movs	r2, #16
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d100      	bne.n	8004f64 <HAL_UART_IRQHandler+0x2e4>
 8004f62:	e156      	b.n	8005212 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f64:	23a0      	movs	r3, #160	@ 0xa0
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2210      	movs	r2, #16
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d100      	bne.n	8004f72 <HAL_UART_IRQHandler+0x2f2>
 8004f70:	e14f      	b.n	8005212 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2210      	movs	r2, #16
 8004f78:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2240      	movs	r2, #64	@ 0x40
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b40      	cmp	r3, #64	@ 0x40
 8004f86:	d000      	beq.n	8004f8a <HAL_UART_IRQHandler+0x30a>
 8004f88:	e0c3      	b.n	8005112 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2280      	movs	r2, #128	@ 0x80
 8004f8e:	589b      	ldr	r3, [r3, r2]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	217e      	movs	r1, #126	@ 0x7e
 8004f96:	187b      	adds	r3, r7, r1
 8004f98:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004f9a:	187b      	adds	r3, r7, r1
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d100      	bne.n	8004fa4 <HAL_UART_IRQHandler+0x324>
 8004fa2:	e097      	b.n	80050d4 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	225c      	movs	r2, #92	@ 0x5c
 8004fa8:	5a9b      	ldrh	r3, [r3, r2]
 8004faa:	187a      	adds	r2, r7, r1
 8004fac:	8812      	ldrh	r2, [r2, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d300      	bcc.n	8004fb4 <HAL_UART_IRQHandler+0x334>
 8004fb2:	e08f      	b.n	80050d4 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	187a      	adds	r2, r7, r1
 8004fb8:	215e      	movs	r1, #94	@ 0x5e
 8004fba:	8812      	ldrh	r2, [r2, #0]
 8004fbc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2280      	movs	r2, #128	@ 0x80
 8004fc2:	589b      	ldr	r3, [r3, r2]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	4013      	ands	r3, r2
 8004fcc:	d170      	bne.n	80050b0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004fce:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fd6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fd8:	2301      	movs	r3, #1
 8004fda:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fde:	f383 8810 	msr	PRIMASK, r3
}
 8004fe2:	46c0      	nop			@ (mov r8, r8)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	49c4      	ldr	r1, [pc, #784]	@ (8005300 <HAL_UART_IRQHandler+0x680>)
 8004ff0:	400a      	ands	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffa:	f383 8810 	msr	PRIMASK, r3
}
 8004ffe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005000:	f3ef 8310 	mrs	r3, PRIMASK
 8005004:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005008:	677b      	str	r3, [r7, #116]	@ 0x74
 800500a:	2301      	movs	r3, #1
 800500c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800500e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005010:	f383 8810 	msr	PRIMASK, r3
}
 8005014:	46c0      	nop			@ (mov r8, r8)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2101      	movs	r1, #1
 8005022:	438a      	bics	r2, r1
 8005024:	609a      	str	r2, [r3, #8]
 8005026:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005028:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800502c:	f383 8810 	msr	PRIMASK, r3
}
 8005030:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005032:	f3ef 8310 	mrs	r3, PRIMASK
 8005036:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005038:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800503a:	673b      	str	r3, [r7, #112]	@ 0x70
 800503c:	2301      	movs	r3, #1
 800503e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005042:	f383 8810 	msr	PRIMASK, r3
}
 8005046:	46c0      	nop			@ (mov r8, r8)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2140      	movs	r1, #64	@ 0x40
 8005054:	438a      	bics	r2, r1
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800505a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800505e:	f383 8810 	msr	PRIMASK, r3
}
 8005062:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	228c      	movs	r2, #140	@ 0x8c
 8005068:	2120      	movs	r1, #32
 800506a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005072:	f3ef 8310 	mrs	r3, PRIMASK
 8005076:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800507a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800507c:	2301      	movs	r3, #1
 800507e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005080:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005082:	f383 8810 	msr	PRIMASK, r3
}
 8005086:	46c0      	nop			@ (mov r8, r8)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2110      	movs	r1, #16
 8005094:	438a      	bics	r2, r1
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800509a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800509e:	f383 8810 	msr	PRIMASK, r3
}
 80050a2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2280      	movs	r2, #128	@ 0x80
 80050a8:	589b      	ldr	r3, [r3, r2]
 80050aa:	0018      	movs	r0, r3
 80050ac:	f7fd fbcc 	bl	8002848 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	225c      	movs	r2, #92	@ 0x5c
 80050ba:	5a9a      	ldrh	r2, [r3, r2]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	215e      	movs	r1, #94	@ 0x5e
 80050c0:	5a5b      	ldrh	r3, [r3, r1]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	0011      	movs	r1, r2
 80050cc:	0018      	movs	r0, r3
 80050ce:	f7fb fd8d 	bl	8000bec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80050d2:	e10c      	b.n	80052ee <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	225c      	movs	r2, #92	@ 0x5c
 80050d8:	5a9b      	ldrh	r3, [r3, r2]
 80050da:	227e      	movs	r2, #126	@ 0x7e
 80050dc:	18ba      	adds	r2, r7, r2
 80050de:	8812      	ldrh	r2, [r2, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d000      	beq.n	80050e6 <HAL_UART_IRQHandler+0x466>
 80050e4:	e103      	b.n	80052ee <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2280      	movs	r2, #128	@ 0x80
 80050ea:	589b      	ldr	r3, [r3, r2]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2220      	movs	r2, #32
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d000      	beq.n	80050fa <HAL_UART_IRQHandler+0x47a>
 80050f8:	e0f9      	b.n	80052ee <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	225c      	movs	r2, #92	@ 0x5c
 8005104:	5a9a      	ldrh	r2, [r3, r2]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	0011      	movs	r1, r2
 800510a:	0018      	movs	r0, r3
 800510c:	f7fb fd6e 	bl	8000bec <HAL_UARTEx_RxEventCallback>
      return;
 8005110:	e0ed      	b.n	80052ee <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	225c      	movs	r2, #92	@ 0x5c
 8005116:	5a99      	ldrh	r1, [r3, r2]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	225e      	movs	r2, #94	@ 0x5e
 800511c:	5a9b      	ldrh	r3, [r3, r2]
 800511e:	b29a      	uxth	r2, r3
 8005120:	208e      	movs	r0, #142	@ 0x8e
 8005122:	183b      	adds	r3, r7, r0
 8005124:	1a8a      	subs	r2, r1, r2
 8005126:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	225e      	movs	r2, #94	@ 0x5e
 800512c:	5a9b      	ldrh	r3, [r3, r2]
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d100      	bne.n	8005136 <HAL_UART_IRQHandler+0x4b6>
 8005134:	e0dd      	b.n	80052f2 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8005136:	183b      	adds	r3, r7, r0
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d100      	bne.n	8005140 <HAL_UART_IRQHandler+0x4c0>
 800513e:	e0d8      	b.n	80052f2 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005140:	f3ef 8310 	mrs	r3, PRIMASK
 8005144:	60fb      	str	r3, [r7, #12]
  return(result);
 8005146:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005148:	2488      	movs	r4, #136	@ 0x88
 800514a:	193a      	adds	r2, r7, r4
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	2301      	movs	r3, #1
 8005150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f383 8810 	msr	PRIMASK, r3
}
 8005158:	46c0      	nop			@ (mov r8, r8)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4967      	ldr	r1, [pc, #412]	@ (8005304 <HAL_UART_IRQHandler+0x684>)
 8005166:	400a      	ands	r2, r1
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	193b      	adds	r3, r7, r4
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f383 8810 	msr	PRIMASK, r3
}
 8005176:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005178:	f3ef 8310 	mrs	r3, PRIMASK
 800517c:	61bb      	str	r3, [r7, #24]
  return(result);
 800517e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005180:	2484      	movs	r4, #132	@ 0x84
 8005182:	193a      	adds	r2, r7, r4
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	2301      	movs	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f383 8810 	msr	PRIMASK, r3
}
 8005190:	46c0      	nop			@ (mov r8, r8)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	495a      	ldr	r1, [pc, #360]	@ (8005308 <HAL_UART_IRQHandler+0x688>)
 800519e:	400a      	ands	r2, r1
 80051a0:	609a      	str	r2, [r3, #8]
 80051a2:	193b      	adds	r3, r7, r4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	f383 8810 	msr	PRIMASK, r3
}
 80051ae:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	228c      	movs	r2, #140	@ 0x8c
 80051b4:	2120      	movs	r1, #32
 80051b6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80051c4:	f3ef 8310 	mrs	r3, PRIMASK
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	2480      	movs	r4, #128	@ 0x80
 80051ce:	193a      	adds	r2, r7, r4
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	2301      	movs	r3, #1
 80051d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d8:	f383 8810 	msr	PRIMASK, r3
}
 80051dc:	46c0      	nop			@ (mov r8, r8)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2110      	movs	r1, #16
 80051ea:	438a      	bics	r2, r1
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	193b      	adds	r3, r7, r4
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f6:	f383 8810 	msr	PRIMASK, r3
}
 80051fa:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005202:	183b      	adds	r3, r7, r0
 8005204:	881a      	ldrh	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	0011      	movs	r1, r2
 800520a:	0018      	movs	r0, r3
 800520c:	f7fb fcee 	bl	8000bec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005210:	e06f      	b.n	80052f2 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005212:	23a4      	movs	r3, #164	@ 0xa4
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	2380      	movs	r3, #128	@ 0x80
 800521a:	035b      	lsls	r3, r3, #13
 800521c:	4013      	ands	r3, r2
 800521e:	d010      	beq.n	8005242 <HAL_UART_IRQHandler+0x5c2>
 8005220:	239c      	movs	r3, #156	@ 0x9c
 8005222:	18fb      	adds	r3, r7, r3
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	2380      	movs	r3, #128	@ 0x80
 8005228:	03db      	lsls	r3, r3, #15
 800522a:	4013      	ands	r3, r2
 800522c:	d009      	beq.n	8005242 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2280      	movs	r2, #128	@ 0x80
 8005234:	0352      	lsls	r2, r2, #13
 8005236:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	0018      	movs	r0, r3
 800523c:	f001 f902 	bl	8006444 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005240:	e05a      	b.n	80052f8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005242:	23a4      	movs	r3, #164	@ 0xa4
 8005244:	18fb      	adds	r3, r7, r3
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2280      	movs	r2, #128	@ 0x80
 800524a:	4013      	ands	r3, r2
 800524c:	d016      	beq.n	800527c <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800524e:	23a0      	movs	r3, #160	@ 0xa0
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2280      	movs	r2, #128	@ 0x80
 8005256:	4013      	ands	r3, r2
 8005258:	d106      	bne.n	8005268 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800525a:	239c      	movs	r3, #156	@ 0x9c
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	2380      	movs	r3, #128	@ 0x80
 8005262:	041b      	lsls	r3, r3, #16
 8005264:	4013      	ands	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800526c:	2b00      	cmp	r3, #0
 800526e:	d042      	beq.n	80052f6 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	0010      	movs	r0, r2
 8005278:	4798      	blx	r3
    }
    return;
 800527a:	e03c      	b.n	80052f6 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800527c:	23a4      	movs	r3, #164	@ 0xa4
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2240      	movs	r2, #64	@ 0x40
 8005284:	4013      	ands	r3, r2
 8005286:	d00a      	beq.n	800529e <HAL_UART_IRQHandler+0x61e>
 8005288:	23a0      	movs	r3, #160	@ 0xa0
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2240      	movs	r2, #64	@ 0x40
 8005290:	4013      	ands	r3, r2
 8005292:	d004      	beq.n	800529e <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	0018      	movs	r0, r3
 8005298:	f001 f836 	bl	8006308 <UART_EndTransmit_IT>
    return;
 800529c:	e02c      	b.n	80052f8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800529e:	23a4      	movs	r3, #164	@ 0xa4
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	2380      	movs	r3, #128	@ 0x80
 80052a6:	041b      	lsls	r3, r3, #16
 80052a8:	4013      	ands	r3, r2
 80052aa:	d00b      	beq.n	80052c4 <HAL_UART_IRQHandler+0x644>
 80052ac:	23a0      	movs	r3, #160	@ 0xa0
 80052ae:	18fb      	adds	r3, r7, r3
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	2380      	movs	r3, #128	@ 0x80
 80052b4:	05db      	lsls	r3, r3, #23
 80052b6:	4013      	ands	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	0018      	movs	r0, r3
 80052be:	f001 f8d1 	bl	8006464 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052c2:	e019      	b.n	80052f8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80052c4:	23a4      	movs	r3, #164	@ 0xa4
 80052c6:	18fb      	adds	r3, r7, r3
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	2380      	movs	r3, #128	@ 0x80
 80052cc:	045b      	lsls	r3, r3, #17
 80052ce:	4013      	ands	r3, r2
 80052d0:	d012      	beq.n	80052f8 <HAL_UART_IRQHandler+0x678>
 80052d2:	23a0      	movs	r3, #160	@ 0xa0
 80052d4:	18fb      	adds	r3, r7, r3
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	da0d      	bge.n	80052f8 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	0018      	movs	r0, r3
 80052e0:	f001 f8b8 	bl	8006454 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052e4:	e008      	b.n	80052f8 <HAL_UART_IRQHandler+0x678>
      return;
 80052e6:	46c0      	nop			@ (mov r8, r8)
 80052e8:	e006      	b.n	80052f8 <HAL_UART_IRQHandler+0x678>
    return;
 80052ea:	46c0      	nop			@ (mov r8, r8)
 80052ec:	e004      	b.n	80052f8 <HAL_UART_IRQHandler+0x678>
      return;
 80052ee:	46c0      	nop			@ (mov r8, r8)
 80052f0:	e002      	b.n	80052f8 <HAL_UART_IRQHandler+0x678>
      return;
 80052f2:	46c0      	nop			@ (mov r8, r8)
 80052f4:	e000      	b.n	80052f8 <HAL_UART_IRQHandler+0x678>
    return;
 80052f6:	46c0      	nop			@ (mov r8, r8)
  }
}
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b02a      	add	sp, #168	@ 0xa8
 80052fc:	bdb0      	pop	{r4, r5, r7, pc}
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	fffffeff 	.word	0xfffffeff
 8005304:	fffffedf 	.word	0xfffffedf
 8005308:	effffffe 	.word	0xeffffffe

0800530c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005314:	46c0      	nop			@ (mov r8, r8)
 8005316:	46bd      	mov	sp, r7
 8005318:	b002      	add	sp, #8
 800531a:	bd80      	pop	{r7, pc}

0800531c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005324:	46c0      	nop			@ (mov r8, r8)
 8005326:	46bd      	mov	sp, r7
 8005328:	b002      	add	sp, #8
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005334:	46c0      	nop			@ (mov r8, r8)
 8005336:	46bd      	mov	sp, r7
 8005338:	b002      	add	sp, #8
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005344:	46c0      	nop			@ (mov r8, r8)
 8005346:	46bd      	mov	sp, r7
 8005348:	b002      	add	sp, #8
 800534a:	bd80      	pop	{r7, pc}

0800534c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005354:	231e      	movs	r3, #30
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	2200      	movs	r2, #0
 800535a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	431a      	orrs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4aab      	ldr	r2, [pc, #684]	@ (8005628 <UART_SetConfig+0x2dc>)
 800537c:	4013      	ands	r3, r2
 800537e:	0019      	movs	r1, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	430a      	orrs	r2, r1
 8005388:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4aa6      	ldr	r2, [pc, #664]	@ (800562c <UART_SetConfig+0x2e0>)
 8005392:	4013      	ands	r3, r2
 8005394:	0019      	movs	r1, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4a9d      	ldr	r2, [pc, #628]	@ (8005630 <UART_SetConfig+0x2e4>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	0019      	movs	r1, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	220f      	movs	r2, #15
 80053d0:	4393      	bics	r3, r2
 80053d2:	0019      	movs	r1, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a93      	ldr	r2, [pc, #588]	@ (8005634 <UART_SetConfig+0x2e8>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d127      	bne.n	800543a <UART_SetConfig+0xee>
 80053ea:	4b93      	ldr	r3, [pc, #588]	@ (8005638 <UART_SetConfig+0x2ec>)
 80053ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ee:	2203      	movs	r2, #3
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d017      	beq.n	8005426 <UART_SetConfig+0xda>
 80053f6:	d81b      	bhi.n	8005430 <UART_SetConfig+0xe4>
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d00a      	beq.n	8005412 <UART_SetConfig+0xc6>
 80053fc:	d818      	bhi.n	8005430 <UART_SetConfig+0xe4>
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <UART_SetConfig+0xbc>
 8005402:	2b01      	cmp	r3, #1
 8005404:	d00a      	beq.n	800541c <UART_SetConfig+0xd0>
 8005406:	e013      	b.n	8005430 <UART_SetConfig+0xe4>
 8005408:	231f      	movs	r3, #31
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	e021      	b.n	8005456 <UART_SetConfig+0x10a>
 8005412:	231f      	movs	r3, #31
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	2202      	movs	r2, #2
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	e01c      	b.n	8005456 <UART_SetConfig+0x10a>
 800541c:	231f      	movs	r3, #31
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	2204      	movs	r2, #4
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	e017      	b.n	8005456 <UART_SetConfig+0x10a>
 8005426:	231f      	movs	r3, #31
 8005428:	18fb      	adds	r3, r7, r3
 800542a:	2208      	movs	r2, #8
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e012      	b.n	8005456 <UART_SetConfig+0x10a>
 8005430:	231f      	movs	r3, #31
 8005432:	18fb      	adds	r3, r7, r3
 8005434:	2210      	movs	r2, #16
 8005436:	701a      	strb	r2, [r3, #0]
 8005438:	e00d      	b.n	8005456 <UART_SetConfig+0x10a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a7f      	ldr	r2, [pc, #508]	@ (800563c <UART_SetConfig+0x2f0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d104      	bne.n	800544e <UART_SetConfig+0x102>
 8005444:	231f      	movs	r3, #31
 8005446:	18fb      	adds	r3, r7, r3
 8005448:	2200      	movs	r2, #0
 800544a:	701a      	strb	r2, [r3, #0]
 800544c:	e003      	b.n	8005456 <UART_SetConfig+0x10a>
 800544e:	231f      	movs	r3, #31
 8005450:	18fb      	adds	r3, r7, r3
 8005452:	2210      	movs	r2, #16
 8005454:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69da      	ldr	r2, [r3, #28]
 800545a:	2380      	movs	r3, #128	@ 0x80
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	429a      	cmp	r2, r3
 8005460:	d000      	beq.n	8005464 <UART_SetConfig+0x118>
 8005462:	e06f      	b.n	8005544 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005464:	231f      	movs	r3, #31
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b08      	cmp	r3, #8
 800546c:	d01f      	beq.n	80054ae <UART_SetConfig+0x162>
 800546e:	dc22      	bgt.n	80054b6 <UART_SetConfig+0x16a>
 8005470:	2b04      	cmp	r3, #4
 8005472:	d017      	beq.n	80054a4 <UART_SetConfig+0x158>
 8005474:	dc1f      	bgt.n	80054b6 <UART_SetConfig+0x16a>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <UART_SetConfig+0x134>
 800547a:	2b02      	cmp	r3, #2
 800547c:	d005      	beq.n	800548a <UART_SetConfig+0x13e>
 800547e:	e01a      	b.n	80054b6 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005480:	f7fe fa82 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 8005484:	0003      	movs	r3, r0
 8005486:	61bb      	str	r3, [r7, #24]
        break;
 8005488:	e01c      	b.n	80054c4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800548a:	4b6b      	ldr	r3, [pc, #428]	@ (8005638 <UART_SetConfig+0x2ec>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	2207      	movs	r2, #7
 8005492:	4013      	ands	r3, r2
 8005494:	3301      	adds	r3, #1
 8005496:	0019      	movs	r1, r3
 8005498:	4869      	ldr	r0, [pc, #420]	@ (8005640 <UART_SetConfig+0x2f4>)
 800549a:	f7fa fe35 	bl	8000108 <__udivsi3>
 800549e:	0003      	movs	r3, r0
 80054a0:	61bb      	str	r3, [r7, #24]
        break;
 80054a2:	e00f      	b.n	80054c4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054a4:	f7fe f9fa 	bl	800389c <HAL_RCC_GetSysClockFreq>
 80054a8:	0003      	movs	r3, r0
 80054aa:	61bb      	str	r3, [r7, #24]
        break;
 80054ac:	e00a      	b.n	80054c4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ae:	2380      	movs	r3, #128	@ 0x80
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	61bb      	str	r3, [r7, #24]
        break;
 80054b4:	e006      	b.n	80054c4 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054ba:	231e      	movs	r3, #30
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	2201      	movs	r2, #1
 80054c0:	701a      	strb	r2, [r3, #0]
        break;
 80054c2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d100      	bne.n	80054cc <UART_SetConfig+0x180>
 80054ca:	e097      	b.n	80055fc <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054d0:	4b5c      	ldr	r3, [pc, #368]	@ (8005644 <UART_SetConfig+0x2f8>)
 80054d2:	0052      	lsls	r2, r2, #1
 80054d4:	5ad3      	ldrh	r3, [r2, r3]
 80054d6:	0019      	movs	r1, r3
 80054d8:	69b8      	ldr	r0, [r7, #24]
 80054da:	f7fa fe15 	bl	8000108 <__udivsi3>
 80054de:	0003      	movs	r3, r0
 80054e0:	005a      	lsls	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	085b      	lsrs	r3, r3, #1
 80054e8:	18d2      	adds	r2, r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	0019      	movs	r1, r3
 80054f0:	0010      	movs	r0, r2
 80054f2:	f7fa fe09 	bl	8000108 <__udivsi3>
 80054f6:	0003      	movs	r3, r0
 80054f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b0f      	cmp	r3, #15
 80054fe:	d91c      	bls.n	800553a <UART_SetConfig+0x1ee>
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	2380      	movs	r3, #128	@ 0x80
 8005504:	025b      	lsls	r3, r3, #9
 8005506:	429a      	cmp	r2, r3
 8005508:	d217      	bcs.n	800553a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	b29a      	uxth	r2, r3
 800550e:	200e      	movs	r0, #14
 8005510:	183b      	adds	r3, r7, r0
 8005512:	210f      	movs	r1, #15
 8005514:	438a      	bics	r2, r1
 8005516:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	085b      	lsrs	r3, r3, #1
 800551c:	b29b      	uxth	r3, r3
 800551e:	2207      	movs	r2, #7
 8005520:	4013      	ands	r3, r2
 8005522:	b299      	uxth	r1, r3
 8005524:	183b      	adds	r3, r7, r0
 8005526:	183a      	adds	r2, r7, r0
 8005528:	8812      	ldrh	r2, [r2, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	183a      	adds	r2, r7, r0
 8005534:	8812      	ldrh	r2, [r2, #0]
 8005536:	60da      	str	r2, [r3, #12]
 8005538:	e060      	b.n	80055fc <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800553a:	231e      	movs	r3, #30
 800553c:	18fb      	adds	r3, r7, r3
 800553e:	2201      	movs	r2, #1
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	e05b      	b.n	80055fc <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005544:	231f      	movs	r3, #31
 8005546:	18fb      	adds	r3, r7, r3
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b08      	cmp	r3, #8
 800554c:	d01f      	beq.n	800558e <UART_SetConfig+0x242>
 800554e:	dc22      	bgt.n	8005596 <UART_SetConfig+0x24a>
 8005550:	2b04      	cmp	r3, #4
 8005552:	d017      	beq.n	8005584 <UART_SetConfig+0x238>
 8005554:	dc1f      	bgt.n	8005596 <UART_SetConfig+0x24a>
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <UART_SetConfig+0x214>
 800555a:	2b02      	cmp	r3, #2
 800555c:	d005      	beq.n	800556a <UART_SetConfig+0x21e>
 800555e:	e01a      	b.n	8005596 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005560:	f7fe fa12 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 8005564:	0003      	movs	r3, r0
 8005566:	61bb      	str	r3, [r7, #24]
        break;
 8005568:	e01c      	b.n	80055a4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800556a:	4b33      	ldr	r3, [pc, #204]	@ (8005638 <UART_SetConfig+0x2ec>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	2207      	movs	r2, #7
 8005572:	4013      	ands	r3, r2
 8005574:	3301      	adds	r3, #1
 8005576:	0019      	movs	r1, r3
 8005578:	4831      	ldr	r0, [pc, #196]	@ (8005640 <UART_SetConfig+0x2f4>)
 800557a:	f7fa fdc5 	bl	8000108 <__udivsi3>
 800557e:	0003      	movs	r3, r0
 8005580:	61bb      	str	r3, [r7, #24]
        break;
 8005582:	e00f      	b.n	80055a4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005584:	f7fe f98a 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8005588:	0003      	movs	r3, r0
 800558a:	61bb      	str	r3, [r7, #24]
        break;
 800558c:	e00a      	b.n	80055a4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558e:	2380      	movs	r3, #128	@ 0x80
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	61bb      	str	r3, [r7, #24]
        break;
 8005594:	e006      	b.n	80055a4 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800559a:	231e      	movs	r3, #30
 800559c:	18fb      	adds	r3, r7, r3
 800559e:	2201      	movs	r2, #1
 80055a0:	701a      	strb	r2, [r3, #0]
        break;
 80055a2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d028      	beq.n	80055fc <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055ae:	4b25      	ldr	r3, [pc, #148]	@ (8005644 <UART_SetConfig+0x2f8>)
 80055b0:	0052      	lsls	r2, r2, #1
 80055b2:	5ad3      	ldrh	r3, [r2, r3]
 80055b4:	0019      	movs	r1, r3
 80055b6:	69b8      	ldr	r0, [r7, #24]
 80055b8:	f7fa fda6 	bl	8000108 <__udivsi3>
 80055bc:	0003      	movs	r3, r0
 80055be:	001a      	movs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	085b      	lsrs	r3, r3, #1
 80055c6:	18d2      	adds	r2, r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	0019      	movs	r1, r3
 80055ce:	0010      	movs	r0, r2
 80055d0:	f7fa fd9a 	bl	8000108 <__udivsi3>
 80055d4:	0003      	movs	r3, r0
 80055d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2b0f      	cmp	r3, #15
 80055dc:	d90a      	bls.n	80055f4 <UART_SetConfig+0x2a8>
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	2380      	movs	r3, #128	@ 0x80
 80055e2:	025b      	lsls	r3, r3, #9
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d205      	bcs.n	80055f4 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	60da      	str	r2, [r3, #12]
 80055f2:	e003      	b.n	80055fc <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80055f4:	231e      	movs	r3, #30
 80055f6:	18fb      	adds	r3, r7, r3
 80055f8:	2201      	movs	r2, #1
 80055fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	226a      	movs	r2, #106	@ 0x6a
 8005600:	2101      	movs	r1, #1
 8005602:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2268      	movs	r2, #104	@ 0x68
 8005608:	2101      	movs	r1, #1
 800560a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005618:	231e      	movs	r3, #30
 800561a:	18fb      	adds	r3, r7, r3
 800561c:	781b      	ldrb	r3, [r3, #0]
}
 800561e:	0018      	movs	r0, r3
 8005620:	46bd      	mov	sp, r7
 8005622:	b008      	add	sp, #32
 8005624:	bd80      	pop	{r7, pc}
 8005626:	46c0      	nop			@ (mov r8, r8)
 8005628:	cfff69f3 	.word	0xcfff69f3
 800562c:	ffffcfff 	.word	0xffffcfff
 8005630:	11fff4ff 	.word	0x11fff4ff
 8005634:	40013800 	.word	0x40013800
 8005638:	40021000 	.word	0x40021000
 800563c:	40004400 	.word	0x40004400
 8005640:	02dc6c00 	.word	0x02dc6c00
 8005644:	08006ab0 	.word	0x08006ab0

08005648 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005654:	2208      	movs	r2, #8
 8005656:	4013      	ands	r3, r2
 8005658:	d00b      	beq.n	8005672 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	4a4a      	ldr	r2, [pc, #296]	@ (800578c <UART_AdvFeatureConfig+0x144>)
 8005662:	4013      	ands	r3, r2
 8005664:	0019      	movs	r1, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005676:	2201      	movs	r2, #1
 8005678:	4013      	ands	r3, r2
 800567a:	d00b      	beq.n	8005694 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	4a43      	ldr	r2, [pc, #268]	@ (8005790 <UART_AdvFeatureConfig+0x148>)
 8005684:	4013      	ands	r3, r2
 8005686:	0019      	movs	r1, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005698:	2202      	movs	r2, #2
 800569a:	4013      	ands	r3, r2
 800569c:	d00b      	beq.n	80056b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4a3b      	ldr	r2, [pc, #236]	@ (8005794 <UART_AdvFeatureConfig+0x14c>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	0019      	movs	r1, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ba:	2204      	movs	r2, #4
 80056bc:	4013      	ands	r3, r2
 80056be:	d00b      	beq.n	80056d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4a34      	ldr	r2, [pc, #208]	@ (8005798 <UART_AdvFeatureConfig+0x150>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	0019      	movs	r1, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056dc:	2210      	movs	r2, #16
 80056de:	4013      	ands	r3, r2
 80056e0:	d00b      	beq.n	80056fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	4a2c      	ldr	r2, [pc, #176]	@ (800579c <UART_AdvFeatureConfig+0x154>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	0019      	movs	r1, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fe:	2220      	movs	r2, #32
 8005700:	4013      	ands	r3, r2
 8005702:	d00b      	beq.n	800571c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	4a25      	ldr	r2, [pc, #148]	@ (80057a0 <UART_AdvFeatureConfig+0x158>)
 800570c:	4013      	ands	r3, r2
 800570e:	0019      	movs	r1, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005720:	2240      	movs	r2, #64	@ 0x40
 8005722:	4013      	ands	r3, r2
 8005724:	d01d      	beq.n	8005762 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	4a1d      	ldr	r2, [pc, #116]	@ (80057a4 <UART_AdvFeatureConfig+0x15c>)
 800572e:	4013      	ands	r3, r2
 8005730:	0019      	movs	r1, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005742:	2380      	movs	r3, #128	@ 0x80
 8005744:	035b      	lsls	r3, r3, #13
 8005746:	429a      	cmp	r2, r3
 8005748:	d10b      	bne.n	8005762 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	4a15      	ldr	r2, [pc, #84]	@ (80057a8 <UART_AdvFeatureConfig+0x160>)
 8005752:	4013      	ands	r3, r2
 8005754:	0019      	movs	r1, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005766:	2280      	movs	r2, #128	@ 0x80
 8005768:	4013      	ands	r3, r2
 800576a:	d00b      	beq.n	8005784 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	4a0e      	ldr	r2, [pc, #56]	@ (80057ac <UART_AdvFeatureConfig+0x164>)
 8005774:	4013      	ands	r3, r2
 8005776:	0019      	movs	r1, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	605a      	str	r2, [r3, #4]
  }
}
 8005784:	46c0      	nop			@ (mov r8, r8)
 8005786:	46bd      	mov	sp, r7
 8005788:	b002      	add	sp, #8
 800578a:	bd80      	pop	{r7, pc}
 800578c:	ffff7fff 	.word	0xffff7fff
 8005790:	fffdffff 	.word	0xfffdffff
 8005794:	fffeffff 	.word	0xfffeffff
 8005798:	fffbffff 	.word	0xfffbffff
 800579c:	ffffefff 	.word	0xffffefff
 80057a0:	ffffdfff 	.word	0xffffdfff
 80057a4:	ffefffff 	.word	0xffefffff
 80057a8:	ff9fffff 	.word	0xff9fffff
 80057ac:	fff7ffff 	.word	0xfff7ffff

080057b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b092      	sub	sp, #72	@ 0x48
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2290      	movs	r2, #144	@ 0x90
 80057bc:	2100      	movs	r1, #0
 80057be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057c0:	f7fc f9ce 	bl	8001b60 <HAL_GetTick>
 80057c4:	0003      	movs	r3, r0
 80057c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2208      	movs	r2, #8
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d12d      	bne.n	8005832 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d8:	2280      	movs	r2, #128	@ 0x80
 80057da:	0391      	lsls	r1, r2, #14
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	4a47      	ldr	r2, [pc, #284]	@ (80058fc <UART_CheckIdleState+0x14c>)
 80057e0:	9200      	str	r2, [sp, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f000 f88e 	bl	8005904 <UART_WaitOnFlagUntilTimeout>
 80057e8:	1e03      	subs	r3, r0, #0
 80057ea:	d022      	beq.n	8005832 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057ec:	f3ef 8310 	mrs	r3, PRIMASK
 80057f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80057f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057f6:	2301      	movs	r3, #1
 80057f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fc:	f383 8810 	msr	PRIMASK, r3
}
 8005800:	46c0      	nop			@ (mov r8, r8)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2180      	movs	r1, #128	@ 0x80
 800580e:	438a      	bics	r2, r1
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005818:	f383 8810 	msr	PRIMASK, r3
}
 800581c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2288      	movs	r2, #136	@ 0x88
 8005822:	2120      	movs	r1, #32
 8005824:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2284      	movs	r2, #132	@ 0x84
 800582a:	2100      	movs	r1, #0
 800582c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e060      	b.n	80058f4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2204      	movs	r2, #4
 800583a:	4013      	ands	r3, r2
 800583c:	2b04      	cmp	r3, #4
 800583e:	d146      	bne.n	80058ce <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005842:	2280      	movs	r2, #128	@ 0x80
 8005844:	03d1      	lsls	r1, r2, #15
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	4a2c      	ldr	r2, [pc, #176]	@ (80058fc <UART_CheckIdleState+0x14c>)
 800584a:	9200      	str	r2, [sp, #0]
 800584c:	2200      	movs	r2, #0
 800584e:	f000 f859 	bl	8005904 <UART_WaitOnFlagUntilTimeout>
 8005852:	1e03      	subs	r3, r0, #0
 8005854:	d03b      	beq.n	80058ce <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005856:	f3ef 8310 	mrs	r3, PRIMASK
 800585a:	60fb      	str	r3, [r7, #12]
  return(result);
 800585c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800585e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005860:	2301      	movs	r3, #1
 8005862:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	f383 8810 	msr	PRIMASK, r3
}
 800586a:	46c0      	nop			@ (mov r8, r8)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4922      	ldr	r1, [pc, #136]	@ (8005900 <UART_CheckIdleState+0x150>)
 8005878:	400a      	ands	r2, r1
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800587e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f383 8810 	msr	PRIMASK, r3
}
 8005886:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005888:	f3ef 8310 	mrs	r3, PRIMASK
 800588c:	61bb      	str	r3, [r7, #24]
  return(result);
 800588e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005890:	633b      	str	r3, [r7, #48]	@ 0x30
 8005892:	2301      	movs	r3, #1
 8005894:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	f383 8810 	msr	PRIMASK, r3
}
 800589c:	46c0      	nop			@ (mov r8, r8)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2101      	movs	r1, #1
 80058aa:	438a      	bics	r2, r1
 80058ac:	609a      	str	r2, [r3, #8]
 80058ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	f383 8810 	msr	PRIMASK, r3
}
 80058b8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	228c      	movs	r2, #140	@ 0x8c
 80058be:	2120      	movs	r1, #32
 80058c0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2284      	movs	r2, #132	@ 0x84
 80058c6:	2100      	movs	r1, #0
 80058c8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e012      	b.n	80058f4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2288      	movs	r2, #136	@ 0x88
 80058d2:	2120      	movs	r1, #32
 80058d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	228c      	movs	r2, #140	@ 0x8c
 80058da:	2120      	movs	r1, #32
 80058dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2284      	movs	r2, #132	@ 0x84
 80058ee:	2100      	movs	r1, #0
 80058f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	0018      	movs	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b010      	add	sp, #64	@ 0x40
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	01ffffff 	.word	0x01ffffff
 8005900:	fffffedf 	.word	0xfffffedf

08005904 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	1dfb      	adds	r3, r7, #7
 8005912:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005914:	e051      	b.n	80059ba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	3301      	adds	r3, #1
 800591a:	d04e      	beq.n	80059ba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591c:	f7fc f920 	bl	8001b60 <HAL_GetTick>
 8005920:	0002      	movs	r2, r0
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	429a      	cmp	r2, r3
 800592a:	d302      	bcc.n	8005932 <UART_WaitOnFlagUntilTimeout+0x2e>
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e051      	b.n	80059da <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2204      	movs	r2, #4
 800593e:	4013      	ands	r3, r2
 8005940:	d03b      	beq.n	80059ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2b80      	cmp	r3, #128	@ 0x80
 8005946:	d038      	beq.n	80059ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b40      	cmp	r3, #64	@ 0x40
 800594c:	d035      	beq.n	80059ba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	2208      	movs	r2, #8
 8005956:	4013      	ands	r3, r2
 8005958:	2b08      	cmp	r3, #8
 800595a:	d111      	bne.n	8005980 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2208      	movs	r2, #8
 8005962:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	0018      	movs	r0, r3
 8005968:	f000 f922 	bl	8005bb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2290      	movs	r2, #144	@ 0x90
 8005970:	2108      	movs	r1, #8
 8005972:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2284      	movs	r2, #132	@ 0x84
 8005978:	2100      	movs	r1, #0
 800597a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e02c      	b.n	80059da <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69da      	ldr	r2, [r3, #28]
 8005986:	2380      	movs	r3, #128	@ 0x80
 8005988:	011b      	lsls	r3, r3, #4
 800598a:	401a      	ands	r2, r3
 800598c:	2380      	movs	r3, #128	@ 0x80
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	429a      	cmp	r2, r3
 8005992:	d112      	bne.n	80059ba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2280      	movs	r2, #128	@ 0x80
 800599a:	0112      	lsls	r2, r2, #4
 800599c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f000 f905 	bl	8005bb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2290      	movs	r2, #144	@ 0x90
 80059aa:	2120      	movs	r1, #32
 80059ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2284      	movs	r2, #132	@ 0x84
 80059b2:	2100      	movs	r1, #0
 80059b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e00f      	b.n	80059da <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	4013      	ands	r3, r2
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	425a      	negs	r2, r3
 80059ca:	4153      	adcs	r3, r2
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	001a      	movs	r2, r3
 80059d0:	1dfb      	adds	r3, r7, #7
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d09e      	beq.n	8005916 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	0018      	movs	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	b004      	add	sp, #16
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b090      	sub	sp, #64	@ 0x40
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	1dbb      	adds	r3, r7, #6
 80059f0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	1dba      	adds	r2, r7, #6
 80059fc:	215c      	movs	r1, #92	@ 0x5c
 80059fe:	8812      	ldrh	r2, [r2, #0]
 8005a00:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2290      	movs	r2, #144	@ 0x90
 8005a06:	2100      	movs	r1, #0
 8005a08:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	228c      	movs	r2, #140	@ 0x8c
 8005a0e:	2122      	movs	r1, #34	@ 0x22
 8005a10:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2280      	movs	r2, #128	@ 0x80
 8005a16:	589b      	ldr	r3, [r3, r2]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d02d      	beq.n	8005a78 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2280      	movs	r2, #128	@ 0x80
 8005a20:	589b      	ldr	r3, [r3, r2]
 8005a22:	4a40      	ldr	r2, [pc, #256]	@ (8005b24 <UART_Start_Receive_DMA+0x140>)
 8005a24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2280      	movs	r2, #128	@ 0x80
 8005a2a:	589b      	ldr	r3, [r3, r2]
 8005a2c:	4a3e      	ldr	r2, [pc, #248]	@ (8005b28 <UART_Start_Receive_DMA+0x144>)
 8005a2e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2280      	movs	r2, #128	@ 0x80
 8005a34:	589b      	ldr	r3, [r3, r2]
 8005a36:	4a3d      	ldr	r2, [pc, #244]	@ (8005b2c <UART_Start_Receive_DMA+0x148>)
 8005a38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2280      	movs	r2, #128	@ 0x80
 8005a3e:	589b      	ldr	r3, [r3, r2]
 8005a40:	2200      	movs	r2, #0
 8005a42:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2280      	movs	r2, #128	@ 0x80
 8005a48:	5898      	ldr	r0, [r3, r2]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3324      	adds	r3, #36	@ 0x24
 8005a50:	0019      	movs	r1, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a56:	001a      	movs	r2, r3
 8005a58:	1dbb      	adds	r3, r7, #6
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	f7fc fe6c 	bl	8002738 <HAL_DMA_Start_IT>
 8005a60:	1e03      	subs	r3, r0, #0
 8005a62:	d009      	beq.n	8005a78 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2290      	movs	r2, #144	@ 0x90
 8005a68:	2110      	movs	r1, #16
 8005a6a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	228c      	movs	r2, #140	@ 0x8c
 8005a70:	2120      	movs	r1, #32
 8005a72:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e050      	b.n	8005b1a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d019      	beq.n	8005ab4 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a80:	f3ef 8310 	mrs	r3, PRIMASK
 8005a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a90:	f383 8810 	msr	PRIMASK, r3
}
 8005a94:	46c0      	nop			@ (mov r8, r8)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2180      	movs	r1, #128	@ 0x80
 8005aa2:	0049      	lsls	r1, r1, #1
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aae:	f383 8810 	msr	PRIMASK, r3
}
 8005ab2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab8:	613b      	str	r3, [r7, #16]
  return(result);
 8005aba:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005abe:	2301      	movs	r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f383 8810 	msr	PRIMASK, r3
}
 8005ac8:	46c0      	nop			@ (mov r8, r8)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]
 8005ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005adc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	f383 8810 	msr	PRIMASK, r3
}
 8005ae4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aea:	61fb      	str	r3, [r7, #28]
  return(result);
 8005aec:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8005af0:	2301      	movs	r3, #1
 8005af2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	f383 8810 	msr	PRIMASK, r3
}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2140      	movs	r1, #64	@ 0x40
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	609a      	str	r2, [r3, #8]
 8005b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	f383 8810 	msr	PRIMASK, r3
}
 8005b16:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	b010      	add	sp, #64	@ 0x40
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	46c0      	nop			@ (mov r8, r8)
 8005b24:	08005c7d 	.word	0x08005c7d
 8005b28:	08005dad 	.word	0x08005dad
 8005b2c:	08005def 	.word	0x08005def

08005b30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08a      	sub	sp, #40	@ 0x28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b38:	f3ef 8310 	mrs	r3, PRIMASK
 8005b3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b42:	2301      	movs	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f383 8810 	msr	PRIMASK, r3
}
 8005b4c:	46c0      	nop			@ (mov r8, r8)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	21c0      	movs	r1, #192	@ 0xc0
 8005b5a:	438a      	bics	r2, r1
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f383 8810 	msr	PRIMASK, r3
}
 8005b68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6e:	617b      	str	r3, [r7, #20]
  return(result);
 8005b70:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005b72:	623b      	str	r3, [r7, #32]
 8005b74:	2301      	movs	r3, #1
 8005b76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	f383 8810 	msr	PRIMASK, r3
}
 8005b7e:	46c0      	nop			@ (mov r8, r8)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4908      	ldr	r1, [pc, #32]	@ (8005bac <UART_EndTxTransfer+0x7c>)
 8005b8c:	400a      	ands	r2, r1
 8005b8e:	609a      	str	r2, [r3, #8]
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f383 8810 	msr	PRIMASK, r3
}
 8005b9a:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2288      	movs	r2, #136	@ 0x88
 8005ba0:	2120      	movs	r1, #32
 8005ba2:	5099      	str	r1, [r3, r2]
}
 8005ba4:	46c0      	nop			@ (mov r8, r8)
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	b00a      	add	sp, #40	@ 0x28
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	ff7fffff 	.word	0xff7fffff

08005bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08e      	sub	sp, #56	@ 0x38
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8005bbc:	617b      	str	r3, [r7, #20]
  return(result);
 8005bbe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	f383 8810 	msr	PRIMASK, r3
}
 8005bcc:	46c0      	nop			@ (mov r8, r8)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4926      	ldr	r1, [pc, #152]	@ (8005c74 <UART_EndRxTransfer+0xc4>)
 8005bda:	400a      	ands	r2, r1
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	f383 8810 	msr	PRIMASK, r3
}
 8005be8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005bea:	f3ef 8310 	mrs	r3, PRIMASK
 8005bee:	623b      	str	r3, [r7, #32]
  return(result);
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	f383 8810 	msr	PRIMASK, r3
}
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	491b      	ldr	r1, [pc, #108]	@ (8005c78 <UART_EndRxTransfer+0xc8>)
 8005c0c:	400a      	ands	r2, r1
 8005c0e:	609a      	str	r2, [r3, #8]
 8005c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c16:	f383 8810 	msr	PRIMASK, r3
}
 8005c1a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d118      	bne.n	8005c56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c24:	f3ef 8310 	mrs	r3, PRIMASK
 8005c28:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c2e:	2301      	movs	r3, #1
 8005c30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f383 8810 	msr	PRIMASK, r3
}
 8005c38:	46c0      	nop			@ (mov r8, r8)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2110      	movs	r1, #16
 8005c46:	438a      	bics	r2, r1
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f383 8810 	msr	PRIMASK, r3
}
 8005c54:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	228c      	movs	r2, #140	@ 0x8c
 8005c5a:	2120      	movs	r1, #32
 8005c5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005c6a:	46c0      	nop			@ (mov r8, r8)
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	b00e      	add	sp, #56	@ 0x38
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	46c0      	nop			@ (mov r8, r8)
 8005c74:	fffffedf 	.word	0xfffffedf
 8005c78:	effffffe 	.word	0xeffffffe

08005c7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b094      	sub	sp, #80	@ 0x50
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c88:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2220      	movs	r2, #32
 8005c92:	4013      	ands	r3, r2
 8005c94:	d16f      	bne.n	8005d76 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005c96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c98:	225e      	movs	r2, #94	@ 0x5e
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca2:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ca4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ca8:	2301      	movs	r3, #1
 8005caa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f383 8810 	msr	PRIMASK, r3
}
 8005cb2:	46c0      	nop			@ (mov r8, r8)
 8005cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	493a      	ldr	r1, [pc, #232]	@ (8005da8 <UART_DMAReceiveCplt+0x12c>)
 8005cc0:	400a      	ands	r2, r1
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	f383 8810 	msr	PRIMASK, r3
}
 8005cce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cda:	2301      	movs	r3, #1
 8005cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce0:	f383 8810 	msr	PRIMASK, r3
}
 8005ce4:	46c0      	nop			@ (mov r8, r8)
 8005ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	438a      	bics	r2, r1
 8005cf4:	609a      	str	r2, [r3, #8]
 8005cf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cfc:	f383 8810 	msr	PRIMASK, r3
}
 8005d00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d02:	f3ef 8310 	mrs	r3, PRIMASK
 8005d06:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d12:	f383 8810 	msr	PRIMASK, r3
}
 8005d16:	46c0      	nop			@ (mov r8, r8)
 8005d18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689a      	ldr	r2, [r3, #8]
 8005d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2140      	movs	r1, #64	@ 0x40
 8005d24:	438a      	bics	r2, r1
 8005d26:	609a      	str	r2, [r3, #8]
 8005d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2e:	f383 8810 	msr	PRIMASK, r3
}
 8005d32:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d36:	228c      	movs	r2, #140	@ 0x8c
 8005d38:	2120      	movs	r1, #32
 8005d3a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d118      	bne.n	8005d76 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d44:	f3ef 8310 	mrs	r3, PRIMASK
 8005d48:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d4e:	2301      	movs	r3, #1
 8005d50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f383 8810 	msr	PRIMASK, r3
}
 8005d58:	46c0      	nop			@ (mov r8, r8)
 8005d5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2110      	movs	r1, #16
 8005d66:	438a      	bics	r2, r1
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f383 8810 	msr	PRIMASK, r3
}
 8005d74:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d78:	2200      	movs	r2, #0
 8005d7a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d108      	bne.n	8005d96 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d86:	225c      	movs	r2, #92	@ 0x5c
 8005d88:	5a9a      	ldrh	r2, [r3, r2]
 8005d8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d8c:	0011      	movs	r1, r2
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f7fa ff2c 	bl	8000bec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d94:	e003      	b.n	8005d9e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8005d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d98:	0018      	movs	r0, r3
 8005d9a:	f7ff fab7 	bl	800530c <HAL_UART_RxCpltCallback>
}
 8005d9e:	46c0      	nop			@ (mov r8, r8)
 8005da0:	46bd      	mov	sp, r7
 8005da2:	b014      	add	sp, #80	@ 0x50
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	46c0      	nop			@ (mov r8, r8)
 8005da8:	fffffeff 	.word	0xfffffeff

08005dac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d10a      	bne.n	8005dde <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	225c      	movs	r2, #92	@ 0x5c
 8005dcc:	5a9b      	ldrh	r3, [r3, r2]
 8005dce:	085b      	lsrs	r3, r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	0011      	movs	r1, r2
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f7fa ff08 	bl	8000bec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ddc:	e003      	b.n	8005de6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	0018      	movs	r0, r3
 8005de2:	f7ff fa9b 	bl	800531c <HAL_UART_RxHalfCpltCallback>
}
 8005de6:	46c0      	nop			@ (mov r8, r8)
 8005de8:	46bd      	mov	sp, r7
 8005dea:	b004      	add	sp, #16
 8005dec:	bd80      	pop	{r7, pc}

08005dee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b086      	sub	sp, #24
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dfa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	2288      	movs	r2, #136	@ 0x88
 8005e00:	589b      	ldr	r3, [r3, r2]
 8005e02:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	228c      	movs	r2, #140	@ 0x8c
 8005e08:	589b      	ldr	r3, [r3, r2]
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2280      	movs	r2, #128	@ 0x80
 8005e14:	4013      	ands	r3, r2
 8005e16:	2b80      	cmp	r3, #128	@ 0x80
 8005e18:	d10a      	bne.n	8005e30 <UART_DMAError+0x42>
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b21      	cmp	r3, #33	@ 0x21
 8005e1e:	d107      	bne.n	8005e30 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2256      	movs	r2, #86	@ 0x56
 8005e24:	2100      	movs	r1, #0
 8005e26:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f7ff fe80 	bl	8005b30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	2240      	movs	r2, #64	@ 0x40
 8005e38:	4013      	ands	r3, r2
 8005e3a:	2b40      	cmp	r3, #64	@ 0x40
 8005e3c:	d10a      	bne.n	8005e54 <UART_DMAError+0x66>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b22      	cmp	r3, #34	@ 0x22
 8005e42:	d107      	bne.n	8005e54 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	225e      	movs	r2, #94	@ 0x5e
 8005e48:	2100      	movs	r1, #0
 8005e4a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f7ff feae 	bl	8005bb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2290      	movs	r2, #144	@ 0x90
 8005e58:	589b      	ldr	r3, [r3, r2]
 8005e5a:	2210      	movs	r2, #16
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2190      	movs	r1, #144	@ 0x90
 8005e62:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	0018      	movs	r0, r3
 8005e68:	f7ff fa60 	bl	800532c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e6c:	46c0      	nop			@ (mov r8, r8)
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	b006      	add	sp, #24
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	225e      	movs	r2, #94	@ 0x5e
 8005e86:	2100      	movs	r1, #0
 8005e88:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2256      	movs	r2, #86	@ 0x56
 8005e8e:	2100      	movs	r1, #0
 8005e90:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	0018      	movs	r0, r3
 8005e96:	f7ff fa49 	bl	800532c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e9a:	46c0      	nop			@ (mov r8, r8)
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	b004      	add	sp, #16
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eae:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2280      	movs	r2, #128	@ 0x80
 8005ebc:	589b      	ldr	r3, [r3, r2]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2280      	movs	r2, #128	@ 0x80
 8005ec6:	589b      	ldr	r3, [r3, r2]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d12d      	bne.n	8005f2a <UART_DMATxAbortCallback+0x88>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2256      	movs	r2, #86	@ 0x56
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	225e      	movs	r2, #94	@ 0x5e
 8005eda:	2100      	movs	r1, #0
 8005edc:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2290      	movs	r2, #144	@ 0x90
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	220f      	movs	r2, #15
 8005eec:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005ef2:	2380      	movs	r3, #128	@ 0x80
 8005ef4:	059b      	lsls	r3, r3, #22
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d107      	bne.n	8005f0a <UART_DMATxAbortCallback+0x68>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699a      	ldr	r2, [r3, #24]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2110      	movs	r1, #16
 8005f06:	430a      	orrs	r2, r1
 8005f08:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2288      	movs	r2, #136	@ 0x88
 8005f0e:	2120      	movs	r1, #32
 8005f10:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	228c      	movs	r2, #140	@ 0x8c
 8005f16:	2120      	movs	r1, #32
 8005f18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	0018      	movs	r0, r3
 8005f24:	f7ff fa0a 	bl	800533c <HAL_UART_AbortCpltCallback>
 8005f28:	e000      	b.n	8005f2c <UART_DMATxAbortCallback+0x8a>
      return;
 8005f2a:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b004      	add	sp, #16
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3e:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2280      	movs	r2, #128	@ 0x80
 8005f44:	589b      	ldr	r3, [r3, r2]
 8005f46:	2200      	movs	r2, #0
 8005f48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d004      	beq.n	8005f5c <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d127      	bne.n	8005fac <UART_DMARxAbortCallback+0x7a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2256      	movs	r2, #86	@ 0x56
 8005f60:	2100      	movs	r1, #0
 8005f62:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	225e      	movs	r2, #94	@ 0x5e
 8005f68:	2100      	movs	r1, #0
 8005f6a:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2290      	movs	r2, #144	@ 0x90
 8005f70:	2100      	movs	r1, #0
 8005f72:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	220f      	movs	r2, #15
 8005f7a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2108      	movs	r1, #8
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2288      	movs	r2, #136	@ 0x88
 8005f90:	2120      	movs	r1, #32
 8005f92:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	228c      	movs	r2, #140	@ 0x8c
 8005f98:	2120      	movs	r1, #32
 8005f9a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f7ff f9c9 	bl	800533c <HAL_UART_AbortCpltCallback>
 8005faa:	e000      	b.n	8005fae <UART_DMARxAbortCallback+0x7c>
      return;
 8005fac:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b004      	add	sp, #16
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b08a      	sub	sp, #40	@ 0x28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2288      	movs	r2, #136	@ 0x88
 8005fc0:	589b      	ldr	r3, [r3, r2]
 8005fc2:	2b21      	cmp	r3, #33	@ 0x21
 8005fc4:	d14c      	bne.n	8006060 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2256      	movs	r2, #86	@ 0x56
 8005fca:	5a9b      	ldrh	r3, [r3, r2]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d132      	bne.n	8006038 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8005fd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fdc:	2301      	movs	r3, #1
 8005fde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f383 8810 	msr	PRIMASK, r3
}
 8005fe6:	46c0      	nop			@ (mov r8, r8)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2180      	movs	r1, #128	@ 0x80
 8005ff4:	438a      	bics	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f383 8810 	msr	PRIMASK, r3
}
 8006002:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006004:	f3ef 8310 	mrs	r3, PRIMASK
 8006008:	617b      	str	r3, [r7, #20]
  return(result);
 800600a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800600c:	623b      	str	r3, [r7, #32]
 800600e:	2301      	movs	r3, #1
 8006010:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	f383 8810 	msr	PRIMASK, r3
}
 8006018:	46c0      	nop			@ (mov r8, r8)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2140      	movs	r1, #64	@ 0x40
 8006026:	430a      	orrs	r2, r1
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	f383 8810 	msr	PRIMASK, r3
}
 8006034:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006036:	e013      	b.n	8006060 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800603c:	781a      	ldrb	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2256      	movs	r2, #86	@ 0x56
 8006052:	5a9b      	ldrh	r3, [r3, r2]
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b299      	uxth	r1, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2256      	movs	r2, #86	@ 0x56
 800605e:	5299      	strh	r1, [r3, r2]
}
 8006060:	46c0      	nop			@ (mov r8, r8)
 8006062:	46bd      	mov	sp, r7
 8006064:	b00a      	add	sp, #40	@ 0x28
 8006066:	bd80      	pop	{r7, pc}

08006068 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08c      	sub	sp, #48	@ 0x30
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2288      	movs	r2, #136	@ 0x88
 8006074:	589b      	ldr	r3, [r3, r2]
 8006076:	2b21      	cmp	r3, #33	@ 0x21
 8006078:	d151      	bne.n	800611e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2256      	movs	r2, #86	@ 0x56
 800607e:	5a9b      	ldrh	r3, [r3, r2]
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d132      	bne.n	80060ec <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006086:	f3ef 8310 	mrs	r3, PRIMASK
 800608a:	60fb      	str	r3, [r7, #12]
  return(result);
 800608c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800608e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006090:	2301      	movs	r3, #1
 8006092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	f383 8810 	msr	PRIMASK, r3
}
 800609a:	46c0      	nop			@ (mov r8, r8)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2180      	movs	r1, #128	@ 0x80
 80060a8:	438a      	bics	r2, r1
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f383 8810 	msr	PRIMASK, r3
}
 80060b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80060b8:	f3ef 8310 	mrs	r3, PRIMASK
 80060bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80060be:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80060c2:	2301      	movs	r3, #1
 80060c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	f383 8810 	msr	PRIMASK, r3
}
 80060cc:	46c0      	nop			@ (mov r8, r8)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2140      	movs	r1, #64	@ 0x40
 80060da:	430a      	orrs	r2, r1
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	f383 8810 	msr	PRIMASK, r3
}
 80060e8:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80060ea:	e018      	b.n	800611e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80060f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	001a      	movs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	05d2      	lsls	r2, r2, #23
 80060fe:	0dd2      	lsrs	r2, r2, #23
 8006100:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006106:	1c9a      	adds	r2, r3, #2
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2256      	movs	r2, #86	@ 0x56
 8006110:	5a9b      	ldrh	r3, [r3, r2]
 8006112:	b29b      	uxth	r3, r3
 8006114:	3b01      	subs	r3, #1
 8006116:	b299      	uxth	r1, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2256      	movs	r2, #86	@ 0x56
 800611c:	5299      	strh	r1, [r3, r2]
}
 800611e:	46c0      	nop			@ (mov r8, r8)
 8006120:	46bd      	mov	sp, r7
 8006122:	b00c      	add	sp, #48	@ 0x30
 8006124:	bd80      	pop	{r7, pc}
	...

08006128 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08c      	sub	sp, #48	@ 0x30
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2288      	movs	r2, #136	@ 0x88
 8006134:	589b      	ldr	r3, [r3, r2]
 8006136:	2b21      	cmp	r3, #33	@ 0x21
 8006138:	d165      	bne.n	8006206 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800613a:	232e      	movs	r3, #46	@ 0x2e
 800613c:	18fb      	adds	r3, r7, r3
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	216a      	movs	r1, #106	@ 0x6a
 8006142:	5a52      	ldrh	r2, [r2, r1]
 8006144:	801a      	strh	r2, [r3, #0]
 8006146:	e059      	b.n	80061fc <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2256      	movs	r2, #86	@ 0x56
 800614c:	5a9b      	ldrh	r3, [r3, r2]
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d133      	bne.n	80061bc <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006154:	f3ef 8310 	mrs	r3, PRIMASK
 8006158:	60fb      	str	r3, [r7, #12]
  return(result);
 800615a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800615c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800615e:	2301      	movs	r3, #1
 8006160:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f383 8810 	msr	PRIMASK, r3
}
 8006168:	46c0      	nop			@ (mov r8, r8)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4926      	ldr	r1, [pc, #152]	@ (8006210 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8006176:	400a      	ands	r2, r1
 8006178:	609a      	str	r2, [r3, #8]
 800617a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f383 8810 	msr	PRIMASK, r3
}
 8006184:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006186:	f3ef 8310 	mrs	r3, PRIMASK
 800618a:	61bb      	str	r3, [r7, #24]
  return(result);
 800618c:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800618e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006190:	2301      	movs	r3, #1
 8006192:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f383 8810 	msr	PRIMASK, r3
}
 800619a:	46c0      	nop			@ (mov r8, r8)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2140      	movs	r1, #64	@ 0x40
 80061a8:	430a      	orrs	r2, r1
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	f383 8810 	msr	PRIMASK, r3
}
 80061b6:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80061b8:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80061ba:	e024      	b.n	8006206 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	2280      	movs	r2, #128	@ 0x80
 80061c4:	4013      	ands	r3, r2
 80061c6:	d013      	beq.n	80061f0 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061cc:	781a      	ldrb	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2256      	movs	r2, #86	@ 0x56
 80061e2:	5a9b      	ldrh	r3, [r3, r2]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b299      	uxth	r1, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2256      	movs	r2, #86	@ 0x56
 80061ee:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80061f0:	212e      	movs	r1, #46	@ 0x2e
 80061f2:	187b      	adds	r3, r7, r1
 80061f4:	881a      	ldrh	r2, [r3, #0]
 80061f6:	187b      	adds	r3, r7, r1
 80061f8:	3a01      	subs	r2, #1
 80061fa:	801a      	strh	r2, [r3, #0]
 80061fc:	232e      	movs	r3, #46	@ 0x2e
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1a0      	bne.n	8006148 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8006206:	46c0      	nop			@ (mov r8, r8)
 8006208:	46bd      	mov	sp, r7
 800620a:	b00c      	add	sp, #48	@ 0x30
 800620c:	bd80      	pop	{r7, pc}
 800620e:	46c0      	nop			@ (mov r8, r8)
 8006210:	ff7fffff 	.word	0xff7fffff

08006214 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08c      	sub	sp, #48	@ 0x30
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2288      	movs	r2, #136	@ 0x88
 8006220:	589b      	ldr	r3, [r3, r2]
 8006222:	2b21      	cmp	r3, #33	@ 0x21
 8006224:	d16a      	bne.n	80062fc <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006226:	232e      	movs	r3, #46	@ 0x2e
 8006228:	18fb      	adds	r3, r7, r3
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	216a      	movs	r1, #106	@ 0x6a
 800622e:	5a52      	ldrh	r2, [r2, r1]
 8006230:	801a      	strh	r2, [r3, #0]
 8006232:	e05e      	b.n	80062f2 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2256      	movs	r2, #86	@ 0x56
 8006238:	5a9b      	ldrh	r3, [r3, r2]
 800623a:	b29b      	uxth	r3, r3
 800623c:	2b00      	cmp	r3, #0
 800623e:	d133      	bne.n	80062a8 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006240:	f3ef 8310 	mrs	r3, PRIMASK
 8006244:	60bb      	str	r3, [r7, #8]
  return(result);
 8006246:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006248:	627b      	str	r3, [r7, #36]	@ 0x24
 800624a:	2301      	movs	r3, #1
 800624c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f383 8810 	msr	PRIMASK, r3
}
 8006254:	46c0      	nop			@ (mov r8, r8)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4928      	ldr	r1, [pc, #160]	@ (8006304 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8006262:	400a      	ands	r2, r1
 8006264:	609a      	str	r2, [r3, #8]
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f383 8810 	msr	PRIMASK, r3
}
 8006270:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006272:	f3ef 8310 	mrs	r3, PRIMASK
 8006276:	617b      	str	r3, [r7, #20]
  return(result);
 8006278:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800627a:	623b      	str	r3, [r7, #32]
 800627c:	2301      	movs	r3, #1
 800627e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f383 8810 	msr	PRIMASK, r3
}
 8006286:	46c0      	nop			@ (mov r8, r8)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2140      	movs	r1, #64	@ 0x40
 8006294:	430a      	orrs	r2, r1
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	f383 8810 	msr	PRIMASK, r3
}
 80062a2:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80062a4:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80062a6:	e029      	b.n	80062fc <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	2280      	movs	r2, #128	@ 0x80
 80062b0:	4013      	ands	r3, r2
 80062b2:	d018      	beq.n	80062e6 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b8:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80062ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	001a      	movs	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	05d2      	lsls	r2, r2, #23
 80062c6:	0dd2      	lsrs	r2, r2, #23
 80062c8:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ce:	1c9a      	adds	r2, r3, #2
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2256      	movs	r2, #86	@ 0x56
 80062d8:	5a9b      	ldrh	r3, [r3, r2]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	3b01      	subs	r3, #1
 80062de:	b299      	uxth	r1, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2256      	movs	r2, #86	@ 0x56
 80062e4:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80062e6:	212e      	movs	r1, #46	@ 0x2e
 80062e8:	187b      	adds	r3, r7, r1
 80062ea:	881a      	ldrh	r2, [r3, #0]
 80062ec:	187b      	adds	r3, r7, r1
 80062ee:	3a01      	subs	r2, #1
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	232e      	movs	r3, #46	@ 0x2e
 80062f4:	18fb      	adds	r3, r7, r3
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d19b      	bne.n	8006234 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80062fc:	46c0      	nop			@ (mov r8, r8)
 80062fe:	46bd      	mov	sp, r7
 8006300:	b00c      	add	sp, #48	@ 0x30
 8006302:	bd80      	pop	{r7, pc}
 8006304:	ff7fffff 	.word	0xff7fffff

08006308 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006310:	f3ef 8310 	mrs	r3, PRIMASK
 8006314:	60bb      	str	r3, [r7, #8]
  return(result);
 8006316:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	2301      	movs	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f383 8810 	msr	PRIMASK, r3
}
 8006324:	46c0      	nop			@ (mov r8, r8)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2140      	movs	r1, #64	@ 0x40
 8006332:	438a      	bics	r2, r1
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f383 8810 	msr	PRIMASK, r3
}
 8006340:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2288      	movs	r2, #136	@ 0x88
 8006346:	2120      	movs	r1, #32
 8006348:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	0018      	movs	r0, r3
 8006354:	f7fa fcf2 	bl	8000d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006358:	46c0      	nop			@ (mov r8, r8)
 800635a:	46bd      	mov	sp, r7
 800635c:	b006      	add	sp, #24
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e05d      	b.n	8006434 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2288      	movs	r2, #136	@ 0x88
 800637c:	589b      	ldr	r3, [r3, r2]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d107      	bne.n	8006392 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2284      	movs	r2, #132	@ 0x84
 8006386:	2100      	movs	r1, #0
 8006388:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	0018      	movs	r0, r3
 800638e:	f7fb fa13 	bl	80017b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2288      	movs	r2, #136	@ 0x88
 8006396:	2124      	movs	r1, #36	@ 0x24
 8006398:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2101      	movs	r1, #1
 80063a6:	438a      	bics	r2, r1
 80063a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	0018      	movs	r0, r3
 80063b6:	f7ff f947 	bl	8005648 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	0018      	movs	r0, r3
 80063be:	f7fe ffc5 	bl	800534c <UART_SetConfig>
 80063c2:	0003      	movs	r3, r0
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e033      	b.n	8006434 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2180      	movs	r1, #128	@ 0x80
 80063d8:	01c9      	lsls	r1, r1, #7
 80063da:	430a      	orrs	r2, r1
 80063dc:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	4a15      	ldr	r2, [pc, #84]	@ (800643c <HAL_RS485Ex_Init+0xdc>)
 80063e6:	4013      	ands	r3, r2
 80063e8:	0019      	movs	r1, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	055b      	lsls	r3, r3, #21
 80063f8:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	041b      	lsls	r3, r3, #16
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a0d      	ldr	r2, [pc, #52]	@ (8006440 <HAL_RS485Ex_Init+0xe0>)
 800640c:	4013      	ands	r3, r2
 800640e:	0019      	movs	r1, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	430a      	orrs	r2, r1
 8006418:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2101      	movs	r1, #1
 8006426:	430a      	orrs	r2, r1
 8006428:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	0018      	movs	r0, r3
 800642e:	f7ff f9bf 	bl	80057b0 <UART_CheckIdleState>
 8006432:	0003      	movs	r3, r0
}
 8006434:	0018      	movs	r0, r3
 8006436:	46bd      	mov	sp, r7
 8006438:	b006      	add	sp, #24
 800643a:	bd80      	pop	{r7, pc}
 800643c:	ffff7fff 	.word	0xffff7fff
 8006440:	fc00ffff 	.word	0xfc00ffff

08006444 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800644c:	46c0      	nop			@ (mov r8, r8)
 800644e:	46bd      	mov	sp, r7
 8006450:	b002      	add	sp, #8
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800645c:	46c0      	nop			@ (mov r8, r8)
 800645e:	46bd      	mov	sp, r7
 8006460:	b002      	add	sp, #8
 8006462:	bd80      	pop	{r7, pc}

08006464 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800646c:	46c0      	nop			@ (mov r8, r8)
 800646e:	46bd      	mov	sp, r7
 8006470:	b002      	add	sp, #8
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2284      	movs	r2, #132	@ 0x84
 8006480:	5c9b      	ldrb	r3, [r3, r2]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d101      	bne.n	800648a <HAL_UARTEx_DisableFifoMode+0x16>
 8006486:	2302      	movs	r3, #2
 8006488:	e027      	b.n	80064da <HAL_UARTEx_DisableFifoMode+0x66>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2284      	movs	r2, #132	@ 0x84
 800648e:	2101      	movs	r1, #1
 8006490:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2288      	movs	r2, #136	@ 0x88
 8006496:	2124      	movs	r1, #36	@ 0x24
 8006498:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2101      	movs	r1, #1
 80064ae:	438a      	bics	r2, r1
 80064b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4a0b      	ldr	r2, [pc, #44]	@ (80064e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2288      	movs	r2, #136	@ 0x88
 80064cc:	2120      	movs	r1, #32
 80064ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2284      	movs	r2, #132	@ 0x84
 80064d4:	2100      	movs	r1, #0
 80064d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	0018      	movs	r0, r3
 80064dc:	46bd      	mov	sp, r7
 80064de:	b004      	add	sp, #16
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	46c0      	nop			@ (mov r8, r8)
 80064e4:	dfffffff 	.word	0xdfffffff

080064e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2284      	movs	r2, #132	@ 0x84
 80064f6:	5c9b      	ldrb	r3, [r3, r2]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d101      	bne.n	8006500 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064fc:	2302      	movs	r3, #2
 80064fe:	e02e      	b.n	800655e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2284      	movs	r2, #132	@ 0x84
 8006504:	2101      	movs	r1, #1
 8006506:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2288      	movs	r2, #136	@ 0x88
 800650c:	2124      	movs	r1, #36	@ 0x24
 800650e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2101      	movs	r1, #1
 8006524:	438a      	bics	r2, r1
 8006526:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	08d9      	lsrs	r1, r3, #3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	0018      	movs	r0, r3
 8006540:	f000 f8bc 	bl	80066bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2288      	movs	r2, #136	@ 0x88
 8006550:	2120      	movs	r1, #32
 8006552:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2284      	movs	r2, #132	@ 0x84
 8006558:	2100      	movs	r1, #0
 800655a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	0018      	movs	r0, r3
 8006560:	46bd      	mov	sp, r7
 8006562:	b004      	add	sp, #16
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2284      	movs	r2, #132	@ 0x84
 8006576:	5c9b      	ldrb	r3, [r3, r2]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800657c:	2302      	movs	r3, #2
 800657e:	e02f      	b.n	80065e0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2284      	movs	r2, #132	@ 0x84
 8006584:	2101      	movs	r1, #1
 8006586:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2288      	movs	r2, #136	@ 0x88
 800658c:	2124      	movs	r1, #36	@ 0x24
 800658e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2101      	movs	r1, #1
 80065a4:	438a      	bics	r2, r1
 80065a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	4a0e      	ldr	r2, [pc, #56]	@ (80065e8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80065b0:	4013      	ands	r3, r2
 80065b2:	0019      	movs	r1, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	0018      	movs	r0, r3
 80065c2:	f000 f87b 	bl	80066bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2288      	movs	r2, #136	@ 0x88
 80065d2:	2120      	movs	r1, #32
 80065d4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2284      	movs	r2, #132	@ 0x84
 80065da:	2100      	movs	r1, #0
 80065dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	0018      	movs	r0, r3
 80065e2:	46bd      	mov	sp, r7
 80065e4:	b004      	add	sp, #16
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	f1ffffff 	.word	0xf1ffffff

080065ec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065ec:	b5b0      	push	{r4, r5, r7, lr}
 80065ee:	b08a      	sub	sp, #40	@ 0x28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	1dbb      	adds	r3, r7, #6
 80065f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	228c      	movs	r2, #140	@ 0x8c
 80065fe:	589b      	ldr	r3, [r3, r2]
 8006600:	2b20      	cmp	r3, #32
 8006602:	d156      	bne.n	80066b2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800660a:	1dbb      	adds	r3, r7, #6
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e04e      	b.n	80066b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689a      	ldr	r2, [r3, #8]
 800661a:	2380      	movs	r3, #128	@ 0x80
 800661c:	015b      	lsls	r3, r3, #5
 800661e:	429a      	cmp	r2, r3
 8006620:	d109      	bne.n	8006636 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d105      	bne.n	8006636 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2201      	movs	r2, #1
 800662e:	4013      	ands	r3, r2
 8006630:	d001      	beq.n	8006636 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e03e      	b.n	80066b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2201      	movs	r2, #1
 800663a:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006642:	2527      	movs	r5, #39	@ 0x27
 8006644:	197c      	adds	r4, r7, r5
 8006646:	1dbb      	adds	r3, r7, #6
 8006648:	881a      	ldrh	r2, [r3, #0]
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	0018      	movs	r0, r3
 8006650:	f7ff f9c8 	bl	80059e4 <UART_Start_Receive_DMA>
 8006654:	0003      	movs	r3, r0
 8006656:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006658:	197b      	adds	r3, r7, r5
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d124      	bne.n	80066aa <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006664:	2b01      	cmp	r3, #1
 8006666:	d11c      	bne.n	80066a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2210      	movs	r2, #16
 800666e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006670:	f3ef 8310 	mrs	r3, PRIMASK
 8006674:	617b      	str	r3, [r7, #20]
  return(result);
 8006676:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006678:	623b      	str	r3, [r7, #32]
 800667a:	2301      	movs	r3, #1
 800667c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	f383 8810 	msr	PRIMASK, r3
}
 8006684:	46c0      	nop			@ (mov r8, r8)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2110      	movs	r1, #16
 8006692:	430a      	orrs	r2, r1
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	f383 8810 	msr	PRIMASK, r3
}
 80066a0:	e003      	b.n	80066aa <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80066a2:	2327      	movs	r3, #39	@ 0x27
 80066a4:	18fb      	adds	r3, r7, r3
 80066a6:	2201      	movs	r2, #1
 80066a8:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80066aa:	2327      	movs	r3, #39	@ 0x27
 80066ac:	18fb      	adds	r3, r7, r3
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	e000      	b.n	80066b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80066b2:	2302      	movs	r3, #2
  }
}
 80066b4:	0018      	movs	r0, r3
 80066b6:	46bd      	mov	sp, r7
 80066b8:	b00a      	add	sp, #40	@ 0x28
 80066ba:	bdb0      	pop	{r4, r5, r7, pc}

080066bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d108      	bne.n	80066de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	226a      	movs	r2, #106	@ 0x6a
 80066d0:	2101      	movs	r1, #1
 80066d2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2268      	movs	r2, #104	@ 0x68
 80066d8:	2101      	movs	r1, #1
 80066da:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80066dc:	e043      	b.n	8006766 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80066de:	260f      	movs	r6, #15
 80066e0:	19bb      	adds	r3, r7, r6
 80066e2:	2208      	movs	r2, #8
 80066e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80066e6:	200e      	movs	r0, #14
 80066e8:	183b      	adds	r3, r7, r0
 80066ea:	2208      	movs	r2, #8
 80066ec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	0e5b      	lsrs	r3, r3, #25
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	240d      	movs	r4, #13
 80066fa:	193b      	adds	r3, r7, r4
 80066fc:	2107      	movs	r1, #7
 80066fe:	400a      	ands	r2, r1
 8006700:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	0f5b      	lsrs	r3, r3, #29
 800670a:	b2da      	uxtb	r2, r3
 800670c:	250c      	movs	r5, #12
 800670e:	197b      	adds	r3, r7, r5
 8006710:	2107      	movs	r1, #7
 8006712:	400a      	ands	r2, r1
 8006714:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006716:	183b      	adds	r3, r7, r0
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	197a      	adds	r2, r7, r5
 800671c:	7812      	ldrb	r2, [r2, #0]
 800671e:	4914      	ldr	r1, [pc, #80]	@ (8006770 <UARTEx_SetNbDataToProcess+0xb4>)
 8006720:	5c8a      	ldrb	r2, [r1, r2]
 8006722:	435a      	muls	r2, r3
 8006724:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006726:	197b      	adds	r3, r7, r5
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	4a12      	ldr	r2, [pc, #72]	@ (8006774 <UARTEx_SetNbDataToProcess+0xb8>)
 800672c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800672e:	0019      	movs	r1, r3
 8006730:	f7f9 fd74 	bl	800021c <__divsi3>
 8006734:	0003      	movs	r3, r0
 8006736:	b299      	uxth	r1, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	226a      	movs	r2, #106	@ 0x6a
 800673c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800673e:	19bb      	adds	r3, r7, r6
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	193a      	adds	r2, r7, r4
 8006744:	7812      	ldrb	r2, [r2, #0]
 8006746:	490a      	ldr	r1, [pc, #40]	@ (8006770 <UARTEx_SetNbDataToProcess+0xb4>)
 8006748:	5c8a      	ldrb	r2, [r1, r2]
 800674a:	435a      	muls	r2, r3
 800674c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800674e:	193b      	adds	r3, r7, r4
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	4a08      	ldr	r2, [pc, #32]	@ (8006774 <UARTEx_SetNbDataToProcess+0xb8>)
 8006754:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006756:	0019      	movs	r1, r3
 8006758:	f7f9 fd60 	bl	800021c <__divsi3>
 800675c:	0003      	movs	r3, r0
 800675e:	b299      	uxth	r1, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2268      	movs	r2, #104	@ 0x68
 8006764:	5299      	strh	r1, [r3, r2]
}
 8006766:	46c0      	nop			@ (mov r8, r8)
 8006768:	46bd      	mov	sp, r7
 800676a:	b005      	add	sp, #20
 800676c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800676e:	46c0      	nop			@ (mov r8, r8)
 8006770:	08006ac8 	.word	0x08006ac8
 8006774:	08006ad0 	.word	0x08006ad0

08006778 <memset>:
 8006778:	0003      	movs	r3, r0
 800677a:	1882      	adds	r2, r0, r2
 800677c:	4293      	cmp	r3, r2
 800677e:	d100      	bne.n	8006782 <memset+0xa>
 8006780:	4770      	bx	lr
 8006782:	7019      	strb	r1, [r3, #0]
 8006784:	3301      	adds	r3, #1
 8006786:	e7f9      	b.n	800677c <memset+0x4>

08006788 <__libc_init_array>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	2600      	movs	r6, #0
 800678c:	4c0c      	ldr	r4, [pc, #48]	@ (80067c0 <__libc_init_array+0x38>)
 800678e:	4d0d      	ldr	r5, [pc, #52]	@ (80067c4 <__libc_init_array+0x3c>)
 8006790:	1b64      	subs	r4, r4, r5
 8006792:	10a4      	asrs	r4, r4, #2
 8006794:	42a6      	cmp	r6, r4
 8006796:	d109      	bne.n	80067ac <__libc_init_array+0x24>
 8006798:	2600      	movs	r6, #0
 800679a:	f000 f823 	bl	80067e4 <_init>
 800679e:	4c0a      	ldr	r4, [pc, #40]	@ (80067c8 <__libc_init_array+0x40>)
 80067a0:	4d0a      	ldr	r5, [pc, #40]	@ (80067cc <__libc_init_array+0x44>)
 80067a2:	1b64      	subs	r4, r4, r5
 80067a4:	10a4      	asrs	r4, r4, #2
 80067a6:	42a6      	cmp	r6, r4
 80067a8:	d105      	bne.n	80067b6 <__libc_init_array+0x2e>
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	00b3      	lsls	r3, r6, #2
 80067ae:	58eb      	ldr	r3, [r5, r3]
 80067b0:	4798      	blx	r3
 80067b2:	3601      	adds	r6, #1
 80067b4:	e7ee      	b.n	8006794 <__libc_init_array+0xc>
 80067b6:	00b3      	lsls	r3, r6, #2
 80067b8:	58eb      	ldr	r3, [r5, r3]
 80067ba:	4798      	blx	r3
 80067bc:	3601      	adds	r6, #1
 80067be:	e7f2      	b.n	80067a6 <__libc_init_array+0x1e>
 80067c0:	08006ad8 	.word	0x08006ad8
 80067c4:	08006ad8 	.word	0x08006ad8
 80067c8:	08006adc 	.word	0x08006adc
 80067cc:	08006ad8 	.word	0x08006ad8

080067d0 <memcpy>:
 80067d0:	2300      	movs	r3, #0
 80067d2:	b510      	push	{r4, lr}
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d100      	bne.n	80067da <memcpy+0xa>
 80067d8:	bd10      	pop	{r4, pc}
 80067da:	5ccc      	ldrb	r4, [r1, r3]
 80067dc:	54c4      	strb	r4, [r0, r3]
 80067de:	3301      	adds	r3, #1
 80067e0:	e7f8      	b.n	80067d4 <memcpy+0x4>
	...

080067e4 <_init>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	46c0      	nop			@ (mov r8, r8)
 80067e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ea:	bc08      	pop	{r3}
 80067ec:	469e      	mov	lr, r3
 80067ee:	4770      	bx	lr

080067f0 <_fini>:
 80067f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f2:	46c0      	nop			@ (mov r8, r8)
 80067f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f6:	bc08      	pop	{r3}
 80067f8:	469e      	mov	lr, r3
 80067fa:	4770      	bx	lr
